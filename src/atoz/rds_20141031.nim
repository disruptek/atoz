
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Relational Database Service
## version: 2014-10-31
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Relational Database Service</fullname> <p> </p> <p>Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier to set up, operate, and scale a relational database in the cloud. It provides cost-efficient, resizeable capacity for an industry-standard relational database and manages common database administration tasks, freeing up developers to focus on what makes their applications and businesses unique.</p> <p>Amazon RDS gives you access to the capabilities of a MySQL, MariaDB, PostgreSQL, Microsoft SQL Server, Oracle, or Amazon Aurora database server. These capabilities mean that the code, applications, and tools you already use today with your existing databases work with Amazon RDS without modification. Amazon RDS automatically backs up your database and maintains the database software that powers your DB instance. Amazon RDS is flexible: you can scale your DB instance's compute resources and storage capacity to meet your application's demand. As with all Amazon Web Services, there are no up-front investments, and you pay only for the resources you use.</p> <p>This interface reference for Amazon RDS contains documentation for a programming or command line interface you can use to manage Amazon RDS. Note that Amazon RDS is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p> <p> <b>Amazon RDS API Reference</b> </p> <ul> <li> <p>For the alphabetical list of API actions, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Operations.html">API Actions</a>.</p> </li> <li> <p>For the alphabetical list of data types, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Types.html">Data Types</a>.</p> </li> <li> <p>For a list of common query parameters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonParameters.html">Common Parameters</a>.</p> </li> <li> <p>For descriptions of the error codes, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonErrors.html">Common Errors</a>.</p> </li> </ul> <p> <b>Amazon RDS User Guide</b> </p> <ul> <li> <p>For a summary of the Amazon RDS interfaces, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html#Welcome.Interfaces">Available RDS Interfaces</a>.</p> </li> <li> <p>For more information about how to use the Query API, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Using_the_Query_API.html">Using the Query API</a>.</p> </li> </ul>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/rds/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (query: JsonNode = nil; body: JsonNode = nil;
                          header: JsonNode = nil; path: JsonNode = nil;
                          formData: JsonNode = nil): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    url*: proc (protocol: Scheme; host: string; base: string; route: string;
              path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_604389 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_604389](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_604389): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low ..
      Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js ==
      nil:
    if default != nil:
      return validateParameter(default, kind, required = required)
  result = js
  if result ==
      nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind ==
        kind, $kind & " expected; received " &
        $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "rds.ap-northeast-1.amazonaws.com", "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
                           "us-west-2": "rds.us-west-2.amazonaws.com",
                           "eu-west-2": "rds.eu-west-2.amazonaws.com", "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "rds.eu-central-1.amazonaws.com",
                           "us-east-2": "rds.us-east-2.amazonaws.com",
                           "us-east-1": "rds.us-east-1.amazonaws.com", "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "rds.ap-south-1.amazonaws.com",
                           "eu-north-1": "rds.eu-north-1.amazonaws.com", "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
                           "us-west-1": "rds.us-west-1.amazonaws.com",
                           "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "rds.eu-west-3.amazonaws.com",
                           "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "rds.sa-east-1.amazonaws.com",
                           "eu-west-1": "rds.eu-west-1.amazonaws.com",
                           "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com", "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "rds.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
      "us-west-2": "rds.us-west-2.amazonaws.com",
      "eu-west-2": "rds.eu-west-2.amazonaws.com",
      "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
      "eu-central-1": "rds.eu-central-1.amazonaws.com",
      "us-east-2": "rds.us-east-2.amazonaws.com",
      "us-east-1": "rds.us-east-1.amazonaws.com",
      "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "rds.ap-south-1.amazonaws.com",
      "eu-north-1": "rds.eu-north-1.amazonaws.com",
      "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
      "us-west-1": "rds.us-west-1.amazonaws.com",
      "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
      "eu-west-3": "rds.eu-west-3.amazonaws.com",
      "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "rds.sa-east-1.amazonaws.com",
      "eu-west-1": "rds.eu-west-1.amazonaws.com",
      "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
      "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "rds"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.}
type
  Call_PostAddRoleToDBCluster_605000 = ref object of OpenApiRestCall_604389
proc url_PostAddRoleToDBCluster_605002(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddRoleToDBCluster_605001(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605003 = query.getOrDefault("Action")
  valid_605003 = validateParameter(valid_605003, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_605003 != nil:
    section.add "Action", valid_605003
  var valid_605004 = query.getOrDefault("Version")
  valid_605004 = validateParameter(valid_605004, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605004 != nil:
    section.add "Version", valid_605004
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605005 = header.getOrDefault("X-Amz-Signature")
  valid_605005 = validateParameter(valid_605005, JString, required = false,
                                 default = nil)
  if valid_605005 != nil:
    section.add "X-Amz-Signature", valid_605005
  var valid_605006 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605006 = validateParameter(valid_605006, JString, required = false,
                                 default = nil)
  if valid_605006 != nil:
    section.add "X-Amz-Content-Sha256", valid_605006
  var valid_605007 = header.getOrDefault("X-Amz-Date")
  valid_605007 = validateParameter(valid_605007, JString, required = false,
                                 default = nil)
  if valid_605007 != nil:
    section.add "X-Amz-Date", valid_605007
  var valid_605008 = header.getOrDefault("X-Amz-Credential")
  valid_605008 = validateParameter(valid_605008, JString, required = false,
                                 default = nil)
  if valid_605008 != nil:
    section.add "X-Amz-Credential", valid_605008
  var valid_605009 = header.getOrDefault("X-Amz-Security-Token")
  valid_605009 = validateParameter(valid_605009, JString, required = false,
                                 default = nil)
  if valid_605009 != nil:
    section.add "X-Amz-Security-Token", valid_605009
  var valid_605010 = header.getOrDefault("X-Amz-Algorithm")
  valid_605010 = validateParameter(valid_605010, JString, required = false,
                                 default = nil)
  if valid_605010 != nil:
    section.add "X-Amz-Algorithm", valid_605010
  var valid_605011 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605011 = validateParameter(valid_605011, JString, required = false,
                                 default = nil)
  if valid_605011 != nil:
    section.add "X-Amz-SignedHeaders", valid_605011
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  section = newJObject()
  var valid_605012 = formData.getOrDefault("FeatureName")
  valid_605012 = validateParameter(valid_605012, JString, required = false,
                                 default = nil)
  if valid_605012 != nil:
    section.add "FeatureName", valid_605012
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_605013 = formData.getOrDefault("RoleArn")
  valid_605013 = validateParameter(valid_605013, JString, required = true,
                                 default = nil)
  if valid_605013 != nil:
    section.add "RoleArn", valid_605013
  var valid_605014 = formData.getOrDefault("DBClusterIdentifier")
  valid_605014 = validateParameter(valid_605014, JString, required = true,
                                 default = nil)
  if valid_605014 != nil:
    section.add "DBClusterIdentifier", valid_605014
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605015: Call_PostAddRoleToDBCluster_605000; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605015.validator(path, query, header, formData, body)
  let scheme = call_605015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605015.url(scheme.get, call_605015.host, call_605015.base,
                         call_605015.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605015, url, valid)

proc call*(call_605016: Call_PostAddRoleToDBCluster_605000; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "AddRoleToDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBCluster
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  var query_605017 = newJObject()
  var formData_605018 = newJObject()
  add(formData_605018, "FeatureName", newJString(FeatureName))
  add(formData_605018, "RoleArn", newJString(RoleArn))
  add(query_605017, "Action", newJString(Action))
  add(query_605017, "Version", newJString(Version))
  add(formData_605018, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_605016.call(nil, query_605017, nil, formData_605018, nil)

var postAddRoleToDBCluster* = Call_PostAddRoleToDBCluster_605000(
    name: "postAddRoleToDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_PostAddRoleToDBCluster_605001, base: "/",
    url: url_PostAddRoleToDBCluster_605002, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBCluster_604727 = ref object of OpenApiRestCall_604389
proc url_GetAddRoleToDBCluster_604729(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddRoleToDBCluster_604728(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_604841 = query.getOrDefault("RoleArn")
  valid_604841 = validateParameter(valid_604841, JString, required = true,
                                 default = nil)
  if valid_604841 != nil:
    section.add "RoleArn", valid_604841
  var valid_604842 = query.getOrDefault("DBClusterIdentifier")
  valid_604842 = validateParameter(valid_604842, JString, required = true,
                                 default = nil)
  if valid_604842 != nil:
    section.add "DBClusterIdentifier", valid_604842
  var valid_604843 = query.getOrDefault("FeatureName")
  valid_604843 = validateParameter(valid_604843, JString, required = false,
                                 default = nil)
  if valid_604843 != nil:
    section.add "FeatureName", valid_604843
  var valid_604857 = query.getOrDefault("Action")
  valid_604857 = validateParameter(valid_604857, JString, required = true,
                                 default = newJString("AddRoleToDBCluster"))
  if valid_604857 != nil:
    section.add "Action", valid_604857
  var valid_604858 = query.getOrDefault("Version")
  valid_604858 = validateParameter(valid_604858, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_604858 != nil:
    section.add "Version", valid_604858
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_604859 = header.getOrDefault("X-Amz-Signature")
  valid_604859 = validateParameter(valid_604859, JString, required = false,
                                 default = nil)
  if valid_604859 != nil:
    section.add "X-Amz-Signature", valid_604859
  var valid_604860 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_604860 = validateParameter(valid_604860, JString, required = false,
                                 default = nil)
  if valid_604860 != nil:
    section.add "X-Amz-Content-Sha256", valid_604860
  var valid_604861 = header.getOrDefault("X-Amz-Date")
  valid_604861 = validateParameter(valid_604861, JString, required = false,
                                 default = nil)
  if valid_604861 != nil:
    section.add "X-Amz-Date", valid_604861
  var valid_604862 = header.getOrDefault("X-Amz-Credential")
  valid_604862 = validateParameter(valid_604862, JString, required = false,
                                 default = nil)
  if valid_604862 != nil:
    section.add "X-Amz-Credential", valid_604862
  var valid_604863 = header.getOrDefault("X-Amz-Security-Token")
  valid_604863 = validateParameter(valid_604863, JString, required = false,
                                 default = nil)
  if valid_604863 != nil:
    section.add "X-Amz-Security-Token", valid_604863
  var valid_604864 = header.getOrDefault("X-Amz-Algorithm")
  valid_604864 = validateParameter(valid_604864, JString, required = false,
                                 default = nil)
  if valid_604864 != nil:
    section.add "X-Amz-Algorithm", valid_604864
  var valid_604865 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_604865 = validateParameter(valid_604865, JString, required = false,
                                 default = nil)
  if valid_604865 != nil:
    section.add "X-Amz-SignedHeaders", valid_604865
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_604888: Call_GetAddRoleToDBCluster_604727; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_604888.validator(path, query, header, formData, body)
  let scheme = call_604888.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_604888.url(scheme.get, call_604888.host, call_604888.base,
                         call_604888.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_604888, url, valid)

proc call*(call_604959: Call_GetAddRoleToDBCluster_604727; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "AddRoleToDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBCluster
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_604960 = newJObject()
  add(query_604960, "RoleArn", newJString(RoleArn))
  add(query_604960, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_604960, "FeatureName", newJString(FeatureName))
  add(query_604960, "Action", newJString(Action))
  add(query_604960, "Version", newJString(Version))
  result = call_604959.call(nil, query_604960, nil, nil, nil)

var getAddRoleToDBCluster* = Call_GetAddRoleToDBCluster_604727(
    name: "getAddRoleToDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_GetAddRoleToDBCluster_604728, base: "/",
    url: url_GetAddRoleToDBCluster_604729, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddRoleToDBInstance_605037 = ref object of OpenApiRestCall_604389
proc url_PostAddRoleToDBInstance_605039(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddRoleToDBInstance_605038(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605040 = query.getOrDefault("Action")
  valid_605040 = validateParameter(valid_605040, JString, required = true,
                                 default = newJString("AddRoleToDBInstance"))
  if valid_605040 != nil:
    section.add "Action", valid_605040
  var valid_605041 = query.getOrDefault("Version")
  valid_605041 = validateParameter(valid_605041, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605041 != nil:
    section.add "Version", valid_605041
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605042 = header.getOrDefault("X-Amz-Signature")
  valid_605042 = validateParameter(valid_605042, JString, required = false,
                                 default = nil)
  if valid_605042 != nil:
    section.add "X-Amz-Signature", valid_605042
  var valid_605043 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605043 = validateParameter(valid_605043, JString, required = false,
                                 default = nil)
  if valid_605043 != nil:
    section.add "X-Amz-Content-Sha256", valid_605043
  var valid_605044 = header.getOrDefault("X-Amz-Date")
  valid_605044 = validateParameter(valid_605044, JString, required = false,
                                 default = nil)
  if valid_605044 != nil:
    section.add "X-Amz-Date", valid_605044
  var valid_605045 = header.getOrDefault("X-Amz-Credential")
  valid_605045 = validateParameter(valid_605045, JString, required = false,
                                 default = nil)
  if valid_605045 != nil:
    section.add "X-Amz-Credential", valid_605045
  var valid_605046 = header.getOrDefault("X-Amz-Security-Token")
  valid_605046 = validateParameter(valid_605046, JString, required = false,
                                 default = nil)
  if valid_605046 != nil:
    section.add "X-Amz-Security-Token", valid_605046
  var valid_605047 = header.getOrDefault("X-Amz-Algorithm")
  valid_605047 = validateParameter(valid_605047, JString, required = false,
                                 default = nil)
  if valid_605047 != nil:
    section.add "X-Amz-Algorithm", valid_605047
  var valid_605048 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605048 = validateParameter(valid_605048, JString, required = false,
                                 default = nil)
  if valid_605048 != nil:
    section.add "X-Amz-SignedHeaders", valid_605048
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `FeatureName` field"
  var valid_605049 = formData.getOrDefault("FeatureName")
  valid_605049 = validateParameter(valid_605049, JString, required = true,
                                 default = nil)
  if valid_605049 != nil:
    section.add "FeatureName", valid_605049
  var valid_605050 = formData.getOrDefault("RoleArn")
  valid_605050 = validateParameter(valid_605050, JString, required = true,
                                 default = nil)
  if valid_605050 != nil:
    section.add "RoleArn", valid_605050
  var valid_605051 = formData.getOrDefault("DBInstanceIdentifier")
  valid_605051 = validateParameter(valid_605051, JString, required = true,
                                 default = nil)
  if valid_605051 != nil:
    section.add "DBInstanceIdentifier", valid_605051
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605052: Call_PostAddRoleToDBInstance_605037; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  let valid = call_605052.validator(path, query, header, formData, body)
  let scheme = call_605052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605052.url(scheme.get, call_605052.host, call_605052.base,
                         call_605052.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605052, url, valid)

proc call*(call_605053: Call_PostAddRoleToDBInstance_605037; FeatureName: string;
          RoleArn: string; DBInstanceIdentifier: string;
          Action: string = "AddRoleToDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBInstance
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605054 = newJObject()
  var formData_605055 = newJObject()
  add(formData_605055, "FeatureName", newJString(FeatureName))
  add(formData_605055, "RoleArn", newJString(RoleArn))
  add(formData_605055, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_605054, "Action", newJString(Action))
  add(query_605054, "Version", newJString(Version))
  result = call_605053.call(nil, query_605054, nil, formData_605055, nil)

var postAddRoleToDBInstance* = Call_PostAddRoleToDBInstance_605037(
    name: "postAddRoleToDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBInstance",
    validator: validate_PostAddRoleToDBInstance_605038, base: "/",
    url: url_PostAddRoleToDBInstance_605039, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBInstance_605019 = ref object of OpenApiRestCall_604389
proc url_GetAddRoleToDBInstance_605021(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddRoleToDBInstance_605020(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_605022 = query.getOrDefault("RoleArn")
  valid_605022 = validateParameter(valid_605022, JString, required = true,
                                 default = nil)
  if valid_605022 != nil:
    section.add "RoleArn", valid_605022
  var valid_605023 = query.getOrDefault("FeatureName")
  valid_605023 = validateParameter(valid_605023, JString, required = true,
                                 default = nil)
  if valid_605023 != nil:
    section.add "FeatureName", valid_605023
  var valid_605024 = query.getOrDefault("DBInstanceIdentifier")
  valid_605024 = validateParameter(valid_605024, JString, required = true,
                                 default = nil)
  if valid_605024 != nil:
    section.add "DBInstanceIdentifier", valid_605024
  var valid_605025 = query.getOrDefault("Action")
  valid_605025 = validateParameter(valid_605025, JString, required = true,
                                 default = newJString("AddRoleToDBInstance"))
  if valid_605025 != nil:
    section.add "Action", valid_605025
  var valid_605026 = query.getOrDefault("Version")
  valid_605026 = validateParameter(valid_605026, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605026 != nil:
    section.add "Version", valid_605026
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605027 = header.getOrDefault("X-Amz-Signature")
  valid_605027 = validateParameter(valid_605027, JString, required = false,
                                 default = nil)
  if valid_605027 != nil:
    section.add "X-Amz-Signature", valid_605027
  var valid_605028 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605028 = validateParameter(valid_605028, JString, required = false,
                                 default = nil)
  if valid_605028 != nil:
    section.add "X-Amz-Content-Sha256", valid_605028
  var valid_605029 = header.getOrDefault("X-Amz-Date")
  valid_605029 = validateParameter(valid_605029, JString, required = false,
                                 default = nil)
  if valid_605029 != nil:
    section.add "X-Amz-Date", valid_605029
  var valid_605030 = header.getOrDefault("X-Amz-Credential")
  valid_605030 = validateParameter(valid_605030, JString, required = false,
                                 default = nil)
  if valid_605030 != nil:
    section.add "X-Amz-Credential", valid_605030
  var valid_605031 = header.getOrDefault("X-Amz-Security-Token")
  valid_605031 = validateParameter(valid_605031, JString, required = false,
                                 default = nil)
  if valid_605031 != nil:
    section.add "X-Amz-Security-Token", valid_605031
  var valid_605032 = header.getOrDefault("X-Amz-Algorithm")
  valid_605032 = validateParameter(valid_605032, JString, required = false,
                                 default = nil)
  if valid_605032 != nil:
    section.add "X-Amz-Algorithm", valid_605032
  var valid_605033 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605033 = validateParameter(valid_605033, JString, required = false,
                                 default = nil)
  if valid_605033 != nil:
    section.add "X-Amz-SignedHeaders", valid_605033
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605034: Call_GetAddRoleToDBInstance_605019; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  let valid = call_605034.validator(path, query, header, formData, body)
  let scheme = call_605034.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605034.url(scheme.get, call_605034.host, call_605034.base,
                         call_605034.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605034, url, valid)

proc call*(call_605035: Call_GetAddRoleToDBInstance_605019; RoleArn: string;
          FeatureName: string; DBInstanceIdentifier: string;
          Action: string = "AddRoleToDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBInstance
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605036 = newJObject()
  add(query_605036, "RoleArn", newJString(RoleArn))
  add(query_605036, "FeatureName", newJString(FeatureName))
  add(query_605036, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_605036, "Action", newJString(Action))
  add(query_605036, "Version", newJString(Version))
  result = call_605035.call(nil, query_605036, nil, nil, nil)

var getAddRoleToDBInstance* = Call_GetAddRoleToDBInstance_605019(
    name: "getAddRoleToDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBInstance",
    validator: validate_GetAddRoleToDBInstance_605020, base: "/",
    url: url_GetAddRoleToDBInstance_605021, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddSourceIdentifierToSubscription_605073 = ref object of OpenApiRestCall_604389
proc url_PostAddSourceIdentifierToSubscription_605075(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddSourceIdentifierToSubscription_605074(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605076 = query.getOrDefault("Action")
  valid_605076 = validateParameter(valid_605076, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_605076 != nil:
    section.add "Action", valid_605076
  var valid_605077 = query.getOrDefault("Version")
  valid_605077 = validateParameter(valid_605077, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605077 != nil:
    section.add "Version", valid_605077
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605078 = header.getOrDefault("X-Amz-Signature")
  valid_605078 = validateParameter(valid_605078, JString, required = false,
                                 default = nil)
  if valid_605078 != nil:
    section.add "X-Amz-Signature", valid_605078
  var valid_605079 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605079 = validateParameter(valid_605079, JString, required = false,
                                 default = nil)
  if valid_605079 != nil:
    section.add "X-Amz-Content-Sha256", valid_605079
  var valid_605080 = header.getOrDefault("X-Amz-Date")
  valid_605080 = validateParameter(valid_605080, JString, required = false,
                                 default = nil)
  if valid_605080 != nil:
    section.add "X-Amz-Date", valid_605080
  var valid_605081 = header.getOrDefault("X-Amz-Credential")
  valid_605081 = validateParameter(valid_605081, JString, required = false,
                                 default = nil)
  if valid_605081 != nil:
    section.add "X-Amz-Credential", valid_605081
  var valid_605082 = header.getOrDefault("X-Amz-Security-Token")
  valid_605082 = validateParameter(valid_605082, JString, required = false,
                                 default = nil)
  if valid_605082 != nil:
    section.add "X-Amz-Security-Token", valid_605082
  var valid_605083 = header.getOrDefault("X-Amz-Algorithm")
  valid_605083 = validateParameter(valid_605083, JString, required = false,
                                 default = nil)
  if valid_605083 != nil:
    section.add "X-Amz-Algorithm", valid_605083
  var valid_605084 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605084 = validateParameter(valid_605084, JString, required = false,
                                 default = nil)
  if valid_605084 != nil:
    section.add "X-Amz-SignedHeaders", valid_605084
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_605085 = formData.getOrDefault("SubscriptionName")
  valid_605085 = validateParameter(valid_605085, JString, required = true,
                                 default = nil)
  if valid_605085 != nil:
    section.add "SubscriptionName", valid_605085
  var valid_605086 = formData.getOrDefault("SourceIdentifier")
  valid_605086 = validateParameter(valid_605086, JString, required = true,
                                 default = nil)
  if valid_605086 != nil:
    section.add "SourceIdentifier", valid_605086
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605087: Call_PostAddSourceIdentifierToSubscription_605073;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  let valid = call_605087.validator(path, query, header, formData, body)
  let scheme = call_605087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605087.url(scheme.get, call_605087.host, call_605087.base,
                         call_605087.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605087, url, valid)

proc call*(call_605088: Call_PostAddSourceIdentifierToSubscription_605073;
          SubscriptionName: string; SourceIdentifier: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605089 = newJObject()
  var formData_605090 = newJObject()
  add(formData_605090, "SubscriptionName", newJString(SubscriptionName))
  add(formData_605090, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_605089, "Action", newJString(Action))
  add(query_605089, "Version", newJString(Version))
  result = call_605088.call(nil, query_605089, nil, formData_605090, nil)

var postAddSourceIdentifierToSubscription* = Call_PostAddSourceIdentifierToSubscription_605073(
    name: "postAddSourceIdentifierToSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_PostAddSourceIdentifierToSubscription_605074, base: "/",
    url: url_PostAddSourceIdentifierToSubscription_605075,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddSourceIdentifierToSubscription_605056 = ref object of OpenApiRestCall_604389
proc url_GetAddSourceIdentifierToSubscription_605058(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddSourceIdentifierToSubscription_605057(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceIdentifier` field"
  var valid_605059 = query.getOrDefault("SourceIdentifier")
  valid_605059 = validateParameter(valid_605059, JString, required = true,
                                 default = nil)
  if valid_605059 != nil:
    section.add "SourceIdentifier", valid_605059
  var valid_605060 = query.getOrDefault("SubscriptionName")
  valid_605060 = validateParameter(valid_605060, JString, required = true,
                                 default = nil)
  if valid_605060 != nil:
    section.add "SubscriptionName", valid_605060
  var valid_605061 = query.getOrDefault("Action")
  valid_605061 = validateParameter(valid_605061, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_605061 != nil:
    section.add "Action", valid_605061
  var valid_605062 = query.getOrDefault("Version")
  valid_605062 = validateParameter(valid_605062, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605062 != nil:
    section.add "Version", valid_605062
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605063 = header.getOrDefault("X-Amz-Signature")
  valid_605063 = validateParameter(valid_605063, JString, required = false,
                                 default = nil)
  if valid_605063 != nil:
    section.add "X-Amz-Signature", valid_605063
  var valid_605064 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605064 = validateParameter(valid_605064, JString, required = false,
                                 default = nil)
  if valid_605064 != nil:
    section.add "X-Amz-Content-Sha256", valid_605064
  var valid_605065 = header.getOrDefault("X-Amz-Date")
  valid_605065 = validateParameter(valid_605065, JString, required = false,
                                 default = nil)
  if valid_605065 != nil:
    section.add "X-Amz-Date", valid_605065
  var valid_605066 = header.getOrDefault("X-Amz-Credential")
  valid_605066 = validateParameter(valid_605066, JString, required = false,
                                 default = nil)
  if valid_605066 != nil:
    section.add "X-Amz-Credential", valid_605066
  var valid_605067 = header.getOrDefault("X-Amz-Security-Token")
  valid_605067 = validateParameter(valid_605067, JString, required = false,
                                 default = nil)
  if valid_605067 != nil:
    section.add "X-Amz-Security-Token", valid_605067
  var valid_605068 = header.getOrDefault("X-Amz-Algorithm")
  valid_605068 = validateParameter(valid_605068, JString, required = false,
                                 default = nil)
  if valid_605068 != nil:
    section.add "X-Amz-Algorithm", valid_605068
  var valid_605069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605069 = validateParameter(valid_605069, JString, required = false,
                                 default = nil)
  if valid_605069 != nil:
    section.add "X-Amz-SignedHeaders", valid_605069
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605070: Call_GetAddSourceIdentifierToSubscription_605056;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  let valid = call_605070.validator(path, query, header, formData, body)
  let scheme = call_605070.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605070.url(scheme.get, call_605070.host, call_605070.base,
                         call_605070.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605070, url, valid)

proc call*(call_605071: Call_GetAddSourceIdentifierToSubscription_605056;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing RDS event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605072 = newJObject()
  add(query_605072, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_605072, "SubscriptionName", newJString(SubscriptionName))
  add(query_605072, "Action", newJString(Action))
  add(query_605072, "Version", newJString(Version))
  result = call_605071.call(nil, query_605072, nil, nil, nil)

var getAddSourceIdentifierToSubscription* = Call_GetAddSourceIdentifierToSubscription_605056(
    name: "getAddSourceIdentifierToSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_GetAddSourceIdentifierToSubscription_605057, base: "/",
    url: url_GetAddSourceIdentifierToSubscription_605058,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddTagsToResource_605108 = ref object of OpenApiRestCall_604389
proc url_PostAddTagsToResource_605110(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddTagsToResource_605109(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605111 = query.getOrDefault("Action")
  valid_605111 = validateParameter(valid_605111, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_605111 != nil:
    section.add "Action", valid_605111
  var valid_605112 = query.getOrDefault("Version")
  valid_605112 = validateParameter(valid_605112, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605112 != nil:
    section.add "Version", valid_605112
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605113 = header.getOrDefault("X-Amz-Signature")
  valid_605113 = validateParameter(valid_605113, JString, required = false,
                                 default = nil)
  if valid_605113 != nil:
    section.add "X-Amz-Signature", valid_605113
  var valid_605114 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605114 = validateParameter(valid_605114, JString, required = false,
                                 default = nil)
  if valid_605114 != nil:
    section.add "X-Amz-Content-Sha256", valid_605114
  var valid_605115 = header.getOrDefault("X-Amz-Date")
  valid_605115 = validateParameter(valid_605115, JString, required = false,
                                 default = nil)
  if valid_605115 != nil:
    section.add "X-Amz-Date", valid_605115
  var valid_605116 = header.getOrDefault("X-Amz-Credential")
  valid_605116 = validateParameter(valid_605116, JString, required = false,
                                 default = nil)
  if valid_605116 != nil:
    section.add "X-Amz-Credential", valid_605116
  var valid_605117 = header.getOrDefault("X-Amz-Security-Token")
  valid_605117 = validateParameter(valid_605117, JString, required = false,
                                 default = nil)
  if valid_605117 != nil:
    section.add "X-Amz-Security-Token", valid_605117
  var valid_605118 = header.getOrDefault("X-Amz-Algorithm")
  valid_605118 = validateParameter(valid_605118, JString, required = false,
                                 default = nil)
  if valid_605118 != nil:
    section.add "X-Amz-Algorithm", valid_605118
  var valid_605119 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605119 = validateParameter(valid_605119, JString, required = false,
                                 default = nil)
  if valid_605119 != nil:
    section.add "X-Amz-SignedHeaders", valid_605119
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_605120 = formData.getOrDefault("Tags")
  valid_605120 = validateParameter(valid_605120, JArray, required = true, default = nil)
  if valid_605120 != nil:
    section.add "Tags", valid_605120
  var valid_605121 = formData.getOrDefault("ResourceName")
  valid_605121 = validateParameter(valid_605121, JString, required = true,
                                 default = nil)
  if valid_605121 != nil:
    section.add "ResourceName", valid_605121
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605122: Call_PostAddTagsToResource_605108; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  let valid = call_605122.validator(path, query, header, formData, body)
  let scheme = call_605122.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605122.url(scheme.get, call_605122.host, call_605122.base,
                         call_605122.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605122, url, valid)

proc call*(call_605123: Call_PostAddTagsToResource_605108; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## postAddTagsToResource
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ##   Action: string (required)
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  var query_605124 = newJObject()
  var formData_605125 = newJObject()
  add(query_605124, "Action", newJString(Action))
  if Tags != nil:
    formData_605125.add "Tags", Tags
  add(query_605124, "Version", newJString(Version))
  add(formData_605125, "ResourceName", newJString(ResourceName))
  result = call_605123.call(nil, query_605124, nil, formData_605125, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_605108(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_605109, base: "/",
    url: url_PostAddTagsToResource_605110, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_605091 = ref object of OpenApiRestCall_604389
proc url_GetAddTagsToResource_605093(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddTagsToResource_605092(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_605094 = query.getOrDefault("Tags")
  valid_605094 = validateParameter(valid_605094, JArray, required = true, default = nil)
  if valid_605094 != nil:
    section.add "Tags", valid_605094
  var valid_605095 = query.getOrDefault("ResourceName")
  valid_605095 = validateParameter(valid_605095, JString, required = true,
                                 default = nil)
  if valid_605095 != nil:
    section.add "ResourceName", valid_605095
  var valid_605096 = query.getOrDefault("Action")
  valid_605096 = validateParameter(valid_605096, JString, required = true,
                                 default = newJString("AddTagsToResource"))
  if valid_605096 != nil:
    section.add "Action", valid_605096
  var valid_605097 = query.getOrDefault("Version")
  valid_605097 = validateParameter(valid_605097, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605097 != nil:
    section.add "Version", valid_605097
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605098 = header.getOrDefault("X-Amz-Signature")
  valid_605098 = validateParameter(valid_605098, JString, required = false,
                                 default = nil)
  if valid_605098 != nil:
    section.add "X-Amz-Signature", valid_605098
  var valid_605099 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605099 = validateParameter(valid_605099, JString, required = false,
                                 default = nil)
  if valid_605099 != nil:
    section.add "X-Amz-Content-Sha256", valid_605099
  var valid_605100 = header.getOrDefault("X-Amz-Date")
  valid_605100 = validateParameter(valid_605100, JString, required = false,
                                 default = nil)
  if valid_605100 != nil:
    section.add "X-Amz-Date", valid_605100
  var valid_605101 = header.getOrDefault("X-Amz-Credential")
  valid_605101 = validateParameter(valid_605101, JString, required = false,
                                 default = nil)
  if valid_605101 != nil:
    section.add "X-Amz-Credential", valid_605101
  var valid_605102 = header.getOrDefault("X-Amz-Security-Token")
  valid_605102 = validateParameter(valid_605102, JString, required = false,
                                 default = nil)
  if valid_605102 != nil:
    section.add "X-Amz-Security-Token", valid_605102
  var valid_605103 = header.getOrDefault("X-Amz-Algorithm")
  valid_605103 = validateParameter(valid_605103, JString, required = false,
                                 default = nil)
  if valid_605103 != nil:
    section.add "X-Amz-Algorithm", valid_605103
  var valid_605104 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605104 = validateParameter(valid_605104, JString, required = false,
                                 default = nil)
  if valid_605104 != nil:
    section.add "X-Amz-SignedHeaders", valid_605104
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605105: Call_GetAddTagsToResource_605091; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  let valid = call_605105.validator(path, query, header, formData, body)
  let scheme = call_605105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605105.url(scheme.get, call_605105.host, call_605105.base,
                         call_605105.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605105, url, valid)

proc call*(call_605106: Call_GetAddTagsToResource_605091; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## getAddTagsToResource
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605107 = newJObject()
  if Tags != nil:
    query_605107.add "Tags", Tags
  add(query_605107, "ResourceName", newJString(ResourceName))
  add(query_605107, "Action", newJString(Action))
  add(query_605107, "Version", newJString(Version))
  result = call_605106.call(nil, query_605107, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_605091(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_605092, base: "/",
    url: url_GetAddTagsToResource_605093, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostApplyPendingMaintenanceAction_605144 = ref object of OpenApiRestCall_604389
proc url_PostApplyPendingMaintenanceAction_605146(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostApplyPendingMaintenanceAction_605145(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605147 = query.getOrDefault("Action")
  valid_605147 = validateParameter(valid_605147, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_605147 != nil:
    section.add "Action", valid_605147
  var valid_605148 = query.getOrDefault("Version")
  valid_605148 = validateParameter(valid_605148, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605148 != nil:
    section.add "Version", valid_605148
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605149 = header.getOrDefault("X-Amz-Signature")
  valid_605149 = validateParameter(valid_605149, JString, required = false,
                                 default = nil)
  if valid_605149 != nil:
    section.add "X-Amz-Signature", valid_605149
  var valid_605150 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605150 = validateParameter(valid_605150, JString, required = false,
                                 default = nil)
  if valid_605150 != nil:
    section.add "X-Amz-Content-Sha256", valid_605150
  var valid_605151 = header.getOrDefault("X-Amz-Date")
  valid_605151 = validateParameter(valid_605151, JString, required = false,
                                 default = nil)
  if valid_605151 != nil:
    section.add "X-Amz-Date", valid_605151
  var valid_605152 = header.getOrDefault("X-Amz-Credential")
  valid_605152 = validateParameter(valid_605152, JString, required = false,
                                 default = nil)
  if valid_605152 != nil:
    section.add "X-Amz-Credential", valid_605152
  var valid_605153 = header.getOrDefault("X-Amz-Security-Token")
  valid_605153 = validateParameter(valid_605153, JString, required = false,
                                 default = nil)
  if valid_605153 != nil:
    section.add "X-Amz-Security-Token", valid_605153
  var valid_605154 = header.getOrDefault("X-Amz-Algorithm")
  valid_605154 = validateParameter(valid_605154, JString, required = false,
                                 default = nil)
  if valid_605154 != nil:
    section.add "X-Amz-Algorithm", valid_605154
  var valid_605155 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605155 = validateParameter(valid_605155, JString, required = false,
                                 default = nil)
  if valid_605155 != nil:
    section.add "X-Amz-SignedHeaders", valid_605155
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceIdentifier: JString (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ResourceIdentifier` field"
  var valid_605156 = formData.getOrDefault("ResourceIdentifier")
  valid_605156 = validateParameter(valid_605156, JString, required = true,
                                 default = nil)
  if valid_605156 != nil:
    section.add "ResourceIdentifier", valid_605156
  var valid_605157 = formData.getOrDefault("ApplyAction")
  valid_605157 = validateParameter(valid_605157, JString, required = true,
                                 default = nil)
  if valid_605157 != nil:
    section.add "ApplyAction", valid_605157
  var valid_605158 = formData.getOrDefault("OptInType")
  valid_605158 = validateParameter(valid_605158, JString, required = true,
                                 default = nil)
  if valid_605158 != nil:
    section.add "OptInType", valid_605158
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605159: Call_PostApplyPendingMaintenanceAction_605144;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_605159.validator(path, query, header, formData, body)
  let scheme = call_605159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605159.url(scheme.get, call_605159.host, call_605159.base,
                         call_605159.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605159, url, valid)

proc call*(call_605160: Call_PostApplyPendingMaintenanceAction_605144;
          ResourceIdentifier: string; ApplyAction: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## postApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ResourceIdentifier: string (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_605161 = newJObject()
  var formData_605162 = newJObject()
  add(formData_605162, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(formData_605162, "ApplyAction", newJString(ApplyAction))
  add(query_605161, "Action", newJString(Action))
  add(formData_605162, "OptInType", newJString(OptInType))
  add(query_605161, "Version", newJString(Version))
  result = call_605160.call(nil, query_605161, nil, formData_605162, nil)

var postApplyPendingMaintenanceAction* = Call_PostApplyPendingMaintenanceAction_605144(
    name: "postApplyPendingMaintenanceAction", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_PostApplyPendingMaintenanceAction_605145, base: "/",
    url: url_PostApplyPendingMaintenanceAction_605146,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplyPendingMaintenanceAction_605126 = ref object of OpenApiRestCall_604389
proc url_GetApplyPendingMaintenanceAction_605128(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetApplyPendingMaintenanceAction_605127(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceIdentifier: JString (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   Action: JString (required)
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `ResourceIdentifier` field"
  var valid_605129 = query.getOrDefault("ResourceIdentifier")
  valid_605129 = validateParameter(valid_605129, JString, required = true,
                                 default = nil)
  if valid_605129 != nil:
    section.add "ResourceIdentifier", valid_605129
  var valid_605130 = query.getOrDefault("ApplyAction")
  valid_605130 = validateParameter(valid_605130, JString, required = true,
                                 default = nil)
  if valid_605130 != nil:
    section.add "ApplyAction", valid_605130
  var valid_605131 = query.getOrDefault("Action")
  valid_605131 = validateParameter(valid_605131, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_605131 != nil:
    section.add "Action", valid_605131
  var valid_605132 = query.getOrDefault("OptInType")
  valid_605132 = validateParameter(valid_605132, JString, required = true,
                                 default = nil)
  if valid_605132 != nil:
    section.add "OptInType", valid_605132
  var valid_605133 = query.getOrDefault("Version")
  valid_605133 = validateParameter(valid_605133, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605133 != nil:
    section.add "Version", valid_605133
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605134 = header.getOrDefault("X-Amz-Signature")
  valid_605134 = validateParameter(valid_605134, JString, required = false,
                                 default = nil)
  if valid_605134 != nil:
    section.add "X-Amz-Signature", valid_605134
  var valid_605135 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605135 = validateParameter(valid_605135, JString, required = false,
                                 default = nil)
  if valid_605135 != nil:
    section.add "X-Amz-Content-Sha256", valid_605135
  var valid_605136 = header.getOrDefault("X-Amz-Date")
  valid_605136 = validateParameter(valid_605136, JString, required = false,
                                 default = nil)
  if valid_605136 != nil:
    section.add "X-Amz-Date", valid_605136
  var valid_605137 = header.getOrDefault("X-Amz-Credential")
  valid_605137 = validateParameter(valid_605137, JString, required = false,
                                 default = nil)
  if valid_605137 != nil:
    section.add "X-Amz-Credential", valid_605137
  var valid_605138 = header.getOrDefault("X-Amz-Security-Token")
  valid_605138 = validateParameter(valid_605138, JString, required = false,
                                 default = nil)
  if valid_605138 != nil:
    section.add "X-Amz-Security-Token", valid_605138
  var valid_605139 = header.getOrDefault("X-Amz-Algorithm")
  valid_605139 = validateParameter(valid_605139, JString, required = false,
                                 default = nil)
  if valid_605139 != nil:
    section.add "X-Amz-Algorithm", valid_605139
  var valid_605140 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605140 = validateParameter(valid_605140, JString, required = false,
                                 default = nil)
  if valid_605140 != nil:
    section.add "X-Amz-SignedHeaders", valid_605140
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605141: Call_GetApplyPendingMaintenanceAction_605126;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_605141.validator(path, query, header, formData, body)
  let scheme = call_605141.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605141.url(scheme.get, call_605141.host, call_605141.base,
                         call_605141.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605141, url, valid)

proc call*(call_605142: Call_GetApplyPendingMaintenanceAction_605126;
          ResourceIdentifier: string; ApplyAction: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## getApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ResourceIdentifier: string (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_605143 = newJObject()
  add(query_605143, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_605143, "ApplyAction", newJString(ApplyAction))
  add(query_605143, "Action", newJString(Action))
  add(query_605143, "OptInType", newJString(OptInType))
  add(query_605143, "Version", newJString(Version))
  result = call_605142.call(nil, query_605143, nil, nil, nil)

var getApplyPendingMaintenanceAction* = Call_GetApplyPendingMaintenanceAction_605126(
    name: "getApplyPendingMaintenanceAction", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_GetApplyPendingMaintenanceAction_605127, base: "/",
    url: url_GetApplyPendingMaintenanceAction_605128,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAuthorizeDBSecurityGroupIngress_605183 = ref object of OpenApiRestCall_604389
proc url_PostAuthorizeDBSecurityGroupIngress_605185(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAuthorizeDBSecurityGroupIngress_605184(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605186 = query.getOrDefault("Action")
  valid_605186 = validateParameter(valid_605186, JString, required = true, default = newJString(
      "AuthorizeDBSecurityGroupIngress"))
  if valid_605186 != nil:
    section.add "Action", valid_605186
  var valid_605187 = query.getOrDefault("Version")
  valid_605187 = validateParameter(valid_605187, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605187 != nil:
    section.add "Version", valid_605187
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605188 = header.getOrDefault("X-Amz-Signature")
  valid_605188 = validateParameter(valid_605188, JString, required = false,
                                 default = nil)
  if valid_605188 != nil:
    section.add "X-Amz-Signature", valid_605188
  var valid_605189 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605189 = validateParameter(valid_605189, JString, required = false,
                                 default = nil)
  if valid_605189 != nil:
    section.add "X-Amz-Content-Sha256", valid_605189
  var valid_605190 = header.getOrDefault("X-Amz-Date")
  valid_605190 = validateParameter(valid_605190, JString, required = false,
                                 default = nil)
  if valid_605190 != nil:
    section.add "X-Amz-Date", valid_605190
  var valid_605191 = header.getOrDefault("X-Amz-Credential")
  valid_605191 = validateParameter(valid_605191, JString, required = false,
                                 default = nil)
  if valid_605191 != nil:
    section.add "X-Amz-Credential", valid_605191
  var valid_605192 = header.getOrDefault("X-Amz-Security-Token")
  valid_605192 = validateParameter(valid_605192, JString, required = false,
                                 default = nil)
  if valid_605192 != nil:
    section.add "X-Amz-Security-Token", valid_605192
  var valid_605193 = header.getOrDefault("X-Amz-Algorithm")
  valid_605193 = validateParameter(valid_605193, JString, required = false,
                                 default = nil)
  if valid_605193 != nil:
    section.add "X-Amz-Algorithm", valid_605193
  var valid_605194 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605194 = validateParameter(valid_605194, JString, required = false,
                                 default = nil)
  if valid_605194 != nil:
    section.add "X-Amz-SignedHeaders", valid_605194
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupName: JString
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: JString
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: JString
  ##         : The IP range to authorize.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_605195 = formData.getOrDefault("DBSecurityGroupName")
  valid_605195 = validateParameter(valid_605195, JString, required = true,
                                 default = nil)
  if valid_605195 != nil:
    section.add "DBSecurityGroupName", valid_605195
  var valid_605196 = formData.getOrDefault("EC2SecurityGroupName")
  valid_605196 = validateParameter(valid_605196, JString, required = false,
                                 default = nil)
  if valid_605196 != nil:
    section.add "EC2SecurityGroupName", valid_605196
  var valid_605197 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_605197 = validateParameter(valid_605197, JString, required = false,
                                 default = nil)
  if valid_605197 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_605197
  var valid_605198 = formData.getOrDefault("EC2SecurityGroupId")
  valid_605198 = validateParameter(valid_605198, JString, required = false,
                                 default = nil)
  if valid_605198 != nil:
    section.add "EC2SecurityGroupId", valid_605198
  var valid_605199 = formData.getOrDefault("CIDRIP")
  valid_605199 = validateParameter(valid_605199, JString, required = false,
                                 default = nil)
  if valid_605199 != nil:
    section.add "CIDRIP", valid_605199
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605200: Call_PostAuthorizeDBSecurityGroupIngress_605183;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_605200.validator(path, query, header, formData, body)
  let scheme = call_605200.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605200.url(scheme.get, call_605200.host, call_605200.base,
                         call_605200.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605200, url, valid)

proc call*(call_605201: Call_PostAuthorizeDBSecurityGroupIngress_605183;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupOwnerId: string = ""; EC2SecurityGroupId: string = "";
          CIDRIP: string = ""; Action: string = "AuthorizeDBSecurityGroupIngress";
          Version: string = "2014-10-31"): Recallable =
  ## postAuthorizeDBSecurityGroupIngress
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupName: string
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: string
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: string
  ##         : The IP range to authorize.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605202 = newJObject()
  var formData_605203 = newJObject()
  add(formData_605203, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_605203, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_605203, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(formData_605203, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(formData_605203, "CIDRIP", newJString(CIDRIP))
  add(query_605202, "Action", newJString(Action))
  add(query_605202, "Version", newJString(Version))
  result = call_605201.call(nil, query_605202, nil, formData_605203, nil)

var postAuthorizeDBSecurityGroupIngress* = Call_PostAuthorizeDBSecurityGroupIngress_605183(
    name: "postAuthorizeDBSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AuthorizeDBSecurityGroupIngress",
    validator: validate_PostAuthorizeDBSecurityGroupIngress_605184, base: "/",
    url: url_PostAuthorizeDBSecurityGroupIngress_605185,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizeDBSecurityGroupIngress_605163 = ref object of OpenApiRestCall_604389
proc url_GetAuthorizeDBSecurityGroupIngress_605165(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAuthorizeDBSecurityGroupIngress_605164(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupId: JString
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CIDRIP: JString
  ##         : The IP range to authorize.
  section = newJObject()
  var valid_605166 = query.getOrDefault("EC2SecurityGroupName")
  valid_605166 = validateParameter(valid_605166, JString, required = false,
                                 default = nil)
  if valid_605166 != nil:
    section.add "EC2SecurityGroupName", valid_605166
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_605167 = query.getOrDefault("DBSecurityGroupName")
  valid_605167 = validateParameter(valid_605167, JString, required = true,
                                 default = nil)
  if valid_605167 != nil:
    section.add "DBSecurityGroupName", valid_605167
  var valid_605168 = query.getOrDefault("EC2SecurityGroupId")
  valid_605168 = validateParameter(valid_605168, JString, required = false,
                                 default = nil)
  if valid_605168 != nil:
    section.add "EC2SecurityGroupId", valid_605168
  var valid_605169 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_605169 = validateParameter(valid_605169, JString, required = false,
                                 default = nil)
  if valid_605169 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_605169
  var valid_605170 = query.getOrDefault("Action")
  valid_605170 = validateParameter(valid_605170, JString, required = true, default = newJString(
      "AuthorizeDBSecurityGroupIngress"))
  if valid_605170 != nil:
    section.add "Action", valid_605170
  var valid_605171 = query.getOrDefault("Version")
  valid_605171 = validateParameter(valid_605171, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605171 != nil:
    section.add "Version", valid_605171
  var valid_605172 = query.getOrDefault("CIDRIP")
  valid_605172 = validateParameter(valid_605172, JString, required = false,
                                 default = nil)
  if valid_605172 != nil:
    section.add "CIDRIP", valid_605172
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605173 = header.getOrDefault("X-Amz-Signature")
  valid_605173 = validateParameter(valid_605173, JString, required = false,
                                 default = nil)
  if valid_605173 != nil:
    section.add "X-Amz-Signature", valid_605173
  var valid_605174 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605174 = validateParameter(valid_605174, JString, required = false,
                                 default = nil)
  if valid_605174 != nil:
    section.add "X-Amz-Content-Sha256", valid_605174
  var valid_605175 = header.getOrDefault("X-Amz-Date")
  valid_605175 = validateParameter(valid_605175, JString, required = false,
                                 default = nil)
  if valid_605175 != nil:
    section.add "X-Amz-Date", valid_605175
  var valid_605176 = header.getOrDefault("X-Amz-Credential")
  valid_605176 = validateParameter(valid_605176, JString, required = false,
                                 default = nil)
  if valid_605176 != nil:
    section.add "X-Amz-Credential", valid_605176
  var valid_605177 = header.getOrDefault("X-Amz-Security-Token")
  valid_605177 = validateParameter(valid_605177, JString, required = false,
                                 default = nil)
  if valid_605177 != nil:
    section.add "X-Amz-Security-Token", valid_605177
  var valid_605178 = header.getOrDefault("X-Amz-Algorithm")
  valid_605178 = validateParameter(valid_605178, JString, required = false,
                                 default = nil)
  if valid_605178 != nil:
    section.add "X-Amz-Algorithm", valid_605178
  var valid_605179 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605179 = validateParameter(valid_605179, JString, required = false,
                                 default = nil)
  if valid_605179 != nil:
    section.add "X-Amz-SignedHeaders", valid_605179
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605180: Call_GetAuthorizeDBSecurityGroupIngress_605163;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_605180.validator(path, query, header, formData, body)
  let scheme = call_605180.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605180.url(scheme.get, call_605180.host, call_605180.base,
                         call_605180.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605180, url, valid)

proc call*(call_605181: Call_GetAuthorizeDBSecurityGroupIngress_605163;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupId: string = ""; EC2SecurityGroupOwnerId: string = "";
          Action: string = "AuthorizeDBSecurityGroupIngress";
          Version: string = "2014-10-31"; CIDRIP: string = ""): Recallable =
  ## getAuthorizeDBSecurityGroupIngress
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   EC2SecurityGroupName: string
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupId: string
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CIDRIP: string
  ##         : The IP range to authorize.
  var query_605182 = newJObject()
  add(query_605182, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_605182, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_605182, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(query_605182, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_605182, "Action", newJString(Action))
  add(query_605182, "Version", newJString(Version))
  add(query_605182, "CIDRIP", newJString(CIDRIP))
  result = call_605181.call(nil, query_605182, nil, nil, nil)

var getAuthorizeDBSecurityGroupIngress* = Call_GetAuthorizeDBSecurityGroupIngress_605163(
    name: "getAuthorizeDBSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AuthorizeDBSecurityGroupIngress",
    validator: validate_GetAuthorizeDBSecurityGroupIngress_605164, base: "/",
    url: url_GetAuthorizeDBSecurityGroupIngress_605165,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBacktrackDBCluster_605223 = ref object of OpenApiRestCall_604389
proc url_PostBacktrackDBCluster_605225(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBacktrackDBCluster_605224(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605226 = query.getOrDefault("Action")
  valid_605226 = validateParameter(valid_605226, JString, required = true,
                                 default = newJString("BacktrackDBCluster"))
  if valid_605226 != nil:
    section.add "Action", valid_605226
  var valid_605227 = query.getOrDefault("Version")
  valid_605227 = validateParameter(valid_605227, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605227 != nil:
    section.add "Version", valid_605227
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605228 = header.getOrDefault("X-Amz-Signature")
  valid_605228 = validateParameter(valid_605228, JString, required = false,
                                 default = nil)
  if valid_605228 != nil:
    section.add "X-Amz-Signature", valid_605228
  var valid_605229 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605229 = validateParameter(valid_605229, JString, required = false,
                                 default = nil)
  if valid_605229 != nil:
    section.add "X-Amz-Content-Sha256", valid_605229
  var valid_605230 = header.getOrDefault("X-Amz-Date")
  valid_605230 = validateParameter(valid_605230, JString, required = false,
                                 default = nil)
  if valid_605230 != nil:
    section.add "X-Amz-Date", valid_605230
  var valid_605231 = header.getOrDefault("X-Amz-Credential")
  valid_605231 = validateParameter(valid_605231, JString, required = false,
                                 default = nil)
  if valid_605231 != nil:
    section.add "X-Amz-Credential", valid_605231
  var valid_605232 = header.getOrDefault("X-Amz-Security-Token")
  valid_605232 = validateParameter(valid_605232, JString, required = false,
                                 default = nil)
  if valid_605232 != nil:
    section.add "X-Amz-Security-Token", valid_605232
  var valid_605233 = header.getOrDefault("X-Amz-Algorithm")
  valid_605233 = validateParameter(valid_605233, JString, required = false,
                                 default = nil)
  if valid_605233 != nil:
    section.add "X-Amz-Algorithm", valid_605233
  var valid_605234 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605234 = validateParameter(valid_605234, JString, required = false,
                                 default = nil)
  if valid_605234 != nil:
    section.add "X-Amz-SignedHeaders", valid_605234
  result.add "header", section
  ## parameters in `formData` object:
  ##   Force: JBool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   UseEarliestTimeOnPointInTimeUnavailable: JBool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: JString (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  section = newJObject()
  var valid_605235 = formData.getOrDefault("Force")
  valid_605235 = validateParameter(valid_605235, JBool, required = false, default = nil)
  if valid_605235 != nil:
    section.add "Force", valid_605235
  var valid_605236 = formData.getOrDefault("UseEarliestTimeOnPointInTimeUnavailable")
  valid_605236 = validateParameter(valid_605236, JBool, required = false, default = nil)
  if valid_605236 != nil:
    section.add "UseEarliestTimeOnPointInTimeUnavailable", valid_605236
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_605237 = formData.getOrDefault("DBClusterIdentifier")
  valid_605237 = validateParameter(valid_605237, JString, required = true,
                                 default = nil)
  if valid_605237 != nil:
    section.add "DBClusterIdentifier", valid_605237
  var valid_605238 = formData.getOrDefault("BacktrackTo")
  valid_605238 = validateParameter(valid_605238, JString, required = true,
                                 default = nil)
  if valid_605238 != nil:
    section.add "BacktrackTo", valid_605238
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605239: Call_PostBacktrackDBCluster_605223; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605239.validator(path, query, header, formData, body)
  let scheme = call_605239.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605239.url(scheme.get, call_605239.host, call_605239.base,
                         call_605239.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605239, url, valid)

proc call*(call_605240: Call_PostBacktrackDBCluster_605223;
          DBClusterIdentifier: string; BacktrackTo: string; Force: bool = false;
          UseEarliestTimeOnPointInTimeUnavailable: bool = false;
          Action: string = "BacktrackDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postBacktrackDBCluster
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Force: bool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   UseEarliestTimeOnPointInTimeUnavailable: bool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: string (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  var query_605241 = newJObject()
  var formData_605242 = newJObject()
  add(formData_605242, "Force", newJBool(Force))
  add(formData_605242, "UseEarliestTimeOnPointInTimeUnavailable",
      newJBool(UseEarliestTimeOnPointInTimeUnavailable))
  add(query_605241, "Action", newJString(Action))
  add(query_605241, "Version", newJString(Version))
  add(formData_605242, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_605242, "BacktrackTo", newJString(BacktrackTo))
  result = call_605240.call(nil, query_605241, nil, formData_605242, nil)

var postBacktrackDBCluster* = Call_PostBacktrackDBCluster_605223(
    name: "postBacktrackDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=BacktrackDBCluster",
    validator: validate_PostBacktrackDBCluster_605224, base: "/",
    url: url_PostBacktrackDBCluster_605225, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBacktrackDBCluster_605204 = ref object of OpenApiRestCall_604389
proc url_GetBacktrackDBCluster_605206(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBacktrackDBCluster_605205(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: JString (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   Force: JBool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   Action: JString (required)
  ##   UseEarliestTimeOnPointInTimeUnavailable: JBool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_605207 = query.getOrDefault("DBClusterIdentifier")
  valid_605207 = validateParameter(valid_605207, JString, required = true,
                                 default = nil)
  if valid_605207 != nil:
    section.add "DBClusterIdentifier", valid_605207
  var valid_605208 = query.getOrDefault("BacktrackTo")
  valid_605208 = validateParameter(valid_605208, JString, required = true,
                                 default = nil)
  if valid_605208 != nil:
    section.add "BacktrackTo", valid_605208
  var valid_605209 = query.getOrDefault("Force")
  valid_605209 = validateParameter(valid_605209, JBool, required = false, default = nil)
  if valid_605209 != nil:
    section.add "Force", valid_605209
  var valid_605210 = query.getOrDefault("Action")
  valid_605210 = validateParameter(valid_605210, JString, required = true,
                                 default = newJString("BacktrackDBCluster"))
  if valid_605210 != nil:
    section.add "Action", valid_605210
  var valid_605211 = query.getOrDefault("UseEarliestTimeOnPointInTimeUnavailable")
  valid_605211 = validateParameter(valid_605211, JBool, required = false, default = nil)
  if valid_605211 != nil:
    section.add "UseEarliestTimeOnPointInTimeUnavailable", valid_605211
  var valid_605212 = query.getOrDefault("Version")
  valid_605212 = validateParameter(valid_605212, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605212 != nil:
    section.add "Version", valid_605212
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605213 = header.getOrDefault("X-Amz-Signature")
  valid_605213 = validateParameter(valid_605213, JString, required = false,
                                 default = nil)
  if valid_605213 != nil:
    section.add "X-Amz-Signature", valid_605213
  var valid_605214 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605214 = validateParameter(valid_605214, JString, required = false,
                                 default = nil)
  if valid_605214 != nil:
    section.add "X-Amz-Content-Sha256", valid_605214
  var valid_605215 = header.getOrDefault("X-Amz-Date")
  valid_605215 = validateParameter(valid_605215, JString, required = false,
                                 default = nil)
  if valid_605215 != nil:
    section.add "X-Amz-Date", valid_605215
  var valid_605216 = header.getOrDefault("X-Amz-Credential")
  valid_605216 = validateParameter(valid_605216, JString, required = false,
                                 default = nil)
  if valid_605216 != nil:
    section.add "X-Amz-Credential", valid_605216
  var valid_605217 = header.getOrDefault("X-Amz-Security-Token")
  valid_605217 = validateParameter(valid_605217, JString, required = false,
                                 default = nil)
  if valid_605217 != nil:
    section.add "X-Amz-Security-Token", valid_605217
  var valid_605218 = header.getOrDefault("X-Amz-Algorithm")
  valid_605218 = validateParameter(valid_605218, JString, required = false,
                                 default = nil)
  if valid_605218 != nil:
    section.add "X-Amz-Algorithm", valid_605218
  var valid_605219 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605219 = validateParameter(valid_605219, JString, required = false,
                                 default = nil)
  if valid_605219 != nil:
    section.add "X-Amz-SignedHeaders", valid_605219
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605220: Call_GetBacktrackDBCluster_605204; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605220.validator(path, query, header, formData, body)
  let scheme = call_605220.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605220.url(scheme.get, call_605220.host, call_605220.base,
                         call_605220.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605220, url, valid)

proc call*(call_605221: Call_GetBacktrackDBCluster_605204;
          DBClusterIdentifier: string; BacktrackTo: string; Force: bool = false;
          Action: string = "BacktrackDBCluster";
          UseEarliestTimeOnPointInTimeUnavailable: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getBacktrackDBCluster
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackTo: string (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   Force: bool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   Action: string (required)
  ##   UseEarliestTimeOnPointInTimeUnavailable: bool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   Version: string (required)
  var query_605222 = newJObject()
  add(query_605222, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_605222, "BacktrackTo", newJString(BacktrackTo))
  add(query_605222, "Force", newJBool(Force))
  add(query_605222, "Action", newJString(Action))
  add(query_605222, "UseEarliestTimeOnPointInTimeUnavailable",
      newJBool(UseEarliestTimeOnPointInTimeUnavailable))
  add(query_605222, "Version", newJString(Version))
  result = call_605221.call(nil, query_605222, nil, nil, nil)

var getBacktrackDBCluster* = Call_GetBacktrackDBCluster_605204(
    name: "getBacktrackDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=BacktrackDBCluster",
    validator: validate_GetBacktrackDBCluster_605205, base: "/",
    url: url_GetBacktrackDBCluster_605206, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterParameterGroup_605262 = ref object of OpenApiRestCall_604389
proc url_PostCopyDBClusterParameterGroup_605264(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBClusterParameterGroup_605263(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605265 = query.getOrDefault("Action")
  valid_605265 = validateParameter(valid_605265, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_605265 != nil:
    section.add "Action", valid_605265
  var valid_605266 = query.getOrDefault("Version")
  valid_605266 = validateParameter(valid_605266, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605266 != nil:
    section.add "Version", valid_605266
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605267 = header.getOrDefault("X-Amz-Signature")
  valid_605267 = validateParameter(valid_605267, JString, required = false,
                                 default = nil)
  if valid_605267 != nil:
    section.add "X-Amz-Signature", valid_605267
  var valid_605268 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605268 = validateParameter(valid_605268, JString, required = false,
                                 default = nil)
  if valid_605268 != nil:
    section.add "X-Amz-Content-Sha256", valid_605268
  var valid_605269 = header.getOrDefault("X-Amz-Date")
  valid_605269 = validateParameter(valid_605269, JString, required = false,
                                 default = nil)
  if valid_605269 != nil:
    section.add "X-Amz-Date", valid_605269
  var valid_605270 = header.getOrDefault("X-Amz-Credential")
  valid_605270 = validateParameter(valid_605270, JString, required = false,
                                 default = nil)
  if valid_605270 != nil:
    section.add "X-Amz-Credential", valid_605270
  var valid_605271 = header.getOrDefault("X-Amz-Security-Token")
  valid_605271 = validateParameter(valid_605271, JString, required = false,
                                 default = nil)
  if valid_605271 != nil:
    section.add "X-Amz-Security-Token", valid_605271
  var valid_605272 = header.getOrDefault("X-Amz-Algorithm")
  valid_605272 = validateParameter(valid_605272, JString, required = false,
                                 default = nil)
  if valid_605272 != nil:
    section.add "X-Amz-Algorithm", valid_605272
  var valid_605273 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605273 = validateParameter(valid_605273, JString, required = false,
                                 default = nil)
  if valid_605273 != nil:
    section.add "X-Amz-SignedHeaders", valid_605273
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBClusterParameterGroupIdentifier` field"
  var valid_605274 = formData.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_605274 = validateParameter(valid_605274, JString, required = true,
                                 default = nil)
  if valid_605274 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_605274
  var valid_605275 = formData.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_605275 = validateParameter(valid_605275, JString, required = true,
                                 default = nil)
  if valid_605275 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_605275
  var valid_605276 = formData.getOrDefault("Tags")
  valid_605276 = validateParameter(valid_605276, JArray, required = false,
                                 default = nil)
  if valid_605276 != nil:
    section.add "Tags", valid_605276
  var valid_605277 = formData.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_605277 = validateParameter(valid_605277, JString, required = true,
                                 default = nil)
  if valid_605277 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_605277
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605278: Call_PostCopyDBClusterParameterGroup_605262;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605278.validator(path, query, header, formData, body)
  let scheme = call_605278.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605278.url(scheme.get, call_605278.host, call_605278.base,
                         call_605278.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605278, url, valid)

proc call*(call_605279: Call_PostCopyDBClusterParameterGroup_605262;
          TargetDBClusterParameterGroupIdentifier: string;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupDescription: string;
          Action: string = "CopyDBClusterParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterParameterGroup
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  var query_605280 = newJObject()
  var formData_605281 = newJObject()
  add(formData_605281, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(formData_605281, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(query_605280, "Action", newJString(Action))
  if Tags != nil:
    formData_605281.add "Tags", Tags
  add(query_605280, "Version", newJString(Version))
  add(formData_605281, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  result = call_605279.call(nil, query_605280, nil, formData_605281, nil)

var postCopyDBClusterParameterGroup* = Call_PostCopyDBClusterParameterGroup_605262(
    name: "postCopyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_PostCopyDBClusterParameterGroup_605263, base: "/",
    url: url_PostCopyDBClusterParameterGroup_605264,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterParameterGroup_605243 = ref object of OpenApiRestCall_604389
proc url_GetCopyDBClusterParameterGroup_605245(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBClusterParameterGroup_605244(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Action: JString (required)
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `TargetDBClusterParameterGroupDescription` field"
  var valid_605246 = query.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_605246 = validateParameter(valid_605246, JString, required = true,
                                 default = nil)
  if valid_605246 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_605246
  var valid_605247 = query.getOrDefault("Tags")
  valid_605247 = validateParameter(valid_605247, JArray, required = false,
                                 default = nil)
  if valid_605247 != nil:
    section.add "Tags", valid_605247
  var valid_605248 = query.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_605248 = validateParameter(valid_605248, JString, required = true,
                                 default = nil)
  if valid_605248 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_605248
  var valid_605249 = query.getOrDefault("Action")
  valid_605249 = validateParameter(valid_605249, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_605249 != nil:
    section.add "Action", valid_605249
  var valid_605250 = query.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_605250 = validateParameter(valid_605250, JString, required = true,
                                 default = nil)
  if valid_605250 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_605250
  var valid_605251 = query.getOrDefault("Version")
  valid_605251 = validateParameter(valid_605251, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605251 != nil:
    section.add "Version", valid_605251
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605252 = header.getOrDefault("X-Amz-Signature")
  valid_605252 = validateParameter(valid_605252, JString, required = false,
                                 default = nil)
  if valid_605252 != nil:
    section.add "X-Amz-Signature", valid_605252
  var valid_605253 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605253 = validateParameter(valid_605253, JString, required = false,
                                 default = nil)
  if valid_605253 != nil:
    section.add "X-Amz-Content-Sha256", valid_605253
  var valid_605254 = header.getOrDefault("X-Amz-Date")
  valid_605254 = validateParameter(valid_605254, JString, required = false,
                                 default = nil)
  if valid_605254 != nil:
    section.add "X-Amz-Date", valid_605254
  var valid_605255 = header.getOrDefault("X-Amz-Credential")
  valid_605255 = validateParameter(valid_605255, JString, required = false,
                                 default = nil)
  if valid_605255 != nil:
    section.add "X-Amz-Credential", valid_605255
  var valid_605256 = header.getOrDefault("X-Amz-Security-Token")
  valid_605256 = validateParameter(valid_605256, JString, required = false,
                                 default = nil)
  if valid_605256 != nil:
    section.add "X-Amz-Security-Token", valid_605256
  var valid_605257 = header.getOrDefault("X-Amz-Algorithm")
  valid_605257 = validateParameter(valid_605257, JString, required = false,
                                 default = nil)
  if valid_605257 != nil:
    section.add "X-Amz-Algorithm", valid_605257
  var valid_605258 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605258 = validateParameter(valid_605258, JString, required = false,
                                 default = nil)
  if valid_605258 != nil:
    section.add "X-Amz-SignedHeaders", valid_605258
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605259: Call_GetCopyDBClusterParameterGroup_605243; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605259.validator(path, query, header, formData, body)
  let scheme = call_605259.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605259.url(scheme.get, call_605259.host, call_605259.base,
                         call_605259.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605259, url, valid)

proc call*(call_605260: Call_GetCopyDBClusterParameterGroup_605243;
          TargetDBClusterParameterGroupDescription: string;
          TargetDBClusterParameterGroupIdentifier: string;
          SourceDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterParameterGroup
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Action: string (required)
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Version: string (required)
  var query_605261 = newJObject()
  add(query_605261, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  if Tags != nil:
    query_605261.add "Tags", Tags
  add(query_605261, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_605261, "Action", newJString(Action))
  add(query_605261, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(query_605261, "Version", newJString(Version))
  result = call_605260.call(nil, query_605261, nil, nil, nil)

var getCopyDBClusterParameterGroup* = Call_GetCopyDBClusterParameterGroup_605243(
    name: "getCopyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_GetCopyDBClusterParameterGroup_605244, base: "/",
    url: url_GetCopyDBClusterParameterGroup_605245,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterSnapshot_605304 = ref object of OpenApiRestCall_604389
proc url_PostCopyDBClusterSnapshot_605306(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBClusterSnapshot_605305(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605307 = query.getOrDefault("Action")
  valid_605307 = validateParameter(valid_605307, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_605307 != nil:
    section.add "Action", valid_605307
  var valid_605308 = query.getOrDefault("Version")
  valid_605308 = validateParameter(valid_605308, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605308 != nil:
    section.add "Version", valid_605308
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605309 = header.getOrDefault("X-Amz-Signature")
  valid_605309 = validateParameter(valid_605309, JString, required = false,
                                 default = nil)
  if valid_605309 != nil:
    section.add "X-Amz-Signature", valid_605309
  var valid_605310 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605310 = validateParameter(valid_605310, JString, required = false,
                                 default = nil)
  if valid_605310 != nil:
    section.add "X-Amz-Content-Sha256", valid_605310
  var valid_605311 = header.getOrDefault("X-Amz-Date")
  valid_605311 = validateParameter(valid_605311, JString, required = false,
                                 default = nil)
  if valid_605311 != nil:
    section.add "X-Amz-Date", valid_605311
  var valid_605312 = header.getOrDefault("X-Amz-Credential")
  valid_605312 = validateParameter(valid_605312, JString, required = false,
                                 default = nil)
  if valid_605312 != nil:
    section.add "X-Amz-Credential", valid_605312
  var valid_605313 = header.getOrDefault("X-Amz-Security-Token")
  valid_605313 = validateParameter(valid_605313, JString, required = false,
                                 default = nil)
  if valid_605313 != nil:
    section.add "X-Amz-Security-Token", valid_605313
  var valid_605314 = header.getOrDefault("X-Amz-Algorithm")
  valid_605314 = validateParameter(valid_605314, JString, required = false,
                                 default = nil)
  if valid_605314 != nil:
    section.add "X-Amz-Algorithm", valid_605314
  var valid_605315 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605315 = validateParameter(valid_605315, JString, required = false,
                                 default = nil)
  if valid_605315 != nil:
    section.add "X-Amz-SignedHeaders", valid_605315
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_605316 = formData.getOrDefault("SourceRegion")
  valid_605316 = validateParameter(valid_605316, JString, required = false,
                                 default = nil)
  if valid_605316 != nil:
    section.add "SourceRegion", valid_605316
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterSnapshotIdentifier` field"
  var valid_605317 = formData.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_605317 = validateParameter(valid_605317, JString, required = true,
                                 default = nil)
  if valid_605317 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_605317
  var valid_605318 = formData.getOrDefault("KmsKeyId")
  valid_605318 = validateParameter(valid_605318, JString, required = false,
                                 default = nil)
  if valid_605318 != nil:
    section.add "KmsKeyId", valid_605318
  var valid_605319 = formData.getOrDefault("PreSignedUrl")
  valid_605319 = validateParameter(valid_605319, JString, required = false,
                                 default = nil)
  if valid_605319 != nil:
    section.add "PreSignedUrl", valid_605319
  var valid_605320 = formData.getOrDefault("CopyTags")
  valid_605320 = validateParameter(valid_605320, JBool, required = false, default = nil)
  if valid_605320 != nil:
    section.add "CopyTags", valid_605320
  var valid_605321 = formData.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_605321 = validateParameter(valid_605321, JString, required = true,
                                 default = nil)
  if valid_605321 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_605321
  var valid_605322 = formData.getOrDefault("Tags")
  valid_605322 = validateParameter(valid_605322, JArray, required = false,
                                 default = nil)
  if valid_605322 != nil:
    section.add "Tags", valid_605322
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605323: Call_PostCopyDBClusterSnapshot_605304; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605323.validator(path, query, header, formData, body)
  let scheme = call_605323.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605323.url(scheme.get, call_605323.host, call_605323.base,
                         call_605323.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605323, url, valid)

proc call*(call_605324: Call_PostCopyDBClusterSnapshot_605304;
          SourceDBClusterSnapshotIdentifier: string;
          TargetDBClusterSnapshotIdentifier: string; SourceRegion: string = "";
          KmsKeyId: string = ""; PreSignedUrl: string = ""; CopyTags: bool = false;
          Action: string = "CopyDBClusterSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_605325 = newJObject()
  var formData_605326 = newJObject()
  add(formData_605326, "SourceRegion", newJString(SourceRegion))
  add(formData_605326, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(formData_605326, "KmsKeyId", newJString(KmsKeyId))
  add(formData_605326, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_605326, "CopyTags", newJBool(CopyTags))
  add(formData_605326, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_605325, "Action", newJString(Action))
  if Tags != nil:
    formData_605326.add "Tags", Tags
  add(query_605325, "Version", newJString(Version))
  result = call_605324.call(nil, query_605325, nil, formData_605326, nil)

var postCopyDBClusterSnapshot* = Call_PostCopyDBClusterSnapshot_605304(
    name: "postCopyDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_PostCopyDBClusterSnapshot_605305, base: "/",
    url: url_PostCopyDBClusterSnapshot_605306,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterSnapshot_605282 = ref object of OpenApiRestCall_604389
proc url_GetCopyDBClusterSnapshot_605284(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBClusterSnapshot_605283(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Action: JString (required)
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   Version: JString (required)
  section = newJObject()
  var valid_605285 = query.getOrDefault("Tags")
  valid_605285 = validateParameter(valid_605285, JArray, required = false,
                                 default = nil)
  if valid_605285 != nil:
    section.add "Tags", valid_605285
  var valid_605286 = query.getOrDefault("KmsKeyId")
  valid_605286 = validateParameter(valid_605286, JString, required = false,
                                 default = nil)
  if valid_605286 != nil:
    section.add "KmsKeyId", valid_605286
  var valid_605287 = query.getOrDefault("PreSignedUrl")
  valid_605287 = validateParameter(valid_605287, JString, required = false,
                                 default = nil)
  if valid_605287 != nil:
    section.add "PreSignedUrl", valid_605287
  assert query != nil, "query argument is necessary due to required `TargetDBClusterSnapshotIdentifier` field"
  var valid_605288 = query.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_605288 = validateParameter(valid_605288, JString, required = true,
                                 default = nil)
  if valid_605288 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_605288
  var valid_605289 = query.getOrDefault("SourceRegion")
  valid_605289 = validateParameter(valid_605289, JString, required = false,
                                 default = nil)
  if valid_605289 != nil:
    section.add "SourceRegion", valid_605289
  var valid_605290 = query.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_605290 = validateParameter(valid_605290, JString, required = true,
                                 default = nil)
  if valid_605290 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_605290
  var valid_605291 = query.getOrDefault("Action")
  valid_605291 = validateParameter(valid_605291, JString, required = true,
                                 default = newJString("CopyDBClusterSnapshot"))
  if valid_605291 != nil:
    section.add "Action", valid_605291
  var valid_605292 = query.getOrDefault("CopyTags")
  valid_605292 = validateParameter(valid_605292, JBool, required = false, default = nil)
  if valid_605292 != nil:
    section.add "CopyTags", valid_605292
  var valid_605293 = query.getOrDefault("Version")
  valid_605293 = validateParameter(valid_605293, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605293 != nil:
    section.add "Version", valid_605293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605294 = header.getOrDefault("X-Amz-Signature")
  valid_605294 = validateParameter(valid_605294, JString, required = false,
                                 default = nil)
  if valid_605294 != nil:
    section.add "X-Amz-Signature", valid_605294
  var valid_605295 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605295 = validateParameter(valid_605295, JString, required = false,
                                 default = nil)
  if valid_605295 != nil:
    section.add "X-Amz-Content-Sha256", valid_605295
  var valid_605296 = header.getOrDefault("X-Amz-Date")
  valid_605296 = validateParameter(valid_605296, JString, required = false,
                                 default = nil)
  if valid_605296 != nil:
    section.add "X-Amz-Date", valid_605296
  var valid_605297 = header.getOrDefault("X-Amz-Credential")
  valid_605297 = validateParameter(valid_605297, JString, required = false,
                                 default = nil)
  if valid_605297 != nil:
    section.add "X-Amz-Credential", valid_605297
  var valid_605298 = header.getOrDefault("X-Amz-Security-Token")
  valid_605298 = validateParameter(valid_605298, JString, required = false,
                                 default = nil)
  if valid_605298 != nil:
    section.add "X-Amz-Security-Token", valid_605298
  var valid_605299 = header.getOrDefault("X-Amz-Algorithm")
  valid_605299 = validateParameter(valid_605299, JString, required = false,
                                 default = nil)
  if valid_605299 != nil:
    section.add "X-Amz-Algorithm", valid_605299
  var valid_605300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605300 = validateParameter(valid_605300, JString, required = false,
                                 default = nil)
  if valid_605300 != nil:
    section.add "X-Amz-SignedHeaders", valid_605300
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605301: Call_GetCopyDBClusterSnapshot_605282; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605301.validator(path, query, header, formData, body)
  let scheme = call_605301.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605301.url(scheme.get, call_605301.host, call_605301.base,
                         call_605301.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605301, url, valid)

proc call*(call_605302: Call_GetCopyDBClusterSnapshot_605282;
          TargetDBClusterSnapshotIdentifier: string;
          SourceDBClusterSnapshotIdentifier: string; Tags: JsonNode = nil;
          KmsKeyId: string = ""; PreSignedUrl: string = ""; SourceRegion: string = "";
          Action: string = "CopyDBClusterSnapshot"; CopyTags: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot will be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Action: string (required)
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   Version: string (required)
  var query_605303 = newJObject()
  if Tags != nil:
    query_605303.add "Tags", Tags
  add(query_605303, "KmsKeyId", newJString(KmsKeyId))
  add(query_605303, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_605303, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_605303, "SourceRegion", newJString(SourceRegion))
  add(query_605303, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(query_605303, "Action", newJString(Action))
  add(query_605303, "CopyTags", newJBool(CopyTags))
  add(query_605303, "Version", newJString(Version))
  result = call_605302.call(nil, query_605303, nil, nil, nil)

var getCopyDBClusterSnapshot* = Call_GetCopyDBClusterSnapshot_605282(
    name: "getCopyDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_GetCopyDBClusterSnapshot_605283, base: "/",
    url: url_GetCopyDBClusterSnapshot_605284, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBParameterGroup_605346 = ref object of OpenApiRestCall_604389
proc url_PostCopyDBParameterGroup_605348(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBParameterGroup_605347(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605349 = query.getOrDefault("Action")
  valid_605349 = validateParameter(valid_605349, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_605349 != nil:
    section.add "Action", valid_605349
  var valid_605350 = query.getOrDefault("Version")
  valid_605350 = validateParameter(valid_605350, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605350 != nil:
    section.add "Version", valid_605350
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605351 = header.getOrDefault("X-Amz-Signature")
  valid_605351 = validateParameter(valid_605351, JString, required = false,
                                 default = nil)
  if valid_605351 != nil:
    section.add "X-Amz-Signature", valid_605351
  var valid_605352 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605352 = validateParameter(valid_605352, JString, required = false,
                                 default = nil)
  if valid_605352 != nil:
    section.add "X-Amz-Content-Sha256", valid_605352
  var valid_605353 = header.getOrDefault("X-Amz-Date")
  valid_605353 = validateParameter(valid_605353, JString, required = false,
                                 default = nil)
  if valid_605353 != nil:
    section.add "X-Amz-Date", valid_605353
  var valid_605354 = header.getOrDefault("X-Amz-Credential")
  valid_605354 = validateParameter(valid_605354, JString, required = false,
                                 default = nil)
  if valid_605354 != nil:
    section.add "X-Amz-Credential", valid_605354
  var valid_605355 = header.getOrDefault("X-Amz-Security-Token")
  valid_605355 = validateParameter(valid_605355, JString, required = false,
                                 default = nil)
  if valid_605355 != nil:
    section.add "X-Amz-Security-Token", valid_605355
  var valid_605356 = header.getOrDefault("X-Amz-Algorithm")
  valid_605356 = validateParameter(valid_605356, JString, required = false,
                                 default = nil)
  if valid_605356 != nil:
    section.add "X-Amz-Algorithm", valid_605356
  var valid_605357 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605357 = validateParameter(valid_605357, JString, required = false,
                                 default = nil)
  if valid_605357 != nil:
    section.add "X-Amz-SignedHeaders", valid_605357
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceDBParameterGroupIdentifier` field"
  var valid_605358 = formData.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_605358 = validateParameter(valid_605358, JString, required = true,
                                 default = nil)
  if valid_605358 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_605358
  var valid_605359 = formData.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_605359 = validateParameter(valid_605359, JString, required = true,
                                 default = nil)
  if valid_605359 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_605359
  var valid_605360 = formData.getOrDefault("TargetDBParameterGroupDescription")
  valid_605360 = validateParameter(valid_605360, JString, required = true,
                                 default = nil)
  if valid_605360 != nil:
    section.add "TargetDBParameterGroupDescription", valid_605360
  var valid_605361 = formData.getOrDefault("Tags")
  valid_605361 = validateParameter(valid_605361, JArray, required = false,
                                 default = nil)
  if valid_605361 != nil:
    section.add "Tags", valid_605361
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605362: Call_PostCopyDBParameterGroup_605346; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_605362.validator(path, query, header, formData, body)
  let scheme = call_605362.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605362.url(scheme.get, call_605362.host, call_605362.base,
                         call_605362.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605362, url, valid)

proc call*(call_605363: Call_PostCopyDBParameterGroup_605346;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          Action: string = "CopyDBParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_605364 = newJObject()
  var formData_605365 = newJObject()
  add(formData_605365, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(formData_605365, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  add(formData_605365, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_605364, "Action", newJString(Action))
  if Tags != nil:
    formData_605365.add "Tags", Tags
  add(query_605364, "Version", newJString(Version))
  result = call_605363.call(nil, query_605364, nil, formData_605365, nil)

var postCopyDBParameterGroup* = Call_PostCopyDBParameterGroup_605346(
    name: "postCopyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_PostCopyDBParameterGroup_605347, base: "/",
    url: url_PostCopyDBParameterGroup_605348, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBParameterGroup_605327 = ref object of OpenApiRestCall_604389
proc url_GetCopyDBParameterGroup_605329(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBParameterGroup_605328(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBParameterGroupIdentifier` field"
  var valid_605330 = query.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_605330 = validateParameter(valid_605330, JString, required = true,
                                 default = nil)
  if valid_605330 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_605330
  var valid_605331 = query.getOrDefault("Tags")
  valid_605331 = validateParameter(valid_605331, JArray, required = false,
                                 default = nil)
  if valid_605331 != nil:
    section.add "Tags", valid_605331
  var valid_605332 = query.getOrDefault("TargetDBParameterGroupDescription")
  valid_605332 = validateParameter(valid_605332, JString, required = true,
                                 default = nil)
  if valid_605332 != nil:
    section.add "TargetDBParameterGroupDescription", valid_605332
  var valid_605333 = query.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_605333 = validateParameter(valid_605333, JString, required = true,
                                 default = nil)
  if valid_605333 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_605333
  var valid_605334 = query.getOrDefault("Action")
  valid_605334 = validateParameter(valid_605334, JString, required = true,
                                 default = newJString("CopyDBParameterGroup"))
  if valid_605334 != nil:
    section.add "Action", valid_605334
  var valid_605335 = query.getOrDefault("Version")
  valid_605335 = validateParameter(valid_605335, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605335 != nil:
    section.add "Version", valid_605335
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605336 = header.getOrDefault("X-Amz-Signature")
  valid_605336 = validateParameter(valid_605336, JString, required = false,
                                 default = nil)
  if valid_605336 != nil:
    section.add "X-Amz-Signature", valid_605336
  var valid_605337 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605337 = validateParameter(valid_605337, JString, required = false,
                                 default = nil)
  if valid_605337 != nil:
    section.add "X-Amz-Content-Sha256", valid_605337
  var valid_605338 = header.getOrDefault("X-Amz-Date")
  valid_605338 = validateParameter(valid_605338, JString, required = false,
                                 default = nil)
  if valid_605338 != nil:
    section.add "X-Amz-Date", valid_605338
  var valid_605339 = header.getOrDefault("X-Amz-Credential")
  valid_605339 = validateParameter(valid_605339, JString, required = false,
                                 default = nil)
  if valid_605339 != nil:
    section.add "X-Amz-Credential", valid_605339
  var valid_605340 = header.getOrDefault("X-Amz-Security-Token")
  valid_605340 = validateParameter(valid_605340, JString, required = false,
                                 default = nil)
  if valid_605340 != nil:
    section.add "X-Amz-Security-Token", valid_605340
  var valid_605341 = header.getOrDefault("X-Amz-Algorithm")
  valid_605341 = validateParameter(valid_605341, JString, required = false,
                                 default = nil)
  if valid_605341 != nil:
    section.add "X-Amz-Algorithm", valid_605341
  var valid_605342 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605342 = validateParameter(valid_605342, JString, required = false,
                                 default = nil)
  if valid_605342 != nil:
    section.add "X-Amz-SignedHeaders", valid_605342
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605343: Call_GetCopyDBParameterGroup_605327; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_605343.validator(path, query, header, formData, body)
  let scheme = call_605343.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605343.url(scheme.get, call_605343.host, call_605343.base,
                         call_605343.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605343, url, valid)

proc call*(call_605344: Call_GetCopyDBParameterGroup_605327;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          TargetDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605345 = newJObject()
  add(query_605345, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  if Tags != nil:
    query_605345.add "Tags", Tags
  add(query_605345, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_605345, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  add(query_605345, "Action", newJString(Action))
  add(query_605345, "Version", newJString(Version))
  result = call_605344.call(nil, query_605345, nil, nil, nil)

var getCopyDBParameterGroup* = Call_GetCopyDBParameterGroup_605327(
    name: "getCopyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_GetCopyDBParameterGroup_605328, base: "/",
    url: url_GetCopyDBParameterGroup_605329, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBSnapshot_605389 = ref object of OpenApiRestCall_604389
proc url_PostCopyDBSnapshot_605391(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBSnapshot_605390(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605392 = query.getOrDefault("Action")
  valid_605392 = validateParameter(valid_605392, JString, required = true,
                                 default = newJString("CopyDBSnapshot"))
  if valid_605392 != nil:
    section.add "Action", valid_605392
  var valid_605393 = query.getOrDefault("Version")
  valid_605393 = validateParameter(valid_605393, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605393 != nil:
    section.add "Version", valid_605393
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605394 = header.getOrDefault("X-Amz-Signature")
  valid_605394 = validateParameter(valid_605394, JString, required = false,
                                 default = nil)
  if valid_605394 != nil:
    section.add "X-Amz-Signature", valid_605394
  var valid_605395 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605395 = validateParameter(valid_605395, JString, required = false,
                                 default = nil)
  if valid_605395 != nil:
    section.add "X-Amz-Content-Sha256", valid_605395
  var valid_605396 = header.getOrDefault("X-Amz-Date")
  valid_605396 = validateParameter(valid_605396, JString, required = false,
                                 default = nil)
  if valid_605396 != nil:
    section.add "X-Amz-Date", valid_605396
  var valid_605397 = header.getOrDefault("X-Amz-Credential")
  valid_605397 = validateParameter(valid_605397, JString, required = false,
                                 default = nil)
  if valid_605397 != nil:
    section.add "X-Amz-Credential", valid_605397
  var valid_605398 = header.getOrDefault("X-Amz-Security-Token")
  valid_605398 = validateParameter(valid_605398, JString, required = false,
                                 default = nil)
  if valid_605398 != nil:
    section.add "X-Amz-Security-Token", valid_605398
  var valid_605399 = header.getOrDefault("X-Amz-Algorithm")
  valid_605399 = validateParameter(valid_605399, JString, required = false,
                                 default = nil)
  if valid_605399 != nil:
    section.add "X-Amz-Algorithm", valid_605399
  var valid_605400 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605400 = validateParameter(valid_605400, JString, required = false,
                                 default = nil)
  if valid_605400 != nil:
    section.add "X-Amz-SignedHeaders", valid_605400
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   SourceDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  section = newJObject()
  var valid_605401 = formData.getOrDefault("SourceRegion")
  valid_605401 = validateParameter(valid_605401, JString, required = false,
                                 default = nil)
  if valid_605401 != nil:
    section.add "SourceRegion", valid_605401
  var valid_605402 = formData.getOrDefault("KmsKeyId")
  valid_605402 = validateParameter(valid_605402, JString, required = false,
                                 default = nil)
  if valid_605402 != nil:
    section.add "KmsKeyId", valid_605402
  assert formData != nil, "formData argument is necessary due to required `SourceDBSnapshotIdentifier` field"
  var valid_605403 = formData.getOrDefault("SourceDBSnapshotIdentifier")
  valid_605403 = validateParameter(valid_605403, JString, required = true,
                                 default = nil)
  if valid_605403 != nil:
    section.add "SourceDBSnapshotIdentifier", valid_605403
  var valid_605404 = formData.getOrDefault("CopyTags")
  valid_605404 = validateParameter(valid_605404, JBool, required = false, default = nil)
  if valid_605404 != nil:
    section.add "CopyTags", valid_605404
  var valid_605405 = formData.getOrDefault("PreSignedUrl")
  valid_605405 = validateParameter(valid_605405, JString, required = false,
                                 default = nil)
  if valid_605405 != nil:
    section.add "PreSignedUrl", valid_605405
  var valid_605406 = formData.getOrDefault("Tags")
  valid_605406 = validateParameter(valid_605406, JArray, required = false,
                                 default = nil)
  if valid_605406 != nil:
    section.add "Tags", valid_605406
  var valid_605407 = formData.getOrDefault("TargetDBSnapshotIdentifier")
  valid_605407 = validateParameter(valid_605407, JString, required = true,
                                 default = nil)
  if valid_605407 != nil:
    section.add "TargetDBSnapshotIdentifier", valid_605407
  var valid_605408 = formData.getOrDefault("OptionGroupName")
  valid_605408 = validateParameter(valid_605408, JString, required = false,
                                 default = nil)
  if valid_605408 != nil:
    section.add "OptionGroupName", valid_605408
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605409: Call_PostCopyDBSnapshot_605389; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_605409.validator(path, query, header, formData, body)
  let scheme = call_605409.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605409.url(scheme.get, call_605409.host, call_605409.base,
                         call_605409.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605409, url, valid)

proc call*(call_605410: Call_PostCopyDBSnapshot_605389;
          SourceDBSnapshotIdentifier: string; TargetDBSnapshotIdentifier: string;
          SourceRegion: string = ""; KmsKeyId: string = ""; CopyTags: bool = false;
          PreSignedUrl: string = ""; Action: string = "CopyDBSnapshot";
          Tags: JsonNode = nil; OptionGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBSnapshot
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   SourceDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_605411 = newJObject()
  var formData_605412 = newJObject()
  add(formData_605412, "SourceRegion", newJString(SourceRegion))
  add(formData_605412, "KmsKeyId", newJString(KmsKeyId))
  add(formData_605412, "SourceDBSnapshotIdentifier",
      newJString(SourceDBSnapshotIdentifier))
  add(formData_605412, "CopyTags", newJBool(CopyTags))
  add(formData_605412, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_605411, "Action", newJString(Action))
  if Tags != nil:
    formData_605412.add "Tags", Tags
  add(formData_605412, "TargetDBSnapshotIdentifier",
      newJString(TargetDBSnapshotIdentifier))
  add(formData_605412, "OptionGroupName", newJString(OptionGroupName))
  add(query_605411, "Version", newJString(Version))
  result = call_605410.call(nil, query_605411, nil, formData_605412, nil)

var postCopyDBSnapshot* = Call_PostCopyDBSnapshot_605389(
    name: "postCopyDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBSnapshot",
    validator: validate_PostCopyDBSnapshot_605390, base: "/",
    url: url_PostCopyDBSnapshot_605391, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBSnapshot_605366 = ref object of OpenApiRestCall_604389
proc url_GetCopyDBSnapshot_605368(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBSnapshot_605367(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   Action: JString (required)
  ##   OptionGroupName: JString
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   TargetDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBSnapshotIdentifier` field"
  var valid_605369 = query.getOrDefault("SourceDBSnapshotIdentifier")
  valid_605369 = validateParameter(valid_605369, JString, required = true,
                                 default = nil)
  if valid_605369 != nil:
    section.add "SourceDBSnapshotIdentifier", valid_605369
  var valid_605370 = query.getOrDefault("Tags")
  valid_605370 = validateParameter(valid_605370, JArray, required = false,
                                 default = nil)
  if valid_605370 != nil:
    section.add "Tags", valid_605370
  var valid_605371 = query.getOrDefault("KmsKeyId")
  valid_605371 = validateParameter(valid_605371, JString, required = false,
                                 default = nil)
  if valid_605371 != nil:
    section.add "KmsKeyId", valid_605371
  var valid_605372 = query.getOrDefault("PreSignedUrl")
  valid_605372 = validateParameter(valid_605372, JString, required = false,
                                 default = nil)
  if valid_605372 != nil:
    section.add "PreSignedUrl", valid_605372
  var valid_605373 = query.getOrDefault("SourceRegion")
  valid_605373 = validateParameter(valid_605373, JString, required = false,
                                 default = nil)
  if valid_605373 != nil:
    section.add "SourceRegion", valid_605373
  var valid_605374 = query.getOrDefault("Action")
  valid_605374 = validateParameter(valid_605374, JString, required = true,
                                 default = newJString("CopyDBSnapshot"))
  if valid_605374 != nil:
    section.add "Action", valid_605374
  var valid_605375 = query.getOrDefault("OptionGroupName")
  valid_605375 = validateParameter(valid_605375, JString, required = false,
                                 default = nil)
  if valid_605375 != nil:
    section.add "OptionGroupName", valid_605375
  var valid_605376 = query.getOrDefault("CopyTags")
  valid_605376 = validateParameter(valid_605376, JBool, required = false, default = nil)
  if valid_605376 != nil:
    section.add "CopyTags", valid_605376
  var valid_605377 = query.getOrDefault("TargetDBSnapshotIdentifier")
  valid_605377 = validateParameter(valid_605377, JString, required = true,
                                 default = nil)
  if valid_605377 != nil:
    section.add "TargetDBSnapshotIdentifier", valid_605377
  var valid_605378 = query.getOrDefault("Version")
  valid_605378 = validateParameter(valid_605378, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605378 != nil:
    section.add "Version", valid_605378
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605379 = header.getOrDefault("X-Amz-Signature")
  valid_605379 = validateParameter(valid_605379, JString, required = false,
                                 default = nil)
  if valid_605379 != nil:
    section.add "X-Amz-Signature", valid_605379
  var valid_605380 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605380 = validateParameter(valid_605380, JString, required = false,
                                 default = nil)
  if valid_605380 != nil:
    section.add "X-Amz-Content-Sha256", valid_605380
  var valid_605381 = header.getOrDefault("X-Amz-Date")
  valid_605381 = validateParameter(valid_605381, JString, required = false,
                                 default = nil)
  if valid_605381 != nil:
    section.add "X-Amz-Date", valid_605381
  var valid_605382 = header.getOrDefault("X-Amz-Credential")
  valid_605382 = validateParameter(valid_605382, JString, required = false,
                                 default = nil)
  if valid_605382 != nil:
    section.add "X-Amz-Credential", valid_605382
  var valid_605383 = header.getOrDefault("X-Amz-Security-Token")
  valid_605383 = validateParameter(valid_605383, JString, required = false,
                                 default = nil)
  if valid_605383 != nil:
    section.add "X-Amz-Security-Token", valid_605383
  var valid_605384 = header.getOrDefault("X-Amz-Algorithm")
  valid_605384 = validateParameter(valid_605384, JString, required = false,
                                 default = nil)
  if valid_605384 != nil:
    section.add "X-Amz-Algorithm", valid_605384
  var valid_605385 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605385 = validateParameter(valid_605385, JString, required = false,
                                 default = nil)
  if valid_605385 != nil:
    section.add "X-Amz-SignedHeaders", valid_605385
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605386: Call_GetCopyDBSnapshot_605366; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_605386.validator(path, query, header, formData, body)
  let scheme = call_605386.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605386.url(scheme.get, call_605386.host, call_605386.base,
                         call_605386.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605386, url, valid)

proc call*(call_605387: Call_GetCopyDBSnapshot_605366;
          SourceDBSnapshotIdentifier: string; TargetDBSnapshotIdentifier: string;
          Tags: JsonNode = nil; KmsKeyId: string = ""; PreSignedUrl: string = "";
          SourceRegion: string = ""; Action: string = "CopyDBSnapshot";
          OptionGroupName: string = ""; CopyTags: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBSnapshot
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   TargetDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   Version: string (required)
  var query_605388 = newJObject()
  add(query_605388, "SourceDBSnapshotIdentifier",
      newJString(SourceDBSnapshotIdentifier))
  if Tags != nil:
    query_605388.add "Tags", Tags
  add(query_605388, "KmsKeyId", newJString(KmsKeyId))
  add(query_605388, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_605388, "SourceRegion", newJString(SourceRegion))
  add(query_605388, "Action", newJString(Action))
  add(query_605388, "OptionGroupName", newJString(OptionGroupName))
  add(query_605388, "CopyTags", newJBool(CopyTags))
  add(query_605388, "TargetDBSnapshotIdentifier",
      newJString(TargetDBSnapshotIdentifier))
  add(query_605388, "Version", newJString(Version))
  result = call_605387.call(nil, query_605388, nil, nil, nil)

var getCopyDBSnapshot* = Call_GetCopyDBSnapshot_605366(name: "getCopyDBSnapshot",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CopyDBSnapshot", validator: validate_GetCopyDBSnapshot_605367,
    base: "/", url: url_GetCopyDBSnapshot_605368,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyOptionGroup_605432 = ref object of OpenApiRestCall_604389
proc url_PostCopyOptionGroup_605434(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyOptionGroup_605433(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Copies the specified option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605435 = query.getOrDefault("Action")
  valid_605435 = validateParameter(valid_605435, JString, required = true,
                                 default = newJString("CopyOptionGroup"))
  if valid_605435 != nil:
    section.add "Action", valid_605435
  var valid_605436 = query.getOrDefault("Version")
  valid_605436 = validateParameter(valid_605436, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605436 != nil:
    section.add "Version", valid_605436
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605437 = header.getOrDefault("X-Amz-Signature")
  valid_605437 = validateParameter(valid_605437, JString, required = false,
                                 default = nil)
  if valid_605437 != nil:
    section.add "X-Amz-Signature", valid_605437
  var valid_605438 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605438 = validateParameter(valid_605438, JString, required = false,
                                 default = nil)
  if valid_605438 != nil:
    section.add "X-Amz-Content-Sha256", valid_605438
  var valid_605439 = header.getOrDefault("X-Amz-Date")
  valid_605439 = validateParameter(valid_605439, JString, required = false,
                                 default = nil)
  if valid_605439 != nil:
    section.add "X-Amz-Date", valid_605439
  var valid_605440 = header.getOrDefault("X-Amz-Credential")
  valid_605440 = validateParameter(valid_605440, JString, required = false,
                                 default = nil)
  if valid_605440 != nil:
    section.add "X-Amz-Credential", valid_605440
  var valid_605441 = header.getOrDefault("X-Amz-Security-Token")
  valid_605441 = validateParameter(valid_605441, JString, required = false,
                                 default = nil)
  if valid_605441 != nil:
    section.add "X-Amz-Security-Token", valid_605441
  var valid_605442 = header.getOrDefault("X-Amz-Algorithm")
  valid_605442 = validateParameter(valid_605442, JString, required = false,
                                 default = nil)
  if valid_605442 != nil:
    section.add "X-Amz-Algorithm", valid_605442
  var valid_605443 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605443 = validateParameter(valid_605443, JString, required = false,
                                 default = nil)
  if valid_605443 != nil:
    section.add "X-Amz-SignedHeaders", valid_605443
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   TargetOptionGroupDescription: JString (required)
  ##                               : The description for the copied option group.
  ##   SourceOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetOptionGroupIdentifier` field"
  var valid_605444 = formData.getOrDefault("TargetOptionGroupIdentifier")
  valid_605444 = validateParameter(valid_605444, JString, required = true,
                                 default = nil)
  if valid_605444 != nil:
    section.add "TargetOptionGroupIdentifier", valid_605444
  var valid_605445 = formData.getOrDefault("TargetOptionGroupDescription")
  valid_605445 = validateParameter(valid_605445, JString, required = true,
                                 default = nil)
  if valid_605445 != nil:
    section.add "TargetOptionGroupDescription", valid_605445
  var valid_605446 = formData.getOrDefault("SourceOptionGroupIdentifier")
  valid_605446 = validateParameter(valid_605446, JString, required = true,
                                 default = nil)
  if valid_605446 != nil:
    section.add "SourceOptionGroupIdentifier", valid_605446
  var valid_605447 = formData.getOrDefault("Tags")
  valid_605447 = validateParameter(valid_605447, JArray, required = false,
                                 default = nil)
  if valid_605447 != nil:
    section.add "Tags", valid_605447
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605448: Call_PostCopyOptionGroup_605432; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified option group.
  ## 
  let valid = call_605448.validator(path, query, header, formData, body)
  let scheme = call_605448.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605448.url(scheme.get, call_605448.host, call_605448.base,
                         call_605448.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605448, url, valid)

proc call*(call_605449: Call_PostCopyOptionGroup_605432;
          TargetOptionGroupIdentifier: string;
          TargetOptionGroupDescription: string;
          SourceOptionGroupIdentifier: string; Action: string = "CopyOptionGroup";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCopyOptionGroup
  ## Copies the specified option group.
  ##   TargetOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   TargetOptionGroupDescription: string (required)
  ##                               : The description for the copied option group.
  ##   SourceOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_605450 = newJObject()
  var formData_605451 = newJObject()
  add(formData_605451, "TargetOptionGroupIdentifier",
      newJString(TargetOptionGroupIdentifier))
  add(formData_605451, "TargetOptionGroupDescription",
      newJString(TargetOptionGroupDescription))
  add(formData_605451, "SourceOptionGroupIdentifier",
      newJString(SourceOptionGroupIdentifier))
  add(query_605450, "Action", newJString(Action))
  if Tags != nil:
    formData_605451.add "Tags", Tags
  add(query_605450, "Version", newJString(Version))
  result = call_605449.call(nil, query_605450, nil, formData_605451, nil)

var postCopyOptionGroup* = Call_PostCopyOptionGroup_605432(
    name: "postCopyOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyOptionGroup",
    validator: validate_PostCopyOptionGroup_605433, base: "/",
    url: url_PostCopyOptionGroup_605434, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyOptionGroup_605413 = ref object of OpenApiRestCall_604389
proc url_GetCopyOptionGroup_605415(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyOptionGroup_605414(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Copies the specified option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetOptionGroupDescription: JString (required)
  ##                               : The description for the copied option group.
  ##   Action: JString (required)
  ##   TargetOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   Version: JString (required)
  ##   SourceOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  section = newJObject()
  var valid_605416 = query.getOrDefault("Tags")
  valid_605416 = validateParameter(valid_605416, JArray, required = false,
                                 default = nil)
  if valid_605416 != nil:
    section.add "Tags", valid_605416
  assert query != nil, "query argument is necessary due to required `TargetOptionGroupDescription` field"
  var valid_605417 = query.getOrDefault("TargetOptionGroupDescription")
  valid_605417 = validateParameter(valid_605417, JString, required = true,
                                 default = nil)
  if valid_605417 != nil:
    section.add "TargetOptionGroupDescription", valid_605417
  var valid_605418 = query.getOrDefault("Action")
  valid_605418 = validateParameter(valid_605418, JString, required = true,
                                 default = newJString("CopyOptionGroup"))
  if valid_605418 != nil:
    section.add "Action", valid_605418
  var valid_605419 = query.getOrDefault("TargetOptionGroupIdentifier")
  valid_605419 = validateParameter(valid_605419, JString, required = true,
                                 default = nil)
  if valid_605419 != nil:
    section.add "TargetOptionGroupIdentifier", valid_605419
  var valid_605420 = query.getOrDefault("Version")
  valid_605420 = validateParameter(valid_605420, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605420 != nil:
    section.add "Version", valid_605420
  var valid_605421 = query.getOrDefault("SourceOptionGroupIdentifier")
  valid_605421 = validateParameter(valid_605421, JString, required = true,
                                 default = nil)
  if valid_605421 != nil:
    section.add "SourceOptionGroupIdentifier", valid_605421
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605422 = header.getOrDefault("X-Amz-Signature")
  valid_605422 = validateParameter(valid_605422, JString, required = false,
                                 default = nil)
  if valid_605422 != nil:
    section.add "X-Amz-Signature", valid_605422
  var valid_605423 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605423 = validateParameter(valid_605423, JString, required = false,
                                 default = nil)
  if valid_605423 != nil:
    section.add "X-Amz-Content-Sha256", valid_605423
  var valid_605424 = header.getOrDefault("X-Amz-Date")
  valid_605424 = validateParameter(valid_605424, JString, required = false,
                                 default = nil)
  if valid_605424 != nil:
    section.add "X-Amz-Date", valid_605424
  var valid_605425 = header.getOrDefault("X-Amz-Credential")
  valid_605425 = validateParameter(valid_605425, JString, required = false,
                                 default = nil)
  if valid_605425 != nil:
    section.add "X-Amz-Credential", valid_605425
  var valid_605426 = header.getOrDefault("X-Amz-Security-Token")
  valid_605426 = validateParameter(valid_605426, JString, required = false,
                                 default = nil)
  if valid_605426 != nil:
    section.add "X-Amz-Security-Token", valid_605426
  var valid_605427 = header.getOrDefault("X-Amz-Algorithm")
  valid_605427 = validateParameter(valid_605427, JString, required = false,
                                 default = nil)
  if valid_605427 != nil:
    section.add "X-Amz-Algorithm", valid_605427
  var valid_605428 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605428 = validateParameter(valid_605428, JString, required = false,
                                 default = nil)
  if valid_605428 != nil:
    section.add "X-Amz-SignedHeaders", valid_605428
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605429: Call_GetCopyOptionGroup_605413; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Copies the specified option group.
  ## 
  let valid = call_605429.validator(path, query, header, formData, body)
  let scheme = call_605429.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605429.url(scheme.get, call_605429.host, call_605429.base,
                         call_605429.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605429, url, valid)

proc call*(call_605430: Call_GetCopyOptionGroup_605413;
          TargetOptionGroupDescription: string;
          TargetOptionGroupIdentifier: string;
          SourceOptionGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyOptionGroup
  ## Copies the specified option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetOptionGroupDescription: string (required)
  ##                               : The description for the copied option group.
  ##   Action: string (required)
  ##   TargetOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   Version: string (required)
  ##   SourceOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  var query_605431 = newJObject()
  if Tags != nil:
    query_605431.add "Tags", Tags
  add(query_605431, "TargetOptionGroupDescription",
      newJString(TargetOptionGroupDescription))
  add(query_605431, "Action", newJString(Action))
  add(query_605431, "TargetOptionGroupIdentifier",
      newJString(TargetOptionGroupIdentifier))
  add(query_605431, "Version", newJString(Version))
  add(query_605431, "SourceOptionGroupIdentifier",
      newJString(SourceOptionGroupIdentifier))
  result = call_605430.call(nil, query_605431, nil, nil, nil)

var getCopyOptionGroup* = Call_GetCopyOptionGroup_605413(
    name: "getCopyOptionGroup", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CopyOptionGroup", validator: validate_GetCopyOptionGroup_605414,
    base: "/", url: url_GetCopyOptionGroup_605415,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCustomAvailabilityZone_605471 = ref object of OpenApiRestCall_604389
proc url_PostCreateCustomAvailabilityZone_605473(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCustomAvailabilityZone_605472(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605474 = query.getOrDefault("Action")
  valid_605474 = validateParameter(valid_605474, JString, required = true, default = newJString(
      "CreateCustomAvailabilityZone"))
  if valid_605474 != nil:
    section.add "Action", valid_605474
  var valid_605475 = query.getOrDefault("Version")
  valid_605475 = validateParameter(valid_605475, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605475 != nil:
    section.add "Version", valid_605475
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605476 = header.getOrDefault("X-Amz-Signature")
  valid_605476 = validateParameter(valid_605476, JString, required = false,
                                 default = nil)
  if valid_605476 != nil:
    section.add "X-Amz-Signature", valid_605476
  var valid_605477 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605477 = validateParameter(valid_605477, JString, required = false,
                                 default = nil)
  if valid_605477 != nil:
    section.add "X-Amz-Content-Sha256", valid_605477
  var valid_605478 = header.getOrDefault("X-Amz-Date")
  valid_605478 = validateParameter(valid_605478, JString, required = false,
                                 default = nil)
  if valid_605478 != nil:
    section.add "X-Amz-Date", valid_605478
  var valid_605479 = header.getOrDefault("X-Amz-Credential")
  valid_605479 = validateParameter(valid_605479, JString, required = false,
                                 default = nil)
  if valid_605479 != nil:
    section.add "X-Amz-Credential", valid_605479
  var valid_605480 = header.getOrDefault("X-Amz-Security-Token")
  valid_605480 = validateParameter(valid_605480, JString, required = false,
                                 default = nil)
  if valid_605480 != nil:
    section.add "X-Amz-Security-Token", valid_605480
  var valid_605481 = header.getOrDefault("X-Amz-Algorithm")
  valid_605481 = validateParameter(valid_605481, JString, required = false,
                                 default = nil)
  if valid_605481 != nil:
    section.add "X-Amz-Algorithm", valid_605481
  var valid_605482 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605482 = validateParameter(valid_605482, JString, required = false,
                                 default = nil)
  if valid_605482 != nil:
    section.add "X-Amz-SignedHeaders", valid_605482
  result.add "header", section
  ## parameters in `formData` object:
  ##   VpnTunnelOriginatorIP: JString
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: JString
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   NewVpnTunnelName: JString
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   CustomAvailabilityZoneName: JString (required)
  ##                             : The name of the custom Availability Zone (AZ).
  section = newJObject()
  var valid_605483 = formData.getOrDefault("VpnTunnelOriginatorIP")
  valid_605483 = validateParameter(valid_605483, JString, required = false,
                                 default = nil)
  if valid_605483 != nil:
    section.add "VpnTunnelOriginatorIP", valid_605483
  var valid_605484 = formData.getOrDefault("ExistingVpnId")
  valid_605484 = validateParameter(valid_605484, JString, required = false,
                                 default = nil)
  if valid_605484 != nil:
    section.add "ExistingVpnId", valid_605484
  var valid_605485 = formData.getOrDefault("NewVpnTunnelName")
  valid_605485 = validateParameter(valid_605485, JString, required = false,
                                 default = nil)
  if valid_605485 != nil:
    section.add "NewVpnTunnelName", valid_605485
  assert formData != nil, "formData argument is necessary due to required `CustomAvailabilityZoneName` field"
  var valid_605486 = formData.getOrDefault("CustomAvailabilityZoneName")
  valid_605486 = validateParameter(valid_605486, JString, required = true,
                                 default = nil)
  if valid_605486 != nil:
    section.add "CustomAvailabilityZoneName", valid_605486
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605487: Call_PostCreateCustomAvailabilityZone_605471;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_605487.validator(path, query, header, formData, body)
  let scheme = call_605487.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605487.url(scheme.get, call_605487.host, call_605487.base,
                         call_605487.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605487, url, valid)

proc call*(call_605488: Call_PostCreateCustomAvailabilityZone_605471;
          CustomAvailabilityZoneName: string; VpnTunnelOriginatorIP: string = "";
          ExistingVpnId: string = ""; NewVpnTunnelName: string = "";
          Action: string = "CreateCustomAvailabilityZone";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateCustomAvailabilityZone
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   VpnTunnelOriginatorIP: string
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: string
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   NewVpnTunnelName: string
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneName: string (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   Version: string (required)
  var query_605489 = newJObject()
  var formData_605490 = newJObject()
  add(formData_605490, "VpnTunnelOriginatorIP", newJString(VpnTunnelOriginatorIP))
  add(formData_605490, "ExistingVpnId", newJString(ExistingVpnId))
  add(formData_605490, "NewVpnTunnelName", newJString(NewVpnTunnelName))
  add(query_605489, "Action", newJString(Action))
  add(formData_605490, "CustomAvailabilityZoneName",
      newJString(CustomAvailabilityZoneName))
  add(query_605489, "Version", newJString(Version))
  result = call_605488.call(nil, query_605489, nil, formData_605490, nil)

var postCreateCustomAvailabilityZone* = Call_PostCreateCustomAvailabilityZone_605471(
    name: "postCreateCustomAvailabilityZone", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateCustomAvailabilityZone",
    validator: validate_PostCreateCustomAvailabilityZone_605472, base: "/",
    url: url_PostCreateCustomAvailabilityZone_605473,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCustomAvailabilityZone_605452 = ref object of OpenApiRestCall_604389
proc url_GetCreateCustomAvailabilityZone_605454(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCustomAvailabilityZone_605453(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VpnTunnelOriginatorIP: JString
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: JString
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   Action: JString (required)
  ##   CustomAvailabilityZoneName: JString (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   Version: JString (required)
  ##   NewVpnTunnelName: JString
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  section = newJObject()
  var valid_605455 = query.getOrDefault("VpnTunnelOriginatorIP")
  valid_605455 = validateParameter(valid_605455, JString, required = false,
                                 default = nil)
  if valid_605455 != nil:
    section.add "VpnTunnelOriginatorIP", valid_605455
  var valid_605456 = query.getOrDefault("ExistingVpnId")
  valid_605456 = validateParameter(valid_605456, JString, required = false,
                                 default = nil)
  if valid_605456 != nil:
    section.add "ExistingVpnId", valid_605456
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605457 = query.getOrDefault("Action")
  valid_605457 = validateParameter(valid_605457, JString, required = true, default = newJString(
      "CreateCustomAvailabilityZone"))
  if valid_605457 != nil:
    section.add "Action", valid_605457
  var valid_605458 = query.getOrDefault("CustomAvailabilityZoneName")
  valid_605458 = validateParameter(valid_605458, JString, required = true,
                                 default = nil)
  if valid_605458 != nil:
    section.add "CustomAvailabilityZoneName", valid_605458
  var valid_605459 = query.getOrDefault("Version")
  valid_605459 = validateParameter(valid_605459, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605459 != nil:
    section.add "Version", valid_605459
  var valid_605460 = query.getOrDefault("NewVpnTunnelName")
  valid_605460 = validateParameter(valid_605460, JString, required = false,
                                 default = nil)
  if valid_605460 != nil:
    section.add "NewVpnTunnelName", valid_605460
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605461 = header.getOrDefault("X-Amz-Signature")
  valid_605461 = validateParameter(valid_605461, JString, required = false,
                                 default = nil)
  if valid_605461 != nil:
    section.add "X-Amz-Signature", valid_605461
  var valid_605462 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605462 = validateParameter(valid_605462, JString, required = false,
                                 default = nil)
  if valid_605462 != nil:
    section.add "X-Amz-Content-Sha256", valid_605462
  var valid_605463 = header.getOrDefault("X-Amz-Date")
  valid_605463 = validateParameter(valid_605463, JString, required = false,
                                 default = nil)
  if valid_605463 != nil:
    section.add "X-Amz-Date", valid_605463
  var valid_605464 = header.getOrDefault("X-Amz-Credential")
  valid_605464 = validateParameter(valid_605464, JString, required = false,
                                 default = nil)
  if valid_605464 != nil:
    section.add "X-Amz-Credential", valid_605464
  var valid_605465 = header.getOrDefault("X-Amz-Security-Token")
  valid_605465 = validateParameter(valid_605465, JString, required = false,
                                 default = nil)
  if valid_605465 != nil:
    section.add "X-Amz-Security-Token", valid_605465
  var valid_605466 = header.getOrDefault("X-Amz-Algorithm")
  valid_605466 = validateParameter(valid_605466, JString, required = false,
                                 default = nil)
  if valid_605466 != nil:
    section.add "X-Amz-Algorithm", valid_605466
  var valid_605467 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605467 = validateParameter(valid_605467, JString, required = false,
                                 default = nil)
  if valid_605467 != nil:
    section.add "X-Amz-SignedHeaders", valid_605467
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605468: Call_GetCreateCustomAvailabilityZone_605452;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_605468.validator(path, query, header, formData, body)
  let scheme = call_605468.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605468.url(scheme.get, call_605468.host, call_605468.base,
                         call_605468.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605468, url, valid)

proc call*(call_605469: Call_GetCreateCustomAvailabilityZone_605452;
          CustomAvailabilityZoneName: string; VpnTunnelOriginatorIP: string = "";
          ExistingVpnId: string = "";
          Action: string = "CreateCustomAvailabilityZone";
          Version: string = "2014-10-31"; NewVpnTunnelName: string = ""): Recallable =
  ## getCreateCustomAvailabilityZone
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   VpnTunnelOriginatorIP: string
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: string
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   Action: string (required)
  ##   CustomAvailabilityZoneName: string (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   Version: string (required)
  ##   NewVpnTunnelName: string
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  var query_605470 = newJObject()
  add(query_605470, "VpnTunnelOriginatorIP", newJString(VpnTunnelOriginatorIP))
  add(query_605470, "ExistingVpnId", newJString(ExistingVpnId))
  add(query_605470, "Action", newJString(Action))
  add(query_605470, "CustomAvailabilityZoneName",
      newJString(CustomAvailabilityZoneName))
  add(query_605470, "Version", newJString(Version))
  add(query_605470, "NewVpnTunnelName", newJString(NewVpnTunnelName))
  result = call_605469.call(nil, query_605470, nil, nil, nil)

var getCreateCustomAvailabilityZone* = Call_GetCreateCustomAvailabilityZone_605452(
    name: "getCreateCustomAvailabilityZone", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateCustomAvailabilityZone",
    validator: validate_GetCreateCustomAvailabilityZone_605453, base: "/",
    url: url_GetCreateCustomAvailabilityZone_605454,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBCluster_605559 = ref object of OpenApiRestCall_604389
proc url_PostCreateDBCluster_605561(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBCluster_605560(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605562 = query.getOrDefault("Action")
  valid_605562 = validateParameter(valid_605562, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_605562 != nil:
    section.add "Action", valid_605562
  var valid_605563 = query.getOrDefault("Version")
  valid_605563 = validateParameter(valid_605563, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605563 != nil:
    section.add "Version", valid_605563
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_605564 = header.getOrDefault("X-Amz-Security-Token")
  valid_605564 = validateParameter(valid_605564, JString, required = false,
                                 default = nil)
  if valid_605564 != nil:
    section.add "X-Amz-Security-Token", valid_605564
  var valid_605565 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605565 = validateParameter(valid_605565, JString, required = false,
                                 default = nil)
  if valid_605565 != nil:
    section.add "X-Amz-SignedHeaders", valid_605565
  var valid_605566 = header.getOrDefault("X-Amz-Signature")
  valid_605566 = validateParameter(valid_605566, JString, required = false,
                                 default = nil)
  if valid_605566 != nil:
    section.add "X-Amz-Signature", valid_605566
  var valid_605567 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605567 = validateParameter(valid_605567, JString, required = false,
                                 default = nil)
  if valid_605567 != nil:
    section.add "X-Amz-Content-Sha256", valid_605567
  var valid_605568 = header.getOrDefault("X-Amz-Date")
  valid_605568 = validateParameter(valid_605568, JString, required = false,
                                 default = nil)
  if valid_605568 != nil:
    section.add "X-Amz-Date", valid_605568
  var valid_605569 = header.getOrDefault("X-Amz-Credential")
  valid_605569 = validateParameter(valid_605569, JString, required = false,
                                 default = nil)
  if valid_605569 != nil:
    section.add "X-Amz-Credential", valid_605569
  var valid_605570 = header.getOrDefault("X-Amz-Algorithm")
  valid_605570 = validateParameter(valid_605570, JString, required = false,
                                 default = nil)
  if valid_605570 != nil:
    section.add "X-Amz-Algorithm", valid_605570
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   GlobalClusterIdentifier: JString
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   EngineMode: JString
  ##             : <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p> <ul> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations"> Limitations of Aurora Serverless</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations"> Limitations of Parallel Query</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations"> Requirements for Aurora Global Databases</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations"> Limitations of Multi-Master Clusters</a> </p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   PreSignedUrl: JString
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  section = newJObject()
  var valid_605571 = formData.getOrDefault("Port")
  valid_605571 = validateParameter(valid_605571, JInt, required = false, default = nil)
  if valid_605571 != nil:
    section.add "Port", valid_605571
  var valid_605572 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_605572 = validateParameter(valid_605572, JString, required = false,
                                 default = nil)
  if valid_605572 != nil:
    section.add "GlobalClusterIdentifier", valid_605572
  var valid_605573 = formData.getOrDefault("MasterUsername")
  valid_605573 = validateParameter(valid_605573, JString, required = false,
                                 default = nil)
  if valid_605573 != nil:
    section.add "MasterUsername", valid_605573
  var valid_605574 = formData.getOrDefault("DatabaseName")
  valid_605574 = validateParameter(valid_605574, JString, required = false,
                                 default = nil)
  if valid_605574 != nil:
    section.add "DatabaseName", valid_605574
  var valid_605575 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_605575 = validateParameter(valid_605575, JArray, required = false,
                                 default = nil)
  if valid_605575 != nil:
    section.add "VpcSecurityGroupIds", valid_605575
  var valid_605576 = formData.getOrDefault("AvailabilityZones")
  valid_605576 = validateParameter(valid_605576, JArray, required = false,
                                 default = nil)
  if valid_605576 != nil:
    section.add "AvailabilityZones", valid_605576
  var valid_605577 = formData.getOrDefault("EngineMode")
  valid_605577 = validateParameter(valid_605577, JString, required = false,
                                 default = nil)
  if valid_605577 != nil:
    section.add "EngineMode", valid_605577
  var valid_605578 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_605578 = validateParameter(valid_605578, JArray, required = false,
                                 default = nil)
  if valid_605578 != nil:
    section.add "EnableCloudwatchLogsExports", valid_605578
  var valid_605579 = formData.getOrDefault("DBSubnetGroupName")
  valid_605579 = validateParameter(valid_605579, JString, required = false,
                                 default = nil)
  if valid_605579 != nil:
    section.add "DBSubnetGroupName", valid_605579
  var valid_605580 = formData.getOrDefault("CharacterSetName")
  valid_605580 = validateParameter(valid_605580, JString, required = false,
                                 default = nil)
  if valid_605580 != nil:
    section.add "CharacterSetName", valid_605580
  var valid_605581 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_605581 = validateParameter(valid_605581, JString, required = false,
                                 default = nil)
  if valid_605581 != nil:
    section.add "DBClusterParameterGroupName", valid_605581
  var valid_605582 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_605582 = validateParameter(valid_605582, JBool, required = false, default = nil)
  if valid_605582 != nil:
    section.add "CopyTagsToSnapshot", valid_605582
  var valid_605583 = formData.getOrDefault("DeletionProtection")
  valid_605583 = validateParameter(valid_605583, JBool, required = false, default = nil)
  if valid_605583 != nil:
    section.add "DeletionProtection", valid_605583
  var valid_605584 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_605584 = validateParameter(valid_605584, JString, required = false,
                                 default = nil)
  if valid_605584 != nil:
    section.add "PreferredMaintenanceWindow", valid_605584
  var valid_605585 = formData.getOrDefault("PreferredBackupWindow")
  valid_605585 = validateParameter(valid_605585, JString, required = false,
                                 default = nil)
  if valid_605585 != nil:
    section.add "PreferredBackupWindow", valid_605585
  var valid_605586 = formData.getOrDefault("MasterUserPassword")
  valid_605586 = validateParameter(valid_605586, JString, required = false,
                                 default = nil)
  if valid_605586 != nil:
    section.add "MasterUserPassword", valid_605586
  var valid_605587 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_605587 = validateParameter(valid_605587, JString, required = false,
                                 default = nil)
  if valid_605587 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_605587
  var valid_605588 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_605588 = validateParameter(valid_605588, JString, required = false,
                                 default = nil)
  if valid_605588 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_605588
  var valid_605589 = formData.getOrDefault("SourceRegion")
  valid_605589 = validateParameter(valid_605589, JString, required = false,
                                 default = nil)
  if valid_605589 != nil:
    section.add "SourceRegion", valid_605589
  var valid_605590 = formData.getOrDefault("EngineVersion")
  valid_605590 = validateParameter(valid_605590, JString, required = false,
                                 default = nil)
  if valid_605590 != nil:
    section.add "EngineVersion", valid_605590
  var valid_605591 = formData.getOrDefault("BacktrackWindow")
  valid_605591 = validateParameter(valid_605591, JInt, required = false, default = nil)
  if valid_605591 != nil:
    section.add "BacktrackWindow", valid_605591
  var valid_605592 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_605592 = validateParameter(valid_605592, JBool, required = false, default = nil)
  if valid_605592 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_605592
  var valid_605593 = formData.getOrDefault("BackupRetentionPeriod")
  valid_605593 = validateParameter(valid_605593, JInt, required = false, default = nil)
  if valid_605593 != nil:
    section.add "BackupRetentionPeriod", valid_605593
  var valid_605594 = formData.getOrDefault("KmsKeyId")
  valid_605594 = validateParameter(valid_605594, JString, required = false,
                                 default = nil)
  if valid_605594 != nil:
    section.add "KmsKeyId", valid_605594
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_605595 = formData.getOrDefault("Engine")
  valid_605595 = validateParameter(valid_605595, JString, required = true,
                                 default = nil)
  if valid_605595 != nil:
    section.add "Engine", valid_605595
  var valid_605596 = formData.getOrDefault("PreSignedUrl")
  valid_605596 = validateParameter(valid_605596, JString, required = false,
                                 default = nil)
  if valid_605596 != nil:
    section.add "PreSignedUrl", valid_605596
  var valid_605597 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_605597 = validateParameter(valid_605597, JString, required = false,
                                 default = nil)
  if valid_605597 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_605597
  var valid_605598 = formData.getOrDefault("Tags")
  valid_605598 = validateParameter(valid_605598, JArray, required = false,
                                 default = nil)
  if valid_605598 != nil:
    section.add "Tags", valid_605598
  var valid_605599 = formData.getOrDefault("EnableHttpEndpoint")
  valid_605599 = validateParameter(valid_605599, JBool, required = false, default = nil)
  if valid_605599 != nil:
    section.add "EnableHttpEndpoint", valid_605599
  var valid_605600 = formData.getOrDefault("OptionGroupName")
  valid_605600 = validateParameter(valid_605600, JString, required = false,
                                 default = nil)
  if valid_605600 != nil:
    section.add "OptionGroupName", valid_605600
  var valid_605601 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_605601 = validateParameter(valid_605601, JString, required = false,
                                 default = nil)
  if valid_605601 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_605601
  var valid_605602 = formData.getOrDefault("ReplicationSourceIdentifier")
  valid_605602 = validateParameter(valid_605602, JString, required = false,
                                 default = nil)
  if valid_605602 != nil:
    section.add "ReplicationSourceIdentifier", valid_605602
  var valid_605603 = formData.getOrDefault("StorageEncrypted")
  valid_605603 = validateParameter(valid_605603, JBool, required = false, default = nil)
  if valid_605603 != nil:
    section.add "StorageEncrypted", valid_605603
  var valid_605604 = formData.getOrDefault("DBClusterIdentifier")
  valid_605604 = validateParameter(valid_605604, JString, required = true,
                                 default = nil)
  if valid_605604 != nil:
    section.add "DBClusterIdentifier", valid_605604
  var valid_605605 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_605605 = validateParameter(valid_605605, JString, required = false,
                                 default = nil)
  if valid_605605 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_605605
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605606: Call_PostCreateDBCluster_605559; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605606.validator(path, query, header, formData, body)
  let scheme = call_605606.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605606.url(scheme.get, call_605606.host, call_605606.base,
                         call_605606.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605606, url, valid)

proc call*(call_605607: Call_PostCreateDBCluster_605559; Engine: string;
          DBClusterIdentifier: string; Port: int = 0;
          GlobalClusterIdentifier: string = ""; MasterUsername: string = "";
          DatabaseName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZones: JsonNode = nil; EngineMode: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBCluster"; DBSubnetGroupName: string = "";
          CharacterSetName: string = ""; DBClusterParameterGroupName: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          ScalingConfigurationTimeoutAction: string = ""; SourceRegion: string = "";
          EngineVersion: string = ""; BacktrackWindow: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          PreSignedUrl: string = ""; ScalingConfigurationMaxCapacity: string = "";
          Tags: JsonNode = nil; EnableHttpEndpoint: bool = false;
          OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          ReplicationSourceIdentifier: string = ""; Version: string = "2014-10-31";
          StorageEncrypted: bool = false; ScalingConfigurationAutoPause: string = ""): Recallable =
  ## postCreateDBCluster
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   GlobalClusterIdentifier: string
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   EngineMode: string
  ##             : <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p> <ul> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations"> Limitations of Aurora Serverless</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations"> Limitations of Parallel Query</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations"> Requirements for Aurora Global Databases</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations"> Limitations of Multi-Master Clusters</a> </p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   PreSignedUrl: string
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  var query_605608 = newJObject()
  var formData_605609 = newJObject()
  add(formData_605609, "Port", newJInt(Port))
  add(formData_605609, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_605609, "MasterUsername", newJString(MasterUsername))
  add(formData_605609, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_605609.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if AvailabilityZones != nil:
    formData_605609.add "AvailabilityZones", AvailabilityZones
  add(formData_605609, "EngineMode", newJString(EngineMode))
  if EnableCloudwatchLogsExports != nil:
    formData_605609.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_605608, "Action", newJString(Action))
  add(formData_605609, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_605609, "CharacterSetName", newJString(CharacterSetName))
  add(formData_605609, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_605609, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_605609, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_605609, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_605609, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_605609, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_605609, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_605609, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_605609, "SourceRegion", newJString(SourceRegion))
  add(formData_605609, "EngineVersion", newJString(EngineVersion))
  add(formData_605609, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_605609, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_605609, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_605609, "KmsKeyId", newJString(KmsKeyId))
  add(formData_605609, "Engine", newJString(Engine))
  add(formData_605609, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_605609, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  if Tags != nil:
    formData_605609.add "Tags", Tags
  add(formData_605609, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(formData_605609, "OptionGroupName", newJString(OptionGroupName))
  add(formData_605609, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_605609, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_605608, "Version", newJString(Version))
  add(formData_605609, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_605609, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_605609, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  result = call_605607.call(nil, query_605608, nil, formData_605609, nil)

var postCreateDBCluster* = Call_PostCreateDBCluster_605559(
    name: "postCreateDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBCluster",
    validator: validate_PostCreateDBCluster_605560, base: "/",
    url: url_PostCreateDBCluster_605561, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBCluster_605491 = ref object of OpenApiRestCall_604389
proc url_GetCreateDBCluster_605493(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBCluster_605492(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   PreSignedUrl: JString
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   EngineMode: JString
  ##             : <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p> <ul> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations"> Limitations of Aurora Serverless</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations"> Limitations of Parallel Query</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations"> Requirements for Aurora Global Databases</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations"> Limitations of Multi-Master Clusters</a> </p> </li> </ul>
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: JString (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Version: JString (required)
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  section = newJObject()
  var valid_605512 = query.getOrDefault("GlobalClusterIdentifier")
  valid_605512 = validateParameter(valid_605512, JString, required = false,
                                 default = nil)
  if valid_605512 != nil:
    section.add "GlobalClusterIdentifier", valid_605512
  var valid_605513 = query.getOrDefault("DatabaseName")
  valid_605513 = validateParameter(valid_605513, JString, required = false,
                                 default = nil)
  if valid_605513 != nil:
    section.add "DatabaseName", valid_605513
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_605514 = query.getOrDefault("Engine")
  valid_605514 = validateParameter(valid_605514, JString, required = true,
                                 default = nil)
  if valid_605514 != nil:
    section.add "Engine", valid_605514
  var valid_605515 = query.getOrDefault("CopyTagsToSnapshot")
  valid_605515 = validateParameter(valid_605515, JBool, required = false, default = nil)
  if valid_605515 != nil:
    section.add "CopyTagsToSnapshot", valid_605515
  var valid_605516 = query.getOrDefault("EnableHttpEndpoint")
  valid_605516 = validateParameter(valid_605516, JBool, required = false, default = nil)
  if valid_605516 != nil:
    section.add "EnableHttpEndpoint", valid_605516
  var valid_605517 = query.getOrDefault("KmsKeyId")
  valid_605517 = validateParameter(valid_605517, JString, required = false,
                                 default = nil)
  if valid_605517 != nil:
    section.add "KmsKeyId", valid_605517
  var valid_605518 = query.getOrDefault("PreSignedUrl")
  valid_605518 = validateParameter(valid_605518, JString, required = false,
                                 default = nil)
  if valid_605518 != nil:
    section.add "PreSignedUrl", valid_605518
  var valid_605519 = query.getOrDefault("EngineMode")
  valid_605519 = validateParameter(valid_605519, JString, required = false,
                                 default = nil)
  if valid_605519 != nil:
    section.add "EngineMode", valid_605519
  var valid_605520 = query.getOrDefault("MasterUsername")
  valid_605520 = validateParameter(valid_605520, JString, required = false,
                                 default = nil)
  if valid_605520 != nil:
    section.add "MasterUsername", valid_605520
  var valid_605521 = query.getOrDefault("BackupRetentionPeriod")
  valid_605521 = validateParameter(valid_605521, JInt, required = false, default = nil)
  if valid_605521 != nil:
    section.add "BackupRetentionPeriod", valid_605521
  var valid_605522 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_605522 = validateParameter(valid_605522, JString, required = false,
                                 default = nil)
  if valid_605522 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_605522
  var valid_605523 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_605523 = validateParameter(valid_605523, JArray, required = false,
                                 default = nil)
  if valid_605523 != nil:
    section.add "EnableCloudwatchLogsExports", valid_605523
  var valid_605524 = query.getOrDefault("EngineVersion")
  valid_605524 = validateParameter(valid_605524, JString, required = false,
                                 default = nil)
  if valid_605524 != nil:
    section.add "EngineVersion", valid_605524
  var valid_605525 = query.getOrDefault("Action")
  valid_605525 = validateParameter(valid_605525, JString, required = true,
                                 default = newJString("CreateDBCluster"))
  if valid_605525 != nil:
    section.add "Action", valid_605525
  var valid_605526 = query.getOrDefault("VpcSecurityGroupIds")
  valid_605526 = validateParameter(valid_605526, JArray, required = false,
                                 default = nil)
  if valid_605526 != nil:
    section.add "VpcSecurityGroupIds", valid_605526
  var valid_605527 = query.getOrDefault("StorageEncrypted")
  valid_605527 = validateParameter(valid_605527, JBool, required = false, default = nil)
  if valid_605527 != nil:
    section.add "StorageEncrypted", valid_605527
  var valid_605528 = query.getOrDefault("DeletionProtection")
  valid_605528 = validateParameter(valid_605528, JBool, required = false, default = nil)
  if valid_605528 != nil:
    section.add "DeletionProtection", valid_605528
  var valid_605529 = query.getOrDefault("CharacterSetName")
  valid_605529 = validateParameter(valid_605529, JString, required = false,
                                 default = nil)
  if valid_605529 != nil:
    section.add "CharacterSetName", valid_605529
  var valid_605530 = query.getOrDefault("Tags")
  valid_605530 = validateParameter(valid_605530, JArray, required = false,
                                 default = nil)
  if valid_605530 != nil:
    section.add "Tags", valid_605530
  var valid_605531 = query.getOrDefault("DBClusterIdentifier")
  valid_605531 = validateParameter(valid_605531, JString, required = true,
                                 default = nil)
  if valid_605531 != nil:
    section.add "DBClusterIdentifier", valid_605531
  var valid_605532 = query.getOrDefault("BacktrackWindow")
  valid_605532 = validateParameter(valid_605532, JInt, required = false, default = nil)
  if valid_605532 != nil:
    section.add "BacktrackWindow", valid_605532
  var valid_605533 = query.getOrDefault("DBClusterParameterGroupName")
  valid_605533 = validateParameter(valid_605533, JString, required = false,
                                 default = nil)
  if valid_605533 != nil:
    section.add "DBClusterParameterGroupName", valid_605533
  var valid_605534 = query.getOrDefault("AvailabilityZones")
  valid_605534 = validateParameter(valid_605534, JArray, required = false,
                                 default = nil)
  if valid_605534 != nil:
    section.add "AvailabilityZones", valid_605534
  var valid_605535 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_605535 = validateParameter(valid_605535, JString, required = false,
                                 default = nil)
  if valid_605535 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_605535
  var valid_605536 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_605536 = validateParameter(valid_605536, JString, required = false,
                                 default = nil)
  if valid_605536 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_605536
  var valid_605537 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_605537 = validateParameter(valid_605537, JBool, required = false, default = nil)
  if valid_605537 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_605537
  var valid_605538 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_605538 = validateParameter(valid_605538, JString, required = false,
                                 default = nil)
  if valid_605538 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_605538
  var valid_605539 = query.getOrDefault("SourceRegion")
  valid_605539 = validateParameter(valid_605539, JString, required = false,
                                 default = nil)
  if valid_605539 != nil:
    section.add "SourceRegion", valid_605539
  var valid_605540 = query.getOrDefault("Port")
  valid_605540 = validateParameter(valid_605540, JInt, required = false, default = nil)
  if valid_605540 != nil:
    section.add "Port", valid_605540
  var valid_605541 = query.getOrDefault("ReplicationSourceIdentifier")
  valid_605541 = validateParameter(valid_605541, JString, required = false,
                                 default = nil)
  if valid_605541 != nil:
    section.add "ReplicationSourceIdentifier", valid_605541
  var valid_605542 = query.getOrDefault("MasterUserPassword")
  valid_605542 = validateParameter(valid_605542, JString, required = false,
                                 default = nil)
  if valid_605542 != nil:
    section.add "MasterUserPassword", valid_605542
  var valid_605543 = query.getOrDefault("OptionGroupName")
  valid_605543 = validateParameter(valid_605543, JString, required = false,
                                 default = nil)
  if valid_605543 != nil:
    section.add "OptionGroupName", valid_605543
  var valid_605544 = query.getOrDefault("DBSubnetGroupName")
  valid_605544 = validateParameter(valid_605544, JString, required = false,
                                 default = nil)
  if valid_605544 != nil:
    section.add "DBSubnetGroupName", valid_605544
  var valid_605545 = query.getOrDefault("PreferredBackupWindow")
  valid_605545 = validateParameter(valid_605545, JString, required = false,
                                 default = nil)
  if valid_605545 != nil:
    section.add "PreferredBackupWindow", valid_605545
  var valid_605546 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_605546 = validateParameter(valid_605546, JString, required = false,
                                 default = nil)
  if valid_605546 != nil:
    section.add "PreferredMaintenanceWindow", valid_605546
  var valid_605547 = query.getOrDefault("Version")
  valid_605547 = validateParameter(valid_605547, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605547 != nil:
    section.add "Version", valid_605547
  var valid_605548 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_605548 = validateParameter(valid_605548, JString, required = false,
                                 default = nil)
  if valid_605548 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_605548
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_605549 = header.getOrDefault("X-Amz-Security-Token")
  valid_605549 = validateParameter(valid_605549, JString, required = false,
                                 default = nil)
  if valid_605549 != nil:
    section.add "X-Amz-Security-Token", valid_605549
  var valid_605550 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605550 = validateParameter(valid_605550, JString, required = false,
                                 default = nil)
  if valid_605550 != nil:
    section.add "X-Amz-SignedHeaders", valid_605550
  var valid_605551 = header.getOrDefault("X-Amz-Signature")
  valid_605551 = validateParameter(valid_605551, JString, required = false,
                                 default = nil)
  if valid_605551 != nil:
    section.add "X-Amz-Signature", valid_605551
  var valid_605552 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605552 = validateParameter(valid_605552, JString, required = false,
                                 default = nil)
  if valid_605552 != nil:
    section.add "X-Amz-Content-Sha256", valid_605552
  var valid_605553 = header.getOrDefault("X-Amz-Date")
  valid_605553 = validateParameter(valid_605553, JString, required = false,
                                 default = nil)
  if valid_605553 != nil:
    section.add "X-Amz-Date", valid_605553
  var valid_605554 = header.getOrDefault("X-Amz-Credential")
  valid_605554 = validateParameter(valid_605554, JString, required = false,
                                 default = nil)
  if valid_605554 != nil:
    section.add "X-Amz-Credential", valid_605554
  var valid_605555 = header.getOrDefault("X-Amz-Algorithm")
  valid_605555 = validateParameter(valid_605555, JString, required = false,
                                 default = nil)
  if valid_605555 != nil:
    section.add "X-Amz-Algorithm", valid_605555
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605556: Call_GetCreateDBCluster_605491; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605556.validator(path, query, header, formData, body)
  let scheme = call_605556.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605556.url(scheme.get, call_605556.host, call_605556.base,
                         call_605556.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605556, url, valid)

proc call*(call_605557: Call_GetCreateDBCluster_605491; Engine: string;
          DBClusterIdentifier: string; GlobalClusterIdentifier: string = "";
          DatabaseName: string = ""; CopyTagsToSnapshot: bool = false;
          EnableHttpEndpoint: bool = false; KmsKeyId: string = "";
          PreSignedUrl: string = ""; EngineMode: string = "";
          MasterUsername: string = ""; BackupRetentionPeriod: int = 0;
          ScalingConfigurationMinCapacity: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "CreateDBCluster"; VpcSecurityGroupIds: JsonNode = nil;
          StorageEncrypted: bool = false; DeletionProtection: bool = false;
          CharacterSetName: string = ""; Tags: JsonNode = nil; BacktrackWindow: int = 0;
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          SourceRegion: string = ""; Port: int = 0;
          ReplicationSourceIdentifier: string = ""; MasterUserPassword: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationMaxCapacity: string = ""): Recallable =
  ## getCreateDBCluster
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   PreSignedUrl: string
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   EngineMode: string
  ##             : <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p> <ul> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations"> Limitations of Aurora Serverless</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations"> Limitations of Parallel Query</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations"> Requirements for Aurora Global Databases</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations"> Limitations of Multi-Master Clusters</a> </p> </li> </ul>
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: string (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Version: string (required)
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  var query_605558 = newJObject()
  add(query_605558, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_605558, "DatabaseName", newJString(DatabaseName))
  add(query_605558, "Engine", newJString(Engine))
  add(query_605558, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_605558, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(query_605558, "KmsKeyId", newJString(KmsKeyId))
  add(query_605558, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_605558, "EngineMode", newJString(EngineMode))
  add(query_605558, "MasterUsername", newJString(MasterUsername))
  add(query_605558, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_605558, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  if EnableCloudwatchLogsExports != nil:
    query_605558.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_605558, "EngineVersion", newJString(EngineVersion))
  add(query_605558, "Action", newJString(Action))
  if VpcSecurityGroupIds != nil:
    query_605558.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_605558, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_605558, "DeletionProtection", newJBool(DeletionProtection))
  add(query_605558, "CharacterSetName", newJString(CharacterSetName))
  if Tags != nil:
    query_605558.add "Tags", Tags
  add(query_605558, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_605558, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_605558, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_605558.add "AvailabilityZones", AvailabilityZones
  add(query_605558, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_605558, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_605558, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_605558, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_605558, "SourceRegion", newJString(SourceRegion))
  add(query_605558, "Port", newJInt(Port))
  add(query_605558, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_605558, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_605558, "OptionGroupName", newJString(OptionGroupName))
  add(query_605558, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_605558, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_605558, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_605558, "Version", newJString(Version))
  add(query_605558, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  result = call_605557.call(nil, query_605558, nil, nil, nil)

var getCreateDBCluster* = Call_GetCreateDBCluster_605491(
    name: "getCreateDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBCluster", validator: validate_GetCreateDBCluster_605492,
    base: "/", url: url_GetCreateDBCluster_605493,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterEndpoint_605631 = ref object of OpenApiRestCall_604389
proc url_PostCreateDBClusterEndpoint_605633(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterEndpoint_605632(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605634 = query.getOrDefault("Action")
  valid_605634 = validateParameter(valid_605634, JString, required = true, default = newJString(
      "CreateDBClusterEndpoint"))
  if valid_605634 != nil:
    section.add "Action", valid_605634
  var valid_605635 = query.getOrDefault("Version")
  valid_605635 = validateParameter(valid_605635, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605635 != nil:
    section.add "Version", valid_605635
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605636 = header.getOrDefault("X-Amz-Signature")
  valid_605636 = validateParameter(valid_605636, JString, required = false,
                                 default = nil)
  if valid_605636 != nil:
    section.add "X-Amz-Signature", valid_605636
  var valid_605637 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605637 = validateParameter(valid_605637, JString, required = false,
                                 default = nil)
  if valid_605637 != nil:
    section.add "X-Amz-Content-Sha256", valid_605637
  var valid_605638 = header.getOrDefault("X-Amz-Date")
  valid_605638 = validateParameter(valid_605638, JString, required = false,
                                 default = nil)
  if valid_605638 != nil:
    section.add "X-Amz-Date", valid_605638
  var valid_605639 = header.getOrDefault("X-Amz-Credential")
  valid_605639 = validateParameter(valid_605639, JString, required = false,
                                 default = nil)
  if valid_605639 != nil:
    section.add "X-Amz-Credential", valid_605639
  var valid_605640 = header.getOrDefault("X-Amz-Security-Token")
  valid_605640 = validateParameter(valid_605640, JString, required = false,
                                 default = nil)
  if valid_605640 != nil:
    section.add "X-Amz-Security-Token", valid_605640
  var valid_605641 = header.getOrDefault("X-Amz-Algorithm")
  valid_605641 = validateParameter(valid_605641, JString, required = false,
                                 default = nil)
  if valid_605641 != nil:
    section.add "X-Amz-Algorithm", valid_605641
  var valid_605642 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605642 = validateParameter(valid_605642, JString, required = false,
                                 default = nil)
  if valid_605642 != nil:
    section.add "X-Amz-SignedHeaders", valid_605642
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_605643 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_605643 = validateParameter(valid_605643, JString, required = true,
                                 default = nil)
  if valid_605643 != nil:
    section.add "DBClusterEndpointIdentifier", valid_605643
  var valid_605644 = formData.getOrDefault("StaticMembers")
  valid_605644 = validateParameter(valid_605644, JArray, required = false,
                                 default = nil)
  if valid_605644 != nil:
    section.add "StaticMembers", valid_605644
  var valid_605645 = formData.getOrDefault("EndpointType")
  valid_605645 = validateParameter(valid_605645, JString, required = true,
                                 default = nil)
  if valid_605645 != nil:
    section.add "EndpointType", valid_605645
  var valid_605646 = formData.getOrDefault("ExcludedMembers")
  valid_605646 = validateParameter(valid_605646, JArray, required = false,
                                 default = nil)
  if valid_605646 != nil:
    section.add "ExcludedMembers", valid_605646
  var valid_605647 = formData.getOrDefault("Tags")
  valid_605647 = validateParameter(valid_605647, JArray, required = false,
                                 default = nil)
  if valid_605647 != nil:
    section.add "Tags", valid_605647
  var valid_605648 = formData.getOrDefault("DBClusterIdentifier")
  valid_605648 = validateParameter(valid_605648, JString, required = true,
                                 default = nil)
  if valid_605648 != nil:
    section.add "DBClusterIdentifier", valid_605648
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605649: Call_PostCreateDBClusterEndpoint_605631; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605649.validator(path, query, header, formData, body)
  let scheme = call_605649.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605649.url(scheme.get, call_605649.host, call_605649.base,
                         call_605649.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605649, url, valid)

proc call*(call_605650: Call_PostCreateDBClusterEndpoint_605631;
          DBClusterEndpointIdentifier: string; EndpointType: string;
          DBClusterIdentifier: string; StaticMembers: JsonNode = nil;
          Action: string = "CreateDBClusterEndpoint";
          ExcludedMembers: JsonNode = nil; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterEndpoint
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: string (required)
  ##   EndpointType: string (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  var query_605651 = newJObject()
  var formData_605652 = newJObject()
  add(formData_605652, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    formData_605652.add "StaticMembers", StaticMembers
  add(query_605651, "Action", newJString(Action))
  add(formData_605652, "EndpointType", newJString(EndpointType))
  if ExcludedMembers != nil:
    formData_605652.add "ExcludedMembers", ExcludedMembers
  if Tags != nil:
    formData_605652.add "Tags", Tags
  add(query_605651, "Version", newJString(Version))
  add(formData_605652, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_605650.call(nil, query_605651, nil, formData_605652, nil)

var postCreateDBClusterEndpoint* = Call_PostCreateDBClusterEndpoint_605631(
    name: "postCreateDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterEndpoint",
    validator: validate_PostCreateDBClusterEndpoint_605632, base: "/",
    url: url_PostCreateDBClusterEndpoint_605633,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterEndpoint_605610 = ref object of OpenApiRestCall_604389
proc url_GetCreateDBClusterEndpoint_605612(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterEndpoint_605611(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_605613 = query.getOrDefault("ExcludedMembers")
  valid_605613 = validateParameter(valid_605613, JArray, required = false,
                                 default = nil)
  if valid_605613 != nil:
    section.add "ExcludedMembers", valid_605613
  var valid_605614 = query.getOrDefault("Tags")
  valid_605614 = validateParameter(valid_605614, JArray, required = false,
                                 default = nil)
  if valid_605614 != nil:
    section.add "Tags", valid_605614
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_605615 = query.getOrDefault("DBClusterIdentifier")
  valid_605615 = validateParameter(valid_605615, JString, required = true,
                                 default = nil)
  if valid_605615 != nil:
    section.add "DBClusterIdentifier", valid_605615
  var valid_605616 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_605616 = validateParameter(valid_605616, JString, required = true,
                                 default = nil)
  if valid_605616 != nil:
    section.add "DBClusterEndpointIdentifier", valid_605616
  var valid_605617 = query.getOrDefault("StaticMembers")
  valid_605617 = validateParameter(valid_605617, JArray, required = false,
                                 default = nil)
  if valid_605617 != nil:
    section.add "StaticMembers", valid_605617
  var valid_605618 = query.getOrDefault("EndpointType")
  valid_605618 = validateParameter(valid_605618, JString, required = true,
                                 default = nil)
  if valid_605618 != nil:
    section.add "EndpointType", valid_605618
  var valid_605619 = query.getOrDefault("Action")
  valid_605619 = validateParameter(valid_605619, JString, required = true, default = newJString(
      "CreateDBClusterEndpoint"))
  if valid_605619 != nil:
    section.add "Action", valid_605619
  var valid_605620 = query.getOrDefault("Version")
  valid_605620 = validateParameter(valid_605620, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605620 != nil:
    section.add "Version", valid_605620
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605621 = header.getOrDefault("X-Amz-Signature")
  valid_605621 = validateParameter(valid_605621, JString, required = false,
                                 default = nil)
  if valid_605621 != nil:
    section.add "X-Amz-Signature", valid_605621
  var valid_605622 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605622 = validateParameter(valid_605622, JString, required = false,
                                 default = nil)
  if valid_605622 != nil:
    section.add "X-Amz-Content-Sha256", valid_605622
  var valid_605623 = header.getOrDefault("X-Amz-Date")
  valid_605623 = validateParameter(valid_605623, JString, required = false,
                                 default = nil)
  if valid_605623 != nil:
    section.add "X-Amz-Date", valid_605623
  var valid_605624 = header.getOrDefault("X-Amz-Credential")
  valid_605624 = validateParameter(valid_605624, JString, required = false,
                                 default = nil)
  if valid_605624 != nil:
    section.add "X-Amz-Credential", valid_605624
  var valid_605625 = header.getOrDefault("X-Amz-Security-Token")
  valid_605625 = validateParameter(valid_605625, JString, required = false,
                                 default = nil)
  if valid_605625 != nil:
    section.add "X-Amz-Security-Token", valid_605625
  var valid_605626 = header.getOrDefault("X-Amz-Algorithm")
  valid_605626 = validateParameter(valid_605626, JString, required = false,
                                 default = nil)
  if valid_605626 != nil:
    section.add "X-Amz-Algorithm", valid_605626
  var valid_605627 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605627 = validateParameter(valid_605627, JString, required = false,
                                 default = nil)
  if valid_605627 != nil:
    section.add "X-Amz-SignedHeaders", valid_605627
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605628: Call_GetCreateDBClusterEndpoint_605610; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605628.validator(path, query, header, formData, body)
  let scheme = call_605628.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605628.url(scheme.get, call_605628.host, call_605628.base,
                         call_605628.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605628, url, valid)

proc call*(call_605629: Call_GetCreateDBClusterEndpoint_605610;
          DBClusterIdentifier: string; DBClusterEndpointIdentifier: string;
          EndpointType: string; ExcludedMembers: JsonNode = nil; Tags: JsonNode = nil;
          StaticMembers: JsonNode = nil; Action: string = "CreateDBClusterEndpoint";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterEndpoint
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: string (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605630 = newJObject()
  if ExcludedMembers != nil:
    query_605630.add "ExcludedMembers", ExcludedMembers
  if Tags != nil:
    query_605630.add "Tags", Tags
  add(query_605630, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_605630, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    query_605630.add "StaticMembers", StaticMembers
  add(query_605630, "EndpointType", newJString(EndpointType))
  add(query_605630, "Action", newJString(Action))
  add(query_605630, "Version", newJString(Version))
  result = call_605629.call(nil, query_605630, nil, nil, nil)

var getCreateDBClusterEndpoint* = Call_GetCreateDBClusterEndpoint_605610(
    name: "getCreateDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterEndpoint",
    validator: validate_GetCreateDBClusterEndpoint_605611, base: "/",
    url: url_GetCreateDBClusterEndpoint_605612,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterParameterGroup_605672 = ref object of OpenApiRestCall_604389
proc url_PostCreateDBClusterParameterGroup_605674(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterParameterGroup_605673(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605675 = query.getOrDefault("Action")
  valid_605675 = validateParameter(valid_605675, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_605675 != nil:
    section.add "Action", valid_605675
  var valid_605676 = query.getOrDefault("Version")
  valid_605676 = validateParameter(valid_605676, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605676 != nil:
    section.add "Version", valid_605676
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605677 = header.getOrDefault("X-Amz-Signature")
  valid_605677 = validateParameter(valid_605677, JString, required = false,
                                 default = nil)
  if valid_605677 != nil:
    section.add "X-Amz-Signature", valid_605677
  var valid_605678 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605678 = validateParameter(valid_605678, JString, required = false,
                                 default = nil)
  if valid_605678 != nil:
    section.add "X-Amz-Content-Sha256", valid_605678
  var valid_605679 = header.getOrDefault("X-Amz-Date")
  valid_605679 = validateParameter(valid_605679, JString, required = false,
                                 default = nil)
  if valid_605679 != nil:
    section.add "X-Amz-Date", valid_605679
  var valid_605680 = header.getOrDefault("X-Amz-Credential")
  valid_605680 = validateParameter(valid_605680, JString, required = false,
                                 default = nil)
  if valid_605680 != nil:
    section.add "X-Amz-Credential", valid_605680
  var valid_605681 = header.getOrDefault("X-Amz-Security-Token")
  valid_605681 = validateParameter(valid_605681, JString, required = false,
                                 default = nil)
  if valid_605681 != nil:
    section.add "X-Amz-Security-Token", valid_605681
  var valid_605682 = header.getOrDefault("X-Amz-Algorithm")
  valid_605682 = validateParameter(valid_605682, JString, required = false,
                                 default = nil)
  if valid_605682 != nil:
    section.add "X-Amz-Algorithm", valid_605682
  var valid_605683 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605683 = validateParameter(valid_605683, JString, required = false,
                                 default = nil)
  if valid_605683 != nil:
    section.add "X-Amz-SignedHeaders", valid_605683
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_605684 = formData.getOrDefault("Description")
  valid_605684 = validateParameter(valid_605684, JString, required = true,
                                 default = nil)
  if valid_605684 != nil:
    section.add "Description", valid_605684
  var valid_605685 = formData.getOrDefault("Tags")
  valid_605685 = validateParameter(valid_605685, JArray, required = false,
                                 default = nil)
  if valid_605685 != nil:
    section.add "Tags", valid_605685
  var valid_605686 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_605686 = validateParameter(valid_605686, JString, required = true,
                                 default = nil)
  if valid_605686 != nil:
    section.add "DBClusterParameterGroupName", valid_605686
  var valid_605687 = formData.getOrDefault("DBParameterGroupFamily")
  valid_605687 = validateParameter(valid_605687, JString, required = true,
                                 default = nil)
  if valid_605687 != nil:
    section.add "DBParameterGroupFamily", valid_605687
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605688: Call_PostCreateDBClusterParameterGroup_605672;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605688.validator(path, query, header, formData, body)
  let scheme = call_605688.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605688.url(scheme.get, call_605688.host, call_605688.base,
                         call_605688.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605688, url, valid)

proc call*(call_605689: Call_PostCreateDBClusterParameterGroup_605672;
          Description: string; DBClusterParameterGroupName: string;
          DBParameterGroupFamily: string;
          Action: string = "CreateDBClusterParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  var query_605690 = newJObject()
  var formData_605691 = newJObject()
  add(formData_605691, "Description", newJString(Description))
  add(query_605690, "Action", newJString(Action))
  if Tags != nil:
    formData_605691.add "Tags", Tags
  add(formData_605691, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_605690, "Version", newJString(Version))
  add(formData_605691, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_605689.call(nil, query_605690, nil, formData_605691, nil)

var postCreateDBClusterParameterGroup* = Call_PostCreateDBClusterParameterGroup_605672(
    name: "postCreateDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_PostCreateDBClusterParameterGroup_605673, base: "/",
    url: url_PostCreateDBClusterParameterGroup_605674,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterParameterGroup_605653 = ref object of OpenApiRestCall_604389
proc url_GetCreateDBClusterParameterGroup_605655(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterParameterGroup_605654(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_605656 = query.getOrDefault("DBParameterGroupFamily")
  valid_605656 = validateParameter(valid_605656, JString, required = true,
                                 default = nil)
  if valid_605656 != nil:
    section.add "DBParameterGroupFamily", valid_605656
  var valid_605657 = query.getOrDefault("Tags")
  valid_605657 = validateParameter(valid_605657, JArray, required = false,
                                 default = nil)
  if valid_605657 != nil:
    section.add "Tags", valid_605657
  var valid_605658 = query.getOrDefault("DBClusterParameterGroupName")
  valid_605658 = validateParameter(valid_605658, JString, required = true,
                                 default = nil)
  if valid_605658 != nil:
    section.add "DBClusterParameterGroupName", valid_605658
  var valid_605659 = query.getOrDefault("Action")
  valid_605659 = validateParameter(valid_605659, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_605659 != nil:
    section.add "Action", valid_605659
  var valid_605660 = query.getOrDefault("Description")
  valid_605660 = validateParameter(valid_605660, JString, required = true,
                                 default = nil)
  if valid_605660 != nil:
    section.add "Description", valid_605660
  var valid_605661 = query.getOrDefault("Version")
  valid_605661 = validateParameter(valid_605661, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605661 != nil:
    section.add "Version", valid_605661
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605662 = header.getOrDefault("X-Amz-Signature")
  valid_605662 = validateParameter(valid_605662, JString, required = false,
                                 default = nil)
  if valid_605662 != nil:
    section.add "X-Amz-Signature", valid_605662
  var valid_605663 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605663 = validateParameter(valid_605663, JString, required = false,
                                 default = nil)
  if valid_605663 != nil:
    section.add "X-Amz-Content-Sha256", valid_605663
  var valid_605664 = header.getOrDefault("X-Amz-Date")
  valid_605664 = validateParameter(valid_605664, JString, required = false,
                                 default = nil)
  if valid_605664 != nil:
    section.add "X-Amz-Date", valid_605664
  var valid_605665 = header.getOrDefault("X-Amz-Credential")
  valid_605665 = validateParameter(valid_605665, JString, required = false,
                                 default = nil)
  if valid_605665 != nil:
    section.add "X-Amz-Credential", valid_605665
  var valid_605666 = header.getOrDefault("X-Amz-Security-Token")
  valid_605666 = validateParameter(valid_605666, JString, required = false,
                                 default = nil)
  if valid_605666 != nil:
    section.add "X-Amz-Security-Token", valid_605666
  var valid_605667 = header.getOrDefault("X-Amz-Algorithm")
  valid_605667 = validateParameter(valid_605667, JString, required = false,
                                 default = nil)
  if valid_605667 != nil:
    section.add "X-Amz-Algorithm", valid_605667
  var valid_605668 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605668 = validateParameter(valid_605668, JString, required = false,
                                 default = nil)
  if valid_605668 != nil:
    section.add "X-Amz-SignedHeaders", valid_605668
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605669: Call_GetCreateDBClusterParameterGroup_605653;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605669.validator(path, query, header, formData, body)
  let scheme = call_605669.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605669.url(scheme.get, call_605669.host, call_605669.base,
                         call_605669.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605669, url, valid)

proc call*(call_605670: Call_GetCreateDBClusterParameterGroup_605653;
          DBParameterGroupFamily: string; DBClusterParameterGroupName: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   Version: string (required)
  var query_605671 = newJObject()
  add(query_605671, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_605671.add "Tags", Tags
  add(query_605671, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_605671, "Action", newJString(Action))
  add(query_605671, "Description", newJString(Description))
  add(query_605671, "Version", newJString(Version))
  result = call_605670.call(nil, query_605671, nil, nil, nil)

var getCreateDBClusterParameterGroup* = Call_GetCreateDBClusterParameterGroup_605653(
    name: "getCreateDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_GetCreateDBClusterParameterGroup_605654, base: "/",
    url: url_GetCreateDBClusterParameterGroup_605655,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterSnapshot_605710 = ref object of OpenApiRestCall_604389
proc url_PostCreateDBClusterSnapshot_605712(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterSnapshot_605711(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605713 = query.getOrDefault("Action")
  valid_605713 = validateParameter(valid_605713, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_605713 != nil:
    section.add "Action", valid_605713
  var valid_605714 = query.getOrDefault("Version")
  valid_605714 = validateParameter(valid_605714, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605714 != nil:
    section.add "Version", valid_605714
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605715 = header.getOrDefault("X-Amz-Signature")
  valid_605715 = validateParameter(valid_605715, JString, required = false,
                                 default = nil)
  if valid_605715 != nil:
    section.add "X-Amz-Signature", valid_605715
  var valid_605716 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605716 = validateParameter(valid_605716, JString, required = false,
                                 default = nil)
  if valid_605716 != nil:
    section.add "X-Amz-Content-Sha256", valid_605716
  var valid_605717 = header.getOrDefault("X-Amz-Date")
  valid_605717 = validateParameter(valid_605717, JString, required = false,
                                 default = nil)
  if valid_605717 != nil:
    section.add "X-Amz-Date", valid_605717
  var valid_605718 = header.getOrDefault("X-Amz-Credential")
  valid_605718 = validateParameter(valid_605718, JString, required = false,
                                 default = nil)
  if valid_605718 != nil:
    section.add "X-Amz-Credential", valid_605718
  var valid_605719 = header.getOrDefault("X-Amz-Security-Token")
  valid_605719 = validateParameter(valid_605719, JString, required = false,
                                 default = nil)
  if valid_605719 != nil:
    section.add "X-Amz-Security-Token", valid_605719
  var valid_605720 = header.getOrDefault("X-Amz-Algorithm")
  valid_605720 = validateParameter(valid_605720, JString, required = false,
                                 default = nil)
  if valid_605720 != nil:
    section.add "X-Amz-Algorithm", valid_605720
  var valid_605721 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605721 = validateParameter(valid_605721, JString, required = false,
                                 default = nil)
  if valid_605721 != nil:
    section.add "X-Amz-SignedHeaders", valid_605721
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_605722 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_605722 = validateParameter(valid_605722, JString, required = true,
                                 default = nil)
  if valid_605722 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_605722
  var valid_605723 = formData.getOrDefault("Tags")
  valid_605723 = validateParameter(valid_605723, JArray, required = false,
                                 default = nil)
  if valid_605723 != nil:
    section.add "Tags", valid_605723
  var valid_605724 = formData.getOrDefault("DBClusterIdentifier")
  valid_605724 = validateParameter(valid_605724, JString, required = true,
                                 default = nil)
  if valid_605724 != nil:
    section.add "DBClusterIdentifier", valid_605724
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605725: Call_PostCreateDBClusterSnapshot_605710; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605725.validator(path, query, header, formData, body)
  let scheme = call_605725.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605725.url(scheme.get, call_605725.host, call_605725.base,
                         call_605725.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605725, url, valid)

proc call*(call_605726: Call_PostCreateDBClusterSnapshot_605710;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Action: string = "CreateDBClusterSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterSnapshot
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  var query_605727 = newJObject()
  var formData_605728 = newJObject()
  add(formData_605728, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_605727, "Action", newJString(Action))
  if Tags != nil:
    formData_605728.add "Tags", Tags
  add(query_605727, "Version", newJString(Version))
  add(formData_605728, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_605726.call(nil, query_605727, nil, formData_605728, nil)

var postCreateDBClusterSnapshot* = Call_PostCreateDBClusterSnapshot_605710(
    name: "postCreateDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_PostCreateDBClusterSnapshot_605711, base: "/",
    url: url_PostCreateDBClusterSnapshot_605712,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterSnapshot_605692 = ref object of OpenApiRestCall_604389
proc url_GetCreateDBClusterSnapshot_605694(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterSnapshot_605693(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_605695 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_605695 = validateParameter(valid_605695, JString, required = true,
                                 default = nil)
  if valid_605695 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_605695
  var valid_605696 = query.getOrDefault("Tags")
  valid_605696 = validateParameter(valid_605696, JArray, required = false,
                                 default = nil)
  if valid_605696 != nil:
    section.add "Tags", valid_605696
  var valid_605697 = query.getOrDefault("DBClusterIdentifier")
  valid_605697 = validateParameter(valid_605697, JString, required = true,
                                 default = nil)
  if valid_605697 != nil:
    section.add "DBClusterIdentifier", valid_605697
  var valid_605698 = query.getOrDefault("Action")
  valid_605698 = validateParameter(valid_605698, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_605698 != nil:
    section.add "Action", valid_605698
  var valid_605699 = query.getOrDefault("Version")
  valid_605699 = validateParameter(valid_605699, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605699 != nil:
    section.add "Version", valid_605699
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605700 = header.getOrDefault("X-Amz-Signature")
  valid_605700 = validateParameter(valid_605700, JString, required = false,
                                 default = nil)
  if valid_605700 != nil:
    section.add "X-Amz-Signature", valid_605700
  var valid_605701 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605701 = validateParameter(valid_605701, JString, required = false,
                                 default = nil)
  if valid_605701 != nil:
    section.add "X-Amz-Content-Sha256", valid_605701
  var valid_605702 = header.getOrDefault("X-Amz-Date")
  valid_605702 = validateParameter(valid_605702, JString, required = false,
                                 default = nil)
  if valid_605702 != nil:
    section.add "X-Amz-Date", valid_605702
  var valid_605703 = header.getOrDefault("X-Amz-Credential")
  valid_605703 = validateParameter(valid_605703, JString, required = false,
                                 default = nil)
  if valid_605703 != nil:
    section.add "X-Amz-Credential", valid_605703
  var valid_605704 = header.getOrDefault("X-Amz-Security-Token")
  valid_605704 = validateParameter(valid_605704, JString, required = false,
                                 default = nil)
  if valid_605704 != nil:
    section.add "X-Amz-Security-Token", valid_605704
  var valid_605705 = header.getOrDefault("X-Amz-Algorithm")
  valid_605705 = validateParameter(valid_605705, JString, required = false,
                                 default = nil)
  if valid_605705 != nil:
    section.add "X-Amz-Algorithm", valid_605705
  var valid_605706 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605706 = validateParameter(valid_605706, JString, required = false,
                                 default = nil)
  if valid_605706 != nil:
    section.add "X-Amz-SignedHeaders", valid_605706
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605707: Call_GetCreateDBClusterSnapshot_605692; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_605707.validator(path, query, header, formData, body)
  let scheme = call_605707.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605707.url(scheme.get, call_605707.host, call_605707.base,
                         call_605707.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605707, url, valid)

proc call*(call_605708: Call_GetCreateDBClusterSnapshot_605692;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterSnapshot
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_605709 = newJObject()
  add(query_605709, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    query_605709.add "Tags", Tags
  add(query_605709, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_605709, "Action", newJString(Action))
  add(query_605709, "Version", newJString(Version))
  result = call_605708.call(nil, query_605709, nil, nil, nil)

var getCreateDBClusterSnapshot* = Call_GetCreateDBClusterSnapshot_605692(
    name: "getCreateDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_GetCreateDBClusterSnapshot_605693, base: "/",
    url: url_GetCreateDBClusterSnapshot_605694,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstance_605790 = ref object of OpenApiRestCall_604389
proc url_PostCreateDBInstance_605792(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBInstance_605791(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605793 = query.getOrDefault("Action")
  valid_605793 = validateParameter(valid_605793, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_605793 != nil:
    section.add "Action", valid_605793
  var valid_605794 = query.getOrDefault("Version")
  valid_605794 = validateParameter(valid_605794, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605794 != nil:
    section.add "Version", valid_605794
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_605795 = header.getOrDefault("X-Amz-Security-Token")
  valid_605795 = validateParameter(valid_605795, JString, required = false,
                                 default = nil)
  if valid_605795 != nil:
    section.add "X-Amz-Security-Token", valid_605795
  var valid_605796 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605796 = validateParameter(valid_605796, JString, required = false,
                                 default = nil)
  if valid_605796 != nil:
    section.add "X-Amz-SignedHeaders", valid_605796
  var valid_605797 = header.getOrDefault("X-Amz-Signature")
  valid_605797 = validateParameter(valid_605797, JString, required = false,
                                 default = nil)
  if valid_605797 != nil:
    section.add "X-Amz-Signature", valid_605797
  var valid_605798 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605798 = validateParameter(valid_605798, JString, required = false,
                                 default = nil)
  if valid_605798 != nil:
    section.add "X-Amz-Content-Sha256", valid_605798
  var valid_605799 = header.getOrDefault("X-Amz-Date")
  valid_605799 = validateParameter(valid_605799, JString, required = false,
                                 default = nil)
  if valid_605799 != nil:
    section.add "X-Amz-Date", valid_605799
  var valid_605800 = header.getOrDefault("X-Amz-Credential")
  valid_605800 = validateParameter(valid_605800, JString, required = false,
                                 default = nil)
  if valid_605800 != nil:
    section.add "X-Amz-Credential", valid_605800
  var valid_605801 = header.getOrDefault("X-Amz-Algorithm")
  valid_605801 = validateParameter(valid_605801, JString, required = false,
                                 default = nil)
  if valid_605801 != nil:
    section.add "X-Amz-Algorithm", valid_605801
  result.add "header", section
  ## parameters in `formData` object:
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   CharacterSetName: JString
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   DeletionProtection: JBool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   Timezone: JString
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBName: JString
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: JBool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBClusterIdentifier: JString
  ##                      : The identifier of the DB cluster that the instance will belong to.
  section = newJObject()
  var valid_605802 = formData.getOrDefault("PromotionTier")
  valid_605802 = validateParameter(valid_605802, JInt, required = false, default = nil)
  if valid_605802 != nil:
    section.add "PromotionTier", valid_605802
  var valid_605803 = formData.getOrDefault("Port")
  valid_605803 = validateParameter(valid_605803, JInt, required = false, default = nil)
  if valid_605803 != nil:
    section.add "Port", valid_605803
  var valid_605804 = formData.getOrDefault("MultiAZ")
  valid_605804 = validateParameter(valid_605804, JBool, required = false, default = nil)
  if valid_605804 != nil:
    section.add "MultiAZ", valid_605804
  var valid_605805 = formData.getOrDefault("MasterUsername")
  valid_605805 = validateParameter(valid_605805, JString, required = false,
                                 default = nil)
  if valid_605805 != nil:
    section.add "MasterUsername", valid_605805
  var valid_605806 = formData.getOrDefault("MonitoringRoleArn")
  valid_605806 = validateParameter(valid_605806, JString, required = false,
                                 default = nil)
  if valid_605806 != nil:
    section.add "MonitoringRoleArn", valid_605806
  var valid_605807 = formData.getOrDefault("MonitoringInterval")
  valid_605807 = validateParameter(valid_605807, JInt, required = false, default = nil)
  if valid_605807 != nil:
    section.add "MonitoringInterval", valid_605807
  var valid_605808 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_605808 = validateParameter(valid_605808, JArray, required = false,
                                 default = nil)
  if valid_605808 != nil:
    section.add "VpcSecurityGroupIds", valid_605808
  var valid_605809 = formData.getOrDefault("AvailabilityZone")
  valid_605809 = validateParameter(valid_605809, JString, required = false,
                                 default = nil)
  if valid_605809 != nil:
    section.add "AvailabilityZone", valid_605809
  var valid_605810 = formData.getOrDefault("EnablePerformanceInsights")
  valid_605810 = validateParameter(valid_605810, JBool, required = false, default = nil)
  if valid_605810 != nil:
    section.add "EnablePerformanceInsights", valid_605810
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_605811 = formData.getOrDefault("DBInstanceIdentifier")
  valid_605811 = validateParameter(valid_605811, JString, required = true,
                                 default = nil)
  if valid_605811 != nil:
    section.add "DBInstanceIdentifier", valid_605811
  var valid_605812 = formData.getOrDefault("TdeCredentialArn")
  valid_605812 = validateParameter(valid_605812, JString, required = false,
                                 default = nil)
  if valid_605812 != nil:
    section.add "TdeCredentialArn", valid_605812
  var valid_605813 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_605813 = validateParameter(valid_605813, JArray, required = false,
                                 default = nil)
  if valid_605813 != nil:
    section.add "EnableCloudwatchLogsExports", valid_605813
  var valid_605814 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_605814 = validateParameter(valid_605814, JInt, required = false, default = nil)
  if valid_605814 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_605814
  var valid_605815 = formData.getOrDefault("DBSubnetGroupName")
  valid_605815 = validateParameter(valid_605815, JString, required = false,
                                 default = nil)
  if valid_605815 != nil:
    section.add "DBSubnetGroupName", valid_605815
  var valid_605816 = formData.getOrDefault("CharacterSetName")
  valid_605816 = validateParameter(valid_605816, JString, required = false,
                                 default = nil)
  if valid_605816 != nil:
    section.add "CharacterSetName", valid_605816
  var valid_605817 = formData.getOrDefault("StorageType")
  valid_605817 = validateParameter(valid_605817, JString, required = false,
                                 default = nil)
  if valid_605817 != nil:
    section.add "StorageType", valid_605817
  var valid_605818 = formData.getOrDefault("MaxAllocatedStorage")
  valid_605818 = validateParameter(valid_605818, JInt, required = false, default = nil)
  if valid_605818 != nil:
    section.add "MaxAllocatedStorage", valid_605818
  var valid_605819 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_605819 = validateParameter(valid_605819, JBool, required = false, default = nil)
  if valid_605819 != nil:
    section.add "CopyTagsToSnapshot", valid_605819
  var valid_605820 = formData.getOrDefault("DeletionProtection")
  valid_605820 = validateParameter(valid_605820, JBool, required = false, default = nil)
  if valid_605820 != nil:
    section.add "DeletionProtection", valid_605820
  var valid_605821 = formData.getOrDefault("ProcessorFeatures")
  valid_605821 = validateParameter(valid_605821, JArray, required = false,
                                 default = nil)
  if valid_605821 != nil:
    section.add "ProcessorFeatures", valid_605821
  var valid_605822 = formData.getOrDefault("AllocatedStorage")
  valid_605822 = validateParameter(valid_605822, JInt, required = false, default = nil)
  if valid_605822 != nil:
    section.add "AllocatedStorage", valid_605822
  var valid_605823 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_605823 = validateParameter(valid_605823, JString, required = false,
                                 default = nil)
  if valid_605823 != nil:
    section.add "PreferredMaintenanceWindow", valid_605823
  var valid_605824 = formData.getOrDefault("DBInstanceClass")
  valid_605824 = validateParameter(valid_605824, JString, required = true,
                                 default = nil)
  if valid_605824 != nil:
    section.add "DBInstanceClass", valid_605824
  var valid_605825 = formData.getOrDefault("PreferredBackupWindow")
  valid_605825 = validateParameter(valid_605825, JString, required = false,
                                 default = nil)
  if valid_605825 != nil:
    section.add "PreferredBackupWindow", valid_605825
  var valid_605826 = formData.getOrDefault("MasterUserPassword")
  valid_605826 = validateParameter(valid_605826, JString, required = false,
                                 default = nil)
  if valid_605826 != nil:
    section.add "MasterUserPassword", valid_605826
  var valid_605827 = formData.getOrDefault("Domain")
  valid_605827 = validateParameter(valid_605827, JString, required = false,
                                 default = nil)
  if valid_605827 != nil:
    section.add "Domain", valid_605827
  var valid_605828 = formData.getOrDefault("Timezone")
  valid_605828 = validateParameter(valid_605828, JString, required = false,
                                 default = nil)
  if valid_605828 != nil:
    section.add "Timezone", valid_605828
  var valid_605829 = formData.getOrDefault("DBParameterGroupName")
  valid_605829 = validateParameter(valid_605829, JString, required = false,
                                 default = nil)
  if valid_605829 != nil:
    section.add "DBParameterGroupName", valid_605829
  var valid_605830 = formData.getOrDefault("EngineVersion")
  valid_605830 = validateParameter(valid_605830, JString, required = false,
                                 default = nil)
  if valid_605830 != nil:
    section.add "EngineVersion", valid_605830
  var valid_605831 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_605831 = validateParameter(valid_605831, JBool, required = false, default = nil)
  if valid_605831 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_605831
  var valid_605832 = formData.getOrDefault("BackupRetentionPeriod")
  valid_605832 = validateParameter(valid_605832, JInt, required = false, default = nil)
  if valid_605832 != nil:
    section.add "BackupRetentionPeriod", valid_605832
  var valid_605833 = formData.getOrDefault("KmsKeyId")
  valid_605833 = validateParameter(valid_605833, JString, required = false,
                                 default = nil)
  if valid_605833 != nil:
    section.add "KmsKeyId", valid_605833
  var valid_605834 = formData.getOrDefault("Engine")
  valid_605834 = validateParameter(valid_605834, JString, required = true,
                                 default = nil)
  if valid_605834 != nil:
    section.add "Engine", valid_605834
  var valid_605835 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_605835 = validateParameter(valid_605835, JBool, required = false, default = nil)
  if valid_605835 != nil:
    section.add "AutoMinorVersionUpgrade", valid_605835
  var valid_605836 = formData.getOrDefault("TdeCredentialPassword")
  valid_605836 = validateParameter(valid_605836, JString, required = false,
                                 default = nil)
  if valid_605836 != nil:
    section.add "TdeCredentialPassword", valid_605836
  var valid_605837 = formData.getOrDefault("DBName")
  valid_605837 = validateParameter(valid_605837, JString, required = false,
                                 default = nil)
  if valid_605837 != nil:
    section.add "DBName", valid_605837
  var valid_605838 = formData.getOrDefault("Iops")
  valid_605838 = validateParameter(valid_605838, JInt, required = false, default = nil)
  if valid_605838 != nil:
    section.add "Iops", valid_605838
  var valid_605839 = formData.getOrDefault("PubliclyAccessible")
  valid_605839 = validateParameter(valid_605839, JBool, required = false, default = nil)
  if valid_605839 != nil:
    section.add "PubliclyAccessible", valid_605839
  var valid_605840 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_605840 = validateParameter(valid_605840, JString, required = false,
                                 default = nil)
  if valid_605840 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_605840
  var valid_605841 = formData.getOrDefault("LicenseModel")
  valid_605841 = validateParameter(valid_605841, JString, required = false,
                                 default = nil)
  if valid_605841 != nil:
    section.add "LicenseModel", valid_605841
  var valid_605842 = formData.getOrDefault("Tags")
  valid_605842 = validateParameter(valid_605842, JArray, required = false,
                                 default = nil)
  if valid_605842 != nil:
    section.add "Tags", valid_605842
  var valid_605843 = formData.getOrDefault("DomainIAMRoleName")
  valid_605843 = validateParameter(valid_605843, JString, required = false,
                                 default = nil)
  if valid_605843 != nil:
    section.add "DomainIAMRoleName", valid_605843
  var valid_605844 = formData.getOrDefault("OptionGroupName")
  valid_605844 = validateParameter(valid_605844, JString, required = false,
                                 default = nil)
  if valid_605844 != nil:
    section.add "OptionGroupName", valid_605844
  var valid_605845 = formData.getOrDefault("DBSecurityGroups")
  valid_605845 = validateParameter(valid_605845, JArray, required = false,
                                 default = nil)
  if valid_605845 != nil:
    section.add "DBSecurityGroups", valid_605845
  var valid_605846 = formData.getOrDefault("StorageEncrypted")
  valid_605846 = validateParameter(valid_605846, JBool, required = false, default = nil)
  if valid_605846 != nil:
    section.add "StorageEncrypted", valid_605846
  var valid_605847 = formData.getOrDefault("DBClusterIdentifier")
  valid_605847 = validateParameter(valid_605847, JString, required = false,
                                 default = nil)
  if valid_605847 != nil:
    section.add "DBClusterIdentifier", valid_605847
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605848: Call_PostCreateDBInstance_605790; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_605848.validator(path, query, header, formData, body)
  let scheme = call_605848.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605848.url(scheme.get, call_605848.host, call_605848.base,
                         call_605848.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605848, url, valid)

proc call*(call_605849: Call_PostCreateDBInstance_605790;
          DBInstanceIdentifier: string; DBInstanceClass: string; Engine: string;
          PromotionTier: int = 0; Port: int = 0; MultiAZ: bool = false;
          MasterUsername: string = ""; MonitoringRoleArn: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = ""; EnablePerformanceInsights: bool = false;
          TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBInstance";
          PerformanceInsightsRetentionPeriod: int = 0;
          DBSubnetGroupName: string = ""; CharacterSetName: string = "";
          StorageType: string = ""; MaxAllocatedStorage: int = 0;
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          ProcessorFeatures: JsonNode = nil; AllocatedStorage: int = 0;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          Domain: string = ""; Timezone: string = ""; DBParameterGroupName: string = "";
          EngineVersion: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          DBName: string = ""; Iops: int = 0; PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          Tags: JsonNode = nil; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          DBSecurityGroups: JsonNode = nil; StorageEncrypted: bool = false;
          DBClusterIdentifier: string = ""): Recallable =
  ## postCreateDBInstance
  ## Creates a new DB instance.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   MasterUsername: string
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AvailabilityZone: string
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   Action: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   CharacterSetName: string
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   DeletionProtection: bool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   Timezone: string
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBName: string
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: bool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBClusterIdentifier: string
  ##                      : The identifier of the DB cluster that the instance will belong to.
  var query_605850 = newJObject()
  var formData_605851 = newJObject()
  add(formData_605851, "PromotionTier", newJInt(PromotionTier))
  add(formData_605851, "Port", newJInt(Port))
  add(formData_605851, "MultiAZ", newJBool(MultiAZ))
  add(formData_605851, "MasterUsername", newJString(MasterUsername))
  add(formData_605851, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_605851, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_605851.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_605851, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_605851, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_605851, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_605851, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_605851.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_605850, "Action", newJString(Action))
  add(formData_605851, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_605851, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_605851, "CharacterSetName", newJString(CharacterSetName))
  add(formData_605851, "StorageType", newJString(StorageType))
  add(formData_605851, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(formData_605851, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_605851, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_605851.add "ProcessorFeatures", ProcessorFeatures
  add(formData_605851, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_605851, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_605851, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_605851, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_605851, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_605851, "Domain", newJString(Domain))
  add(formData_605851, "Timezone", newJString(Timezone))
  add(formData_605851, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_605851, "EngineVersion", newJString(EngineVersion))
  add(formData_605851, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_605851, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_605851, "KmsKeyId", newJString(KmsKeyId))
  add(formData_605851, "Engine", newJString(Engine))
  add(formData_605851, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_605851, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_605851, "DBName", newJString(DBName))
  add(formData_605851, "Iops", newJInt(Iops))
  add(formData_605851, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_605851, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_605851, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_605851.add "Tags", Tags
  add(formData_605851, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_605851, "OptionGroupName", newJString(OptionGroupName))
  add(query_605850, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_605851.add "DBSecurityGroups", DBSecurityGroups
  add(formData_605851, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_605851, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_605849.call(nil, query_605850, nil, formData_605851, nil)

var postCreateDBInstance* = Call_PostCreateDBInstance_605790(
    name: "postCreateDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_PostCreateDBInstance_605791, base: "/",
    url: url_PostCreateDBInstance_605792, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstance_605729 = ref object of OpenApiRestCall_604389
proc url_GetCreateDBInstance_605731(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBInstance_605730(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: JString (required)
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   DBName: JString
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   StorageEncrypted: JBool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   CharacterSetName: JString
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   DBClusterIdentifier: JString
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Timezone: JString
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   Version: JString (required)
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_605732 = query.getOrDefault("Engine")
  valid_605732 = validateParameter(valid_605732, JString, required = true,
                                 default = nil)
  if valid_605732 != nil:
    section.add "Engine", valid_605732
  var valid_605733 = query.getOrDefault("CopyTagsToSnapshot")
  valid_605733 = validateParameter(valid_605733, JBool, required = false, default = nil)
  if valid_605733 != nil:
    section.add "CopyTagsToSnapshot", valid_605733
  var valid_605734 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_605734 = validateParameter(valid_605734, JInt, required = false, default = nil)
  if valid_605734 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_605734
  var valid_605735 = query.getOrDefault("MonitoringInterval")
  valid_605735 = validateParameter(valid_605735, JInt, required = false, default = nil)
  if valid_605735 != nil:
    section.add "MonitoringInterval", valid_605735
  var valid_605736 = query.getOrDefault("KmsKeyId")
  valid_605736 = validateParameter(valid_605736, JString, required = false,
                                 default = nil)
  if valid_605736 != nil:
    section.add "KmsKeyId", valid_605736
  var valid_605737 = query.getOrDefault("MonitoringRoleArn")
  valid_605737 = validateParameter(valid_605737, JString, required = false,
                                 default = nil)
  if valid_605737 != nil:
    section.add "MonitoringRoleArn", valid_605737
  var valid_605738 = query.getOrDefault("ProcessorFeatures")
  valid_605738 = validateParameter(valid_605738, JArray, required = false,
                                 default = nil)
  if valid_605738 != nil:
    section.add "ProcessorFeatures", valid_605738
  var valid_605739 = query.getOrDefault("MasterUsername")
  valid_605739 = validateParameter(valid_605739, JString, required = false,
                                 default = nil)
  if valid_605739 != nil:
    section.add "MasterUsername", valid_605739
  var valid_605740 = query.getOrDefault("BackupRetentionPeriod")
  valid_605740 = validateParameter(valid_605740, JInt, required = false, default = nil)
  if valid_605740 != nil:
    section.add "BackupRetentionPeriod", valid_605740
  var valid_605741 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_605741 = validateParameter(valid_605741, JArray, required = false,
                                 default = nil)
  if valid_605741 != nil:
    section.add "EnableCloudwatchLogsExports", valid_605741
  var valid_605742 = query.getOrDefault("EngineVersion")
  valid_605742 = validateParameter(valid_605742, JString, required = false,
                                 default = nil)
  if valid_605742 != nil:
    section.add "EngineVersion", valid_605742
  var valid_605743 = query.getOrDefault("Action")
  valid_605743 = validateParameter(valid_605743, JString, required = true,
                                 default = newJString("CreateDBInstance"))
  if valid_605743 != nil:
    section.add "Action", valid_605743
  var valid_605744 = query.getOrDefault("Domain")
  valid_605744 = validateParameter(valid_605744, JString, required = false,
                                 default = nil)
  if valid_605744 != nil:
    section.add "Domain", valid_605744
  var valid_605745 = query.getOrDefault("VpcSecurityGroupIds")
  valid_605745 = validateParameter(valid_605745, JArray, required = false,
                                 default = nil)
  if valid_605745 != nil:
    section.add "VpcSecurityGroupIds", valid_605745
  var valid_605746 = query.getOrDefault("AllocatedStorage")
  valid_605746 = validateParameter(valid_605746, JInt, required = false, default = nil)
  if valid_605746 != nil:
    section.add "AllocatedStorage", valid_605746
  var valid_605747 = query.getOrDefault("EnablePerformanceInsights")
  valid_605747 = validateParameter(valid_605747, JBool, required = false, default = nil)
  if valid_605747 != nil:
    section.add "EnablePerformanceInsights", valid_605747
  var valid_605748 = query.getOrDefault("PubliclyAccessible")
  valid_605748 = validateParameter(valid_605748, JBool, required = false, default = nil)
  if valid_605748 != nil:
    section.add "PubliclyAccessible", valid_605748
  var valid_605749 = query.getOrDefault("DBName")
  valid_605749 = validateParameter(valid_605749, JString, required = false,
                                 default = nil)
  if valid_605749 != nil:
    section.add "DBName", valid_605749
  var valid_605750 = query.getOrDefault("TdeCredentialPassword")
  valid_605750 = validateParameter(valid_605750, JString, required = false,
                                 default = nil)
  if valid_605750 != nil:
    section.add "TdeCredentialPassword", valid_605750
  var valid_605751 = query.getOrDefault("StorageEncrypted")
  valid_605751 = validateParameter(valid_605751, JBool, required = false, default = nil)
  if valid_605751 != nil:
    section.add "StorageEncrypted", valid_605751
  var valid_605752 = query.getOrDefault("DBParameterGroupName")
  valid_605752 = validateParameter(valid_605752, JString, required = false,
                                 default = nil)
  if valid_605752 != nil:
    section.add "DBParameterGroupName", valid_605752
  var valid_605753 = query.getOrDefault("DeletionProtection")
  valid_605753 = validateParameter(valid_605753, JBool, required = false, default = nil)
  if valid_605753 != nil:
    section.add "DeletionProtection", valid_605753
  var valid_605754 = query.getOrDefault("CharacterSetName")
  valid_605754 = validateParameter(valid_605754, JString, required = false,
                                 default = nil)
  if valid_605754 != nil:
    section.add "CharacterSetName", valid_605754
  var valid_605755 = query.getOrDefault("Tags")
  valid_605755 = validateParameter(valid_605755, JArray, required = false,
                                 default = nil)
  if valid_605755 != nil:
    section.add "Tags", valid_605755
  var valid_605756 = query.getOrDefault("MaxAllocatedStorage")
  valid_605756 = validateParameter(valid_605756, JInt, required = false, default = nil)
  if valid_605756 != nil:
    section.add "MaxAllocatedStorage", valid_605756
  var valid_605757 = query.getOrDefault("DBClusterIdentifier")
  valid_605757 = validateParameter(valid_605757, JString, required = false,
                                 default = nil)
  if valid_605757 != nil:
    section.add "DBClusterIdentifier", valid_605757
  var valid_605758 = query.getOrDefault("LicenseModel")
  valid_605758 = validateParameter(valid_605758, JString, required = false,
                                 default = nil)
  if valid_605758 != nil:
    section.add "LicenseModel", valid_605758
  var valid_605759 = query.getOrDefault("DBInstanceIdentifier")
  valid_605759 = validateParameter(valid_605759, JString, required = true,
                                 default = nil)
  if valid_605759 != nil:
    section.add "DBInstanceIdentifier", valid_605759
  var valid_605760 = query.getOrDefault("TdeCredentialArn")
  valid_605760 = validateParameter(valid_605760, JString, required = false,
                                 default = nil)
  if valid_605760 != nil:
    section.add "TdeCredentialArn", valid_605760
  var valid_605761 = query.getOrDefault("PromotionTier")
  valid_605761 = validateParameter(valid_605761, JInt, required = false, default = nil)
  if valid_605761 != nil:
    section.add "PromotionTier", valid_605761
  var valid_605762 = query.getOrDefault("StorageType")
  valid_605762 = validateParameter(valid_605762, JString, required = false,
                                 default = nil)
  if valid_605762 != nil:
    section.add "StorageType", valid_605762
  var valid_605763 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_605763 = validateParameter(valid_605763, JBool, required = false, default = nil)
  if valid_605763 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_605763
  var valid_605764 = query.getOrDefault("MultiAZ")
  valid_605764 = validateParameter(valid_605764, JBool, required = false, default = nil)
  if valid_605764 != nil:
    section.add "MultiAZ", valid_605764
  var valid_605765 = query.getOrDefault("DBSecurityGroups")
  valid_605765 = validateParameter(valid_605765, JArray, required = false,
                                 default = nil)
  if valid_605765 != nil:
    section.add "DBSecurityGroups", valid_605765
  var valid_605766 = query.getOrDefault("Port")
  valid_605766 = validateParameter(valid_605766, JInt, required = false, default = nil)
  if valid_605766 != nil:
    section.add "Port", valid_605766
  var valid_605767 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_605767 = validateParameter(valid_605767, JString, required = false,
                                 default = nil)
  if valid_605767 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_605767
  var valid_605768 = query.getOrDefault("MasterUserPassword")
  valid_605768 = validateParameter(valid_605768, JString, required = false,
                                 default = nil)
  if valid_605768 != nil:
    section.add "MasterUserPassword", valid_605768
  var valid_605769 = query.getOrDefault("AvailabilityZone")
  valid_605769 = validateParameter(valid_605769, JString, required = false,
                                 default = nil)
  if valid_605769 != nil:
    section.add "AvailabilityZone", valid_605769
  var valid_605770 = query.getOrDefault("OptionGroupName")
  valid_605770 = validateParameter(valid_605770, JString, required = false,
                                 default = nil)
  if valid_605770 != nil:
    section.add "OptionGroupName", valid_605770
  var valid_605771 = query.getOrDefault("DBSubnetGroupName")
  valid_605771 = validateParameter(valid_605771, JString, required = false,
                                 default = nil)
  if valid_605771 != nil:
    section.add "DBSubnetGroupName", valid_605771
  var valid_605772 = query.getOrDefault("PreferredBackupWindow")
  valid_605772 = validateParameter(valid_605772, JString, required = false,
                                 default = nil)
  if valid_605772 != nil:
    section.add "PreferredBackupWindow", valid_605772
  var valid_605773 = query.getOrDefault("DBInstanceClass")
  valid_605773 = validateParameter(valid_605773, JString, required = true,
                                 default = nil)
  if valid_605773 != nil:
    section.add "DBInstanceClass", valid_605773
  var valid_605774 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_605774 = validateParameter(valid_605774, JString, required = false,
                                 default = nil)
  if valid_605774 != nil:
    section.add "PreferredMaintenanceWindow", valid_605774
  var valid_605775 = query.getOrDefault("Timezone")
  valid_605775 = validateParameter(valid_605775, JString, required = false,
                                 default = nil)
  if valid_605775 != nil:
    section.add "Timezone", valid_605775
  var valid_605776 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_605776 = validateParameter(valid_605776, JBool, required = false, default = nil)
  if valid_605776 != nil:
    section.add "AutoMinorVersionUpgrade", valid_605776
  var valid_605777 = query.getOrDefault("Iops")
  valid_605777 = validateParameter(valid_605777, JInt, required = false, default = nil)
  if valid_605777 != nil:
    section.add "Iops", valid_605777
  var valid_605778 = query.getOrDefault("Version")
  valid_605778 = validateParameter(valid_605778, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605778 != nil:
    section.add "Version", valid_605778
  var valid_605779 = query.getOrDefault("DomainIAMRoleName")
  valid_605779 = validateParameter(valid_605779, JString, required = false,
                                 default = nil)
  if valid_605779 != nil:
    section.add "DomainIAMRoleName", valid_605779
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_605780 = header.getOrDefault("X-Amz-Security-Token")
  valid_605780 = validateParameter(valid_605780, JString, required = false,
                                 default = nil)
  if valid_605780 != nil:
    section.add "X-Amz-Security-Token", valid_605780
  var valid_605781 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605781 = validateParameter(valid_605781, JString, required = false,
                                 default = nil)
  if valid_605781 != nil:
    section.add "X-Amz-SignedHeaders", valid_605781
  var valid_605782 = header.getOrDefault("X-Amz-Signature")
  valid_605782 = validateParameter(valid_605782, JString, required = false,
                                 default = nil)
  if valid_605782 != nil:
    section.add "X-Amz-Signature", valid_605782
  var valid_605783 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605783 = validateParameter(valid_605783, JString, required = false,
                                 default = nil)
  if valid_605783 != nil:
    section.add "X-Amz-Content-Sha256", valid_605783
  var valid_605784 = header.getOrDefault("X-Amz-Date")
  valid_605784 = validateParameter(valid_605784, JString, required = false,
                                 default = nil)
  if valid_605784 != nil:
    section.add "X-Amz-Date", valid_605784
  var valid_605785 = header.getOrDefault("X-Amz-Credential")
  valid_605785 = validateParameter(valid_605785, JString, required = false,
                                 default = nil)
  if valid_605785 != nil:
    section.add "X-Amz-Credential", valid_605785
  var valid_605786 = header.getOrDefault("X-Amz-Algorithm")
  valid_605786 = validateParameter(valid_605786, JString, required = false,
                                 default = nil)
  if valid_605786 != nil:
    section.add "X-Amz-Algorithm", valid_605786
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605787: Call_GetCreateDBInstance_605729; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_605787.validator(path, query, header, formData, body)
  let scheme = call_605787.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605787.url(scheme.get, call_605787.host, call_605787.base,
                         call_605787.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605787, url, valid)

proc call*(call_605788: Call_GetCreateDBInstance_605729; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          CopyTagsToSnapshot: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0; MonitoringInterval: int = 0;
          KmsKeyId: string = ""; MonitoringRoleArn: string = "";
          ProcessorFeatures: JsonNode = nil; MasterUsername: string = "";
          BackupRetentionPeriod: int = 0;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "CreateDBInstance"; Domain: string = "";
          VpcSecurityGroupIds: JsonNode = nil; AllocatedStorage: int = 0;
          EnablePerformanceInsights: bool = false; PubliclyAccessible: bool = false;
          DBName: string = ""; TdeCredentialPassword: string = "";
          StorageEncrypted: bool = false; DBParameterGroupName: string = "";
          DeletionProtection: bool = false; CharacterSetName: string = "";
          Tags: JsonNode = nil; MaxAllocatedStorage: int = 0;
          DBClusterIdentifier: string = ""; LicenseModel: string = "";
          TdeCredentialArn: string = ""; PromotionTier: int = 0;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          MultiAZ: bool = false; DBSecurityGroups: JsonNode = nil; Port: int = 0;
          PerformanceInsightsKMSKeyId: string = ""; MasterUserPassword: string = "";
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Timezone: string = "";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          Version: string = "2014-10-31"; DomainIAMRoleName: string = ""): Recallable =
  ## getCreateDBInstance
  ## Creates a new DB instance.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: string
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   DBName: string
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   StorageEncrypted: bool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   CharacterSetName: string
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   DBClusterIdentifier: string
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   AvailabilityZone: string
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   Timezone: string
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   Version: string (required)
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_605789 = newJObject()
  add(query_605789, "Engine", newJString(Engine))
  add(query_605789, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_605789, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_605789, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_605789, "KmsKeyId", newJString(KmsKeyId))
  add(query_605789, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  if ProcessorFeatures != nil:
    query_605789.add "ProcessorFeatures", ProcessorFeatures
  add(query_605789, "MasterUsername", newJString(MasterUsername))
  add(query_605789, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if EnableCloudwatchLogsExports != nil:
    query_605789.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_605789, "EngineVersion", newJString(EngineVersion))
  add(query_605789, "Action", newJString(Action))
  add(query_605789, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_605789.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_605789, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_605789, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_605789, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_605789, "DBName", newJString(DBName))
  add(query_605789, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_605789, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_605789, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_605789, "DeletionProtection", newJBool(DeletionProtection))
  add(query_605789, "CharacterSetName", newJString(CharacterSetName))
  if Tags != nil:
    query_605789.add "Tags", Tags
  add(query_605789, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(query_605789, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_605789, "LicenseModel", newJString(LicenseModel))
  add(query_605789, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_605789, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_605789, "PromotionTier", newJInt(PromotionTier))
  add(query_605789, "StorageType", newJString(StorageType))
  add(query_605789, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_605789, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_605789.add "DBSecurityGroups", DBSecurityGroups
  add(query_605789, "Port", newJInt(Port))
  add(query_605789, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_605789, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_605789, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_605789, "OptionGroupName", newJString(OptionGroupName))
  add(query_605789, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_605789, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_605789, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_605789, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_605789, "Timezone", newJString(Timezone))
  add(query_605789, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_605789, "Iops", newJInt(Iops))
  add(query_605789, "Version", newJString(Version))
  add(query_605789, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_605788.call(nil, query_605789, nil, nil, nil)

var getCreateDBInstance* = Call_GetCreateDBInstance_605729(
    name: "getCreateDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_GetCreateDBInstance_605730, base: "/",
    url: url_GetCreateDBInstance_605731, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstanceReadReplica_605898 = ref object of OpenApiRestCall_604389
proc url_PostCreateDBInstanceReadReplica_605900(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBInstanceReadReplica_605899(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605901 = query.getOrDefault("Action")
  valid_605901 = validateParameter(valid_605901, JString, required = true, default = newJString(
      "CreateDBInstanceReadReplica"))
  if valid_605901 != nil:
    section.add "Action", valid_605901
  var valid_605902 = query.getOrDefault("Version")
  valid_605902 = validateParameter(valid_605902, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605902 != nil:
    section.add "Version", valid_605902
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605903 = header.getOrDefault("X-Amz-Signature")
  valid_605903 = validateParameter(valid_605903, JString, required = false,
                                 default = nil)
  if valid_605903 != nil:
    section.add "X-Amz-Signature", valid_605903
  var valid_605904 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605904 = validateParameter(valid_605904, JString, required = false,
                                 default = nil)
  if valid_605904 != nil:
    section.add "X-Amz-Content-Sha256", valid_605904
  var valid_605905 = header.getOrDefault("X-Amz-Date")
  valid_605905 = validateParameter(valid_605905, JString, required = false,
                                 default = nil)
  if valid_605905 != nil:
    section.add "X-Amz-Date", valid_605905
  var valid_605906 = header.getOrDefault("X-Amz-Credential")
  valid_605906 = validateParameter(valid_605906, JString, required = false,
                                 default = nil)
  if valid_605906 != nil:
    section.add "X-Amz-Credential", valid_605906
  var valid_605907 = header.getOrDefault("X-Amz-Security-Token")
  valid_605907 = validateParameter(valid_605907, JString, required = false,
                                 default = nil)
  if valid_605907 != nil:
    section.add "X-Amz-Security-Token", valid_605907
  var valid_605908 = header.getOrDefault("X-Amz-Algorithm")
  valid_605908 = validateParameter(valid_605908, JString, required = false,
                                 default = nil)
  if valid_605908 != nil:
    section.add "X-Amz-Algorithm", valid_605908
  var valid_605909 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605909 = validateParameter(valid_605909, JString, required = false,
                                 default = nil)
  if valid_605909 != nil:
    section.add "X-Amz-SignedHeaders", valid_605909
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   SourceDBInstanceIdentifier: JString (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  section = newJObject()
  var valid_605910 = formData.getOrDefault("Port")
  valid_605910 = validateParameter(valid_605910, JInt, required = false, default = nil)
  if valid_605910 != nil:
    section.add "Port", valid_605910
  var valid_605911 = formData.getOrDefault("DBInstanceClass")
  valid_605911 = validateParameter(valid_605911, JString, required = false,
                                 default = nil)
  if valid_605911 != nil:
    section.add "DBInstanceClass", valid_605911
  var valid_605912 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_605912 = validateParameter(valid_605912, JBool, required = false, default = nil)
  if valid_605912 != nil:
    section.add "UseDefaultProcessorFeatures", valid_605912
  var valid_605913 = formData.getOrDefault("MultiAZ")
  valid_605913 = validateParameter(valid_605913, JBool, required = false, default = nil)
  if valid_605913 != nil:
    section.add "MultiAZ", valid_605913
  var valid_605914 = formData.getOrDefault("Domain")
  valid_605914 = validateParameter(valid_605914, JString, required = false,
                                 default = nil)
  if valid_605914 != nil:
    section.add "Domain", valid_605914
  var valid_605915 = formData.getOrDefault("MonitoringRoleArn")
  valid_605915 = validateParameter(valid_605915, JString, required = false,
                                 default = nil)
  if valid_605915 != nil:
    section.add "MonitoringRoleArn", valid_605915
  assert formData != nil, "formData argument is necessary due to required `SourceDBInstanceIdentifier` field"
  var valid_605916 = formData.getOrDefault("SourceDBInstanceIdentifier")
  valid_605916 = validateParameter(valid_605916, JString, required = true,
                                 default = nil)
  if valid_605916 != nil:
    section.add "SourceDBInstanceIdentifier", valid_605916
  var valid_605917 = formData.getOrDefault("DBParameterGroupName")
  valid_605917 = validateParameter(valid_605917, JString, required = false,
                                 default = nil)
  if valid_605917 != nil:
    section.add "DBParameterGroupName", valid_605917
  var valid_605918 = formData.getOrDefault("SourceRegion")
  valid_605918 = validateParameter(valid_605918, JString, required = false,
                                 default = nil)
  if valid_605918 != nil:
    section.add "SourceRegion", valid_605918
  var valid_605919 = formData.getOrDefault("MonitoringInterval")
  valid_605919 = validateParameter(valid_605919, JInt, required = false, default = nil)
  if valid_605919 != nil:
    section.add "MonitoringInterval", valid_605919
  var valid_605920 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_605920 = validateParameter(valid_605920, JArray, required = false,
                                 default = nil)
  if valid_605920 != nil:
    section.add "VpcSecurityGroupIds", valid_605920
  var valid_605921 = formData.getOrDefault("AvailabilityZone")
  valid_605921 = validateParameter(valid_605921, JString, required = false,
                                 default = nil)
  if valid_605921 != nil:
    section.add "AvailabilityZone", valid_605921
  var valid_605922 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_605922 = validateParameter(valid_605922, JBool, required = false, default = nil)
  if valid_605922 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_605922
  var valid_605923 = formData.getOrDefault("KmsKeyId")
  valid_605923 = validateParameter(valid_605923, JString, required = false,
                                 default = nil)
  if valid_605923 != nil:
    section.add "KmsKeyId", valid_605923
  var valid_605924 = formData.getOrDefault("EnablePerformanceInsights")
  valid_605924 = validateParameter(valid_605924, JBool, required = false, default = nil)
  if valid_605924 != nil:
    section.add "EnablePerformanceInsights", valid_605924
  var valid_605925 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_605925 = validateParameter(valid_605925, JBool, required = false, default = nil)
  if valid_605925 != nil:
    section.add "AutoMinorVersionUpgrade", valid_605925
  var valid_605926 = formData.getOrDefault("PreSignedUrl")
  valid_605926 = validateParameter(valid_605926, JString, required = false,
                                 default = nil)
  if valid_605926 != nil:
    section.add "PreSignedUrl", valid_605926
  var valid_605927 = formData.getOrDefault("DBInstanceIdentifier")
  valid_605927 = validateParameter(valid_605927, JString, required = true,
                                 default = nil)
  if valid_605927 != nil:
    section.add "DBInstanceIdentifier", valid_605927
  var valid_605928 = formData.getOrDefault("Iops")
  valid_605928 = validateParameter(valid_605928, JInt, required = false, default = nil)
  if valid_605928 != nil:
    section.add "Iops", valid_605928
  var valid_605929 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_605929 = validateParameter(valid_605929, JArray, required = false,
                                 default = nil)
  if valid_605929 != nil:
    section.add "EnableCloudwatchLogsExports", valid_605929
  var valid_605930 = formData.getOrDefault("PubliclyAccessible")
  valid_605930 = validateParameter(valid_605930, JBool, required = false, default = nil)
  if valid_605930 != nil:
    section.add "PubliclyAccessible", valid_605930
  var valid_605931 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_605931 = validateParameter(valid_605931, JString, required = false,
                                 default = nil)
  if valid_605931 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_605931
  var valid_605932 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_605932 = validateParameter(valid_605932, JInt, required = false, default = nil)
  if valid_605932 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_605932
  var valid_605933 = formData.getOrDefault("Tags")
  valid_605933 = validateParameter(valid_605933, JArray, required = false,
                                 default = nil)
  if valid_605933 != nil:
    section.add "Tags", valid_605933
  var valid_605934 = formData.getOrDefault("DBSubnetGroupName")
  valid_605934 = validateParameter(valid_605934, JString, required = false,
                                 default = nil)
  if valid_605934 != nil:
    section.add "DBSubnetGroupName", valid_605934
  var valid_605935 = formData.getOrDefault("DomainIAMRoleName")
  valid_605935 = validateParameter(valid_605935, JString, required = false,
                                 default = nil)
  if valid_605935 != nil:
    section.add "DomainIAMRoleName", valid_605935
  var valid_605936 = formData.getOrDefault("OptionGroupName")
  valid_605936 = validateParameter(valid_605936, JString, required = false,
                                 default = nil)
  if valid_605936 != nil:
    section.add "OptionGroupName", valid_605936
  var valid_605937 = formData.getOrDefault("StorageType")
  valid_605937 = validateParameter(valid_605937, JString, required = false,
                                 default = nil)
  if valid_605937 != nil:
    section.add "StorageType", valid_605937
  var valid_605938 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_605938 = validateParameter(valid_605938, JBool, required = false, default = nil)
  if valid_605938 != nil:
    section.add "CopyTagsToSnapshot", valid_605938
  var valid_605939 = formData.getOrDefault("DeletionProtection")
  valid_605939 = validateParameter(valid_605939, JBool, required = false, default = nil)
  if valid_605939 != nil:
    section.add "DeletionProtection", valid_605939
  var valid_605940 = formData.getOrDefault("ProcessorFeatures")
  valid_605940 = validateParameter(valid_605940, JArray, required = false,
                                 default = nil)
  if valid_605940 != nil:
    section.add "ProcessorFeatures", valid_605940
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605941: Call_PostCreateDBInstanceReadReplica_605898;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  let valid = call_605941.validator(path, query, header, formData, body)
  let scheme = call_605941.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605941.url(scheme.get, call_605941.host, call_605941.base,
                         call_605941.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605941, url, valid)

proc call*(call_605942: Call_PostCreateDBInstanceReadReplica_605898;
          SourceDBInstanceIdentifier: string; DBInstanceIdentifier: string;
          Port: int = 0; DBInstanceClass: string = "";
          UseDefaultProcessorFeatures: bool = false; MultiAZ: bool = false;
          Domain: string = ""; MonitoringRoleArn: string = "";
          DBParameterGroupName: string = ""; SourceRegion: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = "";
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          EnablePerformanceInsights: bool = false;
          AutoMinorVersionUpgrade: bool = false; PreSignedUrl: string = "";
          Iops: int = 0; EnableCloudwatchLogsExports: JsonNode = nil;
          PubliclyAccessible: bool = false;
          Action: string = "CreateDBInstanceReadReplica";
          PerformanceInsightsKMSKeyId: string = "";
          PerformanceInsightsRetentionPeriod: int = 0; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          StorageType: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil): Recallable =
  ## postCreateDBInstanceReadReplica
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ##   Port: int
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   SourceDBInstanceIdentifier: string (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Action: string (required)
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   Version: string (required)
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  var query_605943 = newJObject()
  var formData_605944 = newJObject()
  add(formData_605944, "Port", newJInt(Port))
  add(formData_605944, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_605944, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_605944, "MultiAZ", newJBool(MultiAZ))
  add(formData_605944, "Domain", newJString(Domain))
  add(formData_605944, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_605944, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(formData_605944, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_605944, "SourceRegion", newJString(SourceRegion))
  add(formData_605944, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_605944.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_605944, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_605944, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_605944, "KmsKeyId", newJString(KmsKeyId))
  add(formData_605944, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_605944, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_605944, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_605944, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_605944, "Iops", newJInt(Iops))
  if EnableCloudwatchLogsExports != nil:
    formData_605944.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_605944, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_605943, "Action", newJString(Action))
  add(formData_605944, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_605944, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  if Tags != nil:
    formData_605944.add "Tags", Tags
  add(formData_605944, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_605944, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_605944, "OptionGroupName", newJString(OptionGroupName))
  add(query_605943, "Version", newJString(Version))
  add(formData_605944, "StorageType", newJString(StorageType))
  add(formData_605944, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_605944, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_605944.add "ProcessorFeatures", ProcessorFeatures
  result = call_605942.call(nil, query_605943, nil, formData_605944, nil)

var postCreateDBInstanceReadReplica* = Call_PostCreateDBInstanceReadReplica_605898(
    name: "postCreateDBInstanceReadReplica", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstanceReadReplica",
    validator: validate_PostCreateDBInstanceReadReplica_605899, base: "/",
    url: url_PostCreateDBInstanceReadReplica_605900,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstanceReadReplica_605852 = ref object of OpenApiRestCall_604389
proc url_GetCreateDBInstanceReadReplica_605854(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBInstanceReadReplica_605853(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   SourceDBInstanceIdentifier: JString (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Port: JInt
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   OptionGroupName: JString
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   DBSubnetGroupName: JString
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  var valid_605855 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_605855 = validateParameter(valid_605855, JBool, required = false, default = nil)
  if valid_605855 != nil:
    section.add "UseDefaultProcessorFeatures", valid_605855
  var valid_605856 = query.getOrDefault("DeletionProtection")
  valid_605856 = validateParameter(valid_605856, JBool, required = false, default = nil)
  if valid_605856 != nil:
    section.add "DeletionProtection", valid_605856
  var valid_605857 = query.getOrDefault("DBParameterGroupName")
  valid_605857 = validateParameter(valid_605857, JString, required = false,
                                 default = nil)
  if valid_605857 != nil:
    section.add "DBParameterGroupName", valid_605857
  var valid_605858 = query.getOrDefault("CopyTagsToSnapshot")
  valid_605858 = validateParameter(valid_605858, JBool, required = false, default = nil)
  if valid_605858 != nil:
    section.add "CopyTagsToSnapshot", valid_605858
  var valid_605859 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_605859 = validateParameter(valid_605859, JInt, required = false, default = nil)
  if valid_605859 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_605859
  var valid_605860 = query.getOrDefault("Tags")
  valid_605860 = validateParameter(valid_605860, JArray, required = false,
                                 default = nil)
  if valid_605860 != nil:
    section.add "Tags", valid_605860
  var valid_605861 = query.getOrDefault("MonitoringInterval")
  valid_605861 = validateParameter(valid_605861, JInt, required = false, default = nil)
  if valid_605861 != nil:
    section.add "MonitoringInterval", valid_605861
  var valid_605862 = query.getOrDefault("MonitoringRoleArn")
  valid_605862 = validateParameter(valid_605862, JString, required = false,
                                 default = nil)
  if valid_605862 != nil:
    section.add "MonitoringRoleArn", valid_605862
  var valid_605863 = query.getOrDefault("KmsKeyId")
  valid_605863 = validateParameter(valid_605863, JString, required = false,
                                 default = nil)
  if valid_605863 != nil:
    section.add "KmsKeyId", valid_605863
  var valid_605864 = query.getOrDefault("PreSignedUrl")
  valid_605864 = validateParameter(valid_605864, JString, required = false,
                                 default = nil)
  if valid_605864 != nil:
    section.add "PreSignedUrl", valid_605864
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_605865 = query.getOrDefault("DBInstanceIdentifier")
  valid_605865 = validateParameter(valid_605865, JString, required = true,
                                 default = nil)
  if valid_605865 != nil:
    section.add "DBInstanceIdentifier", valid_605865
  var valid_605866 = query.getOrDefault("ProcessorFeatures")
  valid_605866 = validateParameter(valid_605866, JArray, required = false,
                                 default = nil)
  if valid_605866 != nil:
    section.add "ProcessorFeatures", valid_605866
  var valid_605867 = query.getOrDefault("StorageType")
  valid_605867 = validateParameter(valid_605867, JString, required = false,
                                 default = nil)
  if valid_605867 != nil:
    section.add "StorageType", valid_605867
  var valid_605868 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_605868 = validateParameter(valid_605868, JBool, required = false, default = nil)
  if valid_605868 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_605868
  var valid_605869 = query.getOrDefault("SourceRegion")
  valid_605869 = validateParameter(valid_605869, JString, required = false,
                                 default = nil)
  if valid_605869 != nil:
    section.add "SourceRegion", valid_605869
  var valid_605870 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_605870 = validateParameter(valid_605870, JArray, required = false,
                                 default = nil)
  if valid_605870 != nil:
    section.add "EnableCloudwatchLogsExports", valid_605870
  var valid_605871 = query.getOrDefault("Action")
  valid_605871 = validateParameter(valid_605871, JString, required = true, default = newJString(
      "CreateDBInstanceReadReplica"))
  if valid_605871 != nil:
    section.add "Action", valid_605871
  var valid_605872 = query.getOrDefault("SourceDBInstanceIdentifier")
  valid_605872 = validateParameter(valid_605872, JString, required = true,
                                 default = nil)
  if valid_605872 != nil:
    section.add "SourceDBInstanceIdentifier", valid_605872
  var valid_605873 = query.getOrDefault("MultiAZ")
  valid_605873 = validateParameter(valid_605873, JBool, required = false, default = nil)
  if valid_605873 != nil:
    section.add "MultiAZ", valid_605873
  var valid_605874 = query.getOrDefault("Port")
  valid_605874 = validateParameter(valid_605874, JInt, required = false, default = nil)
  if valid_605874 != nil:
    section.add "Port", valid_605874
  var valid_605875 = query.getOrDefault("Domain")
  valid_605875 = validateParameter(valid_605875, JString, required = false,
                                 default = nil)
  if valid_605875 != nil:
    section.add "Domain", valid_605875
  var valid_605876 = query.getOrDefault("VpcSecurityGroupIds")
  valid_605876 = validateParameter(valid_605876, JArray, required = false,
                                 default = nil)
  if valid_605876 != nil:
    section.add "VpcSecurityGroupIds", valid_605876
  var valid_605877 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_605877 = validateParameter(valid_605877, JString, required = false,
                                 default = nil)
  if valid_605877 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_605877
  var valid_605878 = query.getOrDefault("AvailabilityZone")
  valid_605878 = validateParameter(valid_605878, JString, required = false,
                                 default = nil)
  if valid_605878 != nil:
    section.add "AvailabilityZone", valid_605878
  var valid_605879 = query.getOrDefault("OptionGroupName")
  valid_605879 = validateParameter(valid_605879, JString, required = false,
                                 default = nil)
  if valid_605879 != nil:
    section.add "OptionGroupName", valid_605879
  var valid_605880 = query.getOrDefault("DBSubnetGroupName")
  valid_605880 = validateParameter(valid_605880, JString, required = false,
                                 default = nil)
  if valid_605880 != nil:
    section.add "DBSubnetGroupName", valid_605880
  var valid_605881 = query.getOrDefault("Version")
  valid_605881 = validateParameter(valid_605881, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605881 != nil:
    section.add "Version", valid_605881
  var valid_605882 = query.getOrDefault("DBInstanceClass")
  valid_605882 = validateParameter(valid_605882, JString, required = false,
                                 default = nil)
  if valid_605882 != nil:
    section.add "DBInstanceClass", valid_605882
  var valid_605883 = query.getOrDefault("PubliclyAccessible")
  valid_605883 = validateParameter(valid_605883, JBool, required = false, default = nil)
  if valid_605883 != nil:
    section.add "PubliclyAccessible", valid_605883
  var valid_605884 = query.getOrDefault("EnablePerformanceInsights")
  valid_605884 = validateParameter(valid_605884, JBool, required = false, default = nil)
  if valid_605884 != nil:
    section.add "EnablePerformanceInsights", valid_605884
  var valid_605885 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_605885 = validateParameter(valid_605885, JBool, required = false, default = nil)
  if valid_605885 != nil:
    section.add "AutoMinorVersionUpgrade", valid_605885
  var valid_605886 = query.getOrDefault("Iops")
  valid_605886 = validateParameter(valid_605886, JInt, required = false, default = nil)
  if valid_605886 != nil:
    section.add "Iops", valid_605886
  var valid_605887 = query.getOrDefault("DomainIAMRoleName")
  valid_605887 = validateParameter(valid_605887, JString, required = false,
                                 default = nil)
  if valid_605887 != nil:
    section.add "DomainIAMRoleName", valid_605887
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605888 = header.getOrDefault("X-Amz-Signature")
  valid_605888 = validateParameter(valid_605888, JString, required = false,
                                 default = nil)
  if valid_605888 != nil:
    section.add "X-Amz-Signature", valid_605888
  var valid_605889 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605889 = validateParameter(valid_605889, JString, required = false,
                                 default = nil)
  if valid_605889 != nil:
    section.add "X-Amz-Content-Sha256", valid_605889
  var valid_605890 = header.getOrDefault("X-Amz-Date")
  valid_605890 = validateParameter(valid_605890, JString, required = false,
                                 default = nil)
  if valid_605890 != nil:
    section.add "X-Amz-Date", valid_605890
  var valid_605891 = header.getOrDefault("X-Amz-Credential")
  valid_605891 = validateParameter(valid_605891, JString, required = false,
                                 default = nil)
  if valid_605891 != nil:
    section.add "X-Amz-Credential", valid_605891
  var valid_605892 = header.getOrDefault("X-Amz-Security-Token")
  valid_605892 = validateParameter(valid_605892, JString, required = false,
                                 default = nil)
  if valid_605892 != nil:
    section.add "X-Amz-Security-Token", valid_605892
  var valid_605893 = header.getOrDefault("X-Amz-Algorithm")
  valid_605893 = validateParameter(valid_605893, JString, required = false,
                                 default = nil)
  if valid_605893 != nil:
    section.add "X-Amz-Algorithm", valid_605893
  var valid_605894 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605894 = validateParameter(valid_605894, JString, required = false,
                                 default = nil)
  if valid_605894 != nil:
    section.add "X-Amz-SignedHeaders", valid_605894
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605895: Call_GetCreateDBInstanceReadReplica_605852; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  let valid = call_605895.validator(path, query, header, formData, body)
  let scheme = call_605895.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605895.url(scheme.get, call_605895.host, call_605895.base,
                         call_605895.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605895, url, valid)

proc call*(call_605896: Call_GetCreateDBInstanceReadReplica_605852;
          DBInstanceIdentifier: string; SourceDBInstanceIdentifier: string;
          UseDefaultProcessorFeatures: bool = false;
          DeletionProtection: bool = false; DBParameterGroupName: string = "";
          CopyTagsToSnapshot: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0; Tags: JsonNode = nil;
          MonitoringInterval: int = 0; MonitoringRoleArn: string = "";
          KmsKeyId: string = ""; PreSignedUrl: string = "";
          ProcessorFeatures: JsonNode = nil; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false; SourceRegion: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "CreateDBInstanceReadReplica"; MultiAZ: bool = false;
          Port: int = 0; Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          PerformanceInsightsKMSKeyId: string = ""; AvailabilityZone: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          PubliclyAccessible: bool = false; EnablePerformanceInsights: bool = false;
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getCreateDBInstanceReadReplica
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   SourceDBInstanceIdentifier: string (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   Port: int
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   OptionGroupName: string
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   DBSubnetGroupName: string
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_605897 = newJObject()
  add(query_605897, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_605897, "DeletionProtection", newJBool(DeletionProtection))
  add(query_605897, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_605897, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_605897, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  if Tags != nil:
    query_605897.add "Tags", Tags
  add(query_605897, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_605897, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_605897, "KmsKeyId", newJString(KmsKeyId))
  add(query_605897, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_605897, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  if ProcessorFeatures != nil:
    query_605897.add "ProcessorFeatures", ProcessorFeatures
  add(query_605897, "StorageType", newJString(StorageType))
  add(query_605897, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_605897, "SourceRegion", newJString(SourceRegion))
  if EnableCloudwatchLogsExports != nil:
    query_605897.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_605897, "Action", newJString(Action))
  add(query_605897, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(query_605897, "MultiAZ", newJBool(MultiAZ))
  add(query_605897, "Port", newJInt(Port))
  add(query_605897, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_605897.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_605897, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_605897, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_605897, "OptionGroupName", newJString(OptionGroupName))
  add(query_605897, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_605897, "Version", newJString(Version))
  add(query_605897, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_605897, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_605897, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_605897, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_605897, "Iops", newJInt(Iops))
  add(query_605897, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_605896.call(nil, query_605897, nil, nil, nil)

var getCreateDBInstanceReadReplica* = Call_GetCreateDBInstanceReadReplica_605852(
    name: "getCreateDBInstanceReadReplica", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstanceReadReplica",
    validator: validate_GetCreateDBInstanceReadReplica_605853, base: "/",
    url: url_GetCreateDBInstanceReadReplica_605854,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBParameterGroup_605964 = ref object of OpenApiRestCall_604389
proc url_PostCreateDBParameterGroup_605966(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBParameterGroup_605965(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_605967 = query.getOrDefault("Action")
  valid_605967 = validateParameter(valid_605967, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_605967 != nil:
    section.add "Action", valid_605967
  var valid_605968 = query.getOrDefault("Version")
  valid_605968 = validateParameter(valid_605968, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605968 != nil:
    section.add "Version", valid_605968
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605969 = header.getOrDefault("X-Amz-Signature")
  valid_605969 = validateParameter(valid_605969, JString, required = false,
                                 default = nil)
  if valid_605969 != nil:
    section.add "X-Amz-Signature", valid_605969
  var valid_605970 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605970 = validateParameter(valid_605970, JString, required = false,
                                 default = nil)
  if valid_605970 != nil:
    section.add "X-Amz-Content-Sha256", valid_605970
  var valid_605971 = header.getOrDefault("X-Amz-Date")
  valid_605971 = validateParameter(valid_605971, JString, required = false,
                                 default = nil)
  if valid_605971 != nil:
    section.add "X-Amz-Date", valid_605971
  var valid_605972 = header.getOrDefault("X-Amz-Credential")
  valid_605972 = validateParameter(valid_605972, JString, required = false,
                                 default = nil)
  if valid_605972 != nil:
    section.add "X-Amz-Credential", valid_605972
  var valid_605973 = header.getOrDefault("X-Amz-Security-Token")
  valid_605973 = validateParameter(valid_605973, JString, required = false,
                                 default = nil)
  if valid_605973 != nil:
    section.add "X-Amz-Security-Token", valid_605973
  var valid_605974 = header.getOrDefault("X-Amz-Algorithm")
  valid_605974 = validateParameter(valid_605974, JString, required = false,
                                 default = nil)
  if valid_605974 != nil:
    section.add "X-Amz-Algorithm", valid_605974
  var valid_605975 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605975 = validateParameter(valid_605975, JString, required = false,
                                 default = nil)
  if valid_605975 != nil:
    section.add "X-Amz-SignedHeaders", valid_605975
  result.add "header", section
  ## parameters in `formData` object:
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Description` field"
  var valid_605976 = formData.getOrDefault("Description")
  valid_605976 = validateParameter(valid_605976, JString, required = true,
                                 default = nil)
  if valid_605976 != nil:
    section.add "Description", valid_605976
  var valid_605977 = formData.getOrDefault("DBParameterGroupName")
  valid_605977 = validateParameter(valid_605977, JString, required = true,
                                 default = nil)
  if valid_605977 != nil:
    section.add "DBParameterGroupName", valid_605977
  var valid_605978 = formData.getOrDefault("Tags")
  valid_605978 = validateParameter(valid_605978, JArray, required = false,
                                 default = nil)
  if valid_605978 != nil:
    section.add "Tags", valid_605978
  var valid_605979 = formData.getOrDefault("DBParameterGroupFamily")
  valid_605979 = validateParameter(valid_605979, JString, required = true,
                                 default = nil)
  if valid_605979 != nil:
    section.add "DBParameterGroupFamily", valid_605979
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605980: Call_PostCreateDBParameterGroup_605964; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_605980.validator(path, query, header, formData, body)
  let scheme = call_605980.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605980.url(scheme.get, call_605980.host, call_605980.base,
                         call_605980.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605980, url, valid)

proc call*(call_605981: Call_PostCreateDBParameterGroup_605964;
          Description: string; DBParameterGroupName: string;
          DBParameterGroupFamily: string;
          Action: string = "CreateDBParameterGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  var query_605982 = newJObject()
  var formData_605983 = newJObject()
  add(formData_605983, "Description", newJString(Description))
  add(formData_605983, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_605982, "Action", newJString(Action))
  if Tags != nil:
    formData_605983.add "Tags", Tags
  add(query_605982, "Version", newJString(Version))
  add(formData_605983, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_605981.call(nil, query_605982, nil, formData_605983, nil)

var postCreateDBParameterGroup* = Call_PostCreateDBParameterGroup_605964(
    name: "postCreateDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_PostCreateDBParameterGroup_605965, base: "/",
    url: url_PostCreateDBParameterGroup_605966,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBParameterGroup_605945 = ref object of OpenApiRestCall_604389
proc url_GetCreateDBParameterGroup_605947(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBParameterGroup_605946(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_605948 = query.getOrDefault("DBParameterGroupFamily")
  valid_605948 = validateParameter(valid_605948, JString, required = true,
                                 default = nil)
  if valid_605948 != nil:
    section.add "DBParameterGroupFamily", valid_605948
  var valid_605949 = query.getOrDefault("DBParameterGroupName")
  valid_605949 = validateParameter(valid_605949, JString, required = true,
                                 default = nil)
  if valid_605949 != nil:
    section.add "DBParameterGroupName", valid_605949
  var valid_605950 = query.getOrDefault("Tags")
  valid_605950 = validateParameter(valid_605950, JArray, required = false,
                                 default = nil)
  if valid_605950 != nil:
    section.add "Tags", valid_605950
  var valid_605951 = query.getOrDefault("Action")
  valid_605951 = validateParameter(valid_605951, JString, required = true,
                                 default = newJString("CreateDBParameterGroup"))
  if valid_605951 != nil:
    section.add "Action", valid_605951
  var valid_605952 = query.getOrDefault("Description")
  valid_605952 = validateParameter(valid_605952, JString, required = true,
                                 default = nil)
  if valid_605952 != nil:
    section.add "Description", valid_605952
  var valid_605953 = query.getOrDefault("Version")
  valid_605953 = validateParameter(valid_605953, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605953 != nil:
    section.add "Version", valid_605953
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605954 = header.getOrDefault("X-Amz-Signature")
  valid_605954 = validateParameter(valid_605954, JString, required = false,
                                 default = nil)
  if valid_605954 != nil:
    section.add "X-Amz-Signature", valid_605954
  var valid_605955 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_605955 = validateParameter(valid_605955, JString, required = false,
                                 default = nil)
  if valid_605955 != nil:
    section.add "X-Amz-Content-Sha256", valid_605955
  var valid_605956 = header.getOrDefault("X-Amz-Date")
  valid_605956 = validateParameter(valid_605956, JString, required = false,
                                 default = nil)
  if valid_605956 != nil:
    section.add "X-Amz-Date", valid_605956
  var valid_605957 = header.getOrDefault("X-Amz-Credential")
  valid_605957 = validateParameter(valid_605957, JString, required = false,
                                 default = nil)
  if valid_605957 != nil:
    section.add "X-Amz-Credential", valid_605957
  var valid_605958 = header.getOrDefault("X-Amz-Security-Token")
  valid_605958 = validateParameter(valid_605958, JString, required = false,
                                 default = nil)
  if valid_605958 != nil:
    section.add "X-Amz-Security-Token", valid_605958
  var valid_605959 = header.getOrDefault("X-Amz-Algorithm")
  valid_605959 = validateParameter(valid_605959, JString, required = false,
                                 default = nil)
  if valid_605959 != nil:
    section.add "X-Amz-Algorithm", valid_605959
  var valid_605960 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_605960 = validateParameter(valid_605960, JString, required = false,
                                 default = nil)
  if valid_605960 != nil:
    section.add "X-Amz-SignedHeaders", valid_605960
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_605961: Call_GetCreateDBParameterGroup_605945; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_605961.validator(path, query, header, formData, body)
  let scheme = call_605961.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_605961.url(scheme.get, call_605961.host, call_605961.base,
                         call_605961.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_605961, url, valid)

proc call*(call_605962: Call_GetCreateDBParameterGroup_605945;
          DBParameterGroupFamily: string; DBParameterGroupName: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   Version: string (required)
  var query_605963 = newJObject()
  add(query_605963, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_605963, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_605963.add "Tags", Tags
  add(query_605963, "Action", newJString(Action))
  add(query_605963, "Description", newJString(Description))
  add(query_605963, "Version", newJString(Version))
  result = call_605962.call(nil, query_605963, nil, nil, nil)

var getCreateDBParameterGroup* = Call_GetCreateDBParameterGroup_605945(
    name: "getCreateDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_GetCreateDBParameterGroup_605946, base: "/",
    url: url_GetCreateDBParameterGroup_605947,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBProxy_606009 = ref object of OpenApiRestCall_604389
proc url_PostCreateDBProxy_606011(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBProxy_606010(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606012 = query.getOrDefault("Action")
  valid_606012 = validateParameter(valid_606012, JString, required = true,
                                 default = newJString("CreateDBProxy"))
  if valid_606012 != nil:
    section.add "Action", valid_606012
  var valid_606013 = query.getOrDefault("Version")
  valid_606013 = validateParameter(valid_606013, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606013 != nil:
    section.add "Version", valid_606013
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606014 = header.getOrDefault("X-Amz-Signature")
  valid_606014 = validateParameter(valid_606014, JString, required = false,
                                 default = nil)
  if valid_606014 != nil:
    section.add "X-Amz-Signature", valid_606014
  var valid_606015 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606015 = validateParameter(valid_606015, JString, required = false,
                                 default = nil)
  if valid_606015 != nil:
    section.add "X-Amz-Content-Sha256", valid_606015
  var valid_606016 = header.getOrDefault("X-Amz-Date")
  valid_606016 = validateParameter(valid_606016, JString, required = false,
                                 default = nil)
  if valid_606016 != nil:
    section.add "X-Amz-Date", valid_606016
  var valid_606017 = header.getOrDefault("X-Amz-Credential")
  valid_606017 = validateParameter(valid_606017, JString, required = false,
                                 default = nil)
  if valid_606017 != nil:
    section.add "X-Amz-Credential", valid_606017
  var valid_606018 = header.getOrDefault("X-Amz-Security-Token")
  valid_606018 = validateParameter(valid_606018, JString, required = false,
                                 default = nil)
  if valid_606018 != nil:
    section.add "X-Amz-Security-Token", valid_606018
  var valid_606019 = header.getOrDefault("X-Amz-Algorithm")
  valid_606019 = validateParameter(valid_606019, JString, required = false,
                                 default = nil)
  if valid_606019 != nil:
    section.add "X-Amz-Algorithm", valid_606019
  var valid_606020 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606020 = validateParameter(valid_606020, JString, required = false,
                                 default = nil)
  if valid_606020 != nil:
    section.add "X-Amz-SignedHeaders", valid_606020
  result.add "header", section
  ## parameters in `formData` object:
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   RequireTLS: JBool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   EngineFamily: JString (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_606021 = formData.getOrDefault("IdleClientTimeout")
  valid_606021 = validateParameter(valid_606021, JInt, required = false, default = nil)
  if valid_606021 != nil:
    section.add "IdleClientTimeout", valid_606021
  assert formData != nil,
        "formData argument is necessary due to required `VpcSubnetIds` field"
  var valid_606022 = formData.getOrDefault("VpcSubnetIds")
  valid_606022 = validateParameter(valid_606022, JArray, required = true, default = nil)
  if valid_606022 != nil:
    section.add "VpcSubnetIds", valid_606022
  var valid_606023 = formData.getOrDefault("RequireTLS")
  valid_606023 = validateParameter(valid_606023, JBool, required = false, default = nil)
  if valid_606023 != nil:
    section.add "RequireTLS", valid_606023
  var valid_606024 = formData.getOrDefault("DebugLogging")
  valid_606024 = validateParameter(valid_606024, JBool, required = false, default = nil)
  if valid_606024 != nil:
    section.add "DebugLogging", valid_606024
  var valid_606025 = formData.getOrDefault("RoleArn")
  valid_606025 = validateParameter(valid_606025, JString, required = true,
                                 default = nil)
  if valid_606025 != nil:
    section.add "RoleArn", valid_606025
  var valid_606026 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_606026 = validateParameter(valid_606026, JArray, required = false,
                                 default = nil)
  if valid_606026 != nil:
    section.add "VpcSecurityGroupIds", valid_606026
  var valid_606027 = formData.getOrDefault("EngineFamily")
  valid_606027 = validateParameter(valid_606027, JString, required = true,
                                 default = newJString("MYSQL"))
  if valid_606027 != nil:
    section.add "EngineFamily", valid_606027
  var valid_606028 = formData.getOrDefault("Auth")
  valid_606028 = validateParameter(valid_606028, JArray, required = true, default = nil)
  if valid_606028 != nil:
    section.add "Auth", valid_606028
  var valid_606029 = formData.getOrDefault("DBProxyName")
  valid_606029 = validateParameter(valid_606029, JString, required = true,
                                 default = nil)
  if valid_606029 != nil:
    section.add "DBProxyName", valid_606029
  var valid_606030 = formData.getOrDefault("Tags")
  valid_606030 = validateParameter(valid_606030, JArray, required = false,
                                 default = nil)
  if valid_606030 != nil:
    section.add "Tags", valid_606030
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606031: Call_PostCreateDBProxy_606009; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  let valid = call_606031.validator(path, query, header, formData, body)
  let scheme = call_606031.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606031.url(scheme.get, call_606031.host, call_606031.base,
                         call_606031.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606031, url, valid)

proc call*(call_606032: Call_PostCreateDBProxy_606009; VpcSubnetIds: JsonNode;
          RoleArn: string; Auth: JsonNode; DBProxyName: string;
          IdleClientTimeout: int = 0; RequireTLS: bool = false;
          DebugLogging: bool = false; VpcSecurityGroupIds: JsonNode = nil;
          EngineFamily: string = "MYSQL"; Action: string = "CreateDBProxy";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   RequireTLS: bool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   EngineFamily: string (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   DBProxyName: string (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_606033 = newJObject()
  var formData_606034 = newJObject()
  add(formData_606034, "IdleClientTimeout", newJInt(IdleClientTimeout))
  if VpcSubnetIds != nil:
    formData_606034.add "VpcSubnetIds", VpcSubnetIds
  add(formData_606034, "RequireTLS", newJBool(RequireTLS))
  add(formData_606034, "DebugLogging", newJBool(DebugLogging))
  add(formData_606034, "RoleArn", newJString(RoleArn))
  if VpcSecurityGroupIds != nil:
    formData_606034.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_606034, "EngineFamily", newJString(EngineFamily))
  if Auth != nil:
    formData_606034.add "Auth", Auth
  add(formData_606034, "DBProxyName", newJString(DBProxyName))
  add(query_606033, "Action", newJString(Action))
  if Tags != nil:
    formData_606034.add "Tags", Tags
  add(query_606033, "Version", newJString(Version))
  result = call_606032.call(nil, query_606033, nil, formData_606034, nil)

var postCreateDBProxy* = Call_PostCreateDBProxy_606009(name: "postCreateDBProxy",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBProxy", validator: validate_PostCreateDBProxy_606010,
    base: "/", url: url_PostCreateDBProxy_606011,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBProxy_605984 = ref object of OpenApiRestCall_604389
proc url_GetCreateDBProxy_605986(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBProxy_605985(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   RequireTLS: JBool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   EngineFamily: JString (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Action: JString (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   Version: JString (required)
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  section = newJObject()
  var valid_605987 = query.getOrDefault("IdleClientTimeout")
  valid_605987 = validateParameter(valid_605987, JInt, required = false, default = nil)
  if valid_605987 != nil:
    section.add "IdleClientTimeout", valid_605987
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_605988 = query.getOrDefault("RoleArn")
  valid_605988 = validateParameter(valid_605988, JString, required = true,
                                 default = nil)
  if valid_605988 != nil:
    section.add "RoleArn", valid_605988
  var valid_605989 = query.getOrDefault("Tags")
  valid_605989 = validateParameter(valid_605989, JArray, required = false,
                                 default = nil)
  if valid_605989 != nil:
    section.add "Tags", valid_605989
  var valid_605990 = query.getOrDefault("Auth")
  valid_605990 = validateParameter(valid_605990, JArray, required = true, default = nil)
  if valid_605990 != nil:
    section.add "Auth", valid_605990
  var valid_605991 = query.getOrDefault("RequireTLS")
  valid_605991 = validateParameter(valid_605991, JBool, required = false, default = nil)
  if valid_605991 != nil:
    section.add "RequireTLS", valid_605991
  var valid_605992 = query.getOrDefault("EngineFamily")
  valid_605992 = validateParameter(valid_605992, JString, required = true,
                                 default = newJString("MYSQL"))
  if valid_605992 != nil:
    section.add "EngineFamily", valid_605992
  var valid_605993 = query.getOrDefault("Action")
  valid_605993 = validateParameter(valid_605993, JString, required = true,
                                 default = newJString("CreateDBProxy"))
  if valid_605993 != nil:
    section.add "Action", valid_605993
  var valid_605994 = query.getOrDefault("VpcSecurityGroupIds")
  valid_605994 = validateParameter(valid_605994, JArray, required = false,
                                 default = nil)
  if valid_605994 != nil:
    section.add "VpcSecurityGroupIds", valid_605994
  var valid_605995 = query.getOrDefault("VpcSubnetIds")
  valid_605995 = validateParameter(valid_605995, JArray, required = true, default = nil)
  if valid_605995 != nil:
    section.add "VpcSubnetIds", valid_605995
  var valid_605996 = query.getOrDefault("Version")
  valid_605996 = validateParameter(valid_605996, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_605996 != nil:
    section.add "Version", valid_605996
  var valid_605997 = query.getOrDefault("DebugLogging")
  valid_605997 = validateParameter(valid_605997, JBool, required = false, default = nil)
  if valid_605997 != nil:
    section.add "DebugLogging", valid_605997
  var valid_605998 = query.getOrDefault("DBProxyName")
  valid_605998 = validateParameter(valid_605998, JString, required = true,
                                 default = nil)
  if valid_605998 != nil:
    section.add "DBProxyName", valid_605998
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_605999 = header.getOrDefault("X-Amz-Signature")
  valid_605999 = validateParameter(valid_605999, JString, required = false,
                                 default = nil)
  if valid_605999 != nil:
    section.add "X-Amz-Signature", valid_605999
  var valid_606000 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606000 = validateParameter(valid_606000, JString, required = false,
                                 default = nil)
  if valid_606000 != nil:
    section.add "X-Amz-Content-Sha256", valid_606000
  var valid_606001 = header.getOrDefault("X-Amz-Date")
  valid_606001 = validateParameter(valid_606001, JString, required = false,
                                 default = nil)
  if valid_606001 != nil:
    section.add "X-Amz-Date", valid_606001
  var valid_606002 = header.getOrDefault("X-Amz-Credential")
  valid_606002 = validateParameter(valid_606002, JString, required = false,
                                 default = nil)
  if valid_606002 != nil:
    section.add "X-Amz-Credential", valid_606002
  var valid_606003 = header.getOrDefault("X-Amz-Security-Token")
  valid_606003 = validateParameter(valid_606003, JString, required = false,
                                 default = nil)
  if valid_606003 != nil:
    section.add "X-Amz-Security-Token", valid_606003
  var valid_606004 = header.getOrDefault("X-Amz-Algorithm")
  valid_606004 = validateParameter(valid_606004, JString, required = false,
                                 default = nil)
  if valid_606004 != nil:
    section.add "X-Amz-Algorithm", valid_606004
  var valid_606005 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606005 = validateParameter(valid_606005, JString, required = false,
                                 default = nil)
  if valid_606005 != nil:
    section.add "X-Amz-SignedHeaders", valid_606005
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606006: Call_GetCreateDBProxy_605984; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  let valid = call_606006.validator(path, query, header, formData, body)
  let scheme = call_606006.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606006.url(scheme.get, call_606006.host, call_606006.base,
                         call_606006.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606006, url, valid)

proc call*(call_606007: Call_GetCreateDBProxy_605984; RoleArn: string;
          Auth: JsonNode; VpcSubnetIds: JsonNode; DBProxyName: string;
          IdleClientTimeout: int = 0; Tags: JsonNode = nil; RequireTLS: bool = false;
          EngineFamily: string = "MYSQL"; Action: string = "CreateDBProxy";
          VpcSecurityGroupIds: JsonNode = nil; Version: string = "2014-10-31";
          DebugLogging: bool = false): Recallable =
  ## getCreateDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   RequireTLS: bool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   EngineFamily: string (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Action: string (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   Version: string (required)
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: string (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  var query_606008 = newJObject()
  add(query_606008, "IdleClientTimeout", newJInt(IdleClientTimeout))
  add(query_606008, "RoleArn", newJString(RoleArn))
  if Tags != nil:
    query_606008.add "Tags", Tags
  if Auth != nil:
    query_606008.add "Auth", Auth
  add(query_606008, "RequireTLS", newJBool(RequireTLS))
  add(query_606008, "EngineFamily", newJString(EngineFamily))
  add(query_606008, "Action", newJString(Action))
  if VpcSecurityGroupIds != nil:
    query_606008.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if VpcSubnetIds != nil:
    query_606008.add "VpcSubnetIds", VpcSubnetIds
  add(query_606008, "Version", newJString(Version))
  add(query_606008, "DebugLogging", newJBool(DebugLogging))
  add(query_606008, "DBProxyName", newJString(DBProxyName))
  result = call_606007.call(nil, query_606008, nil, nil, nil)

var getCreateDBProxy* = Call_GetCreateDBProxy_605984(name: "getCreateDBProxy",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBProxy", validator: validate_GetCreateDBProxy_605985,
    base: "/", url: url_GetCreateDBProxy_605986,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSecurityGroup_606053 = ref object of OpenApiRestCall_604389
proc url_PostCreateDBSecurityGroup_606055(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSecurityGroup_606054(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606056 = query.getOrDefault("Action")
  valid_606056 = validateParameter(valid_606056, JString, required = true,
                                 default = newJString("CreateDBSecurityGroup"))
  if valid_606056 != nil:
    section.add "Action", valid_606056
  var valid_606057 = query.getOrDefault("Version")
  valid_606057 = validateParameter(valid_606057, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606057 != nil:
    section.add "Version", valid_606057
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606058 = header.getOrDefault("X-Amz-Signature")
  valid_606058 = validateParameter(valid_606058, JString, required = false,
                                 default = nil)
  if valid_606058 != nil:
    section.add "X-Amz-Signature", valid_606058
  var valid_606059 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606059 = validateParameter(valid_606059, JString, required = false,
                                 default = nil)
  if valid_606059 != nil:
    section.add "X-Amz-Content-Sha256", valid_606059
  var valid_606060 = header.getOrDefault("X-Amz-Date")
  valid_606060 = validateParameter(valid_606060, JString, required = false,
                                 default = nil)
  if valid_606060 != nil:
    section.add "X-Amz-Date", valid_606060
  var valid_606061 = header.getOrDefault("X-Amz-Credential")
  valid_606061 = validateParameter(valid_606061, JString, required = false,
                                 default = nil)
  if valid_606061 != nil:
    section.add "X-Amz-Credential", valid_606061
  var valid_606062 = header.getOrDefault("X-Amz-Security-Token")
  valid_606062 = validateParameter(valid_606062, JString, required = false,
                                 default = nil)
  if valid_606062 != nil:
    section.add "X-Amz-Security-Token", valid_606062
  var valid_606063 = header.getOrDefault("X-Amz-Algorithm")
  valid_606063 = validateParameter(valid_606063, JString, required = false,
                                 default = nil)
  if valid_606063 != nil:
    section.add "X-Amz-Algorithm", valid_606063
  var valid_606064 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606064 = validateParameter(valid_606064, JString, required = false,
                                 default = nil)
  if valid_606064 != nil:
    section.add "X-Amz-SignedHeaders", valid_606064
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupDescription: JString (required)
  ##                             : The description for the DB security group.
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupDescription` field"
  var valid_606065 = formData.getOrDefault("DBSecurityGroupDescription")
  valid_606065 = validateParameter(valid_606065, JString, required = true,
                                 default = nil)
  if valid_606065 != nil:
    section.add "DBSecurityGroupDescription", valid_606065
  var valid_606066 = formData.getOrDefault("DBSecurityGroupName")
  valid_606066 = validateParameter(valid_606066, JString, required = true,
                                 default = nil)
  if valid_606066 != nil:
    section.add "DBSecurityGroupName", valid_606066
  var valid_606067 = formData.getOrDefault("Tags")
  valid_606067 = validateParameter(valid_606067, JArray, required = false,
                                 default = nil)
  if valid_606067 != nil:
    section.add "Tags", valid_606067
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606068: Call_PostCreateDBSecurityGroup_606053; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  let valid = call_606068.validator(path, query, header, formData, body)
  let scheme = call_606068.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606068.url(scheme.get, call_606068.host, call_606068.base,
                         call_606068.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606068, url, valid)

proc call*(call_606069: Call_PostCreateDBSecurityGroup_606053;
          DBSecurityGroupDescription: string; DBSecurityGroupName: string;
          Action: string = "CreateDBSecurityGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSecurityGroup
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ##   DBSecurityGroupDescription: string (required)
  ##                             : The description for the DB security group.
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_606070 = newJObject()
  var formData_606071 = newJObject()
  add(formData_606071, "DBSecurityGroupDescription",
      newJString(DBSecurityGroupDescription))
  add(formData_606071, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_606070, "Action", newJString(Action))
  if Tags != nil:
    formData_606071.add "Tags", Tags
  add(query_606070, "Version", newJString(Version))
  result = call_606069.call(nil, query_606070, nil, formData_606071, nil)

var postCreateDBSecurityGroup* = Call_PostCreateDBSecurityGroup_606053(
    name: "postCreateDBSecurityGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSecurityGroup",
    validator: validate_PostCreateDBSecurityGroup_606054, base: "/",
    url: url_PostCreateDBSecurityGroup_606055,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSecurityGroup_606035 = ref object of OpenApiRestCall_604389
proc url_GetCreateDBSecurityGroup_606037(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSecurityGroup_606036(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSecurityGroupDescription: JString (required)
  ##                             : The description for the DB security group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_606038 = query.getOrDefault("DBSecurityGroupName")
  valid_606038 = validateParameter(valid_606038, JString, required = true,
                                 default = nil)
  if valid_606038 != nil:
    section.add "DBSecurityGroupName", valid_606038
  var valid_606039 = query.getOrDefault("Tags")
  valid_606039 = validateParameter(valid_606039, JArray, required = false,
                                 default = nil)
  if valid_606039 != nil:
    section.add "Tags", valid_606039
  var valid_606040 = query.getOrDefault("DBSecurityGroupDescription")
  valid_606040 = validateParameter(valid_606040, JString, required = true,
                                 default = nil)
  if valid_606040 != nil:
    section.add "DBSecurityGroupDescription", valid_606040
  var valid_606041 = query.getOrDefault("Action")
  valid_606041 = validateParameter(valid_606041, JString, required = true,
                                 default = newJString("CreateDBSecurityGroup"))
  if valid_606041 != nil:
    section.add "Action", valid_606041
  var valid_606042 = query.getOrDefault("Version")
  valid_606042 = validateParameter(valid_606042, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606042 != nil:
    section.add "Version", valid_606042
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606043 = header.getOrDefault("X-Amz-Signature")
  valid_606043 = validateParameter(valid_606043, JString, required = false,
                                 default = nil)
  if valid_606043 != nil:
    section.add "X-Amz-Signature", valid_606043
  var valid_606044 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606044 = validateParameter(valid_606044, JString, required = false,
                                 default = nil)
  if valid_606044 != nil:
    section.add "X-Amz-Content-Sha256", valid_606044
  var valid_606045 = header.getOrDefault("X-Amz-Date")
  valid_606045 = validateParameter(valid_606045, JString, required = false,
                                 default = nil)
  if valid_606045 != nil:
    section.add "X-Amz-Date", valid_606045
  var valid_606046 = header.getOrDefault("X-Amz-Credential")
  valid_606046 = validateParameter(valid_606046, JString, required = false,
                                 default = nil)
  if valid_606046 != nil:
    section.add "X-Amz-Credential", valid_606046
  var valid_606047 = header.getOrDefault("X-Amz-Security-Token")
  valid_606047 = validateParameter(valid_606047, JString, required = false,
                                 default = nil)
  if valid_606047 != nil:
    section.add "X-Amz-Security-Token", valid_606047
  var valid_606048 = header.getOrDefault("X-Amz-Algorithm")
  valid_606048 = validateParameter(valid_606048, JString, required = false,
                                 default = nil)
  if valid_606048 != nil:
    section.add "X-Amz-Algorithm", valid_606048
  var valid_606049 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606049 = validateParameter(valid_606049, JString, required = false,
                                 default = nil)
  if valid_606049 != nil:
    section.add "X-Amz-SignedHeaders", valid_606049
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606050: Call_GetCreateDBSecurityGroup_606035; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  let valid = call_606050.validator(path, query, header, formData, body)
  let scheme = call_606050.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606050.url(scheme.get, call_606050.host, call_606050.base,
                         call_606050.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606050, url, valid)

proc call*(call_606051: Call_GetCreateDBSecurityGroup_606035;
          DBSecurityGroupName: string; DBSecurityGroupDescription: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSecurityGroup
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSecurityGroupDescription: string (required)
  ##                             : The description for the DB security group.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606052 = newJObject()
  add(query_606052, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  if Tags != nil:
    query_606052.add "Tags", Tags
  add(query_606052, "DBSecurityGroupDescription",
      newJString(DBSecurityGroupDescription))
  add(query_606052, "Action", newJString(Action))
  add(query_606052, "Version", newJString(Version))
  result = call_606051.call(nil, query_606052, nil, nil, nil)

var getCreateDBSecurityGroup* = Call_GetCreateDBSecurityGroup_606035(
    name: "getCreateDBSecurityGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSecurityGroup",
    validator: validate_GetCreateDBSecurityGroup_606036, base: "/",
    url: url_GetCreateDBSecurityGroup_606037, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSnapshot_606090 = ref object of OpenApiRestCall_604389
proc url_PostCreateDBSnapshot_606092(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSnapshot_606091(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606093 = query.getOrDefault("Action")
  valid_606093 = validateParameter(valid_606093, JString, required = true,
                                 default = newJString("CreateDBSnapshot"))
  if valid_606093 != nil:
    section.add "Action", valid_606093
  var valid_606094 = query.getOrDefault("Version")
  valid_606094 = validateParameter(valid_606094, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606094 != nil:
    section.add "Version", valid_606094
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606095 = header.getOrDefault("X-Amz-Signature")
  valid_606095 = validateParameter(valid_606095, JString, required = false,
                                 default = nil)
  if valid_606095 != nil:
    section.add "X-Amz-Signature", valid_606095
  var valid_606096 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606096 = validateParameter(valid_606096, JString, required = false,
                                 default = nil)
  if valid_606096 != nil:
    section.add "X-Amz-Content-Sha256", valid_606096
  var valid_606097 = header.getOrDefault("X-Amz-Date")
  valid_606097 = validateParameter(valid_606097, JString, required = false,
                                 default = nil)
  if valid_606097 != nil:
    section.add "X-Amz-Date", valid_606097
  var valid_606098 = header.getOrDefault("X-Amz-Credential")
  valid_606098 = validateParameter(valid_606098, JString, required = false,
                                 default = nil)
  if valid_606098 != nil:
    section.add "X-Amz-Credential", valid_606098
  var valid_606099 = header.getOrDefault("X-Amz-Security-Token")
  valid_606099 = validateParameter(valid_606099, JString, required = false,
                                 default = nil)
  if valid_606099 != nil:
    section.add "X-Amz-Security-Token", valid_606099
  var valid_606100 = header.getOrDefault("X-Amz-Algorithm")
  valid_606100 = validateParameter(valid_606100, JString, required = false,
                                 default = nil)
  if valid_606100 != nil:
    section.add "X-Amz-Algorithm", valid_606100
  var valid_606101 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606101 = validateParameter(valid_606101, JString, required = false,
                                 default = nil)
  if valid_606101 != nil:
    section.add "X-Amz-SignedHeaders", valid_606101
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_606102 = formData.getOrDefault("DBInstanceIdentifier")
  valid_606102 = validateParameter(valid_606102, JString, required = true,
                                 default = nil)
  if valid_606102 != nil:
    section.add "DBInstanceIdentifier", valid_606102
  var valid_606103 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_606103 = validateParameter(valid_606103, JString, required = true,
                                 default = nil)
  if valid_606103 != nil:
    section.add "DBSnapshotIdentifier", valid_606103
  var valid_606104 = formData.getOrDefault("Tags")
  valid_606104 = validateParameter(valid_606104, JArray, required = false,
                                 default = nil)
  if valid_606104 != nil:
    section.add "Tags", valid_606104
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606105: Call_PostCreateDBSnapshot_606090; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  let valid = call_606105.validator(path, query, header, formData, body)
  let scheme = call_606105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606105.url(scheme.get, call_606105.host, call_606105.base,
                         call_606105.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606105, url, valid)

proc call*(call_606106: Call_PostCreateDBSnapshot_606090;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Action: string = "CreateDBSnapshot"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSnapshot
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_606107 = newJObject()
  var formData_606108 = newJObject()
  add(formData_606108, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_606108, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_606107, "Action", newJString(Action))
  if Tags != nil:
    formData_606108.add "Tags", Tags
  add(query_606107, "Version", newJString(Version))
  result = call_606106.call(nil, query_606107, nil, formData_606108, nil)

var postCreateDBSnapshot* = Call_PostCreateDBSnapshot_606090(
    name: "postCreateDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSnapshot",
    validator: validate_PostCreateDBSnapshot_606091, base: "/",
    url: url_PostCreateDBSnapshot_606092, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSnapshot_606072 = ref object of OpenApiRestCall_604389
proc url_GetCreateDBSnapshot_606074(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSnapshot_606073(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606075 = query.getOrDefault("Tags")
  valid_606075 = validateParameter(valid_606075, JArray, required = false,
                                 default = nil)
  if valid_606075 != nil:
    section.add "Tags", valid_606075
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_606076 = query.getOrDefault("DBInstanceIdentifier")
  valid_606076 = validateParameter(valid_606076, JString, required = true,
                                 default = nil)
  if valid_606076 != nil:
    section.add "DBInstanceIdentifier", valid_606076
  var valid_606077 = query.getOrDefault("DBSnapshotIdentifier")
  valid_606077 = validateParameter(valid_606077, JString, required = true,
                                 default = nil)
  if valid_606077 != nil:
    section.add "DBSnapshotIdentifier", valid_606077
  var valid_606078 = query.getOrDefault("Action")
  valid_606078 = validateParameter(valid_606078, JString, required = true,
                                 default = newJString("CreateDBSnapshot"))
  if valid_606078 != nil:
    section.add "Action", valid_606078
  var valid_606079 = query.getOrDefault("Version")
  valid_606079 = validateParameter(valid_606079, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606079 != nil:
    section.add "Version", valid_606079
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606080 = header.getOrDefault("X-Amz-Signature")
  valid_606080 = validateParameter(valid_606080, JString, required = false,
                                 default = nil)
  if valid_606080 != nil:
    section.add "X-Amz-Signature", valid_606080
  var valid_606081 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606081 = validateParameter(valid_606081, JString, required = false,
                                 default = nil)
  if valid_606081 != nil:
    section.add "X-Amz-Content-Sha256", valid_606081
  var valid_606082 = header.getOrDefault("X-Amz-Date")
  valid_606082 = validateParameter(valid_606082, JString, required = false,
                                 default = nil)
  if valid_606082 != nil:
    section.add "X-Amz-Date", valid_606082
  var valid_606083 = header.getOrDefault("X-Amz-Credential")
  valid_606083 = validateParameter(valid_606083, JString, required = false,
                                 default = nil)
  if valid_606083 != nil:
    section.add "X-Amz-Credential", valid_606083
  var valid_606084 = header.getOrDefault("X-Amz-Security-Token")
  valid_606084 = validateParameter(valid_606084, JString, required = false,
                                 default = nil)
  if valid_606084 != nil:
    section.add "X-Amz-Security-Token", valid_606084
  var valid_606085 = header.getOrDefault("X-Amz-Algorithm")
  valid_606085 = validateParameter(valid_606085, JString, required = false,
                                 default = nil)
  if valid_606085 != nil:
    section.add "X-Amz-Algorithm", valid_606085
  var valid_606086 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606086 = validateParameter(valid_606086, JString, required = false,
                                 default = nil)
  if valid_606086 != nil:
    section.add "X-Amz-SignedHeaders", valid_606086
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606087: Call_GetCreateDBSnapshot_606072; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  let valid = call_606087.validator(path, query, header, formData, body)
  let scheme = call_606087.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606087.url(scheme.get, call_606087.host, call_606087.base,
                         call_606087.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606087, url, valid)

proc call*(call_606088: Call_GetCreateDBSnapshot_606072;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSnapshot
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606089 = newJObject()
  if Tags != nil:
    query_606089.add "Tags", Tags
  add(query_606089, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_606089, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_606089, "Action", newJString(Action))
  add(query_606089, "Version", newJString(Version))
  result = call_606088.call(nil, query_606089, nil, nil, nil)

var getCreateDBSnapshot* = Call_GetCreateDBSnapshot_606072(
    name: "getCreateDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSnapshot",
    validator: validate_GetCreateDBSnapshot_606073, base: "/",
    url: url_GetCreateDBSnapshot_606074, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSubnetGroup_606128 = ref object of OpenApiRestCall_604389
proc url_PostCreateDBSubnetGroup_606130(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSubnetGroup_606129(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606131 = query.getOrDefault("Action")
  valid_606131 = validateParameter(valid_606131, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_606131 != nil:
    section.add "Action", valid_606131
  var valid_606132 = query.getOrDefault("Version")
  valid_606132 = validateParameter(valid_606132, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606132 != nil:
    section.add "Version", valid_606132
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606133 = header.getOrDefault("X-Amz-Signature")
  valid_606133 = validateParameter(valid_606133, JString, required = false,
                                 default = nil)
  if valid_606133 != nil:
    section.add "X-Amz-Signature", valid_606133
  var valid_606134 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606134 = validateParameter(valid_606134, JString, required = false,
                                 default = nil)
  if valid_606134 != nil:
    section.add "X-Amz-Content-Sha256", valid_606134
  var valid_606135 = header.getOrDefault("X-Amz-Date")
  valid_606135 = validateParameter(valid_606135, JString, required = false,
                                 default = nil)
  if valid_606135 != nil:
    section.add "X-Amz-Date", valid_606135
  var valid_606136 = header.getOrDefault("X-Amz-Credential")
  valid_606136 = validateParameter(valid_606136, JString, required = false,
                                 default = nil)
  if valid_606136 != nil:
    section.add "X-Amz-Credential", valid_606136
  var valid_606137 = header.getOrDefault("X-Amz-Security-Token")
  valid_606137 = validateParameter(valid_606137, JString, required = false,
                                 default = nil)
  if valid_606137 != nil:
    section.add "X-Amz-Security-Token", valid_606137
  var valid_606138 = header.getOrDefault("X-Amz-Algorithm")
  valid_606138 = validateParameter(valid_606138, JString, required = false,
                                 default = nil)
  if valid_606138 != nil:
    section.add "X-Amz-Algorithm", valid_606138
  var valid_606139 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606139 = validateParameter(valid_606139, JString, required = false,
                                 default = nil)
  if valid_606139 != nil:
    section.add "X-Amz-SignedHeaders", valid_606139
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupDescription` field"
  var valid_606140 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_606140 = validateParameter(valid_606140, JString, required = true,
                                 default = nil)
  if valid_606140 != nil:
    section.add "DBSubnetGroupDescription", valid_606140
  var valid_606141 = formData.getOrDefault("Tags")
  valid_606141 = validateParameter(valid_606141, JArray, required = false,
                                 default = nil)
  if valid_606141 != nil:
    section.add "Tags", valid_606141
  var valid_606142 = formData.getOrDefault("DBSubnetGroupName")
  valid_606142 = validateParameter(valid_606142, JString, required = true,
                                 default = nil)
  if valid_606142 != nil:
    section.add "DBSubnetGroupName", valid_606142
  var valid_606143 = formData.getOrDefault("SubnetIds")
  valid_606143 = validateParameter(valid_606143, JArray, required = true, default = nil)
  if valid_606143 != nil:
    section.add "SubnetIds", valid_606143
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606144: Call_PostCreateDBSubnetGroup_606128; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_606144.validator(path, query, header, formData, body)
  let scheme = call_606144.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606144.url(scheme.get, call_606144.host, call_606144.base,
                         call_606144.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606144, url, valid)

proc call*(call_606145: Call_PostCreateDBSubnetGroup_606128;
          DBSubnetGroupDescription: string; DBSubnetGroupName: string;
          SubnetIds: JsonNode; Action: string = "CreateDBSubnetGroup";
          Tags: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  var query_606146 = newJObject()
  var formData_606147 = newJObject()
  add(formData_606147, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_606146, "Action", newJString(Action))
  if Tags != nil:
    formData_606147.add "Tags", Tags
  add(formData_606147, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_606146, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_606147.add "SubnetIds", SubnetIds
  result = call_606145.call(nil, query_606146, nil, formData_606147, nil)

var postCreateDBSubnetGroup* = Call_PostCreateDBSubnetGroup_606128(
    name: "postCreateDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_PostCreateDBSubnetGroup_606129, base: "/",
    url: url_PostCreateDBSubnetGroup_606130, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSubnetGroup_606109 = ref object of OpenApiRestCall_604389
proc url_GetCreateDBSubnetGroup_606111(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSubnetGroup_606110(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_606112 = query.getOrDefault("Tags")
  valid_606112 = validateParameter(valid_606112, JArray, required = false,
                                 default = nil)
  if valid_606112 != nil:
    section.add "Tags", valid_606112
  assert query != nil,
        "query argument is necessary due to required `SubnetIds` field"
  var valid_606113 = query.getOrDefault("SubnetIds")
  valid_606113 = validateParameter(valid_606113, JArray, required = true, default = nil)
  if valid_606113 != nil:
    section.add "SubnetIds", valid_606113
  var valid_606114 = query.getOrDefault("Action")
  valid_606114 = validateParameter(valid_606114, JString, required = true,
                                 default = newJString("CreateDBSubnetGroup"))
  if valid_606114 != nil:
    section.add "Action", valid_606114
  var valid_606115 = query.getOrDefault("DBSubnetGroupDescription")
  valid_606115 = validateParameter(valid_606115, JString, required = true,
                                 default = nil)
  if valid_606115 != nil:
    section.add "DBSubnetGroupDescription", valid_606115
  var valid_606116 = query.getOrDefault("DBSubnetGroupName")
  valid_606116 = validateParameter(valid_606116, JString, required = true,
                                 default = nil)
  if valid_606116 != nil:
    section.add "DBSubnetGroupName", valid_606116
  var valid_606117 = query.getOrDefault("Version")
  valid_606117 = validateParameter(valid_606117, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606117 != nil:
    section.add "Version", valid_606117
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606118 = header.getOrDefault("X-Amz-Signature")
  valid_606118 = validateParameter(valid_606118, JString, required = false,
                                 default = nil)
  if valid_606118 != nil:
    section.add "X-Amz-Signature", valid_606118
  var valid_606119 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606119 = validateParameter(valid_606119, JString, required = false,
                                 default = nil)
  if valid_606119 != nil:
    section.add "X-Amz-Content-Sha256", valid_606119
  var valid_606120 = header.getOrDefault("X-Amz-Date")
  valid_606120 = validateParameter(valid_606120, JString, required = false,
                                 default = nil)
  if valid_606120 != nil:
    section.add "X-Amz-Date", valid_606120
  var valid_606121 = header.getOrDefault("X-Amz-Credential")
  valid_606121 = validateParameter(valid_606121, JString, required = false,
                                 default = nil)
  if valid_606121 != nil:
    section.add "X-Amz-Credential", valid_606121
  var valid_606122 = header.getOrDefault("X-Amz-Security-Token")
  valid_606122 = validateParameter(valid_606122, JString, required = false,
                                 default = nil)
  if valid_606122 != nil:
    section.add "X-Amz-Security-Token", valid_606122
  var valid_606123 = header.getOrDefault("X-Amz-Algorithm")
  valid_606123 = validateParameter(valid_606123, JString, required = false,
                                 default = nil)
  if valid_606123 != nil:
    section.add "X-Amz-Algorithm", valid_606123
  var valid_606124 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606124 = validateParameter(valid_606124, JString, required = false,
                                 default = nil)
  if valid_606124 != nil:
    section.add "X-Amz-SignedHeaders", valid_606124
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606125: Call_GetCreateDBSubnetGroup_606109; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_606125.validator(path, query, header, formData, body)
  let scheme = call_606125.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606125.url(scheme.get, call_606125.host, call_606125.base,
                         call_606125.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606125, url, valid)

proc call*(call_606126: Call_GetCreateDBSubnetGroup_606109; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; DBSubnetGroupName: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_606127 = newJObject()
  if Tags != nil:
    query_606127.add "Tags", Tags
  if SubnetIds != nil:
    query_606127.add "SubnetIds", SubnetIds
  add(query_606127, "Action", newJString(Action))
  add(query_606127, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_606127, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_606127, "Version", newJString(Version))
  result = call_606126.call(nil, query_606127, nil, nil, nil)

var getCreateDBSubnetGroup* = Call_GetCreateDBSubnetGroup_606109(
    name: "getCreateDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_GetCreateDBSubnetGroup_606110, base: "/",
    url: url_GetCreateDBSubnetGroup_606111, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateEventSubscription_606170 = ref object of OpenApiRestCall_604389
proc url_PostCreateEventSubscription_606172(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateEventSubscription_606171(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606173 = query.getOrDefault("Action")
  valid_606173 = validateParameter(valid_606173, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_606173 != nil:
    section.add "Action", valid_606173
  var valid_606174 = query.getOrDefault("Version")
  valid_606174 = validateParameter(valid_606174, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606174 != nil:
    section.add "Version", valid_606174
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606175 = header.getOrDefault("X-Amz-Signature")
  valid_606175 = validateParameter(valid_606175, JString, required = false,
                                 default = nil)
  if valid_606175 != nil:
    section.add "X-Amz-Signature", valid_606175
  var valid_606176 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606176 = validateParameter(valid_606176, JString, required = false,
                                 default = nil)
  if valid_606176 != nil:
    section.add "X-Amz-Content-Sha256", valid_606176
  var valid_606177 = header.getOrDefault("X-Amz-Date")
  valid_606177 = validateParameter(valid_606177, JString, required = false,
                                 default = nil)
  if valid_606177 != nil:
    section.add "X-Amz-Date", valid_606177
  var valid_606178 = header.getOrDefault("X-Amz-Credential")
  valid_606178 = validateParameter(valid_606178, JString, required = false,
                                 default = nil)
  if valid_606178 != nil:
    section.add "X-Amz-Credential", valid_606178
  var valid_606179 = header.getOrDefault("X-Amz-Security-Token")
  valid_606179 = validateParameter(valid_606179, JString, required = false,
                                 default = nil)
  if valid_606179 != nil:
    section.add "X-Amz-Security-Token", valid_606179
  var valid_606180 = header.getOrDefault("X-Amz-Algorithm")
  valid_606180 = validateParameter(valid_606180, JString, required = false,
                                 default = nil)
  if valid_606180 != nil:
    section.add "X-Amz-Algorithm", valid_606180
  var valid_606181 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606181 = validateParameter(valid_606181, JString, required = false,
                                 default = nil)
  if valid_606181 != nil:
    section.add "X-Amz-SignedHeaders", valid_606181
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_606182 = formData.getOrDefault("SourceIds")
  valid_606182 = validateParameter(valid_606182, JArray, required = false,
                                 default = nil)
  if valid_606182 != nil:
    section.add "SourceIds", valid_606182
  assert formData != nil,
        "formData argument is necessary due to required `SnsTopicArn` field"
  var valid_606183 = formData.getOrDefault("SnsTopicArn")
  valid_606183 = validateParameter(valid_606183, JString, required = true,
                                 default = nil)
  if valid_606183 != nil:
    section.add "SnsTopicArn", valid_606183
  var valid_606184 = formData.getOrDefault("Enabled")
  valid_606184 = validateParameter(valid_606184, JBool, required = false, default = nil)
  if valid_606184 != nil:
    section.add "Enabled", valid_606184
  var valid_606185 = formData.getOrDefault("SubscriptionName")
  valid_606185 = validateParameter(valid_606185, JString, required = true,
                                 default = nil)
  if valid_606185 != nil:
    section.add "SubscriptionName", valid_606185
  var valid_606186 = formData.getOrDefault("SourceType")
  valid_606186 = validateParameter(valid_606186, JString, required = false,
                                 default = nil)
  if valid_606186 != nil:
    section.add "SourceType", valid_606186
  var valid_606187 = formData.getOrDefault("EventCategories")
  valid_606187 = validateParameter(valid_606187, JArray, required = false,
                                 default = nil)
  if valid_606187 != nil:
    section.add "EventCategories", valid_606187
  var valid_606188 = formData.getOrDefault("Tags")
  valid_606188 = validateParameter(valid_606188, JArray, required = false,
                                 default = nil)
  if valid_606188 != nil:
    section.add "Tags", valid_606188
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606189: Call_PostCreateEventSubscription_606170; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  let valid = call_606189.validator(path, query, header, formData, body)
  let scheme = call_606189.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606189.url(scheme.get, call_606189.host, call_606189.base,
                         call_606189.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606189, url, valid)

proc call*(call_606190: Call_PostCreateEventSubscription_606170;
          SnsTopicArn: string; SubscriptionName: string; SourceIds: JsonNode = nil;
          Enabled: bool = false; SourceType: string = "";
          EventCategories: JsonNode = nil;
          Action: string = "CreateEventSubscription"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateEventSubscription
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_606191 = newJObject()
  var formData_606192 = newJObject()
  if SourceIds != nil:
    formData_606192.add "SourceIds", SourceIds
  add(formData_606192, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_606192, "Enabled", newJBool(Enabled))
  add(formData_606192, "SubscriptionName", newJString(SubscriptionName))
  add(formData_606192, "SourceType", newJString(SourceType))
  if EventCategories != nil:
    formData_606192.add "EventCategories", EventCategories
  add(query_606191, "Action", newJString(Action))
  if Tags != nil:
    formData_606192.add "Tags", Tags
  add(query_606191, "Version", newJString(Version))
  result = call_606190.call(nil, query_606191, nil, formData_606192, nil)

var postCreateEventSubscription* = Call_PostCreateEventSubscription_606170(
    name: "postCreateEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_PostCreateEventSubscription_606171, base: "/",
    url: url_PostCreateEventSubscription_606172,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateEventSubscription_606148 = ref object of OpenApiRestCall_604389
proc url_GetCreateEventSubscription_606150(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateEventSubscription_606149(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: JString (required)
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: JString (required)
  section = newJObject()
  var valid_606151 = query.getOrDefault("Tags")
  valid_606151 = validateParameter(valid_606151, JArray, required = false,
                                 default = nil)
  if valid_606151 != nil:
    section.add "Tags", valid_606151
  var valid_606152 = query.getOrDefault("SourceType")
  valid_606152 = validateParameter(valid_606152, JString, required = false,
                                 default = nil)
  if valid_606152 != nil:
    section.add "SourceType", valid_606152
  var valid_606153 = query.getOrDefault("Enabled")
  valid_606153 = validateParameter(valid_606153, JBool, required = false, default = nil)
  if valid_606153 != nil:
    section.add "Enabled", valid_606153
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_606154 = query.getOrDefault("SubscriptionName")
  valid_606154 = validateParameter(valid_606154, JString, required = true,
                                 default = nil)
  if valid_606154 != nil:
    section.add "SubscriptionName", valid_606154
  var valid_606155 = query.getOrDefault("EventCategories")
  valid_606155 = validateParameter(valid_606155, JArray, required = false,
                                 default = nil)
  if valid_606155 != nil:
    section.add "EventCategories", valid_606155
  var valid_606156 = query.getOrDefault("SourceIds")
  valid_606156 = validateParameter(valid_606156, JArray, required = false,
                                 default = nil)
  if valid_606156 != nil:
    section.add "SourceIds", valid_606156
  var valid_606157 = query.getOrDefault("Action")
  valid_606157 = validateParameter(valid_606157, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_606157 != nil:
    section.add "Action", valid_606157
  var valid_606158 = query.getOrDefault("SnsTopicArn")
  valid_606158 = validateParameter(valid_606158, JString, required = true,
                                 default = nil)
  if valid_606158 != nil:
    section.add "SnsTopicArn", valid_606158
  var valid_606159 = query.getOrDefault("Version")
  valid_606159 = validateParameter(valid_606159, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606159 != nil:
    section.add "Version", valid_606159
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606160 = header.getOrDefault("X-Amz-Signature")
  valid_606160 = validateParameter(valid_606160, JString, required = false,
                                 default = nil)
  if valid_606160 != nil:
    section.add "X-Amz-Signature", valid_606160
  var valid_606161 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606161 = validateParameter(valid_606161, JString, required = false,
                                 default = nil)
  if valid_606161 != nil:
    section.add "X-Amz-Content-Sha256", valid_606161
  var valid_606162 = header.getOrDefault("X-Amz-Date")
  valid_606162 = validateParameter(valid_606162, JString, required = false,
                                 default = nil)
  if valid_606162 != nil:
    section.add "X-Amz-Date", valid_606162
  var valid_606163 = header.getOrDefault("X-Amz-Credential")
  valid_606163 = validateParameter(valid_606163, JString, required = false,
                                 default = nil)
  if valid_606163 != nil:
    section.add "X-Amz-Credential", valid_606163
  var valid_606164 = header.getOrDefault("X-Amz-Security-Token")
  valid_606164 = validateParameter(valid_606164, JString, required = false,
                                 default = nil)
  if valid_606164 != nil:
    section.add "X-Amz-Security-Token", valid_606164
  var valid_606165 = header.getOrDefault("X-Amz-Algorithm")
  valid_606165 = validateParameter(valid_606165, JString, required = false,
                                 default = nil)
  if valid_606165 != nil:
    section.add "X-Amz-Algorithm", valid_606165
  var valid_606166 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606166 = validateParameter(valid_606166, JString, required = false,
                                 default = nil)
  if valid_606166 != nil:
    section.add "X-Amz-SignedHeaders", valid_606166
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606167: Call_GetCreateEventSubscription_606148; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  let valid = call_606167.validator(path, query, header, formData, body)
  let scheme = call_606167.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606167.url(scheme.get, call_606167.host, call_606167.base,
                         call_606167.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606167, url, valid)

proc call*(call_606168: Call_GetCreateEventSubscription_606148;
          SubscriptionName: string; SnsTopicArn: string; Tags: JsonNode = nil;
          SourceType: string = ""; Enabled: bool = false;
          EventCategories: JsonNode = nil; SourceIds: JsonNode = nil;
          Action: string = "CreateEventSubscription"; Version: string = "2014-10-31"): Recallable =
  ## getCreateEventSubscription
  ## <p>Creates an RDS event notification subscription. This action requires a topic ARN (Amazon Resource Name) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you do not specify either the SourceType nor the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Action: string (required)
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: string (required)
  var query_606169 = newJObject()
  if Tags != nil:
    query_606169.add "Tags", Tags
  add(query_606169, "SourceType", newJString(SourceType))
  add(query_606169, "Enabled", newJBool(Enabled))
  add(query_606169, "SubscriptionName", newJString(SubscriptionName))
  if EventCategories != nil:
    query_606169.add "EventCategories", EventCategories
  if SourceIds != nil:
    query_606169.add "SourceIds", SourceIds
  add(query_606169, "Action", newJString(Action))
  add(query_606169, "SnsTopicArn", newJString(SnsTopicArn))
  add(query_606169, "Version", newJString(Version))
  result = call_606168.call(nil, query_606169, nil, nil, nil)

var getCreateEventSubscription* = Call_GetCreateEventSubscription_606148(
    name: "getCreateEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_GetCreateEventSubscription_606149, base: "/",
    url: url_GetCreateEventSubscription_606150,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateGlobalCluster_606215 = ref object of OpenApiRestCall_604389
proc url_PostCreateGlobalCluster_606217(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateGlobalCluster_606216(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606218 = query.getOrDefault("Action")
  valid_606218 = validateParameter(valid_606218, JString, required = true,
                                 default = newJString("CreateGlobalCluster"))
  if valid_606218 != nil:
    section.add "Action", valid_606218
  var valid_606219 = query.getOrDefault("Version")
  valid_606219 = validateParameter(valid_606219, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606219 != nil:
    section.add "Version", valid_606219
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606220 = header.getOrDefault("X-Amz-Signature")
  valid_606220 = validateParameter(valid_606220, JString, required = false,
                                 default = nil)
  if valid_606220 != nil:
    section.add "X-Amz-Signature", valid_606220
  var valid_606221 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606221 = validateParameter(valid_606221, JString, required = false,
                                 default = nil)
  if valid_606221 != nil:
    section.add "X-Amz-Content-Sha256", valid_606221
  var valid_606222 = header.getOrDefault("X-Amz-Date")
  valid_606222 = validateParameter(valid_606222, JString, required = false,
                                 default = nil)
  if valid_606222 != nil:
    section.add "X-Amz-Date", valid_606222
  var valid_606223 = header.getOrDefault("X-Amz-Credential")
  valid_606223 = validateParameter(valid_606223, JString, required = false,
                                 default = nil)
  if valid_606223 != nil:
    section.add "X-Amz-Credential", valid_606223
  var valid_606224 = header.getOrDefault("X-Amz-Security-Token")
  valid_606224 = validateParameter(valid_606224, JString, required = false,
                                 default = nil)
  if valid_606224 != nil:
    section.add "X-Amz-Security-Token", valid_606224
  var valid_606225 = header.getOrDefault("X-Amz-Algorithm")
  valid_606225 = validateParameter(valid_606225, JString, required = false,
                                 default = nil)
  if valid_606225 != nil:
    section.add "X-Amz-Algorithm", valid_606225
  var valid_606226 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606226 = validateParameter(valid_606226, JString, required = false,
                                 default = nil)
  if valid_606226 != nil:
    section.add "X-Amz-SignedHeaders", valid_606226
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : The cluster identifier of the new global database cluster.
  ##   EngineVersion: JString
  ##                : The engine version of the Aurora global database.
  ##   DatabaseName: JString
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   SourceDBClusterIdentifier: JString
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   Engine: JString
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   DeletionProtection: JBool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  section = newJObject()
  var valid_606227 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_606227 = validateParameter(valid_606227, JString, required = false,
                                 default = nil)
  if valid_606227 != nil:
    section.add "GlobalClusterIdentifier", valid_606227
  var valid_606228 = formData.getOrDefault("EngineVersion")
  valid_606228 = validateParameter(valid_606228, JString, required = false,
                                 default = nil)
  if valid_606228 != nil:
    section.add "EngineVersion", valid_606228
  var valid_606229 = formData.getOrDefault("DatabaseName")
  valid_606229 = validateParameter(valid_606229, JString, required = false,
                                 default = nil)
  if valid_606229 != nil:
    section.add "DatabaseName", valid_606229
  var valid_606230 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_606230 = validateParameter(valid_606230, JString, required = false,
                                 default = nil)
  if valid_606230 != nil:
    section.add "SourceDBClusterIdentifier", valid_606230
  var valid_606231 = formData.getOrDefault("Engine")
  valid_606231 = validateParameter(valid_606231, JString, required = false,
                                 default = nil)
  if valid_606231 != nil:
    section.add "Engine", valid_606231
  var valid_606232 = formData.getOrDefault("StorageEncrypted")
  valid_606232 = validateParameter(valid_606232, JBool, required = false, default = nil)
  if valid_606232 != nil:
    section.add "StorageEncrypted", valid_606232
  var valid_606233 = formData.getOrDefault("DeletionProtection")
  valid_606233 = validateParameter(valid_606233, JBool, required = false, default = nil)
  if valid_606233 != nil:
    section.add "DeletionProtection", valid_606233
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606234: Call_PostCreateGlobalCluster_606215; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606234.validator(path, query, header, formData, body)
  let scheme = call_606234.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606234.url(scheme.get, call_606234.host, call_606234.base,
                         call_606234.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606234, url, valid)

proc call*(call_606235: Call_PostCreateGlobalCluster_606215;
          GlobalClusterIdentifier: string = ""; EngineVersion: string = "";
          DatabaseName: string = ""; SourceDBClusterIdentifier: string = "";
          Engine: string = ""; Action: string = "CreateGlobalCluster";
          Version: string = "2014-10-31"; StorageEncrypted: bool = false;
          DeletionProtection: bool = false): Recallable =
  ## postCreateGlobalCluster
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : The cluster identifier of the new global database cluster.
  ##   EngineVersion: string
  ##                : The engine version of the Aurora global database.
  ##   DatabaseName: string
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   SourceDBClusterIdentifier: string
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   Engine: string
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   DeletionProtection: bool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  var query_606236 = newJObject()
  var formData_606237 = newJObject()
  add(formData_606237, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_606237, "EngineVersion", newJString(EngineVersion))
  add(formData_606237, "DatabaseName", newJString(DatabaseName))
  add(formData_606237, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_606237, "Engine", newJString(Engine))
  add(query_606236, "Action", newJString(Action))
  add(query_606236, "Version", newJString(Version))
  add(formData_606237, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_606237, "DeletionProtection", newJBool(DeletionProtection))
  result = call_606235.call(nil, query_606236, nil, formData_606237, nil)

var postCreateGlobalCluster* = Call_PostCreateGlobalCluster_606215(
    name: "postCreateGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateGlobalCluster",
    validator: validate_PostCreateGlobalCluster_606216, base: "/",
    url: url_PostCreateGlobalCluster_606217, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateGlobalCluster_606193 = ref object of OpenApiRestCall_604389
proc url_GetCreateGlobalCluster_606195(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateGlobalCluster_606194(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : The cluster identifier of the new global database cluster.
  ##   DatabaseName: JString
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   DeletionProtection: JBool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Engine: JString
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   SourceDBClusterIdentifier: JString
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   EngineVersion: JString
  ##                : The engine version of the Aurora global database.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_606196 = query.getOrDefault("GlobalClusterIdentifier")
  valid_606196 = validateParameter(valid_606196, JString, required = false,
                                 default = nil)
  if valid_606196 != nil:
    section.add "GlobalClusterIdentifier", valid_606196
  var valid_606197 = query.getOrDefault("DatabaseName")
  valid_606197 = validateParameter(valid_606197, JString, required = false,
                                 default = nil)
  if valid_606197 != nil:
    section.add "DatabaseName", valid_606197
  var valid_606198 = query.getOrDefault("DeletionProtection")
  valid_606198 = validateParameter(valid_606198, JBool, required = false, default = nil)
  if valid_606198 != nil:
    section.add "DeletionProtection", valid_606198
  var valid_606199 = query.getOrDefault("Engine")
  valid_606199 = validateParameter(valid_606199, JString, required = false,
                                 default = nil)
  if valid_606199 != nil:
    section.add "Engine", valid_606199
  var valid_606200 = query.getOrDefault("StorageEncrypted")
  valid_606200 = validateParameter(valid_606200, JBool, required = false, default = nil)
  if valid_606200 != nil:
    section.add "StorageEncrypted", valid_606200
  var valid_606201 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_606201 = validateParameter(valid_606201, JString, required = false,
                                 default = nil)
  if valid_606201 != nil:
    section.add "SourceDBClusterIdentifier", valid_606201
  var valid_606202 = query.getOrDefault("EngineVersion")
  valid_606202 = validateParameter(valid_606202, JString, required = false,
                                 default = nil)
  if valid_606202 != nil:
    section.add "EngineVersion", valid_606202
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606203 = query.getOrDefault("Action")
  valid_606203 = validateParameter(valid_606203, JString, required = true,
                                 default = newJString("CreateGlobalCluster"))
  if valid_606203 != nil:
    section.add "Action", valid_606203
  var valid_606204 = query.getOrDefault("Version")
  valid_606204 = validateParameter(valid_606204, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606204 != nil:
    section.add "Version", valid_606204
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606205 = header.getOrDefault("X-Amz-Signature")
  valid_606205 = validateParameter(valid_606205, JString, required = false,
                                 default = nil)
  if valid_606205 != nil:
    section.add "X-Amz-Signature", valid_606205
  var valid_606206 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606206 = validateParameter(valid_606206, JString, required = false,
                                 default = nil)
  if valid_606206 != nil:
    section.add "X-Amz-Content-Sha256", valid_606206
  var valid_606207 = header.getOrDefault("X-Amz-Date")
  valid_606207 = validateParameter(valid_606207, JString, required = false,
                                 default = nil)
  if valid_606207 != nil:
    section.add "X-Amz-Date", valid_606207
  var valid_606208 = header.getOrDefault("X-Amz-Credential")
  valid_606208 = validateParameter(valid_606208, JString, required = false,
                                 default = nil)
  if valid_606208 != nil:
    section.add "X-Amz-Credential", valid_606208
  var valid_606209 = header.getOrDefault("X-Amz-Security-Token")
  valid_606209 = validateParameter(valid_606209, JString, required = false,
                                 default = nil)
  if valid_606209 != nil:
    section.add "X-Amz-Security-Token", valid_606209
  var valid_606210 = header.getOrDefault("X-Amz-Algorithm")
  valid_606210 = validateParameter(valid_606210, JString, required = false,
                                 default = nil)
  if valid_606210 != nil:
    section.add "X-Amz-Algorithm", valid_606210
  var valid_606211 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606211 = validateParameter(valid_606211, JString, required = false,
                                 default = nil)
  if valid_606211 != nil:
    section.add "X-Amz-SignedHeaders", valid_606211
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606212: Call_GetCreateGlobalCluster_606193; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606212.validator(path, query, header, formData, body)
  let scheme = call_606212.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606212.url(scheme.get, call_606212.host, call_606212.base,
                         call_606212.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606212, url, valid)

proc call*(call_606213: Call_GetCreateGlobalCluster_606193;
          GlobalClusterIdentifier: string = ""; DatabaseName: string = "";
          DeletionProtection: bool = false; Engine: string = "";
          StorageEncrypted: bool = false; SourceDBClusterIdentifier: string = "";
          EngineVersion: string = ""; Action: string = "CreateGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateGlobalCluster
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : The cluster identifier of the new global database cluster.
  ##   DatabaseName: string
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   DeletionProtection: bool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Engine: string
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: bool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   SourceDBClusterIdentifier: string
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   EngineVersion: string
  ##                : The engine version of the Aurora global database.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606214 = newJObject()
  add(query_606214, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_606214, "DatabaseName", newJString(DatabaseName))
  add(query_606214, "DeletionProtection", newJBool(DeletionProtection))
  add(query_606214, "Engine", newJString(Engine))
  add(query_606214, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_606214, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_606214, "EngineVersion", newJString(EngineVersion))
  add(query_606214, "Action", newJString(Action))
  add(query_606214, "Version", newJString(Version))
  result = call_606213.call(nil, query_606214, nil, nil, nil)

var getCreateGlobalCluster* = Call_GetCreateGlobalCluster_606193(
    name: "getCreateGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateGlobalCluster",
    validator: validate_GetCreateGlobalCluster_606194, base: "/",
    url: url_GetCreateGlobalCluster_606195, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOptionGroup_606258 = ref object of OpenApiRestCall_604389
proc url_PostCreateOptionGroup_606260(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateOptionGroup_606259(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606261 = query.getOrDefault("Action")
  valid_606261 = validateParameter(valid_606261, JString, required = true,
                                 default = newJString("CreateOptionGroup"))
  if valid_606261 != nil:
    section.add "Action", valid_606261
  var valid_606262 = query.getOrDefault("Version")
  valid_606262 = validateParameter(valid_606262, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606262 != nil:
    section.add "Version", valid_606262
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606263 = header.getOrDefault("X-Amz-Signature")
  valid_606263 = validateParameter(valid_606263, JString, required = false,
                                 default = nil)
  if valid_606263 != nil:
    section.add "X-Amz-Signature", valid_606263
  var valid_606264 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606264 = validateParameter(valid_606264, JString, required = false,
                                 default = nil)
  if valid_606264 != nil:
    section.add "X-Amz-Content-Sha256", valid_606264
  var valid_606265 = header.getOrDefault("X-Amz-Date")
  valid_606265 = validateParameter(valid_606265, JString, required = false,
                                 default = nil)
  if valid_606265 != nil:
    section.add "X-Amz-Date", valid_606265
  var valid_606266 = header.getOrDefault("X-Amz-Credential")
  valid_606266 = validateParameter(valid_606266, JString, required = false,
                                 default = nil)
  if valid_606266 != nil:
    section.add "X-Amz-Credential", valid_606266
  var valid_606267 = header.getOrDefault("X-Amz-Security-Token")
  valid_606267 = validateParameter(valid_606267, JString, required = false,
                                 default = nil)
  if valid_606267 != nil:
    section.add "X-Amz-Security-Token", valid_606267
  var valid_606268 = header.getOrDefault("X-Amz-Algorithm")
  valid_606268 = validateParameter(valid_606268, JString, required = false,
                                 default = nil)
  if valid_606268 != nil:
    section.add "X-Amz-Algorithm", valid_606268
  var valid_606269 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606269 = validateParameter(valid_606269, JString, required = false,
                                 default = nil)
  if valid_606269 != nil:
    section.add "X-Amz-SignedHeaders", valid_606269
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionGroupDescription: JString (required)
  ##                         : The description of the option group.
  ##   EngineName: JString (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   MajorEngineVersion: JString (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: JString (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OptionGroupDescription` field"
  var valid_606270 = formData.getOrDefault("OptionGroupDescription")
  valid_606270 = validateParameter(valid_606270, JString, required = true,
                                 default = nil)
  if valid_606270 != nil:
    section.add "OptionGroupDescription", valid_606270
  var valid_606271 = formData.getOrDefault("EngineName")
  valid_606271 = validateParameter(valid_606271, JString, required = true,
                                 default = nil)
  if valid_606271 != nil:
    section.add "EngineName", valid_606271
  var valid_606272 = formData.getOrDefault("MajorEngineVersion")
  valid_606272 = validateParameter(valid_606272, JString, required = true,
                                 default = nil)
  if valid_606272 != nil:
    section.add "MajorEngineVersion", valid_606272
  var valid_606273 = formData.getOrDefault("Tags")
  valid_606273 = validateParameter(valid_606273, JArray, required = false,
                                 default = nil)
  if valid_606273 != nil:
    section.add "Tags", valid_606273
  var valid_606274 = formData.getOrDefault("OptionGroupName")
  valid_606274 = validateParameter(valid_606274, JString, required = true,
                                 default = nil)
  if valid_606274 != nil:
    section.add "OptionGroupName", valid_606274
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606275: Call_PostCreateOptionGroup_606258; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  let valid = call_606275.validator(path, query, header, formData, body)
  let scheme = call_606275.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606275.url(scheme.get, call_606275.host, call_606275.base,
                         call_606275.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606275, url, valid)

proc call*(call_606276: Call_PostCreateOptionGroup_606258;
          OptionGroupDescription: string; EngineName: string;
          MajorEngineVersion: string; OptionGroupName: string;
          Action: string = "CreateOptionGroup"; Tags: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postCreateOptionGroup
  ## Creates a new option group. You can create up to 20 option groups.
  ##   OptionGroupDescription: string (required)
  ##                         : The description of the option group.
  ##   EngineName: string (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   MajorEngineVersion: string (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: string (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Version: string (required)
  var query_606277 = newJObject()
  var formData_606278 = newJObject()
  add(formData_606278, "OptionGroupDescription",
      newJString(OptionGroupDescription))
  add(formData_606278, "EngineName", newJString(EngineName))
  add(formData_606278, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(query_606277, "Action", newJString(Action))
  if Tags != nil:
    formData_606278.add "Tags", Tags
  add(formData_606278, "OptionGroupName", newJString(OptionGroupName))
  add(query_606277, "Version", newJString(Version))
  result = call_606276.call(nil, query_606277, nil, formData_606278, nil)

var postCreateOptionGroup* = Call_PostCreateOptionGroup_606258(
    name: "postCreateOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateOptionGroup",
    validator: validate_PostCreateOptionGroup_606259, base: "/",
    url: url_PostCreateOptionGroup_606260, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOptionGroup_606238 = ref object of OpenApiRestCall_604389
proc url_GetCreateOptionGroup_606240(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateOptionGroup_606239(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EngineName: JString (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   OptionGroupDescription: JString (required)
  ##                         : The description of the option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   OptionGroupName: JString (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Version: JString (required)
  ##   MajorEngineVersion: JString (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EngineName` field"
  var valid_606241 = query.getOrDefault("EngineName")
  valid_606241 = validateParameter(valid_606241, JString, required = true,
                                 default = nil)
  if valid_606241 != nil:
    section.add "EngineName", valid_606241
  var valid_606242 = query.getOrDefault("OptionGroupDescription")
  valid_606242 = validateParameter(valid_606242, JString, required = true,
                                 default = nil)
  if valid_606242 != nil:
    section.add "OptionGroupDescription", valid_606242
  var valid_606243 = query.getOrDefault("Tags")
  valid_606243 = validateParameter(valid_606243, JArray, required = false,
                                 default = nil)
  if valid_606243 != nil:
    section.add "Tags", valid_606243
  var valid_606244 = query.getOrDefault("Action")
  valid_606244 = validateParameter(valid_606244, JString, required = true,
                                 default = newJString("CreateOptionGroup"))
  if valid_606244 != nil:
    section.add "Action", valid_606244
  var valid_606245 = query.getOrDefault("OptionGroupName")
  valid_606245 = validateParameter(valid_606245, JString, required = true,
                                 default = nil)
  if valid_606245 != nil:
    section.add "OptionGroupName", valid_606245
  var valid_606246 = query.getOrDefault("Version")
  valid_606246 = validateParameter(valid_606246, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606246 != nil:
    section.add "Version", valid_606246
  var valid_606247 = query.getOrDefault("MajorEngineVersion")
  valid_606247 = validateParameter(valid_606247, JString, required = true,
                                 default = nil)
  if valid_606247 != nil:
    section.add "MajorEngineVersion", valid_606247
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606248 = header.getOrDefault("X-Amz-Signature")
  valid_606248 = validateParameter(valid_606248, JString, required = false,
                                 default = nil)
  if valid_606248 != nil:
    section.add "X-Amz-Signature", valid_606248
  var valid_606249 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606249 = validateParameter(valid_606249, JString, required = false,
                                 default = nil)
  if valid_606249 != nil:
    section.add "X-Amz-Content-Sha256", valid_606249
  var valid_606250 = header.getOrDefault("X-Amz-Date")
  valid_606250 = validateParameter(valid_606250, JString, required = false,
                                 default = nil)
  if valid_606250 != nil:
    section.add "X-Amz-Date", valid_606250
  var valid_606251 = header.getOrDefault("X-Amz-Credential")
  valid_606251 = validateParameter(valid_606251, JString, required = false,
                                 default = nil)
  if valid_606251 != nil:
    section.add "X-Amz-Credential", valid_606251
  var valid_606252 = header.getOrDefault("X-Amz-Security-Token")
  valid_606252 = validateParameter(valid_606252, JString, required = false,
                                 default = nil)
  if valid_606252 != nil:
    section.add "X-Amz-Security-Token", valid_606252
  var valid_606253 = header.getOrDefault("X-Amz-Algorithm")
  valid_606253 = validateParameter(valid_606253, JString, required = false,
                                 default = nil)
  if valid_606253 != nil:
    section.add "X-Amz-Algorithm", valid_606253
  var valid_606254 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606254 = validateParameter(valid_606254, JString, required = false,
                                 default = nil)
  if valid_606254 != nil:
    section.add "X-Amz-SignedHeaders", valid_606254
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606255: Call_GetCreateOptionGroup_606238; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  let valid = call_606255.validator(path, query, header, formData, body)
  let scheme = call_606255.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606255.url(scheme.get, call_606255.host, call_606255.base,
                         call_606255.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606255, url, valid)

proc call*(call_606256: Call_GetCreateOptionGroup_606238; EngineName: string;
          OptionGroupDescription: string; OptionGroupName: string;
          MajorEngineVersion: string; Tags: JsonNode = nil;
          Action: string = "CreateOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateOptionGroup
  ## Creates a new option group. You can create up to 20 option groups.
  ##   EngineName: string (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   OptionGroupDescription: string (required)
  ##                         : The description of the option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Version: string (required)
  ##   MajorEngineVersion: string (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  var query_606257 = newJObject()
  add(query_606257, "EngineName", newJString(EngineName))
  add(query_606257, "OptionGroupDescription", newJString(OptionGroupDescription))
  if Tags != nil:
    query_606257.add "Tags", Tags
  add(query_606257, "Action", newJString(Action))
  add(query_606257, "OptionGroupName", newJString(OptionGroupName))
  add(query_606257, "Version", newJString(Version))
  add(query_606257, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_606256.call(nil, query_606257, nil, nil, nil)

var getCreateOptionGroup* = Call_GetCreateOptionGroup_606238(
    name: "getCreateOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateOptionGroup",
    validator: validate_GetCreateOptionGroup_606239, base: "/",
    url: url_GetCreateOptionGroup_606240, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCustomAvailabilityZone_606295 = ref object of OpenApiRestCall_604389
proc url_PostDeleteCustomAvailabilityZone_606297(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCustomAvailabilityZone_606296(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606298 = query.getOrDefault("Action")
  valid_606298 = validateParameter(valid_606298, JString, required = true, default = newJString(
      "DeleteCustomAvailabilityZone"))
  if valid_606298 != nil:
    section.add "Action", valid_606298
  var valid_606299 = query.getOrDefault("Version")
  valid_606299 = validateParameter(valid_606299, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606299 != nil:
    section.add "Version", valid_606299
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606300 = header.getOrDefault("X-Amz-Signature")
  valid_606300 = validateParameter(valid_606300, JString, required = false,
                                 default = nil)
  if valid_606300 != nil:
    section.add "X-Amz-Signature", valid_606300
  var valid_606301 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606301 = validateParameter(valid_606301, JString, required = false,
                                 default = nil)
  if valid_606301 != nil:
    section.add "X-Amz-Content-Sha256", valid_606301
  var valid_606302 = header.getOrDefault("X-Amz-Date")
  valid_606302 = validateParameter(valid_606302, JString, required = false,
                                 default = nil)
  if valid_606302 != nil:
    section.add "X-Amz-Date", valid_606302
  var valid_606303 = header.getOrDefault("X-Amz-Credential")
  valid_606303 = validateParameter(valid_606303, JString, required = false,
                                 default = nil)
  if valid_606303 != nil:
    section.add "X-Amz-Credential", valid_606303
  var valid_606304 = header.getOrDefault("X-Amz-Security-Token")
  valid_606304 = validateParameter(valid_606304, JString, required = false,
                                 default = nil)
  if valid_606304 != nil:
    section.add "X-Amz-Security-Token", valid_606304
  var valid_606305 = header.getOrDefault("X-Amz-Algorithm")
  valid_606305 = validateParameter(valid_606305, JString, required = false,
                                 default = nil)
  if valid_606305 != nil:
    section.add "X-Amz-Algorithm", valid_606305
  var valid_606306 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606306 = validateParameter(valid_606306, JString, required = false,
                                 default = nil)
  if valid_606306 != nil:
    section.add "X-Amz-SignedHeaders", valid_606306
  result.add "header", section
  ## parameters in `formData` object:
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The custom AZ identifier.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CustomAvailabilityZoneId` field"
  var valid_606307 = formData.getOrDefault("CustomAvailabilityZoneId")
  valid_606307 = validateParameter(valid_606307, JString, required = true,
                                 default = nil)
  if valid_606307 != nil:
    section.add "CustomAvailabilityZoneId", valid_606307
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606308: Call_PostDeleteCustomAvailabilityZone_606295;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_606308.validator(path, query, header, formData, body)
  let scheme = call_606308.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606308.url(scheme.get, call_606308.host, call_606308.base,
                         call_606308.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606308, url, valid)

proc call*(call_606309: Call_PostDeleteCustomAvailabilityZone_606295;
          CustomAvailabilityZoneId: string;
          Action: string = "DeleteCustomAvailabilityZone";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteCustomAvailabilityZone
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The custom AZ identifier.
  ##   Version: string (required)
  var query_606310 = newJObject()
  var formData_606311 = newJObject()
  add(query_606310, "Action", newJString(Action))
  add(formData_606311, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_606310, "Version", newJString(Version))
  result = call_606309.call(nil, query_606310, nil, formData_606311, nil)

var postDeleteCustomAvailabilityZone* = Call_PostDeleteCustomAvailabilityZone_606295(
    name: "postDeleteCustomAvailabilityZone", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteCustomAvailabilityZone",
    validator: validate_PostDeleteCustomAvailabilityZone_606296, base: "/",
    url: url_PostDeleteCustomAvailabilityZone_606297,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCustomAvailabilityZone_606279 = ref object of OpenApiRestCall_604389
proc url_GetDeleteCustomAvailabilityZone_606281(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCustomAvailabilityZone_606280(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The custom AZ identifier.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `CustomAvailabilityZoneId` field"
  var valid_606282 = query.getOrDefault("CustomAvailabilityZoneId")
  valid_606282 = validateParameter(valid_606282, JString, required = true,
                                 default = nil)
  if valid_606282 != nil:
    section.add "CustomAvailabilityZoneId", valid_606282
  var valid_606283 = query.getOrDefault("Action")
  valid_606283 = validateParameter(valid_606283, JString, required = true, default = newJString(
      "DeleteCustomAvailabilityZone"))
  if valid_606283 != nil:
    section.add "Action", valid_606283
  var valid_606284 = query.getOrDefault("Version")
  valid_606284 = validateParameter(valid_606284, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606284 != nil:
    section.add "Version", valid_606284
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606285 = header.getOrDefault("X-Amz-Signature")
  valid_606285 = validateParameter(valid_606285, JString, required = false,
                                 default = nil)
  if valid_606285 != nil:
    section.add "X-Amz-Signature", valid_606285
  var valid_606286 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606286 = validateParameter(valid_606286, JString, required = false,
                                 default = nil)
  if valid_606286 != nil:
    section.add "X-Amz-Content-Sha256", valid_606286
  var valid_606287 = header.getOrDefault("X-Amz-Date")
  valid_606287 = validateParameter(valid_606287, JString, required = false,
                                 default = nil)
  if valid_606287 != nil:
    section.add "X-Amz-Date", valid_606287
  var valid_606288 = header.getOrDefault("X-Amz-Credential")
  valid_606288 = validateParameter(valid_606288, JString, required = false,
                                 default = nil)
  if valid_606288 != nil:
    section.add "X-Amz-Credential", valid_606288
  var valid_606289 = header.getOrDefault("X-Amz-Security-Token")
  valid_606289 = validateParameter(valid_606289, JString, required = false,
                                 default = nil)
  if valid_606289 != nil:
    section.add "X-Amz-Security-Token", valid_606289
  var valid_606290 = header.getOrDefault("X-Amz-Algorithm")
  valid_606290 = validateParameter(valid_606290, JString, required = false,
                                 default = nil)
  if valid_606290 != nil:
    section.add "X-Amz-Algorithm", valid_606290
  var valid_606291 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606291 = validateParameter(valid_606291, JString, required = false,
                                 default = nil)
  if valid_606291 != nil:
    section.add "X-Amz-SignedHeaders", valid_606291
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606292: Call_GetDeleteCustomAvailabilityZone_606279;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_606292.validator(path, query, header, formData, body)
  let scheme = call_606292.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606292.url(scheme.get, call_606292.host, call_606292.base,
                         call_606292.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606292, url, valid)

proc call*(call_606293: Call_GetDeleteCustomAvailabilityZone_606279;
          CustomAvailabilityZoneId: string;
          Action: string = "DeleteCustomAvailabilityZone";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteCustomAvailabilityZone
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The custom AZ identifier.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606294 = newJObject()
  add(query_606294, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_606294, "Action", newJString(Action))
  add(query_606294, "Version", newJString(Version))
  result = call_606293.call(nil, query_606294, nil, nil, nil)

var getDeleteCustomAvailabilityZone* = Call_GetDeleteCustomAvailabilityZone_606279(
    name: "getDeleteCustomAvailabilityZone", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteCustomAvailabilityZone",
    validator: validate_GetDeleteCustomAvailabilityZone_606280, base: "/",
    url: url_GetDeleteCustomAvailabilityZone_606281,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBCluster_606330 = ref object of OpenApiRestCall_604389
proc url_PostDeleteDBCluster_606332(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBCluster_606331(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606333 = query.getOrDefault("Action")
  valid_606333 = validateParameter(valid_606333, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_606333 != nil:
    section.add "Action", valid_606333
  var valid_606334 = query.getOrDefault("Version")
  valid_606334 = validateParameter(valid_606334, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606334 != nil:
    section.add "Version", valid_606334
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606335 = header.getOrDefault("X-Amz-Signature")
  valid_606335 = validateParameter(valid_606335, JString, required = false,
                                 default = nil)
  if valid_606335 != nil:
    section.add "X-Amz-Signature", valid_606335
  var valid_606336 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606336 = validateParameter(valid_606336, JString, required = false,
                                 default = nil)
  if valid_606336 != nil:
    section.add "X-Amz-Content-Sha256", valid_606336
  var valid_606337 = header.getOrDefault("X-Amz-Date")
  valid_606337 = validateParameter(valid_606337, JString, required = false,
                                 default = nil)
  if valid_606337 != nil:
    section.add "X-Amz-Date", valid_606337
  var valid_606338 = header.getOrDefault("X-Amz-Credential")
  valid_606338 = validateParameter(valid_606338, JString, required = false,
                                 default = nil)
  if valid_606338 != nil:
    section.add "X-Amz-Credential", valid_606338
  var valid_606339 = header.getOrDefault("X-Amz-Security-Token")
  valid_606339 = validateParameter(valid_606339, JString, required = false,
                                 default = nil)
  if valid_606339 != nil:
    section.add "X-Amz-Security-Token", valid_606339
  var valid_606340 = header.getOrDefault("X-Amz-Algorithm")
  valid_606340 = validateParameter(valid_606340, JString, required = false,
                                 default = nil)
  if valid_606340 != nil:
    section.add "X-Amz-Algorithm", valid_606340
  var valid_606341 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606341 = validateParameter(valid_606341, JString, required = false,
                                 default = nil)
  if valid_606341 != nil:
    section.add "X-Amz-SignedHeaders", valid_606341
  result.add "header", section
  ## parameters in `formData` object:
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_606342 = formData.getOrDefault("SkipFinalSnapshot")
  valid_606342 = validateParameter(valid_606342, JBool, required = false, default = nil)
  if valid_606342 != nil:
    section.add "SkipFinalSnapshot", valid_606342
  var valid_606343 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_606343 = validateParameter(valid_606343, JString, required = false,
                                 default = nil)
  if valid_606343 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_606343
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_606344 = formData.getOrDefault("DBClusterIdentifier")
  valid_606344 = validateParameter(valid_606344, JString, required = true,
                                 default = nil)
  if valid_606344 != nil:
    section.add "DBClusterIdentifier", valid_606344
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606345: Call_PostDeleteDBCluster_606330; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606345.validator(path, query, header, formData, body)
  let scheme = call_606345.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606345.url(scheme.get, call_606345.host, call_606345.base,
                         call_606345.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606345, url, valid)

proc call*(call_606346: Call_PostDeleteDBCluster_606330;
          DBClusterIdentifier: string; Action: string = "DeleteDBCluster";
          SkipFinalSnapshot: bool = false; FinalDBSnapshotIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  var query_606347 = newJObject()
  var formData_606348 = newJObject()
  add(query_606347, "Action", newJString(Action))
  add(formData_606348, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(formData_606348, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_606347, "Version", newJString(Version))
  add(formData_606348, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_606346.call(nil, query_606347, nil, formData_606348, nil)

var postDeleteDBCluster* = Call_PostDeleteDBCluster_606330(
    name: "postDeleteDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBCluster",
    validator: validate_PostDeleteDBCluster_606331, base: "/",
    url: url_PostDeleteDBCluster_606332, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBCluster_606312 = ref object of OpenApiRestCall_604389
proc url_GetDeleteDBCluster_606314(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBCluster_606313(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_606315 = query.getOrDefault("DBClusterIdentifier")
  valid_606315 = validateParameter(valid_606315, JString, required = true,
                                 default = nil)
  if valid_606315 != nil:
    section.add "DBClusterIdentifier", valid_606315
  var valid_606316 = query.getOrDefault("SkipFinalSnapshot")
  valid_606316 = validateParameter(valid_606316, JBool, required = false, default = nil)
  if valid_606316 != nil:
    section.add "SkipFinalSnapshot", valid_606316
  var valid_606317 = query.getOrDefault("Action")
  valid_606317 = validateParameter(valid_606317, JString, required = true,
                                 default = newJString("DeleteDBCluster"))
  if valid_606317 != nil:
    section.add "Action", valid_606317
  var valid_606318 = query.getOrDefault("Version")
  valid_606318 = validateParameter(valid_606318, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606318 != nil:
    section.add "Version", valid_606318
  var valid_606319 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_606319 = validateParameter(valid_606319, JString, required = false,
                                 default = nil)
  if valid_606319 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_606319
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606320 = header.getOrDefault("X-Amz-Signature")
  valid_606320 = validateParameter(valid_606320, JString, required = false,
                                 default = nil)
  if valid_606320 != nil:
    section.add "X-Amz-Signature", valid_606320
  var valid_606321 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606321 = validateParameter(valid_606321, JString, required = false,
                                 default = nil)
  if valid_606321 != nil:
    section.add "X-Amz-Content-Sha256", valid_606321
  var valid_606322 = header.getOrDefault("X-Amz-Date")
  valid_606322 = validateParameter(valid_606322, JString, required = false,
                                 default = nil)
  if valid_606322 != nil:
    section.add "X-Amz-Date", valid_606322
  var valid_606323 = header.getOrDefault("X-Amz-Credential")
  valid_606323 = validateParameter(valid_606323, JString, required = false,
                                 default = nil)
  if valid_606323 != nil:
    section.add "X-Amz-Credential", valid_606323
  var valid_606324 = header.getOrDefault("X-Amz-Security-Token")
  valid_606324 = validateParameter(valid_606324, JString, required = false,
                                 default = nil)
  if valid_606324 != nil:
    section.add "X-Amz-Security-Token", valid_606324
  var valid_606325 = header.getOrDefault("X-Amz-Algorithm")
  valid_606325 = validateParameter(valid_606325, JString, required = false,
                                 default = nil)
  if valid_606325 != nil:
    section.add "X-Amz-Algorithm", valid_606325
  var valid_606326 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606326 = validateParameter(valid_606326, JString, required = false,
                                 default = nil)
  if valid_606326 != nil:
    section.add "X-Amz-SignedHeaders", valid_606326
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606327: Call_GetDeleteDBCluster_606312; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606327.validator(path, query, header, formData, body)
  let scheme = call_606327.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606327.url(scheme.get, call_606327.host, call_606327.base,
                         call_606327.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606327, url, valid)

proc call*(call_606328: Call_GetDeleteDBCluster_606312;
          DBClusterIdentifier: string; SkipFinalSnapshot: bool = false;
          Action: string = "DeleteDBCluster"; Version: string = "2014-10-31";
          FinalDBSnapshotIdentifier: string = ""): Recallable =
  ## getDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  var query_606329 = newJObject()
  add(query_606329, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606329, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_606329, "Action", newJString(Action))
  add(query_606329, "Version", newJString(Version))
  add(query_606329, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  result = call_606328.call(nil, query_606329, nil, nil, nil)

var getDeleteDBCluster* = Call_GetDeleteDBCluster_606312(
    name: "getDeleteDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBCluster", validator: validate_GetDeleteDBCluster_606313,
    base: "/", url: url_GetDeleteDBCluster_606314,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterEndpoint_606365 = ref object of OpenApiRestCall_604389
proc url_PostDeleteDBClusterEndpoint_606367(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterEndpoint_606366(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606368 = query.getOrDefault("Action")
  valid_606368 = validateParameter(valid_606368, JString, required = true, default = newJString(
      "DeleteDBClusterEndpoint"))
  if valid_606368 != nil:
    section.add "Action", valid_606368
  var valid_606369 = query.getOrDefault("Version")
  valid_606369 = validateParameter(valid_606369, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606369 != nil:
    section.add "Version", valid_606369
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606370 = header.getOrDefault("X-Amz-Signature")
  valid_606370 = validateParameter(valid_606370, JString, required = false,
                                 default = nil)
  if valid_606370 != nil:
    section.add "X-Amz-Signature", valid_606370
  var valid_606371 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606371 = validateParameter(valid_606371, JString, required = false,
                                 default = nil)
  if valid_606371 != nil:
    section.add "X-Amz-Content-Sha256", valid_606371
  var valid_606372 = header.getOrDefault("X-Amz-Date")
  valid_606372 = validateParameter(valid_606372, JString, required = false,
                                 default = nil)
  if valid_606372 != nil:
    section.add "X-Amz-Date", valid_606372
  var valid_606373 = header.getOrDefault("X-Amz-Credential")
  valid_606373 = validateParameter(valid_606373, JString, required = false,
                                 default = nil)
  if valid_606373 != nil:
    section.add "X-Amz-Credential", valid_606373
  var valid_606374 = header.getOrDefault("X-Amz-Security-Token")
  valid_606374 = validateParameter(valid_606374, JString, required = false,
                                 default = nil)
  if valid_606374 != nil:
    section.add "X-Amz-Security-Token", valid_606374
  var valid_606375 = header.getOrDefault("X-Amz-Algorithm")
  valid_606375 = validateParameter(valid_606375, JString, required = false,
                                 default = nil)
  if valid_606375 != nil:
    section.add "X-Amz-Algorithm", valid_606375
  var valid_606376 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606376 = validateParameter(valid_606376, JString, required = false,
                                 default = nil)
  if valid_606376 != nil:
    section.add "X-Amz-SignedHeaders", valid_606376
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_606377 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_606377 = validateParameter(valid_606377, JString, required = true,
                                 default = nil)
  if valid_606377 != nil:
    section.add "DBClusterEndpointIdentifier", valid_606377
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606378: Call_PostDeleteDBClusterEndpoint_606365; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606378.validator(path, query, header, formData, body)
  let scheme = call_606378.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606378.url(scheme.get, call_606378.host, call_606378.base,
                         call_606378.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606378, url, valid)

proc call*(call_606379: Call_PostDeleteDBClusterEndpoint_606365;
          DBClusterEndpointIdentifier: string;
          Action: string = "DeleteDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterEndpoint
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606380 = newJObject()
  var formData_606381 = newJObject()
  add(formData_606381, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_606380, "Action", newJString(Action))
  add(query_606380, "Version", newJString(Version))
  result = call_606379.call(nil, query_606380, nil, formData_606381, nil)

var postDeleteDBClusterEndpoint* = Call_PostDeleteDBClusterEndpoint_606365(
    name: "postDeleteDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterEndpoint",
    validator: validate_PostDeleteDBClusterEndpoint_606366, base: "/",
    url: url_PostDeleteDBClusterEndpoint_606367,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterEndpoint_606349 = ref object of OpenApiRestCall_604389
proc url_GetDeleteDBClusterEndpoint_606351(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterEndpoint_606350(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_606352 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_606352 = validateParameter(valid_606352, JString, required = true,
                                 default = nil)
  if valid_606352 != nil:
    section.add "DBClusterEndpointIdentifier", valid_606352
  var valid_606353 = query.getOrDefault("Action")
  valid_606353 = validateParameter(valid_606353, JString, required = true, default = newJString(
      "DeleteDBClusterEndpoint"))
  if valid_606353 != nil:
    section.add "Action", valid_606353
  var valid_606354 = query.getOrDefault("Version")
  valid_606354 = validateParameter(valid_606354, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606354 != nil:
    section.add "Version", valid_606354
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606355 = header.getOrDefault("X-Amz-Signature")
  valid_606355 = validateParameter(valid_606355, JString, required = false,
                                 default = nil)
  if valid_606355 != nil:
    section.add "X-Amz-Signature", valid_606355
  var valid_606356 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606356 = validateParameter(valid_606356, JString, required = false,
                                 default = nil)
  if valid_606356 != nil:
    section.add "X-Amz-Content-Sha256", valid_606356
  var valid_606357 = header.getOrDefault("X-Amz-Date")
  valid_606357 = validateParameter(valid_606357, JString, required = false,
                                 default = nil)
  if valid_606357 != nil:
    section.add "X-Amz-Date", valid_606357
  var valid_606358 = header.getOrDefault("X-Amz-Credential")
  valid_606358 = validateParameter(valid_606358, JString, required = false,
                                 default = nil)
  if valid_606358 != nil:
    section.add "X-Amz-Credential", valid_606358
  var valid_606359 = header.getOrDefault("X-Amz-Security-Token")
  valid_606359 = validateParameter(valid_606359, JString, required = false,
                                 default = nil)
  if valid_606359 != nil:
    section.add "X-Amz-Security-Token", valid_606359
  var valid_606360 = header.getOrDefault("X-Amz-Algorithm")
  valid_606360 = validateParameter(valid_606360, JString, required = false,
                                 default = nil)
  if valid_606360 != nil:
    section.add "X-Amz-Algorithm", valid_606360
  var valid_606361 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606361 = validateParameter(valid_606361, JString, required = false,
                                 default = nil)
  if valid_606361 != nil:
    section.add "X-Amz-SignedHeaders", valid_606361
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606362: Call_GetDeleteDBClusterEndpoint_606349; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606362.validator(path, query, header, formData, body)
  let scheme = call_606362.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606362.url(scheme.get, call_606362.host, call_606362.base,
                         call_606362.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606362, url, valid)

proc call*(call_606363: Call_GetDeleteDBClusterEndpoint_606349;
          DBClusterEndpointIdentifier: string;
          Action: string = "DeleteDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterEndpoint
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606364 = newJObject()
  add(query_606364, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_606364, "Action", newJString(Action))
  add(query_606364, "Version", newJString(Version))
  result = call_606363.call(nil, query_606364, nil, nil, nil)

var getDeleteDBClusterEndpoint* = Call_GetDeleteDBClusterEndpoint_606349(
    name: "getDeleteDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterEndpoint",
    validator: validate_GetDeleteDBClusterEndpoint_606350, base: "/",
    url: url_GetDeleteDBClusterEndpoint_606351,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterParameterGroup_606398 = ref object of OpenApiRestCall_604389
proc url_PostDeleteDBClusterParameterGroup_606400(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterParameterGroup_606399(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606401 = query.getOrDefault("Action")
  valid_606401 = validateParameter(valid_606401, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_606401 != nil:
    section.add "Action", valid_606401
  var valid_606402 = query.getOrDefault("Version")
  valid_606402 = validateParameter(valid_606402, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606402 != nil:
    section.add "Version", valid_606402
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606403 = header.getOrDefault("X-Amz-Signature")
  valid_606403 = validateParameter(valid_606403, JString, required = false,
                                 default = nil)
  if valid_606403 != nil:
    section.add "X-Amz-Signature", valid_606403
  var valid_606404 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606404 = validateParameter(valid_606404, JString, required = false,
                                 default = nil)
  if valid_606404 != nil:
    section.add "X-Amz-Content-Sha256", valid_606404
  var valid_606405 = header.getOrDefault("X-Amz-Date")
  valid_606405 = validateParameter(valid_606405, JString, required = false,
                                 default = nil)
  if valid_606405 != nil:
    section.add "X-Amz-Date", valid_606405
  var valid_606406 = header.getOrDefault("X-Amz-Credential")
  valid_606406 = validateParameter(valid_606406, JString, required = false,
                                 default = nil)
  if valid_606406 != nil:
    section.add "X-Amz-Credential", valid_606406
  var valid_606407 = header.getOrDefault("X-Amz-Security-Token")
  valid_606407 = validateParameter(valid_606407, JString, required = false,
                                 default = nil)
  if valid_606407 != nil:
    section.add "X-Amz-Security-Token", valid_606407
  var valid_606408 = header.getOrDefault("X-Amz-Algorithm")
  valid_606408 = validateParameter(valid_606408, JString, required = false,
                                 default = nil)
  if valid_606408 != nil:
    section.add "X-Amz-Algorithm", valid_606408
  var valid_606409 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606409 = validateParameter(valid_606409, JString, required = false,
                                 default = nil)
  if valid_606409 != nil:
    section.add "X-Amz-SignedHeaders", valid_606409
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_606410 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_606410 = validateParameter(valid_606410, JString, required = true,
                                 default = nil)
  if valid_606410 != nil:
    section.add "DBClusterParameterGroupName", valid_606410
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606411: Call_PostDeleteDBClusterParameterGroup_606398;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606411.validator(path, query, header, formData, body)
  let scheme = call_606411.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606411.url(scheme.get, call_606411.host, call_606411.base,
                         call_606411.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606411, url, valid)

proc call*(call_606412: Call_PostDeleteDBClusterParameterGroup_606398;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterParameterGroup
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Version: string (required)
  var query_606413 = newJObject()
  var formData_606414 = newJObject()
  add(query_606413, "Action", newJString(Action))
  add(formData_606414, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_606413, "Version", newJString(Version))
  result = call_606412.call(nil, query_606413, nil, formData_606414, nil)

var postDeleteDBClusterParameterGroup* = Call_PostDeleteDBClusterParameterGroup_606398(
    name: "postDeleteDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_PostDeleteDBClusterParameterGroup_606399, base: "/",
    url: url_PostDeleteDBClusterParameterGroup_606400,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterParameterGroup_606382 = ref object of OpenApiRestCall_604389
proc url_GetDeleteDBClusterParameterGroup_606384(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterParameterGroup_606383(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_606385 = query.getOrDefault("DBClusterParameterGroupName")
  valid_606385 = validateParameter(valid_606385, JString, required = true,
                                 default = nil)
  if valid_606385 != nil:
    section.add "DBClusterParameterGroupName", valid_606385
  var valid_606386 = query.getOrDefault("Action")
  valid_606386 = validateParameter(valid_606386, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_606386 != nil:
    section.add "Action", valid_606386
  var valid_606387 = query.getOrDefault("Version")
  valid_606387 = validateParameter(valid_606387, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606387 != nil:
    section.add "Version", valid_606387
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606388 = header.getOrDefault("X-Amz-Signature")
  valid_606388 = validateParameter(valid_606388, JString, required = false,
                                 default = nil)
  if valid_606388 != nil:
    section.add "X-Amz-Signature", valid_606388
  var valid_606389 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606389 = validateParameter(valid_606389, JString, required = false,
                                 default = nil)
  if valid_606389 != nil:
    section.add "X-Amz-Content-Sha256", valid_606389
  var valid_606390 = header.getOrDefault("X-Amz-Date")
  valid_606390 = validateParameter(valid_606390, JString, required = false,
                                 default = nil)
  if valid_606390 != nil:
    section.add "X-Amz-Date", valid_606390
  var valid_606391 = header.getOrDefault("X-Amz-Credential")
  valid_606391 = validateParameter(valid_606391, JString, required = false,
                                 default = nil)
  if valid_606391 != nil:
    section.add "X-Amz-Credential", valid_606391
  var valid_606392 = header.getOrDefault("X-Amz-Security-Token")
  valid_606392 = validateParameter(valid_606392, JString, required = false,
                                 default = nil)
  if valid_606392 != nil:
    section.add "X-Amz-Security-Token", valid_606392
  var valid_606393 = header.getOrDefault("X-Amz-Algorithm")
  valid_606393 = validateParameter(valid_606393, JString, required = false,
                                 default = nil)
  if valid_606393 != nil:
    section.add "X-Amz-Algorithm", valid_606393
  var valid_606394 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606394 = validateParameter(valid_606394, JString, required = false,
                                 default = nil)
  if valid_606394 != nil:
    section.add "X-Amz-SignedHeaders", valid_606394
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606395: Call_GetDeleteDBClusterParameterGroup_606382;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606395.validator(path, query, header, formData, body)
  let scheme = call_606395.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606395.url(scheme.get, call_606395.host, call_606395.base,
                         call_606395.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606395, url, valid)

proc call*(call_606396: Call_GetDeleteDBClusterParameterGroup_606382;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterParameterGroup
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606397 = newJObject()
  add(query_606397, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_606397, "Action", newJString(Action))
  add(query_606397, "Version", newJString(Version))
  result = call_606396.call(nil, query_606397, nil, nil, nil)

var getDeleteDBClusterParameterGroup* = Call_GetDeleteDBClusterParameterGroup_606382(
    name: "getDeleteDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_GetDeleteDBClusterParameterGroup_606383, base: "/",
    url: url_GetDeleteDBClusterParameterGroup_606384,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterSnapshot_606431 = ref object of OpenApiRestCall_604389
proc url_PostDeleteDBClusterSnapshot_606433(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterSnapshot_606432(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606434 = query.getOrDefault("Action")
  valid_606434 = validateParameter(valid_606434, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_606434 != nil:
    section.add "Action", valid_606434
  var valid_606435 = query.getOrDefault("Version")
  valid_606435 = validateParameter(valid_606435, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606435 != nil:
    section.add "Version", valid_606435
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606436 = header.getOrDefault("X-Amz-Signature")
  valid_606436 = validateParameter(valid_606436, JString, required = false,
                                 default = nil)
  if valid_606436 != nil:
    section.add "X-Amz-Signature", valid_606436
  var valid_606437 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606437 = validateParameter(valid_606437, JString, required = false,
                                 default = nil)
  if valid_606437 != nil:
    section.add "X-Amz-Content-Sha256", valid_606437
  var valid_606438 = header.getOrDefault("X-Amz-Date")
  valid_606438 = validateParameter(valid_606438, JString, required = false,
                                 default = nil)
  if valid_606438 != nil:
    section.add "X-Amz-Date", valid_606438
  var valid_606439 = header.getOrDefault("X-Amz-Credential")
  valid_606439 = validateParameter(valid_606439, JString, required = false,
                                 default = nil)
  if valid_606439 != nil:
    section.add "X-Amz-Credential", valid_606439
  var valid_606440 = header.getOrDefault("X-Amz-Security-Token")
  valid_606440 = validateParameter(valid_606440, JString, required = false,
                                 default = nil)
  if valid_606440 != nil:
    section.add "X-Amz-Security-Token", valid_606440
  var valid_606441 = header.getOrDefault("X-Amz-Algorithm")
  valid_606441 = validateParameter(valid_606441, JString, required = false,
                                 default = nil)
  if valid_606441 != nil:
    section.add "X-Amz-Algorithm", valid_606441
  var valid_606442 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606442 = validateParameter(valid_606442, JString, required = false,
                                 default = nil)
  if valid_606442 != nil:
    section.add "X-Amz-SignedHeaders", valid_606442
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_606443 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_606443 = validateParameter(valid_606443, JString, required = true,
                                 default = nil)
  if valid_606443 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_606443
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606444: Call_PostDeleteDBClusterSnapshot_606431; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606444.validator(path, query, header, formData, body)
  let scheme = call_606444.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606444.url(scheme.get, call_606444.host, call_606444.base,
                         call_606444.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606444, url, valid)

proc call*(call_606445: Call_PostDeleteDBClusterSnapshot_606431;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606446 = newJObject()
  var formData_606447 = newJObject()
  add(formData_606447, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_606446, "Action", newJString(Action))
  add(query_606446, "Version", newJString(Version))
  result = call_606445.call(nil, query_606446, nil, formData_606447, nil)

var postDeleteDBClusterSnapshot* = Call_PostDeleteDBClusterSnapshot_606431(
    name: "postDeleteDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_PostDeleteDBClusterSnapshot_606432, base: "/",
    url: url_PostDeleteDBClusterSnapshot_606433,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterSnapshot_606415 = ref object of OpenApiRestCall_604389
proc url_GetDeleteDBClusterSnapshot_606417(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterSnapshot_606416(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_606418 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_606418 = validateParameter(valid_606418, JString, required = true,
                                 default = nil)
  if valid_606418 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_606418
  var valid_606419 = query.getOrDefault("Action")
  valid_606419 = validateParameter(valid_606419, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_606419 != nil:
    section.add "Action", valid_606419
  var valid_606420 = query.getOrDefault("Version")
  valid_606420 = validateParameter(valid_606420, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606420 != nil:
    section.add "Version", valid_606420
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606421 = header.getOrDefault("X-Amz-Signature")
  valid_606421 = validateParameter(valid_606421, JString, required = false,
                                 default = nil)
  if valid_606421 != nil:
    section.add "X-Amz-Signature", valid_606421
  var valid_606422 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606422 = validateParameter(valid_606422, JString, required = false,
                                 default = nil)
  if valid_606422 != nil:
    section.add "X-Amz-Content-Sha256", valid_606422
  var valid_606423 = header.getOrDefault("X-Amz-Date")
  valid_606423 = validateParameter(valid_606423, JString, required = false,
                                 default = nil)
  if valid_606423 != nil:
    section.add "X-Amz-Date", valid_606423
  var valid_606424 = header.getOrDefault("X-Amz-Credential")
  valid_606424 = validateParameter(valid_606424, JString, required = false,
                                 default = nil)
  if valid_606424 != nil:
    section.add "X-Amz-Credential", valid_606424
  var valid_606425 = header.getOrDefault("X-Amz-Security-Token")
  valid_606425 = validateParameter(valid_606425, JString, required = false,
                                 default = nil)
  if valid_606425 != nil:
    section.add "X-Amz-Security-Token", valid_606425
  var valid_606426 = header.getOrDefault("X-Amz-Algorithm")
  valid_606426 = validateParameter(valid_606426, JString, required = false,
                                 default = nil)
  if valid_606426 != nil:
    section.add "X-Amz-Algorithm", valid_606426
  var valid_606427 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606427 = validateParameter(valid_606427, JString, required = false,
                                 default = nil)
  if valid_606427 != nil:
    section.add "X-Amz-SignedHeaders", valid_606427
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606428: Call_GetDeleteDBClusterSnapshot_606415; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606428.validator(path, query, header, formData, body)
  let scheme = call_606428.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606428.url(scheme.get, call_606428.host, call_606428.base,
                         call_606428.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606428, url, valid)

proc call*(call_606429: Call_GetDeleteDBClusterSnapshot_606415;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606430 = newJObject()
  add(query_606430, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_606430, "Action", newJString(Action))
  add(query_606430, "Version", newJString(Version))
  result = call_606429.call(nil, query_606430, nil, nil, nil)

var getDeleteDBClusterSnapshot* = Call_GetDeleteDBClusterSnapshot_606415(
    name: "getDeleteDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_GetDeleteDBClusterSnapshot_606416, base: "/",
    url: url_GetDeleteDBClusterSnapshot_606417,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstance_606467 = ref object of OpenApiRestCall_604389
proc url_PostDeleteDBInstance_606469(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBInstance_606468(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606470 = query.getOrDefault("Action")
  valid_606470 = validateParameter(valid_606470, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_606470 != nil:
    section.add "Action", valid_606470
  var valid_606471 = query.getOrDefault("Version")
  valid_606471 = validateParameter(valid_606471, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606471 != nil:
    section.add "Version", valid_606471
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606472 = header.getOrDefault("X-Amz-Signature")
  valid_606472 = validateParameter(valid_606472, JString, required = false,
                                 default = nil)
  if valid_606472 != nil:
    section.add "X-Amz-Signature", valid_606472
  var valid_606473 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606473 = validateParameter(valid_606473, JString, required = false,
                                 default = nil)
  if valid_606473 != nil:
    section.add "X-Amz-Content-Sha256", valid_606473
  var valid_606474 = header.getOrDefault("X-Amz-Date")
  valid_606474 = validateParameter(valid_606474, JString, required = false,
                                 default = nil)
  if valid_606474 != nil:
    section.add "X-Amz-Date", valid_606474
  var valid_606475 = header.getOrDefault("X-Amz-Credential")
  valid_606475 = validateParameter(valid_606475, JString, required = false,
                                 default = nil)
  if valid_606475 != nil:
    section.add "X-Amz-Credential", valid_606475
  var valid_606476 = header.getOrDefault("X-Amz-Security-Token")
  valid_606476 = validateParameter(valid_606476, JString, required = false,
                                 default = nil)
  if valid_606476 != nil:
    section.add "X-Amz-Security-Token", valid_606476
  var valid_606477 = header.getOrDefault("X-Amz-Algorithm")
  valid_606477 = validateParameter(valid_606477, JString, required = false,
                                 default = nil)
  if valid_606477 != nil:
    section.add "X-Amz-Algorithm", valid_606477
  var valid_606478 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606478 = validateParameter(valid_606478, JString, required = false,
                                 default = nil)
  if valid_606478 != nil:
    section.add "X-Amz-SignedHeaders", valid_606478
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   DeleteAutomatedBackups: JBool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_606479 = formData.getOrDefault("DBInstanceIdentifier")
  valid_606479 = validateParameter(valid_606479, JString, required = true,
                                 default = nil)
  if valid_606479 != nil:
    section.add "DBInstanceIdentifier", valid_606479
  var valid_606480 = formData.getOrDefault("SkipFinalSnapshot")
  valid_606480 = validateParameter(valid_606480, JBool, required = false, default = nil)
  if valid_606480 != nil:
    section.add "SkipFinalSnapshot", valid_606480
  var valid_606481 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_606481 = validateParameter(valid_606481, JString, required = false,
                                 default = nil)
  if valid_606481 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_606481
  var valid_606482 = formData.getOrDefault("DeleteAutomatedBackups")
  valid_606482 = validateParameter(valid_606482, JBool, required = false, default = nil)
  if valid_606482 != nil:
    section.add "DeleteAutomatedBackups", valid_606482
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606483: Call_PostDeleteDBInstance_606467; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  let valid = call_606483.validator(path, query, header, formData, body)
  let scheme = call_606483.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606483.url(scheme.get, call_606483.host, call_606483.base,
                         call_606483.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606483, url, valid)

proc call*(call_606484: Call_PostDeleteDBInstance_606467;
          DBInstanceIdentifier: string; Action: string = "DeleteDBInstance";
          SkipFinalSnapshot: bool = false; FinalDBSnapshotIdentifier: string = "";
          Version: string = "2014-10-31"; DeleteAutomatedBackups: bool = false): Recallable =
  ## postDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Version: string (required)
  ##   DeleteAutomatedBackups: bool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  var query_606485 = newJObject()
  var formData_606486 = newJObject()
  add(formData_606486, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_606485, "Action", newJString(Action))
  add(formData_606486, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(formData_606486, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_606485, "Version", newJString(Version))
  add(formData_606486, "DeleteAutomatedBackups", newJBool(DeleteAutomatedBackups))
  result = call_606484.call(nil, query_606485, nil, formData_606486, nil)

var postDeleteDBInstance* = Call_PostDeleteDBInstance_606467(
    name: "postDeleteDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_PostDeleteDBInstance_606468, base: "/",
    url: url_PostDeleteDBInstance_606469, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstance_606448 = ref object of OpenApiRestCall_604389
proc url_GetDeleteDBInstance_606450(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBInstance_606449(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeleteAutomatedBackups: JBool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  section = newJObject()
  var valid_606451 = query.getOrDefault("DeleteAutomatedBackups")
  valid_606451 = validateParameter(valid_606451, JBool, required = false, default = nil)
  if valid_606451 != nil:
    section.add "DeleteAutomatedBackups", valid_606451
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_606452 = query.getOrDefault("DBInstanceIdentifier")
  valid_606452 = validateParameter(valid_606452, JString, required = true,
                                 default = nil)
  if valid_606452 != nil:
    section.add "DBInstanceIdentifier", valid_606452
  var valid_606453 = query.getOrDefault("SkipFinalSnapshot")
  valid_606453 = validateParameter(valid_606453, JBool, required = false, default = nil)
  if valid_606453 != nil:
    section.add "SkipFinalSnapshot", valid_606453
  var valid_606454 = query.getOrDefault("Action")
  valid_606454 = validateParameter(valid_606454, JString, required = true,
                                 default = newJString("DeleteDBInstance"))
  if valid_606454 != nil:
    section.add "Action", valid_606454
  var valid_606455 = query.getOrDefault("Version")
  valid_606455 = validateParameter(valid_606455, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606455 != nil:
    section.add "Version", valid_606455
  var valid_606456 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_606456 = validateParameter(valid_606456, JString, required = false,
                                 default = nil)
  if valid_606456 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_606456
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606457 = header.getOrDefault("X-Amz-Signature")
  valid_606457 = validateParameter(valid_606457, JString, required = false,
                                 default = nil)
  if valid_606457 != nil:
    section.add "X-Amz-Signature", valid_606457
  var valid_606458 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606458 = validateParameter(valid_606458, JString, required = false,
                                 default = nil)
  if valid_606458 != nil:
    section.add "X-Amz-Content-Sha256", valid_606458
  var valid_606459 = header.getOrDefault("X-Amz-Date")
  valid_606459 = validateParameter(valid_606459, JString, required = false,
                                 default = nil)
  if valid_606459 != nil:
    section.add "X-Amz-Date", valid_606459
  var valid_606460 = header.getOrDefault("X-Amz-Credential")
  valid_606460 = validateParameter(valid_606460, JString, required = false,
                                 default = nil)
  if valid_606460 != nil:
    section.add "X-Amz-Credential", valid_606460
  var valid_606461 = header.getOrDefault("X-Amz-Security-Token")
  valid_606461 = validateParameter(valid_606461, JString, required = false,
                                 default = nil)
  if valid_606461 != nil:
    section.add "X-Amz-Security-Token", valid_606461
  var valid_606462 = header.getOrDefault("X-Amz-Algorithm")
  valid_606462 = validateParameter(valid_606462, JString, required = false,
                                 default = nil)
  if valid_606462 != nil:
    section.add "X-Amz-Algorithm", valid_606462
  var valid_606463 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606463 = validateParameter(valid_606463, JString, required = false,
                                 default = nil)
  if valid_606463 != nil:
    section.add "X-Amz-SignedHeaders", valid_606463
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606464: Call_GetDeleteDBInstance_606448; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  let valid = call_606464.validator(path, query, header, formData, body)
  let scheme = call_606464.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606464.url(scheme.get, call_606464.host, call_606464.base,
                         call_606464.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606464, url, valid)

proc call*(call_606465: Call_GetDeleteDBInstance_606448;
          DBInstanceIdentifier: string; DeleteAutomatedBackups: bool = false;
          SkipFinalSnapshot: bool = false; Action: string = "DeleteDBInstance";
          Version: string = "2014-10-31"; FinalDBSnapshotIdentifier: string = ""): Recallable =
  ## getDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>Note that when a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ##   DeleteAutomatedBackups: bool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  var query_606466 = newJObject()
  add(query_606466, "DeleteAutomatedBackups", newJBool(DeleteAutomatedBackups))
  add(query_606466, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_606466, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_606466, "Action", newJString(Action))
  add(query_606466, "Version", newJString(Version))
  add(query_606466, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  result = call_606465.call(nil, query_606466, nil, nil, nil)

var getDeleteDBInstance* = Call_GetDeleteDBInstance_606448(
    name: "getDeleteDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_GetDeleteDBInstance_606449, base: "/",
    url: url_GetDeleteDBInstance_606450, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstanceAutomatedBackup_606503 = ref object of OpenApiRestCall_604389
proc url_PostDeleteDBInstanceAutomatedBackup_606505(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBInstanceAutomatedBackup_606504(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606506 = query.getOrDefault("Action")
  valid_606506 = validateParameter(valid_606506, JString, required = true, default = newJString(
      "DeleteDBInstanceAutomatedBackup"))
  if valid_606506 != nil:
    section.add "Action", valid_606506
  var valid_606507 = query.getOrDefault("Version")
  valid_606507 = validateParameter(valid_606507, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606507 != nil:
    section.add "Version", valid_606507
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606508 = header.getOrDefault("X-Amz-Signature")
  valid_606508 = validateParameter(valid_606508, JString, required = false,
                                 default = nil)
  if valid_606508 != nil:
    section.add "X-Amz-Signature", valid_606508
  var valid_606509 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606509 = validateParameter(valid_606509, JString, required = false,
                                 default = nil)
  if valid_606509 != nil:
    section.add "X-Amz-Content-Sha256", valid_606509
  var valid_606510 = header.getOrDefault("X-Amz-Date")
  valid_606510 = validateParameter(valid_606510, JString, required = false,
                                 default = nil)
  if valid_606510 != nil:
    section.add "X-Amz-Date", valid_606510
  var valid_606511 = header.getOrDefault("X-Amz-Credential")
  valid_606511 = validateParameter(valid_606511, JString, required = false,
                                 default = nil)
  if valid_606511 != nil:
    section.add "X-Amz-Credential", valid_606511
  var valid_606512 = header.getOrDefault("X-Amz-Security-Token")
  valid_606512 = validateParameter(valid_606512, JString, required = false,
                                 default = nil)
  if valid_606512 != nil:
    section.add "X-Amz-Security-Token", valid_606512
  var valid_606513 = header.getOrDefault("X-Amz-Algorithm")
  valid_606513 = validateParameter(valid_606513, JString, required = false,
                                 default = nil)
  if valid_606513 != nil:
    section.add "X-Amz-Algorithm", valid_606513
  var valid_606514 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606514 = validateParameter(valid_606514, JString, required = false,
                                 default = nil)
  if valid_606514 != nil:
    section.add "X-Amz-SignedHeaders", valid_606514
  result.add "header", section
  ## parameters in `formData` object:
  ##   DbiResourceId: JString (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DbiResourceId` field"
  var valid_606515 = formData.getOrDefault("DbiResourceId")
  valid_606515 = validateParameter(valid_606515, JString, required = true,
                                 default = nil)
  if valid_606515 != nil:
    section.add "DbiResourceId", valid_606515
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606516: Call_PostDeleteDBInstanceAutomatedBackup_606503;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  let valid = call_606516.validator(path, query, header, formData, body)
  let scheme = call_606516.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606516.url(scheme.get, call_606516.host, call_606516.base,
                         call_606516.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606516, url, valid)

proc call*(call_606517: Call_PostDeleteDBInstanceAutomatedBackup_606503;
          DbiResourceId: string;
          Action: string = "DeleteDBInstanceAutomatedBackup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBInstanceAutomatedBackup
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ##   DbiResourceId: string (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606518 = newJObject()
  var formData_606519 = newJObject()
  add(formData_606519, "DbiResourceId", newJString(DbiResourceId))
  add(query_606518, "Action", newJString(Action))
  add(query_606518, "Version", newJString(Version))
  result = call_606517.call(nil, query_606518, nil, formData_606519, nil)

var postDeleteDBInstanceAutomatedBackup* = Call_PostDeleteDBInstanceAutomatedBackup_606503(
    name: "postDeleteDBInstanceAutomatedBackup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstanceAutomatedBackup",
    validator: validate_PostDeleteDBInstanceAutomatedBackup_606504, base: "/",
    url: url_PostDeleteDBInstanceAutomatedBackup_606505,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstanceAutomatedBackup_606487 = ref object of OpenApiRestCall_604389
proc url_GetDeleteDBInstanceAutomatedBackup_606489(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBInstanceAutomatedBackup_606488(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DbiResourceId` field"
  var valid_606490 = query.getOrDefault("DbiResourceId")
  valid_606490 = validateParameter(valid_606490, JString, required = true,
                                 default = nil)
  if valid_606490 != nil:
    section.add "DbiResourceId", valid_606490
  var valid_606491 = query.getOrDefault("Action")
  valid_606491 = validateParameter(valid_606491, JString, required = true, default = newJString(
      "DeleteDBInstanceAutomatedBackup"))
  if valid_606491 != nil:
    section.add "Action", valid_606491
  var valid_606492 = query.getOrDefault("Version")
  valid_606492 = validateParameter(valid_606492, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606492 != nil:
    section.add "Version", valid_606492
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606493 = header.getOrDefault("X-Amz-Signature")
  valid_606493 = validateParameter(valid_606493, JString, required = false,
                                 default = nil)
  if valid_606493 != nil:
    section.add "X-Amz-Signature", valid_606493
  var valid_606494 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606494 = validateParameter(valid_606494, JString, required = false,
                                 default = nil)
  if valid_606494 != nil:
    section.add "X-Amz-Content-Sha256", valid_606494
  var valid_606495 = header.getOrDefault("X-Amz-Date")
  valid_606495 = validateParameter(valid_606495, JString, required = false,
                                 default = nil)
  if valid_606495 != nil:
    section.add "X-Amz-Date", valid_606495
  var valid_606496 = header.getOrDefault("X-Amz-Credential")
  valid_606496 = validateParameter(valid_606496, JString, required = false,
                                 default = nil)
  if valid_606496 != nil:
    section.add "X-Amz-Credential", valid_606496
  var valid_606497 = header.getOrDefault("X-Amz-Security-Token")
  valid_606497 = validateParameter(valid_606497, JString, required = false,
                                 default = nil)
  if valid_606497 != nil:
    section.add "X-Amz-Security-Token", valid_606497
  var valid_606498 = header.getOrDefault("X-Amz-Algorithm")
  valid_606498 = validateParameter(valid_606498, JString, required = false,
                                 default = nil)
  if valid_606498 != nil:
    section.add "X-Amz-Algorithm", valid_606498
  var valid_606499 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606499 = validateParameter(valid_606499, JString, required = false,
                                 default = nil)
  if valid_606499 != nil:
    section.add "X-Amz-SignedHeaders", valid_606499
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606500: Call_GetDeleteDBInstanceAutomatedBackup_606487;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  let valid = call_606500.validator(path, query, header, formData, body)
  let scheme = call_606500.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606500.url(scheme.get, call_606500.host, call_606500.base,
                         call_606500.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606500, url, valid)

proc call*(call_606501: Call_GetDeleteDBInstanceAutomatedBackup_606487;
          DbiResourceId: string;
          Action: string = "DeleteDBInstanceAutomatedBackup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBInstanceAutomatedBackup
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ##   DbiResourceId: string (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606502 = newJObject()
  add(query_606502, "DbiResourceId", newJString(DbiResourceId))
  add(query_606502, "Action", newJString(Action))
  add(query_606502, "Version", newJString(Version))
  result = call_606501.call(nil, query_606502, nil, nil, nil)

var getDeleteDBInstanceAutomatedBackup* = Call_GetDeleteDBInstanceAutomatedBackup_606487(
    name: "getDeleteDBInstanceAutomatedBackup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstanceAutomatedBackup",
    validator: validate_GetDeleteDBInstanceAutomatedBackup_606488, base: "/",
    url: url_GetDeleteDBInstanceAutomatedBackup_606489,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBParameterGroup_606536 = ref object of OpenApiRestCall_604389
proc url_PostDeleteDBParameterGroup_606538(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBParameterGroup_606537(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606539 = query.getOrDefault("Action")
  valid_606539 = validateParameter(valid_606539, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_606539 != nil:
    section.add "Action", valid_606539
  var valid_606540 = query.getOrDefault("Version")
  valid_606540 = validateParameter(valid_606540, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606540 != nil:
    section.add "Version", valid_606540
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606541 = header.getOrDefault("X-Amz-Signature")
  valid_606541 = validateParameter(valid_606541, JString, required = false,
                                 default = nil)
  if valid_606541 != nil:
    section.add "X-Amz-Signature", valid_606541
  var valid_606542 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606542 = validateParameter(valid_606542, JString, required = false,
                                 default = nil)
  if valid_606542 != nil:
    section.add "X-Amz-Content-Sha256", valid_606542
  var valid_606543 = header.getOrDefault("X-Amz-Date")
  valid_606543 = validateParameter(valid_606543, JString, required = false,
                                 default = nil)
  if valid_606543 != nil:
    section.add "X-Amz-Date", valid_606543
  var valid_606544 = header.getOrDefault("X-Amz-Credential")
  valid_606544 = validateParameter(valid_606544, JString, required = false,
                                 default = nil)
  if valid_606544 != nil:
    section.add "X-Amz-Credential", valid_606544
  var valid_606545 = header.getOrDefault("X-Amz-Security-Token")
  valid_606545 = validateParameter(valid_606545, JString, required = false,
                                 default = nil)
  if valid_606545 != nil:
    section.add "X-Amz-Security-Token", valid_606545
  var valid_606546 = header.getOrDefault("X-Amz-Algorithm")
  valid_606546 = validateParameter(valid_606546, JString, required = false,
                                 default = nil)
  if valid_606546 != nil:
    section.add "X-Amz-Algorithm", valid_606546
  var valid_606547 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606547 = validateParameter(valid_606547, JString, required = false,
                                 default = nil)
  if valid_606547 != nil:
    section.add "X-Amz-SignedHeaders", valid_606547
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_606548 = formData.getOrDefault("DBParameterGroupName")
  valid_606548 = validateParameter(valid_606548, JString, required = true,
                                 default = nil)
  if valid_606548 != nil:
    section.add "DBParameterGroupName", valid_606548
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606549: Call_PostDeleteDBParameterGroup_606536; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_606549.validator(path, query, header, formData, body)
  let scheme = call_606549.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606549.url(scheme.get, call_606549.host, call_606549.base,
                         call_606549.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606549, url, valid)

proc call*(call_606550: Call_PostDeleteDBParameterGroup_606536;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBParameterGroup
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606551 = newJObject()
  var formData_606552 = newJObject()
  add(formData_606552, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_606551, "Action", newJString(Action))
  add(query_606551, "Version", newJString(Version))
  result = call_606550.call(nil, query_606551, nil, formData_606552, nil)

var postDeleteDBParameterGroup* = Call_PostDeleteDBParameterGroup_606536(
    name: "postDeleteDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_PostDeleteDBParameterGroup_606537, base: "/",
    url: url_PostDeleteDBParameterGroup_606538,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBParameterGroup_606520 = ref object of OpenApiRestCall_604389
proc url_GetDeleteDBParameterGroup_606522(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBParameterGroup_606521(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_606523 = query.getOrDefault("DBParameterGroupName")
  valid_606523 = validateParameter(valid_606523, JString, required = true,
                                 default = nil)
  if valid_606523 != nil:
    section.add "DBParameterGroupName", valid_606523
  var valid_606524 = query.getOrDefault("Action")
  valid_606524 = validateParameter(valid_606524, JString, required = true,
                                 default = newJString("DeleteDBParameterGroup"))
  if valid_606524 != nil:
    section.add "Action", valid_606524
  var valid_606525 = query.getOrDefault("Version")
  valid_606525 = validateParameter(valid_606525, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606525 != nil:
    section.add "Version", valid_606525
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606526 = header.getOrDefault("X-Amz-Signature")
  valid_606526 = validateParameter(valid_606526, JString, required = false,
                                 default = nil)
  if valid_606526 != nil:
    section.add "X-Amz-Signature", valid_606526
  var valid_606527 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606527 = validateParameter(valid_606527, JString, required = false,
                                 default = nil)
  if valid_606527 != nil:
    section.add "X-Amz-Content-Sha256", valid_606527
  var valid_606528 = header.getOrDefault("X-Amz-Date")
  valid_606528 = validateParameter(valid_606528, JString, required = false,
                                 default = nil)
  if valid_606528 != nil:
    section.add "X-Amz-Date", valid_606528
  var valid_606529 = header.getOrDefault("X-Amz-Credential")
  valid_606529 = validateParameter(valid_606529, JString, required = false,
                                 default = nil)
  if valid_606529 != nil:
    section.add "X-Amz-Credential", valid_606529
  var valid_606530 = header.getOrDefault("X-Amz-Security-Token")
  valid_606530 = validateParameter(valid_606530, JString, required = false,
                                 default = nil)
  if valid_606530 != nil:
    section.add "X-Amz-Security-Token", valid_606530
  var valid_606531 = header.getOrDefault("X-Amz-Algorithm")
  valid_606531 = validateParameter(valid_606531, JString, required = false,
                                 default = nil)
  if valid_606531 != nil:
    section.add "X-Amz-Algorithm", valid_606531
  var valid_606532 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606532 = validateParameter(valid_606532, JString, required = false,
                                 default = nil)
  if valid_606532 != nil:
    section.add "X-Amz-SignedHeaders", valid_606532
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606533: Call_GetDeleteDBParameterGroup_606520; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_606533.validator(path, query, header, formData, body)
  let scheme = call_606533.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606533.url(scheme.get, call_606533.host, call_606533.base,
                         call_606533.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606533, url, valid)

proc call*(call_606534: Call_GetDeleteDBParameterGroup_606520;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBParameterGroup
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606535 = newJObject()
  add(query_606535, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_606535, "Action", newJString(Action))
  add(query_606535, "Version", newJString(Version))
  result = call_606534.call(nil, query_606535, nil, nil, nil)

var getDeleteDBParameterGroup* = Call_GetDeleteDBParameterGroup_606520(
    name: "getDeleteDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_GetDeleteDBParameterGroup_606521, base: "/",
    url: url_GetDeleteDBParameterGroup_606522,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBProxy_606569 = ref object of OpenApiRestCall_604389
proc url_PostDeleteDBProxy_606571(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBProxy_606570(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606572 = query.getOrDefault("Action")
  valid_606572 = validateParameter(valid_606572, JString, required = true,
                                 default = newJString("DeleteDBProxy"))
  if valid_606572 != nil:
    section.add "Action", valid_606572
  var valid_606573 = query.getOrDefault("Version")
  valid_606573 = validateParameter(valid_606573, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606573 != nil:
    section.add "Version", valid_606573
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606574 = header.getOrDefault("X-Amz-Signature")
  valid_606574 = validateParameter(valid_606574, JString, required = false,
                                 default = nil)
  if valid_606574 != nil:
    section.add "X-Amz-Signature", valid_606574
  var valid_606575 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606575 = validateParameter(valid_606575, JString, required = false,
                                 default = nil)
  if valid_606575 != nil:
    section.add "X-Amz-Content-Sha256", valid_606575
  var valid_606576 = header.getOrDefault("X-Amz-Date")
  valid_606576 = validateParameter(valid_606576, JString, required = false,
                                 default = nil)
  if valid_606576 != nil:
    section.add "X-Amz-Date", valid_606576
  var valid_606577 = header.getOrDefault("X-Amz-Credential")
  valid_606577 = validateParameter(valid_606577, JString, required = false,
                                 default = nil)
  if valid_606577 != nil:
    section.add "X-Amz-Credential", valid_606577
  var valid_606578 = header.getOrDefault("X-Amz-Security-Token")
  valid_606578 = validateParameter(valid_606578, JString, required = false,
                                 default = nil)
  if valid_606578 != nil:
    section.add "X-Amz-Security-Token", valid_606578
  var valid_606579 = header.getOrDefault("X-Amz-Algorithm")
  valid_606579 = validateParameter(valid_606579, JString, required = false,
                                 default = nil)
  if valid_606579 != nil:
    section.add "X-Amz-Algorithm", valid_606579
  var valid_606580 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606580 = validateParameter(valid_606580, JString, required = false,
                                 default = nil)
  if valid_606580 != nil:
    section.add "X-Amz-SignedHeaders", valid_606580
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBProxyName: JString (required)
  ##              : The name of the DB proxy to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_606581 = formData.getOrDefault("DBProxyName")
  valid_606581 = validateParameter(valid_606581, JString, required = true,
                                 default = nil)
  if valid_606581 != nil:
    section.add "DBProxyName", valid_606581
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606582: Call_PostDeleteDBProxy_606569; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  let valid = call_606582.validator(path, query, header, formData, body)
  let scheme = call_606582.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606582.url(scheme.get, call_606582.host, call_606582.base,
                         call_606582.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606582, url, valid)

proc call*(call_606583: Call_PostDeleteDBProxy_606569; DBProxyName: string;
          Action: string = "DeleteDBProxy"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ##   DBProxyName: string (required)
  ##              : The name of the DB proxy to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606584 = newJObject()
  var formData_606585 = newJObject()
  add(formData_606585, "DBProxyName", newJString(DBProxyName))
  add(query_606584, "Action", newJString(Action))
  add(query_606584, "Version", newJString(Version))
  result = call_606583.call(nil, query_606584, nil, formData_606585, nil)

var postDeleteDBProxy* = Call_PostDeleteDBProxy_606569(name: "postDeleteDBProxy",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBProxy", validator: validate_PostDeleteDBProxy_606570,
    base: "/", url: url_PostDeleteDBProxy_606571,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBProxy_606553 = ref object of OpenApiRestCall_604389
proc url_GetDeleteDBProxy_606555(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBProxy_606554(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The name of the DB proxy to delete.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606556 = query.getOrDefault("Action")
  valid_606556 = validateParameter(valid_606556, JString, required = true,
                                 default = newJString("DeleteDBProxy"))
  if valid_606556 != nil:
    section.add "Action", valid_606556
  var valid_606557 = query.getOrDefault("Version")
  valid_606557 = validateParameter(valid_606557, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606557 != nil:
    section.add "Version", valid_606557
  var valid_606558 = query.getOrDefault("DBProxyName")
  valid_606558 = validateParameter(valid_606558, JString, required = true,
                                 default = nil)
  if valid_606558 != nil:
    section.add "DBProxyName", valid_606558
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606559 = header.getOrDefault("X-Amz-Signature")
  valid_606559 = validateParameter(valid_606559, JString, required = false,
                                 default = nil)
  if valid_606559 != nil:
    section.add "X-Amz-Signature", valid_606559
  var valid_606560 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606560 = validateParameter(valid_606560, JString, required = false,
                                 default = nil)
  if valid_606560 != nil:
    section.add "X-Amz-Content-Sha256", valid_606560
  var valid_606561 = header.getOrDefault("X-Amz-Date")
  valid_606561 = validateParameter(valid_606561, JString, required = false,
                                 default = nil)
  if valid_606561 != nil:
    section.add "X-Amz-Date", valid_606561
  var valid_606562 = header.getOrDefault("X-Amz-Credential")
  valid_606562 = validateParameter(valid_606562, JString, required = false,
                                 default = nil)
  if valid_606562 != nil:
    section.add "X-Amz-Credential", valid_606562
  var valid_606563 = header.getOrDefault("X-Amz-Security-Token")
  valid_606563 = validateParameter(valid_606563, JString, required = false,
                                 default = nil)
  if valid_606563 != nil:
    section.add "X-Amz-Security-Token", valid_606563
  var valid_606564 = header.getOrDefault("X-Amz-Algorithm")
  valid_606564 = validateParameter(valid_606564, JString, required = false,
                                 default = nil)
  if valid_606564 != nil:
    section.add "X-Amz-Algorithm", valid_606564
  var valid_606565 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606565 = validateParameter(valid_606565, JString, required = false,
                                 default = nil)
  if valid_606565 != nil:
    section.add "X-Amz-SignedHeaders", valid_606565
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606566: Call_GetDeleteDBProxy_606553; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  let valid = call_606566.validator(path, query, header, formData, body)
  let scheme = call_606566.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606566.url(scheme.get, call_606566.host, call_606566.base,
                         call_606566.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606566, url, valid)

proc call*(call_606567: Call_GetDeleteDBProxy_606553; DBProxyName: string;
          Action: string = "DeleteDBProxy"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The name of the DB proxy to delete.
  var query_606568 = newJObject()
  add(query_606568, "Action", newJString(Action))
  add(query_606568, "Version", newJString(Version))
  add(query_606568, "DBProxyName", newJString(DBProxyName))
  result = call_606567.call(nil, query_606568, nil, nil, nil)

var getDeleteDBProxy* = Call_GetDeleteDBProxy_606553(name: "getDeleteDBProxy",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBProxy", validator: validate_GetDeleteDBProxy_606554,
    base: "/", url: url_GetDeleteDBProxy_606555,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSecurityGroup_606602 = ref object of OpenApiRestCall_604389
proc url_PostDeleteDBSecurityGroup_606604(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSecurityGroup_606603(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606605 = query.getOrDefault("Action")
  valid_606605 = validateParameter(valid_606605, JString, required = true,
                                 default = newJString("DeleteDBSecurityGroup"))
  if valid_606605 != nil:
    section.add "Action", valid_606605
  var valid_606606 = query.getOrDefault("Version")
  valid_606606 = validateParameter(valid_606606, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606606 != nil:
    section.add "Version", valid_606606
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606607 = header.getOrDefault("X-Amz-Signature")
  valid_606607 = validateParameter(valid_606607, JString, required = false,
                                 default = nil)
  if valid_606607 != nil:
    section.add "X-Amz-Signature", valid_606607
  var valid_606608 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606608 = validateParameter(valid_606608, JString, required = false,
                                 default = nil)
  if valid_606608 != nil:
    section.add "X-Amz-Content-Sha256", valid_606608
  var valid_606609 = header.getOrDefault("X-Amz-Date")
  valid_606609 = validateParameter(valid_606609, JString, required = false,
                                 default = nil)
  if valid_606609 != nil:
    section.add "X-Amz-Date", valid_606609
  var valid_606610 = header.getOrDefault("X-Amz-Credential")
  valid_606610 = validateParameter(valid_606610, JString, required = false,
                                 default = nil)
  if valid_606610 != nil:
    section.add "X-Amz-Credential", valid_606610
  var valid_606611 = header.getOrDefault("X-Amz-Security-Token")
  valid_606611 = validateParameter(valid_606611, JString, required = false,
                                 default = nil)
  if valid_606611 != nil:
    section.add "X-Amz-Security-Token", valid_606611
  var valid_606612 = header.getOrDefault("X-Amz-Algorithm")
  valid_606612 = validateParameter(valid_606612, JString, required = false,
                                 default = nil)
  if valid_606612 != nil:
    section.add "X-Amz-Algorithm", valid_606612
  var valid_606613 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606613 = validateParameter(valid_606613, JString, required = false,
                                 default = nil)
  if valid_606613 != nil:
    section.add "X-Amz-SignedHeaders", valid_606613
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_606614 = formData.getOrDefault("DBSecurityGroupName")
  valid_606614 = validateParameter(valid_606614, JString, required = true,
                                 default = nil)
  if valid_606614 != nil:
    section.add "DBSecurityGroupName", valid_606614
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606615: Call_PostDeleteDBSecurityGroup_606602; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_606615.validator(path, query, header, formData, body)
  let scheme = call_606615.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606615.url(scheme.get, call_606615.host, call_606615.base,
                         call_606615.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606615, url, valid)

proc call*(call_606616: Call_PostDeleteDBSecurityGroup_606602;
          DBSecurityGroupName: string; Action: string = "DeleteDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSecurityGroup
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606617 = newJObject()
  var formData_606618 = newJObject()
  add(formData_606618, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_606617, "Action", newJString(Action))
  add(query_606617, "Version", newJString(Version))
  result = call_606616.call(nil, query_606617, nil, formData_606618, nil)

var postDeleteDBSecurityGroup* = Call_PostDeleteDBSecurityGroup_606602(
    name: "postDeleteDBSecurityGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSecurityGroup",
    validator: validate_PostDeleteDBSecurityGroup_606603, base: "/",
    url: url_PostDeleteDBSecurityGroup_606604,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSecurityGroup_606586 = ref object of OpenApiRestCall_604389
proc url_GetDeleteDBSecurityGroup_606588(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSecurityGroup_606587(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_606589 = query.getOrDefault("DBSecurityGroupName")
  valid_606589 = validateParameter(valid_606589, JString, required = true,
                                 default = nil)
  if valid_606589 != nil:
    section.add "DBSecurityGroupName", valid_606589
  var valid_606590 = query.getOrDefault("Action")
  valid_606590 = validateParameter(valid_606590, JString, required = true,
                                 default = newJString("DeleteDBSecurityGroup"))
  if valid_606590 != nil:
    section.add "Action", valid_606590
  var valid_606591 = query.getOrDefault("Version")
  valid_606591 = validateParameter(valid_606591, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606591 != nil:
    section.add "Version", valid_606591
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606592 = header.getOrDefault("X-Amz-Signature")
  valid_606592 = validateParameter(valid_606592, JString, required = false,
                                 default = nil)
  if valid_606592 != nil:
    section.add "X-Amz-Signature", valid_606592
  var valid_606593 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606593 = validateParameter(valid_606593, JString, required = false,
                                 default = nil)
  if valid_606593 != nil:
    section.add "X-Amz-Content-Sha256", valid_606593
  var valid_606594 = header.getOrDefault("X-Amz-Date")
  valid_606594 = validateParameter(valid_606594, JString, required = false,
                                 default = nil)
  if valid_606594 != nil:
    section.add "X-Amz-Date", valid_606594
  var valid_606595 = header.getOrDefault("X-Amz-Credential")
  valid_606595 = validateParameter(valid_606595, JString, required = false,
                                 default = nil)
  if valid_606595 != nil:
    section.add "X-Amz-Credential", valid_606595
  var valid_606596 = header.getOrDefault("X-Amz-Security-Token")
  valid_606596 = validateParameter(valid_606596, JString, required = false,
                                 default = nil)
  if valid_606596 != nil:
    section.add "X-Amz-Security-Token", valid_606596
  var valid_606597 = header.getOrDefault("X-Amz-Algorithm")
  valid_606597 = validateParameter(valid_606597, JString, required = false,
                                 default = nil)
  if valid_606597 != nil:
    section.add "X-Amz-Algorithm", valid_606597
  var valid_606598 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606598 = validateParameter(valid_606598, JString, required = false,
                                 default = nil)
  if valid_606598 != nil:
    section.add "X-Amz-SignedHeaders", valid_606598
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606599: Call_GetDeleteDBSecurityGroup_606586; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_606599.validator(path, query, header, formData, body)
  let scheme = call_606599.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606599.url(scheme.get, call_606599.host, call_606599.base,
                         call_606599.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606599, url, valid)

proc call*(call_606600: Call_GetDeleteDBSecurityGroup_606586;
          DBSecurityGroupName: string; Action: string = "DeleteDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSecurityGroup
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606601 = newJObject()
  add(query_606601, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_606601, "Action", newJString(Action))
  add(query_606601, "Version", newJString(Version))
  result = call_606600.call(nil, query_606601, nil, nil, nil)

var getDeleteDBSecurityGroup* = Call_GetDeleteDBSecurityGroup_606586(
    name: "getDeleteDBSecurityGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSecurityGroup",
    validator: validate_GetDeleteDBSecurityGroup_606587, base: "/",
    url: url_GetDeleteDBSecurityGroup_606588, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSnapshot_606635 = ref object of OpenApiRestCall_604389
proc url_PostDeleteDBSnapshot_606637(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSnapshot_606636(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606638 = query.getOrDefault("Action")
  valid_606638 = validateParameter(valid_606638, JString, required = true,
                                 default = newJString("DeleteDBSnapshot"))
  if valid_606638 != nil:
    section.add "Action", valid_606638
  var valid_606639 = query.getOrDefault("Version")
  valid_606639 = validateParameter(valid_606639, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606639 != nil:
    section.add "Version", valid_606639
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606640 = header.getOrDefault("X-Amz-Signature")
  valid_606640 = validateParameter(valid_606640, JString, required = false,
                                 default = nil)
  if valid_606640 != nil:
    section.add "X-Amz-Signature", valid_606640
  var valid_606641 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606641 = validateParameter(valid_606641, JString, required = false,
                                 default = nil)
  if valid_606641 != nil:
    section.add "X-Amz-Content-Sha256", valid_606641
  var valid_606642 = header.getOrDefault("X-Amz-Date")
  valid_606642 = validateParameter(valid_606642, JString, required = false,
                                 default = nil)
  if valid_606642 != nil:
    section.add "X-Amz-Date", valid_606642
  var valid_606643 = header.getOrDefault("X-Amz-Credential")
  valid_606643 = validateParameter(valid_606643, JString, required = false,
                                 default = nil)
  if valid_606643 != nil:
    section.add "X-Amz-Credential", valid_606643
  var valid_606644 = header.getOrDefault("X-Amz-Security-Token")
  valid_606644 = validateParameter(valid_606644, JString, required = false,
                                 default = nil)
  if valid_606644 != nil:
    section.add "X-Amz-Security-Token", valid_606644
  var valid_606645 = header.getOrDefault("X-Amz-Algorithm")
  valid_606645 = validateParameter(valid_606645, JString, required = false,
                                 default = nil)
  if valid_606645 != nil:
    section.add "X-Amz-Algorithm", valid_606645
  var valid_606646 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606646 = validateParameter(valid_606646, JString, required = false,
                                 default = nil)
  if valid_606646 != nil:
    section.add "X-Amz-SignedHeaders", valid_606646
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_606647 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_606647 = validateParameter(valid_606647, JString, required = true,
                                 default = nil)
  if valid_606647 != nil:
    section.add "DBSnapshotIdentifier", valid_606647
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606648: Call_PostDeleteDBSnapshot_606635; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_606648.validator(path, query, header, formData, body)
  let scheme = call_606648.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606648.url(scheme.get, call_606648.host, call_606648.base,
                         call_606648.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606648, url, valid)

proc call*(call_606649: Call_PostDeleteDBSnapshot_606635;
          DBSnapshotIdentifier: string; Action: string = "DeleteDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSnapshot
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606650 = newJObject()
  var formData_606651 = newJObject()
  add(formData_606651, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_606650, "Action", newJString(Action))
  add(query_606650, "Version", newJString(Version))
  result = call_606649.call(nil, query_606650, nil, formData_606651, nil)

var postDeleteDBSnapshot* = Call_PostDeleteDBSnapshot_606635(
    name: "postDeleteDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSnapshot",
    validator: validate_PostDeleteDBSnapshot_606636, base: "/",
    url: url_PostDeleteDBSnapshot_606637, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSnapshot_606619 = ref object of OpenApiRestCall_604389
proc url_GetDeleteDBSnapshot_606621(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSnapshot_606620(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_606622 = query.getOrDefault("DBSnapshotIdentifier")
  valid_606622 = validateParameter(valid_606622, JString, required = true,
                                 default = nil)
  if valid_606622 != nil:
    section.add "DBSnapshotIdentifier", valid_606622
  var valid_606623 = query.getOrDefault("Action")
  valid_606623 = validateParameter(valid_606623, JString, required = true,
                                 default = newJString("DeleteDBSnapshot"))
  if valid_606623 != nil:
    section.add "Action", valid_606623
  var valid_606624 = query.getOrDefault("Version")
  valid_606624 = validateParameter(valid_606624, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606624 != nil:
    section.add "Version", valid_606624
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606625 = header.getOrDefault("X-Amz-Signature")
  valid_606625 = validateParameter(valid_606625, JString, required = false,
                                 default = nil)
  if valid_606625 != nil:
    section.add "X-Amz-Signature", valid_606625
  var valid_606626 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606626 = validateParameter(valid_606626, JString, required = false,
                                 default = nil)
  if valid_606626 != nil:
    section.add "X-Amz-Content-Sha256", valid_606626
  var valid_606627 = header.getOrDefault("X-Amz-Date")
  valid_606627 = validateParameter(valid_606627, JString, required = false,
                                 default = nil)
  if valid_606627 != nil:
    section.add "X-Amz-Date", valid_606627
  var valid_606628 = header.getOrDefault("X-Amz-Credential")
  valid_606628 = validateParameter(valid_606628, JString, required = false,
                                 default = nil)
  if valid_606628 != nil:
    section.add "X-Amz-Credential", valid_606628
  var valid_606629 = header.getOrDefault("X-Amz-Security-Token")
  valid_606629 = validateParameter(valid_606629, JString, required = false,
                                 default = nil)
  if valid_606629 != nil:
    section.add "X-Amz-Security-Token", valid_606629
  var valid_606630 = header.getOrDefault("X-Amz-Algorithm")
  valid_606630 = validateParameter(valid_606630, JString, required = false,
                                 default = nil)
  if valid_606630 != nil:
    section.add "X-Amz-Algorithm", valid_606630
  var valid_606631 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606631 = validateParameter(valid_606631, JString, required = false,
                                 default = nil)
  if valid_606631 != nil:
    section.add "X-Amz-SignedHeaders", valid_606631
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606632: Call_GetDeleteDBSnapshot_606619; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_606632.validator(path, query, header, formData, body)
  let scheme = call_606632.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606632.url(scheme.get, call_606632.host, call_606632.base,
                         call_606632.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606632, url, valid)

proc call*(call_606633: Call_GetDeleteDBSnapshot_606619;
          DBSnapshotIdentifier: string; Action: string = "DeleteDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSnapshot
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606634 = newJObject()
  add(query_606634, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_606634, "Action", newJString(Action))
  add(query_606634, "Version", newJString(Version))
  result = call_606633.call(nil, query_606634, nil, nil, nil)

var getDeleteDBSnapshot* = Call_GetDeleteDBSnapshot_606619(
    name: "getDeleteDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSnapshot",
    validator: validate_GetDeleteDBSnapshot_606620, base: "/",
    url: url_GetDeleteDBSnapshot_606621, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSubnetGroup_606668 = ref object of OpenApiRestCall_604389
proc url_PostDeleteDBSubnetGroup_606670(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSubnetGroup_606669(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606671 = query.getOrDefault("Action")
  valid_606671 = validateParameter(valid_606671, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_606671 != nil:
    section.add "Action", valid_606671
  var valid_606672 = query.getOrDefault("Version")
  valid_606672 = validateParameter(valid_606672, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606672 != nil:
    section.add "Version", valid_606672
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606673 = header.getOrDefault("X-Amz-Signature")
  valid_606673 = validateParameter(valid_606673, JString, required = false,
                                 default = nil)
  if valid_606673 != nil:
    section.add "X-Amz-Signature", valid_606673
  var valid_606674 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606674 = validateParameter(valid_606674, JString, required = false,
                                 default = nil)
  if valid_606674 != nil:
    section.add "X-Amz-Content-Sha256", valid_606674
  var valid_606675 = header.getOrDefault("X-Amz-Date")
  valid_606675 = validateParameter(valid_606675, JString, required = false,
                                 default = nil)
  if valid_606675 != nil:
    section.add "X-Amz-Date", valid_606675
  var valid_606676 = header.getOrDefault("X-Amz-Credential")
  valid_606676 = validateParameter(valid_606676, JString, required = false,
                                 default = nil)
  if valid_606676 != nil:
    section.add "X-Amz-Credential", valid_606676
  var valid_606677 = header.getOrDefault("X-Amz-Security-Token")
  valid_606677 = validateParameter(valid_606677, JString, required = false,
                                 default = nil)
  if valid_606677 != nil:
    section.add "X-Amz-Security-Token", valid_606677
  var valid_606678 = header.getOrDefault("X-Amz-Algorithm")
  valid_606678 = validateParameter(valid_606678, JString, required = false,
                                 default = nil)
  if valid_606678 != nil:
    section.add "X-Amz-Algorithm", valid_606678
  var valid_606679 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606679 = validateParameter(valid_606679, JString, required = false,
                                 default = nil)
  if valid_606679 != nil:
    section.add "X-Amz-SignedHeaders", valid_606679
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_606680 = formData.getOrDefault("DBSubnetGroupName")
  valid_606680 = validateParameter(valid_606680, JString, required = true,
                                 default = nil)
  if valid_606680 != nil:
    section.add "DBSubnetGroupName", valid_606680
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606681: Call_PostDeleteDBSubnetGroup_606668; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_606681.validator(path, query, header, formData, body)
  let scheme = call_606681.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606681.url(scheme.get, call_606681.host, call_606681.base,
                         call_606681.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606681, url, valid)

proc call*(call_606682: Call_PostDeleteDBSubnetGroup_606668;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_606683 = newJObject()
  var formData_606684 = newJObject()
  add(query_606683, "Action", newJString(Action))
  add(formData_606684, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_606683, "Version", newJString(Version))
  result = call_606682.call(nil, query_606683, nil, formData_606684, nil)

var postDeleteDBSubnetGroup* = Call_PostDeleteDBSubnetGroup_606668(
    name: "postDeleteDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_PostDeleteDBSubnetGroup_606669, base: "/",
    url: url_PostDeleteDBSubnetGroup_606670, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSubnetGroup_606652 = ref object of OpenApiRestCall_604389
proc url_GetDeleteDBSubnetGroup_606654(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSubnetGroup_606653(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606655 = query.getOrDefault("Action")
  valid_606655 = validateParameter(valid_606655, JString, required = true,
                                 default = newJString("DeleteDBSubnetGroup"))
  if valid_606655 != nil:
    section.add "Action", valid_606655
  var valid_606656 = query.getOrDefault("DBSubnetGroupName")
  valid_606656 = validateParameter(valid_606656, JString, required = true,
                                 default = nil)
  if valid_606656 != nil:
    section.add "DBSubnetGroupName", valid_606656
  var valid_606657 = query.getOrDefault("Version")
  valid_606657 = validateParameter(valid_606657, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606657 != nil:
    section.add "Version", valid_606657
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606658 = header.getOrDefault("X-Amz-Signature")
  valid_606658 = validateParameter(valid_606658, JString, required = false,
                                 default = nil)
  if valid_606658 != nil:
    section.add "X-Amz-Signature", valid_606658
  var valid_606659 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606659 = validateParameter(valid_606659, JString, required = false,
                                 default = nil)
  if valid_606659 != nil:
    section.add "X-Amz-Content-Sha256", valid_606659
  var valid_606660 = header.getOrDefault("X-Amz-Date")
  valid_606660 = validateParameter(valid_606660, JString, required = false,
                                 default = nil)
  if valid_606660 != nil:
    section.add "X-Amz-Date", valid_606660
  var valid_606661 = header.getOrDefault("X-Amz-Credential")
  valid_606661 = validateParameter(valid_606661, JString, required = false,
                                 default = nil)
  if valid_606661 != nil:
    section.add "X-Amz-Credential", valid_606661
  var valid_606662 = header.getOrDefault("X-Amz-Security-Token")
  valid_606662 = validateParameter(valid_606662, JString, required = false,
                                 default = nil)
  if valid_606662 != nil:
    section.add "X-Amz-Security-Token", valid_606662
  var valid_606663 = header.getOrDefault("X-Amz-Algorithm")
  valid_606663 = validateParameter(valid_606663, JString, required = false,
                                 default = nil)
  if valid_606663 != nil:
    section.add "X-Amz-Algorithm", valid_606663
  var valid_606664 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606664 = validateParameter(valid_606664, JString, required = false,
                                 default = nil)
  if valid_606664 != nil:
    section.add "X-Amz-SignedHeaders", valid_606664
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606665: Call_GetDeleteDBSubnetGroup_606652; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_606665.validator(path, query, header, formData, body)
  let scheme = call_606665.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606665.url(scheme.get, call_606665.host, call_606665.base,
                         call_606665.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606665, url, valid)

proc call*(call_606666: Call_GetDeleteDBSubnetGroup_606652;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_606667 = newJObject()
  add(query_606667, "Action", newJString(Action))
  add(query_606667, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_606667, "Version", newJString(Version))
  result = call_606666.call(nil, query_606667, nil, nil, nil)

var getDeleteDBSubnetGroup* = Call_GetDeleteDBSubnetGroup_606652(
    name: "getDeleteDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_GetDeleteDBSubnetGroup_606653, base: "/",
    url: url_GetDeleteDBSubnetGroup_606654, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteEventSubscription_606701 = ref object of OpenApiRestCall_604389
proc url_PostDeleteEventSubscription_606703(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteEventSubscription_606702(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606704 = query.getOrDefault("Action")
  valid_606704 = validateParameter(valid_606704, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_606704 != nil:
    section.add "Action", valid_606704
  var valid_606705 = query.getOrDefault("Version")
  valid_606705 = validateParameter(valid_606705, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606705 != nil:
    section.add "Version", valid_606705
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606706 = header.getOrDefault("X-Amz-Signature")
  valid_606706 = validateParameter(valid_606706, JString, required = false,
                                 default = nil)
  if valid_606706 != nil:
    section.add "X-Amz-Signature", valid_606706
  var valid_606707 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606707 = validateParameter(valid_606707, JString, required = false,
                                 default = nil)
  if valid_606707 != nil:
    section.add "X-Amz-Content-Sha256", valid_606707
  var valid_606708 = header.getOrDefault("X-Amz-Date")
  valid_606708 = validateParameter(valid_606708, JString, required = false,
                                 default = nil)
  if valid_606708 != nil:
    section.add "X-Amz-Date", valid_606708
  var valid_606709 = header.getOrDefault("X-Amz-Credential")
  valid_606709 = validateParameter(valid_606709, JString, required = false,
                                 default = nil)
  if valid_606709 != nil:
    section.add "X-Amz-Credential", valid_606709
  var valid_606710 = header.getOrDefault("X-Amz-Security-Token")
  valid_606710 = validateParameter(valid_606710, JString, required = false,
                                 default = nil)
  if valid_606710 != nil:
    section.add "X-Amz-Security-Token", valid_606710
  var valid_606711 = header.getOrDefault("X-Amz-Algorithm")
  valid_606711 = validateParameter(valid_606711, JString, required = false,
                                 default = nil)
  if valid_606711 != nil:
    section.add "X-Amz-Algorithm", valid_606711
  var valid_606712 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606712 = validateParameter(valid_606712, JString, required = false,
                                 default = nil)
  if valid_606712 != nil:
    section.add "X-Amz-SignedHeaders", valid_606712
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_606713 = formData.getOrDefault("SubscriptionName")
  valid_606713 = validateParameter(valid_606713, JString, required = true,
                                 default = nil)
  if valid_606713 != nil:
    section.add "SubscriptionName", valid_606713
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606714: Call_PostDeleteEventSubscription_606701; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an RDS event notification subscription.
  ## 
  let valid = call_606714.validator(path, query, header, formData, body)
  let scheme = call_606714.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606714.url(scheme.get, call_606714.host, call_606714.base,
                         call_606714.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606714, url, valid)

proc call*(call_606715: Call_PostDeleteEventSubscription_606701;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteEventSubscription
  ## Deletes an RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606716 = newJObject()
  var formData_606717 = newJObject()
  add(formData_606717, "SubscriptionName", newJString(SubscriptionName))
  add(query_606716, "Action", newJString(Action))
  add(query_606716, "Version", newJString(Version))
  result = call_606715.call(nil, query_606716, nil, formData_606717, nil)

var postDeleteEventSubscription* = Call_PostDeleteEventSubscription_606701(
    name: "postDeleteEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_PostDeleteEventSubscription_606702, base: "/",
    url: url_PostDeleteEventSubscription_606703,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteEventSubscription_606685 = ref object of OpenApiRestCall_604389
proc url_GetDeleteEventSubscription_606687(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteEventSubscription_606686(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_606688 = query.getOrDefault("SubscriptionName")
  valid_606688 = validateParameter(valid_606688, JString, required = true,
                                 default = nil)
  if valid_606688 != nil:
    section.add "SubscriptionName", valid_606688
  var valid_606689 = query.getOrDefault("Action")
  valid_606689 = validateParameter(valid_606689, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_606689 != nil:
    section.add "Action", valid_606689
  var valid_606690 = query.getOrDefault("Version")
  valid_606690 = validateParameter(valid_606690, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606690 != nil:
    section.add "Version", valid_606690
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606691 = header.getOrDefault("X-Amz-Signature")
  valid_606691 = validateParameter(valid_606691, JString, required = false,
                                 default = nil)
  if valid_606691 != nil:
    section.add "X-Amz-Signature", valid_606691
  var valid_606692 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606692 = validateParameter(valid_606692, JString, required = false,
                                 default = nil)
  if valid_606692 != nil:
    section.add "X-Amz-Content-Sha256", valid_606692
  var valid_606693 = header.getOrDefault("X-Amz-Date")
  valid_606693 = validateParameter(valid_606693, JString, required = false,
                                 default = nil)
  if valid_606693 != nil:
    section.add "X-Amz-Date", valid_606693
  var valid_606694 = header.getOrDefault("X-Amz-Credential")
  valid_606694 = validateParameter(valid_606694, JString, required = false,
                                 default = nil)
  if valid_606694 != nil:
    section.add "X-Amz-Credential", valid_606694
  var valid_606695 = header.getOrDefault("X-Amz-Security-Token")
  valid_606695 = validateParameter(valid_606695, JString, required = false,
                                 default = nil)
  if valid_606695 != nil:
    section.add "X-Amz-Security-Token", valid_606695
  var valid_606696 = header.getOrDefault("X-Amz-Algorithm")
  valid_606696 = validateParameter(valid_606696, JString, required = false,
                                 default = nil)
  if valid_606696 != nil:
    section.add "X-Amz-Algorithm", valid_606696
  var valid_606697 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606697 = validateParameter(valid_606697, JString, required = false,
                                 default = nil)
  if valid_606697 != nil:
    section.add "X-Amz-SignedHeaders", valid_606697
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606698: Call_GetDeleteEventSubscription_606685; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an RDS event notification subscription.
  ## 
  let valid = call_606698.validator(path, query, header, formData, body)
  let scheme = call_606698.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606698.url(scheme.get, call_606698.host, call_606698.base,
                         call_606698.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606698, url, valid)

proc call*(call_606699: Call_GetDeleteEventSubscription_606685;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteEventSubscription
  ## Deletes an RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606700 = newJObject()
  add(query_606700, "SubscriptionName", newJString(SubscriptionName))
  add(query_606700, "Action", newJString(Action))
  add(query_606700, "Version", newJString(Version))
  result = call_606699.call(nil, query_606700, nil, nil, nil)

var getDeleteEventSubscription* = Call_GetDeleteEventSubscription_606685(
    name: "getDeleteEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_GetDeleteEventSubscription_606686, base: "/",
    url: url_GetDeleteEventSubscription_606687,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGlobalCluster_606734 = ref object of OpenApiRestCall_604389
proc url_PostDeleteGlobalCluster_606736(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteGlobalCluster_606735(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606737 = query.getOrDefault("Action")
  valid_606737 = validateParameter(valid_606737, JString, required = true,
                                 default = newJString("DeleteGlobalCluster"))
  if valid_606737 != nil:
    section.add "Action", valid_606737
  var valid_606738 = query.getOrDefault("Version")
  valid_606738 = validateParameter(valid_606738, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606738 != nil:
    section.add "Version", valid_606738
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606739 = header.getOrDefault("X-Amz-Signature")
  valid_606739 = validateParameter(valid_606739, JString, required = false,
                                 default = nil)
  if valid_606739 != nil:
    section.add "X-Amz-Signature", valid_606739
  var valid_606740 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606740 = validateParameter(valid_606740, JString, required = false,
                                 default = nil)
  if valid_606740 != nil:
    section.add "X-Amz-Content-Sha256", valid_606740
  var valid_606741 = header.getOrDefault("X-Amz-Date")
  valid_606741 = validateParameter(valid_606741, JString, required = false,
                                 default = nil)
  if valid_606741 != nil:
    section.add "X-Amz-Date", valid_606741
  var valid_606742 = header.getOrDefault("X-Amz-Credential")
  valid_606742 = validateParameter(valid_606742, JString, required = false,
                                 default = nil)
  if valid_606742 != nil:
    section.add "X-Amz-Credential", valid_606742
  var valid_606743 = header.getOrDefault("X-Amz-Security-Token")
  valid_606743 = validateParameter(valid_606743, JString, required = false,
                                 default = nil)
  if valid_606743 != nil:
    section.add "X-Amz-Security-Token", valid_606743
  var valid_606744 = header.getOrDefault("X-Amz-Algorithm")
  valid_606744 = validateParameter(valid_606744, JString, required = false,
                                 default = nil)
  if valid_606744 != nil:
    section.add "X-Amz-Algorithm", valid_606744
  var valid_606745 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606745 = validateParameter(valid_606745, JString, required = false,
                                 default = nil)
  if valid_606745 != nil:
    section.add "X-Amz-SignedHeaders", valid_606745
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `GlobalClusterIdentifier` field"
  var valid_606746 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_606746 = validateParameter(valid_606746, JString, required = true,
                                 default = nil)
  if valid_606746 != nil:
    section.add "GlobalClusterIdentifier", valid_606746
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606747: Call_PostDeleteGlobalCluster_606734; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606747.validator(path, query, header, formData, body)
  let scheme = call_606747.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606747.url(scheme.get, call_606747.host, call_606747.base,
                         call_606747.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606747, url, valid)

proc call*(call_606748: Call_PostDeleteGlobalCluster_606734;
          GlobalClusterIdentifier: string; Action: string = "DeleteGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteGlobalCluster
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606749 = newJObject()
  var formData_606750 = newJObject()
  add(formData_606750, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_606749, "Action", newJString(Action))
  add(query_606749, "Version", newJString(Version))
  result = call_606748.call(nil, query_606749, nil, formData_606750, nil)

var postDeleteGlobalCluster* = Call_PostDeleteGlobalCluster_606734(
    name: "postDeleteGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteGlobalCluster",
    validator: validate_PostDeleteGlobalCluster_606735, base: "/",
    url: url_PostDeleteGlobalCluster_606736, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGlobalCluster_606718 = ref object of OpenApiRestCall_604389
proc url_GetDeleteGlobalCluster_606720(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteGlobalCluster_606719(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `GlobalClusterIdentifier` field"
  var valid_606721 = query.getOrDefault("GlobalClusterIdentifier")
  valid_606721 = validateParameter(valid_606721, JString, required = true,
                                 default = nil)
  if valid_606721 != nil:
    section.add "GlobalClusterIdentifier", valid_606721
  var valid_606722 = query.getOrDefault("Action")
  valid_606722 = validateParameter(valid_606722, JString, required = true,
                                 default = newJString("DeleteGlobalCluster"))
  if valid_606722 != nil:
    section.add "Action", valid_606722
  var valid_606723 = query.getOrDefault("Version")
  valid_606723 = validateParameter(valid_606723, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606723 != nil:
    section.add "Version", valid_606723
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606724 = header.getOrDefault("X-Amz-Signature")
  valid_606724 = validateParameter(valid_606724, JString, required = false,
                                 default = nil)
  if valid_606724 != nil:
    section.add "X-Amz-Signature", valid_606724
  var valid_606725 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606725 = validateParameter(valid_606725, JString, required = false,
                                 default = nil)
  if valid_606725 != nil:
    section.add "X-Amz-Content-Sha256", valid_606725
  var valid_606726 = header.getOrDefault("X-Amz-Date")
  valid_606726 = validateParameter(valid_606726, JString, required = false,
                                 default = nil)
  if valid_606726 != nil:
    section.add "X-Amz-Date", valid_606726
  var valid_606727 = header.getOrDefault("X-Amz-Credential")
  valid_606727 = validateParameter(valid_606727, JString, required = false,
                                 default = nil)
  if valid_606727 != nil:
    section.add "X-Amz-Credential", valid_606727
  var valid_606728 = header.getOrDefault("X-Amz-Security-Token")
  valid_606728 = validateParameter(valid_606728, JString, required = false,
                                 default = nil)
  if valid_606728 != nil:
    section.add "X-Amz-Security-Token", valid_606728
  var valid_606729 = header.getOrDefault("X-Amz-Algorithm")
  valid_606729 = validateParameter(valid_606729, JString, required = false,
                                 default = nil)
  if valid_606729 != nil:
    section.add "X-Amz-Algorithm", valid_606729
  var valid_606730 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606730 = validateParameter(valid_606730, JString, required = false,
                                 default = nil)
  if valid_606730 != nil:
    section.add "X-Amz-SignedHeaders", valid_606730
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606731: Call_GetDeleteGlobalCluster_606718; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606731.validator(path, query, header, formData, body)
  let scheme = call_606731.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606731.url(scheme.get, call_606731.host, call_606731.base,
                         call_606731.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606731, url, valid)

proc call*(call_606732: Call_GetDeleteGlobalCluster_606718;
          GlobalClusterIdentifier: string; Action: string = "DeleteGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteGlobalCluster
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606733 = newJObject()
  add(query_606733, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_606733, "Action", newJString(Action))
  add(query_606733, "Version", newJString(Version))
  result = call_606732.call(nil, query_606733, nil, nil, nil)

var getDeleteGlobalCluster* = Call_GetDeleteGlobalCluster_606718(
    name: "getDeleteGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteGlobalCluster",
    validator: validate_GetDeleteGlobalCluster_606719, base: "/",
    url: url_GetDeleteGlobalCluster_606720, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteInstallationMedia_606767 = ref object of OpenApiRestCall_604389
proc url_PostDeleteInstallationMedia_606769(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteInstallationMedia_606768(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606770 = query.getOrDefault("Action")
  valid_606770 = validateParameter(valid_606770, JString, required = true, default = newJString(
      "DeleteInstallationMedia"))
  if valid_606770 != nil:
    section.add "Action", valid_606770
  var valid_606771 = query.getOrDefault("Version")
  valid_606771 = validateParameter(valid_606771, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606771 != nil:
    section.add "Version", valid_606771
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606772 = header.getOrDefault("X-Amz-Signature")
  valid_606772 = validateParameter(valid_606772, JString, required = false,
                                 default = nil)
  if valid_606772 != nil:
    section.add "X-Amz-Signature", valid_606772
  var valid_606773 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606773 = validateParameter(valid_606773, JString, required = false,
                                 default = nil)
  if valid_606773 != nil:
    section.add "X-Amz-Content-Sha256", valid_606773
  var valid_606774 = header.getOrDefault("X-Amz-Date")
  valid_606774 = validateParameter(valid_606774, JString, required = false,
                                 default = nil)
  if valid_606774 != nil:
    section.add "X-Amz-Date", valid_606774
  var valid_606775 = header.getOrDefault("X-Amz-Credential")
  valid_606775 = validateParameter(valid_606775, JString, required = false,
                                 default = nil)
  if valid_606775 != nil:
    section.add "X-Amz-Credential", valid_606775
  var valid_606776 = header.getOrDefault("X-Amz-Security-Token")
  valid_606776 = validateParameter(valid_606776, JString, required = false,
                                 default = nil)
  if valid_606776 != nil:
    section.add "X-Amz-Security-Token", valid_606776
  var valid_606777 = header.getOrDefault("X-Amz-Algorithm")
  valid_606777 = validateParameter(valid_606777, JString, required = false,
                                 default = nil)
  if valid_606777 != nil:
    section.add "X-Amz-Algorithm", valid_606777
  var valid_606778 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606778 = validateParameter(valid_606778, JString, required = false,
                                 default = nil)
  if valid_606778 != nil:
    section.add "X-Amz-SignedHeaders", valid_606778
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstallationMediaId: JString (required)
  ##                      : The installation medium ID.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstallationMediaId` field"
  var valid_606779 = formData.getOrDefault("InstallationMediaId")
  valid_606779 = validateParameter(valid_606779, JString, required = true,
                                 default = nil)
  if valid_606779 != nil:
    section.add "InstallationMediaId", valid_606779
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606780: Call_PostDeleteInstallationMedia_606767; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_606780.validator(path, query, header, formData, body)
  let scheme = call_606780.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606780.url(scheme.get, call_606780.host, call_606780.base,
                         call_606780.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606780, url, valid)

proc call*(call_606781: Call_PostDeleteInstallationMedia_606767;
          InstallationMediaId: string; Action: string = "DeleteInstallationMedia";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteInstallationMedia
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   InstallationMediaId: string (required)
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606782 = newJObject()
  var formData_606783 = newJObject()
  add(formData_606783, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_606782, "Action", newJString(Action))
  add(query_606782, "Version", newJString(Version))
  result = call_606781.call(nil, query_606782, nil, formData_606783, nil)

var postDeleteInstallationMedia* = Call_PostDeleteInstallationMedia_606767(
    name: "postDeleteInstallationMedia", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteInstallationMedia",
    validator: validate_PostDeleteInstallationMedia_606768, base: "/",
    url: url_PostDeleteInstallationMedia_606769,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteInstallationMedia_606751 = ref object of OpenApiRestCall_604389
proc url_GetDeleteInstallationMedia_606753(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteInstallationMedia_606752(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstallationMediaId: JString (required)
  ##                      : The installation medium ID.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstallationMediaId` field"
  var valid_606754 = query.getOrDefault("InstallationMediaId")
  valid_606754 = validateParameter(valid_606754, JString, required = true,
                                 default = nil)
  if valid_606754 != nil:
    section.add "InstallationMediaId", valid_606754
  var valid_606755 = query.getOrDefault("Action")
  valid_606755 = validateParameter(valid_606755, JString, required = true, default = newJString(
      "DeleteInstallationMedia"))
  if valid_606755 != nil:
    section.add "Action", valid_606755
  var valid_606756 = query.getOrDefault("Version")
  valid_606756 = validateParameter(valid_606756, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606756 != nil:
    section.add "Version", valid_606756
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606757 = header.getOrDefault("X-Amz-Signature")
  valid_606757 = validateParameter(valid_606757, JString, required = false,
                                 default = nil)
  if valid_606757 != nil:
    section.add "X-Amz-Signature", valid_606757
  var valid_606758 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606758 = validateParameter(valid_606758, JString, required = false,
                                 default = nil)
  if valid_606758 != nil:
    section.add "X-Amz-Content-Sha256", valid_606758
  var valid_606759 = header.getOrDefault("X-Amz-Date")
  valid_606759 = validateParameter(valid_606759, JString, required = false,
                                 default = nil)
  if valid_606759 != nil:
    section.add "X-Amz-Date", valid_606759
  var valid_606760 = header.getOrDefault("X-Amz-Credential")
  valid_606760 = validateParameter(valid_606760, JString, required = false,
                                 default = nil)
  if valid_606760 != nil:
    section.add "X-Amz-Credential", valid_606760
  var valid_606761 = header.getOrDefault("X-Amz-Security-Token")
  valid_606761 = validateParameter(valid_606761, JString, required = false,
                                 default = nil)
  if valid_606761 != nil:
    section.add "X-Amz-Security-Token", valid_606761
  var valid_606762 = header.getOrDefault("X-Amz-Algorithm")
  valid_606762 = validateParameter(valid_606762, JString, required = false,
                                 default = nil)
  if valid_606762 != nil:
    section.add "X-Amz-Algorithm", valid_606762
  var valid_606763 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606763 = validateParameter(valid_606763, JString, required = false,
                                 default = nil)
  if valid_606763 != nil:
    section.add "X-Amz-SignedHeaders", valid_606763
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606764: Call_GetDeleteInstallationMedia_606751; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_606764.validator(path, query, header, formData, body)
  let scheme = call_606764.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606764.url(scheme.get, call_606764.host, call_606764.base,
                         call_606764.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606764, url, valid)

proc call*(call_606765: Call_GetDeleteInstallationMedia_606751;
          InstallationMediaId: string; Action: string = "DeleteInstallationMedia";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteInstallationMedia
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   InstallationMediaId: string (required)
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606766 = newJObject()
  add(query_606766, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_606766, "Action", newJString(Action))
  add(query_606766, "Version", newJString(Version))
  result = call_606765.call(nil, query_606766, nil, nil, nil)

var getDeleteInstallationMedia* = Call_GetDeleteInstallationMedia_606751(
    name: "getDeleteInstallationMedia", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteInstallationMedia",
    validator: validate_GetDeleteInstallationMedia_606752, base: "/",
    url: url_GetDeleteInstallationMedia_606753,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteOptionGroup_606800 = ref object of OpenApiRestCall_604389
proc url_PostDeleteOptionGroup_606802(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteOptionGroup_606801(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606803 = query.getOrDefault("Action")
  valid_606803 = validateParameter(valid_606803, JString, required = true,
                                 default = newJString("DeleteOptionGroup"))
  if valid_606803 != nil:
    section.add "Action", valid_606803
  var valid_606804 = query.getOrDefault("Version")
  valid_606804 = validateParameter(valid_606804, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606804 != nil:
    section.add "Version", valid_606804
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606805 = header.getOrDefault("X-Amz-Signature")
  valid_606805 = validateParameter(valid_606805, JString, required = false,
                                 default = nil)
  if valid_606805 != nil:
    section.add "X-Amz-Signature", valid_606805
  var valid_606806 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606806 = validateParameter(valid_606806, JString, required = false,
                                 default = nil)
  if valid_606806 != nil:
    section.add "X-Amz-Content-Sha256", valid_606806
  var valid_606807 = header.getOrDefault("X-Amz-Date")
  valid_606807 = validateParameter(valid_606807, JString, required = false,
                                 default = nil)
  if valid_606807 != nil:
    section.add "X-Amz-Date", valid_606807
  var valid_606808 = header.getOrDefault("X-Amz-Credential")
  valid_606808 = validateParameter(valid_606808, JString, required = false,
                                 default = nil)
  if valid_606808 != nil:
    section.add "X-Amz-Credential", valid_606808
  var valid_606809 = header.getOrDefault("X-Amz-Security-Token")
  valid_606809 = validateParameter(valid_606809, JString, required = false,
                                 default = nil)
  if valid_606809 != nil:
    section.add "X-Amz-Security-Token", valid_606809
  var valid_606810 = header.getOrDefault("X-Amz-Algorithm")
  valid_606810 = validateParameter(valid_606810, JString, required = false,
                                 default = nil)
  if valid_606810 != nil:
    section.add "X-Amz-Algorithm", valid_606810
  var valid_606811 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606811 = validateParameter(valid_606811, JString, required = false,
                                 default = nil)
  if valid_606811 != nil:
    section.add "X-Amz-SignedHeaders", valid_606811
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OptionGroupName` field"
  var valid_606812 = formData.getOrDefault("OptionGroupName")
  valid_606812 = validateParameter(valid_606812, JString, required = true,
                                 default = nil)
  if valid_606812 != nil:
    section.add "OptionGroupName", valid_606812
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606813: Call_PostDeleteOptionGroup_606800; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing option group.
  ## 
  let valid = call_606813.validator(path, query, header, formData, body)
  let scheme = call_606813.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606813.url(scheme.get, call_606813.host, call_606813.base,
                         call_606813.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606813, url, valid)

proc call*(call_606814: Call_PostDeleteOptionGroup_606800; OptionGroupName: string;
          Action: string = "DeleteOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteOptionGroup
  ## Deletes an existing option group.
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Version: string (required)
  var query_606815 = newJObject()
  var formData_606816 = newJObject()
  add(query_606815, "Action", newJString(Action))
  add(formData_606816, "OptionGroupName", newJString(OptionGroupName))
  add(query_606815, "Version", newJString(Version))
  result = call_606814.call(nil, query_606815, nil, formData_606816, nil)

var postDeleteOptionGroup* = Call_PostDeleteOptionGroup_606800(
    name: "postDeleteOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteOptionGroup",
    validator: validate_PostDeleteOptionGroup_606801, base: "/",
    url: url_PostDeleteOptionGroup_606802, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteOptionGroup_606784 = ref object of OpenApiRestCall_604389
proc url_GetDeleteOptionGroup_606786(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteOptionGroup_606785(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Deletes an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606787 = query.getOrDefault("Action")
  valid_606787 = validateParameter(valid_606787, JString, required = true,
                                 default = newJString("DeleteOptionGroup"))
  if valid_606787 != nil:
    section.add "Action", valid_606787
  var valid_606788 = query.getOrDefault("OptionGroupName")
  valid_606788 = validateParameter(valid_606788, JString, required = true,
                                 default = nil)
  if valid_606788 != nil:
    section.add "OptionGroupName", valid_606788
  var valid_606789 = query.getOrDefault("Version")
  valid_606789 = validateParameter(valid_606789, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606789 != nil:
    section.add "Version", valid_606789
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606790 = header.getOrDefault("X-Amz-Signature")
  valid_606790 = validateParameter(valid_606790, JString, required = false,
                                 default = nil)
  if valid_606790 != nil:
    section.add "X-Amz-Signature", valid_606790
  var valid_606791 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606791 = validateParameter(valid_606791, JString, required = false,
                                 default = nil)
  if valid_606791 != nil:
    section.add "X-Amz-Content-Sha256", valid_606791
  var valid_606792 = header.getOrDefault("X-Amz-Date")
  valid_606792 = validateParameter(valid_606792, JString, required = false,
                                 default = nil)
  if valid_606792 != nil:
    section.add "X-Amz-Date", valid_606792
  var valid_606793 = header.getOrDefault("X-Amz-Credential")
  valid_606793 = validateParameter(valid_606793, JString, required = false,
                                 default = nil)
  if valid_606793 != nil:
    section.add "X-Amz-Credential", valid_606793
  var valid_606794 = header.getOrDefault("X-Amz-Security-Token")
  valid_606794 = validateParameter(valid_606794, JString, required = false,
                                 default = nil)
  if valid_606794 != nil:
    section.add "X-Amz-Security-Token", valid_606794
  var valid_606795 = header.getOrDefault("X-Amz-Algorithm")
  valid_606795 = validateParameter(valid_606795, JString, required = false,
                                 default = nil)
  if valid_606795 != nil:
    section.add "X-Amz-Algorithm", valid_606795
  var valid_606796 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606796 = validateParameter(valid_606796, JString, required = false,
                                 default = nil)
  if valid_606796 != nil:
    section.add "X-Amz-SignedHeaders", valid_606796
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606797: Call_GetDeleteOptionGroup_606784; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Deletes an existing option group.
  ## 
  let valid = call_606797.validator(path, query, header, formData, body)
  let scheme = call_606797.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606797.url(scheme.get, call_606797.host, call_606797.base,
                         call_606797.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606797, url, valid)

proc call*(call_606798: Call_GetDeleteOptionGroup_606784; OptionGroupName: string;
          Action: string = "DeleteOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteOptionGroup
  ## Deletes an existing option group.
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Version: string (required)
  var query_606799 = newJObject()
  add(query_606799, "Action", newJString(Action))
  add(query_606799, "OptionGroupName", newJString(OptionGroupName))
  add(query_606799, "Version", newJString(Version))
  result = call_606798.call(nil, query_606799, nil, nil, nil)

var getDeleteOptionGroup* = Call_GetDeleteOptionGroup_606784(
    name: "getDeleteOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteOptionGroup",
    validator: validate_GetDeleteOptionGroup_606785, base: "/",
    url: url_GetDeleteOptionGroup_606786, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeregisterDBProxyTargets_606836 = ref object of OpenApiRestCall_604389
proc url_PostDeregisterDBProxyTargets_606838(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeregisterDBProxyTargets_606837(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606839 = query.getOrDefault("Action")
  valid_606839 = validateParameter(valid_606839, JString, required = true, default = newJString(
      "DeregisterDBProxyTargets"))
  if valid_606839 != nil:
    section.add "Action", valid_606839
  var valid_606840 = query.getOrDefault("Version")
  valid_606840 = validateParameter(valid_606840, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606840 != nil:
    section.add "Version", valid_606840
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606841 = header.getOrDefault("X-Amz-Signature")
  valid_606841 = validateParameter(valid_606841, JString, required = false,
                                 default = nil)
  if valid_606841 != nil:
    section.add "X-Amz-Signature", valid_606841
  var valid_606842 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606842 = validateParameter(valid_606842, JString, required = false,
                                 default = nil)
  if valid_606842 != nil:
    section.add "X-Amz-Content-Sha256", valid_606842
  var valid_606843 = header.getOrDefault("X-Amz-Date")
  valid_606843 = validateParameter(valid_606843, JString, required = false,
                                 default = nil)
  if valid_606843 != nil:
    section.add "X-Amz-Date", valid_606843
  var valid_606844 = header.getOrDefault("X-Amz-Credential")
  valid_606844 = validateParameter(valid_606844, JString, required = false,
                                 default = nil)
  if valid_606844 != nil:
    section.add "X-Amz-Credential", valid_606844
  var valid_606845 = header.getOrDefault("X-Amz-Security-Token")
  valid_606845 = validateParameter(valid_606845, JString, required = false,
                                 default = nil)
  if valid_606845 != nil:
    section.add "X-Amz-Security-Token", valid_606845
  var valid_606846 = header.getOrDefault("X-Amz-Algorithm")
  valid_606846 = validateParameter(valid_606846, JString, required = false,
                                 default = nil)
  if valid_606846 != nil:
    section.add "X-Amz-Algorithm", valid_606846
  var valid_606847 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606847 = validateParameter(valid_606847, JString, required = false,
                                 default = nil)
  if valid_606847 != nil:
    section.add "X-Amz-SignedHeaders", valid_606847
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  section = newJObject()
  var valid_606848 = formData.getOrDefault("TargetGroupName")
  valid_606848 = validateParameter(valid_606848, JString, required = false,
                                 default = nil)
  if valid_606848 != nil:
    section.add "TargetGroupName", valid_606848
  var valid_606849 = formData.getOrDefault("DBInstanceIdentifiers")
  valid_606849 = validateParameter(valid_606849, JArray, required = false,
                                 default = nil)
  if valid_606849 != nil:
    section.add "DBInstanceIdentifiers", valid_606849
  var valid_606850 = formData.getOrDefault("DBClusterIdentifiers")
  valid_606850 = validateParameter(valid_606850, JArray, required = false,
                                 default = nil)
  if valid_606850 != nil:
    section.add "DBClusterIdentifiers", valid_606850
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_606851 = formData.getOrDefault("DBProxyName")
  valid_606851 = validateParameter(valid_606851, JString, required = true,
                                 default = nil)
  if valid_606851 != nil:
    section.add "DBProxyName", valid_606851
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606852: Call_PostDeregisterDBProxyTargets_606836; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_606852.validator(path, query, header, formData, body)
  let scheme = call_606852.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606852.url(scheme.get, call_606852.host, call_606852.base,
                         call_606852.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606852, url, valid)

proc call*(call_606853: Call_PostDeregisterDBProxyTargets_606836;
          DBProxyName: string; TargetGroupName: string = "";
          DBInstanceIdentifiers: JsonNode = nil;
          DBClusterIdentifiers: JsonNode = nil;
          Action: string = "DeregisterDBProxyTargets";
          Version: string = "2014-10-31"): Recallable =
  ## postDeregisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606854 = newJObject()
  var formData_606855 = newJObject()
  add(formData_606855, "TargetGroupName", newJString(TargetGroupName))
  if DBInstanceIdentifiers != nil:
    formData_606855.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  if DBClusterIdentifiers != nil:
    formData_606855.add "DBClusterIdentifiers", DBClusterIdentifiers
  add(formData_606855, "DBProxyName", newJString(DBProxyName))
  add(query_606854, "Action", newJString(Action))
  add(query_606854, "Version", newJString(Version))
  result = call_606853.call(nil, query_606854, nil, formData_606855, nil)

var postDeregisterDBProxyTargets* = Call_PostDeregisterDBProxyTargets_606836(
    name: "postDeregisterDBProxyTargets", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeregisterDBProxyTargets",
    validator: validate_PostDeregisterDBProxyTargets_606837, base: "/",
    url: url_PostDeregisterDBProxyTargets_606838,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeregisterDBProxyTargets_606817 = ref object of OpenApiRestCall_604389
proc url_GetDeregisterDBProxyTargets_606819(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeregisterDBProxyTargets_606818(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  section = newJObject()
  var valid_606820 = query.getOrDefault("DBClusterIdentifiers")
  valid_606820 = validateParameter(valid_606820, JArray, required = false,
                                 default = nil)
  if valid_606820 != nil:
    section.add "DBClusterIdentifiers", valid_606820
  var valid_606821 = query.getOrDefault("DBInstanceIdentifiers")
  valid_606821 = validateParameter(valid_606821, JArray, required = false,
                                 default = nil)
  if valid_606821 != nil:
    section.add "DBInstanceIdentifiers", valid_606821
  var valid_606822 = query.getOrDefault("TargetGroupName")
  valid_606822 = validateParameter(valid_606822, JString, required = false,
                                 default = nil)
  if valid_606822 != nil:
    section.add "TargetGroupName", valid_606822
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606823 = query.getOrDefault("Action")
  valid_606823 = validateParameter(valid_606823, JString, required = true, default = newJString(
      "DeregisterDBProxyTargets"))
  if valid_606823 != nil:
    section.add "Action", valid_606823
  var valid_606824 = query.getOrDefault("Version")
  valid_606824 = validateParameter(valid_606824, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606824 != nil:
    section.add "Version", valid_606824
  var valid_606825 = query.getOrDefault("DBProxyName")
  valid_606825 = validateParameter(valid_606825, JString, required = true,
                                 default = nil)
  if valid_606825 != nil:
    section.add "DBProxyName", valid_606825
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606826 = header.getOrDefault("X-Amz-Signature")
  valid_606826 = validateParameter(valid_606826, JString, required = false,
                                 default = nil)
  if valid_606826 != nil:
    section.add "X-Amz-Signature", valid_606826
  var valid_606827 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606827 = validateParameter(valid_606827, JString, required = false,
                                 default = nil)
  if valid_606827 != nil:
    section.add "X-Amz-Content-Sha256", valid_606827
  var valid_606828 = header.getOrDefault("X-Amz-Date")
  valid_606828 = validateParameter(valid_606828, JString, required = false,
                                 default = nil)
  if valid_606828 != nil:
    section.add "X-Amz-Date", valid_606828
  var valid_606829 = header.getOrDefault("X-Amz-Credential")
  valid_606829 = validateParameter(valid_606829, JString, required = false,
                                 default = nil)
  if valid_606829 != nil:
    section.add "X-Amz-Credential", valid_606829
  var valid_606830 = header.getOrDefault("X-Amz-Security-Token")
  valid_606830 = validateParameter(valid_606830, JString, required = false,
                                 default = nil)
  if valid_606830 != nil:
    section.add "X-Amz-Security-Token", valid_606830
  var valid_606831 = header.getOrDefault("X-Amz-Algorithm")
  valid_606831 = validateParameter(valid_606831, JString, required = false,
                                 default = nil)
  if valid_606831 != nil:
    section.add "X-Amz-Algorithm", valid_606831
  var valid_606832 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606832 = validateParameter(valid_606832, JString, required = false,
                                 default = nil)
  if valid_606832 != nil:
    section.add "X-Amz-SignedHeaders", valid_606832
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606833: Call_GetDeregisterDBProxyTargets_606817; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_606833.validator(path, query, header, formData, body)
  let scheme = call_606833.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606833.url(scheme.get, call_606833.host, call_606833.base,
                         call_606833.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606833, url, valid)

proc call*(call_606834: Call_GetDeregisterDBProxyTargets_606817;
          DBProxyName: string; DBClusterIdentifiers: JsonNode = nil;
          DBInstanceIdentifiers: JsonNode = nil; TargetGroupName: string = "";
          Action: string = "DeregisterDBProxyTargets";
          Version: string = "2014-10-31"): Recallable =
  ## getDeregisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  var query_606835 = newJObject()
  if DBClusterIdentifiers != nil:
    query_606835.add "DBClusterIdentifiers", DBClusterIdentifiers
  if DBInstanceIdentifiers != nil:
    query_606835.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  add(query_606835, "TargetGroupName", newJString(TargetGroupName))
  add(query_606835, "Action", newJString(Action))
  add(query_606835, "Version", newJString(Version))
  add(query_606835, "DBProxyName", newJString(DBProxyName))
  result = call_606834.call(nil, query_606835, nil, nil, nil)

var getDeregisterDBProxyTargets* = Call_GetDeregisterDBProxyTargets_606817(
    name: "getDeregisterDBProxyTargets", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeregisterDBProxyTargets",
    validator: validate_GetDeregisterDBProxyTargets_606818, base: "/",
    url: url_GetDeregisterDBProxyTargets_606819,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAccountAttributes_606871 = ref object of OpenApiRestCall_604389
proc url_PostDescribeAccountAttributes_606873(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAccountAttributes_606872(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606874 = query.getOrDefault("Action")
  valid_606874 = validateParameter(valid_606874, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_606874 != nil:
    section.add "Action", valid_606874
  var valid_606875 = query.getOrDefault("Version")
  valid_606875 = validateParameter(valid_606875, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606875 != nil:
    section.add "Version", valid_606875
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606876 = header.getOrDefault("X-Amz-Signature")
  valid_606876 = validateParameter(valid_606876, JString, required = false,
                                 default = nil)
  if valid_606876 != nil:
    section.add "X-Amz-Signature", valid_606876
  var valid_606877 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606877 = validateParameter(valid_606877, JString, required = false,
                                 default = nil)
  if valid_606877 != nil:
    section.add "X-Amz-Content-Sha256", valid_606877
  var valid_606878 = header.getOrDefault("X-Amz-Date")
  valid_606878 = validateParameter(valid_606878, JString, required = false,
                                 default = nil)
  if valid_606878 != nil:
    section.add "X-Amz-Date", valid_606878
  var valid_606879 = header.getOrDefault("X-Amz-Credential")
  valid_606879 = validateParameter(valid_606879, JString, required = false,
                                 default = nil)
  if valid_606879 != nil:
    section.add "X-Amz-Credential", valid_606879
  var valid_606880 = header.getOrDefault("X-Amz-Security-Token")
  valid_606880 = validateParameter(valid_606880, JString, required = false,
                                 default = nil)
  if valid_606880 != nil:
    section.add "X-Amz-Security-Token", valid_606880
  var valid_606881 = header.getOrDefault("X-Amz-Algorithm")
  valid_606881 = validateParameter(valid_606881, JString, required = false,
                                 default = nil)
  if valid_606881 != nil:
    section.add "X-Amz-Algorithm", valid_606881
  var valid_606882 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606882 = validateParameter(valid_606882, JString, required = false,
                                 default = nil)
  if valid_606882 != nil:
    section.add "X-Amz-SignedHeaders", valid_606882
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606883: Call_PostDescribeAccountAttributes_606871; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  let valid = call_606883.validator(path, query, header, formData, body)
  let scheme = call_606883.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606883.url(scheme.get, call_606883.host, call_606883.base,
                         call_606883.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606883, url, valid)

proc call*(call_606884: Call_PostDescribeAccountAttributes_606871;
          Action: string = "DescribeAccountAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeAccountAttributes
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606885 = newJObject()
  add(query_606885, "Action", newJString(Action))
  add(query_606885, "Version", newJString(Version))
  result = call_606884.call(nil, query_606885, nil, nil, nil)

var postDescribeAccountAttributes* = Call_PostDescribeAccountAttributes_606871(
    name: "postDescribeAccountAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_PostDescribeAccountAttributes_606872, base: "/",
    url: url_PostDescribeAccountAttributes_606873,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAccountAttributes_606856 = ref object of OpenApiRestCall_604389
proc url_GetDescribeAccountAttributes_606858(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAccountAttributes_606857(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606859 = query.getOrDefault("Action")
  valid_606859 = validateParameter(valid_606859, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_606859 != nil:
    section.add "Action", valid_606859
  var valid_606860 = query.getOrDefault("Version")
  valid_606860 = validateParameter(valid_606860, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606860 != nil:
    section.add "Version", valid_606860
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606861 = header.getOrDefault("X-Amz-Signature")
  valid_606861 = validateParameter(valid_606861, JString, required = false,
                                 default = nil)
  if valid_606861 != nil:
    section.add "X-Amz-Signature", valid_606861
  var valid_606862 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606862 = validateParameter(valid_606862, JString, required = false,
                                 default = nil)
  if valid_606862 != nil:
    section.add "X-Amz-Content-Sha256", valid_606862
  var valid_606863 = header.getOrDefault("X-Amz-Date")
  valid_606863 = validateParameter(valid_606863, JString, required = false,
                                 default = nil)
  if valid_606863 != nil:
    section.add "X-Amz-Date", valid_606863
  var valid_606864 = header.getOrDefault("X-Amz-Credential")
  valid_606864 = validateParameter(valid_606864, JString, required = false,
                                 default = nil)
  if valid_606864 != nil:
    section.add "X-Amz-Credential", valid_606864
  var valid_606865 = header.getOrDefault("X-Amz-Security-Token")
  valid_606865 = validateParameter(valid_606865, JString, required = false,
                                 default = nil)
  if valid_606865 != nil:
    section.add "X-Amz-Security-Token", valid_606865
  var valid_606866 = header.getOrDefault("X-Amz-Algorithm")
  valid_606866 = validateParameter(valid_606866, JString, required = false,
                                 default = nil)
  if valid_606866 != nil:
    section.add "X-Amz-Algorithm", valid_606866
  var valid_606867 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606867 = validateParameter(valid_606867, JString, required = false,
                                 default = nil)
  if valid_606867 != nil:
    section.add "X-Amz-SignedHeaders", valid_606867
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606868: Call_GetDescribeAccountAttributes_606856; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  let valid = call_606868.validator(path, query, header, formData, body)
  let scheme = call_606868.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606868.url(scheme.get, call_606868.host, call_606868.base,
                         call_606868.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606868, url, valid)

proc call*(call_606869: Call_GetDescribeAccountAttributes_606856;
          Action: string = "DescribeAccountAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeAccountAttributes
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_606870 = newJObject()
  add(query_606870, "Action", newJString(Action))
  add(query_606870, "Version", newJString(Version))
  result = call_606869.call(nil, query_606870, nil, nil, nil)

var getDescribeAccountAttributes* = Call_GetDescribeAccountAttributes_606856(
    name: "getDescribeAccountAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_GetDescribeAccountAttributes_606857, base: "/",
    url: url_GetDescribeAccountAttributes_606858,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCertificates_606905 = ref object of OpenApiRestCall_604389
proc url_PostDescribeCertificates_606907(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCertificates_606906(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606908 = query.getOrDefault("Action")
  valid_606908 = validateParameter(valid_606908, JString, required = true,
                                 default = newJString("DescribeCertificates"))
  if valid_606908 != nil:
    section.add "Action", valid_606908
  var valid_606909 = query.getOrDefault("Version")
  valid_606909 = validateParameter(valid_606909, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606909 != nil:
    section.add "Version", valid_606909
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606910 = header.getOrDefault("X-Amz-Signature")
  valid_606910 = validateParameter(valid_606910, JString, required = false,
                                 default = nil)
  if valid_606910 != nil:
    section.add "X-Amz-Signature", valid_606910
  var valid_606911 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606911 = validateParameter(valid_606911, JString, required = false,
                                 default = nil)
  if valid_606911 != nil:
    section.add "X-Amz-Content-Sha256", valid_606911
  var valid_606912 = header.getOrDefault("X-Amz-Date")
  valid_606912 = validateParameter(valid_606912, JString, required = false,
                                 default = nil)
  if valid_606912 != nil:
    section.add "X-Amz-Date", valid_606912
  var valid_606913 = header.getOrDefault("X-Amz-Credential")
  valid_606913 = validateParameter(valid_606913, JString, required = false,
                                 default = nil)
  if valid_606913 != nil:
    section.add "X-Amz-Credential", valid_606913
  var valid_606914 = header.getOrDefault("X-Amz-Security-Token")
  valid_606914 = validateParameter(valid_606914, JString, required = false,
                                 default = nil)
  if valid_606914 != nil:
    section.add "X-Amz-Security-Token", valid_606914
  var valid_606915 = header.getOrDefault("X-Amz-Algorithm")
  valid_606915 = validateParameter(valid_606915, JString, required = false,
                                 default = nil)
  if valid_606915 != nil:
    section.add "X-Amz-Algorithm", valid_606915
  var valid_606916 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606916 = validateParameter(valid_606916, JString, required = false,
                                 default = nil)
  if valid_606916 != nil:
    section.add "X-Amz-SignedHeaders", valid_606916
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   CertificateIdentifier: JString
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_606917 = formData.getOrDefault("MaxRecords")
  valid_606917 = validateParameter(valid_606917, JInt, required = false, default = nil)
  if valid_606917 != nil:
    section.add "MaxRecords", valid_606917
  var valid_606918 = formData.getOrDefault("Marker")
  valid_606918 = validateParameter(valid_606918, JString, required = false,
                                 default = nil)
  if valid_606918 != nil:
    section.add "Marker", valid_606918
  var valid_606919 = formData.getOrDefault("CertificateIdentifier")
  valid_606919 = validateParameter(valid_606919, JString, required = false,
                                 default = nil)
  if valid_606919 != nil:
    section.add "CertificateIdentifier", valid_606919
  var valid_606920 = formData.getOrDefault("Filters")
  valid_606920 = validateParameter(valid_606920, JArray, required = false,
                                 default = nil)
  if valid_606920 != nil:
    section.add "Filters", valid_606920
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606921: Call_PostDescribeCertificates_606905; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  let valid = call_606921.validator(path, query, header, formData, body)
  let scheme = call_606921.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606921.url(scheme.get, call_606921.host, call_606921.base,
                         call_606921.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606921, url, valid)

proc call*(call_606922: Call_PostDescribeCertificates_606905; MaxRecords: int = 0;
          Marker: string = ""; CertificateIdentifier: string = "";
          Action: string = "DescribeCertificates"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeCertificates
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   CertificateIdentifier: string
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_606923 = newJObject()
  var formData_606924 = newJObject()
  add(formData_606924, "MaxRecords", newJInt(MaxRecords))
  add(formData_606924, "Marker", newJString(Marker))
  add(formData_606924, "CertificateIdentifier", newJString(CertificateIdentifier))
  add(query_606923, "Action", newJString(Action))
  if Filters != nil:
    formData_606924.add "Filters", Filters
  add(query_606923, "Version", newJString(Version))
  result = call_606922.call(nil, query_606923, nil, formData_606924, nil)

var postDescribeCertificates* = Call_PostDescribeCertificates_606905(
    name: "postDescribeCertificates", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCertificates",
    validator: validate_PostDescribeCertificates_606906, base: "/",
    url: url_PostDescribeCertificates_606907, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCertificates_606886 = ref object of OpenApiRestCall_604389
proc url_GetDescribeCertificates_606888(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCertificates_606887(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CertificateIdentifier: JString
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_606889 = query.getOrDefault("Marker")
  valid_606889 = validateParameter(valid_606889, JString, required = false,
                                 default = nil)
  if valid_606889 != nil:
    section.add "Marker", valid_606889
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606890 = query.getOrDefault("Action")
  valid_606890 = validateParameter(valid_606890, JString, required = true,
                                 default = newJString("DescribeCertificates"))
  if valid_606890 != nil:
    section.add "Action", valid_606890
  var valid_606891 = query.getOrDefault("Version")
  valid_606891 = validateParameter(valid_606891, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606891 != nil:
    section.add "Version", valid_606891
  var valid_606892 = query.getOrDefault("CertificateIdentifier")
  valid_606892 = validateParameter(valid_606892, JString, required = false,
                                 default = nil)
  if valid_606892 != nil:
    section.add "CertificateIdentifier", valid_606892
  var valid_606893 = query.getOrDefault("Filters")
  valid_606893 = validateParameter(valid_606893, JArray, required = false,
                                 default = nil)
  if valid_606893 != nil:
    section.add "Filters", valid_606893
  var valid_606894 = query.getOrDefault("MaxRecords")
  valid_606894 = validateParameter(valid_606894, JInt, required = false, default = nil)
  if valid_606894 != nil:
    section.add "MaxRecords", valid_606894
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606895 = header.getOrDefault("X-Amz-Signature")
  valid_606895 = validateParameter(valid_606895, JString, required = false,
                                 default = nil)
  if valid_606895 != nil:
    section.add "X-Amz-Signature", valid_606895
  var valid_606896 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606896 = validateParameter(valid_606896, JString, required = false,
                                 default = nil)
  if valid_606896 != nil:
    section.add "X-Amz-Content-Sha256", valid_606896
  var valid_606897 = header.getOrDefault("X-Amz-Date")
  valid_606897 = validateParameter(valid_606897, JString, required = false,
                                 default = nil)
  if valid_606897 != nil:
    section.add "X-Amz-Date", valid_606897
  var valid_606898 = header.getOrDefault("X-Amz-Credential")
  valid_606898 = validateParameter(valid_606898, JString, required = false,
                                 default = nil)
  if valid_606898 != nil:
    section.add "X-Amz-Credential", valid_606898
  var valid_606899 = header.getOrDefault("X-Amz-Security-Token")
  valid_606899 = validateParameter(valid_606899, JString, required = false,
                                 default = nil)
  if valid_606899 != nil:
    section.add "X-Amz-Security-Token", valid_606899
  var valid_606900 = header.getOrDefault("X-Amz-Algorithm")
  valid_606900 = validateParameter(valid_606900, JString, required = false,
                                 default = nil)
  if valid_606900 != nil:
    section.add "X-Amz-Algorithm", valid_606900
  var valid_606901 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606901 = validateParameter(valid_606901, JString, required = false,
                                 default = nil)
  if valid_606901 != nil:
    section.add "X-Amz-SignedHeaders", valid_606901
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606902: Call_GetDescribeCertificates_606886; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  let valid = call_606902.validator(path, query, header, formData, body)
  let scheme = call_606902.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606902.url(scheme.get, call_606902.host, call_606902.base,
                         call_606902.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606902, url, valid)

proc call*(call_606903: Call_GetDescribeCertificates_606886; Marker: string = "";
          Action: string = "DescribeCertificates"; Version: string = "2014-10-31";
          CertificateIdentifier: string = ""; Filters: JsonNode = nil;
          MaxRecords: int = 0): Recallable =
  ## getDescribeCertificates
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CertificateIdentifier: string
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_606904 = newJObject()
  add(query_606904, "Marker", newJString(Marker))
  add(query_606904, "Action", newJString(Action))
  add(query_606904, "Version", newJString(Version))
  add(query_606904, "CertificateIdentifier", newJString(CertificateIdentifier))
  if Filters != nil:
    query_606904.add "Filters", Filters
  add(query_606904, "MaxRecords", newJInt(MaxRecords))
  result = call_606903.call(nil, query_606904, nil, nil, nil)

var getDescribeCertificates* = Call_GetDescribeCertificates_606886(
    name: "getDescribeCertificates", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCertificates",
    validator: validate_GetDescribeCertificates_606887, base: "/",
    url: url_GetDescribeCertificates_606888, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCustomAvailabilityZones_606944 = ref object of OpenApiRestCall_604389
proc url_PostDescribeCustomAvailabilityZones_606946(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCustomAvailabilityZones_606945(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606947 = query.getOrDefault("Action")
  valid_606947 = validateParameter(valid_606947, JString, required = true, default = newJString(
      "DescribeCustomAvailabilityZones"))
  if valid_606947 != nil:
    section.add "Action", valid_606947
  var valid_606948 = query.getOrDefault("Version")
  valid_606948 = validateParameter(valid_606948, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606948 != nil:
    section.add "Version", valid_606948
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606949 = header.getOrDefault("X-Amz-Signature")
  valid_606949 = validateParameter(valid_606949, JString, required = false,
                                 default = nil)
  if valid_606949 != nil:
    section.add "X-Amz-Signature", valid_606949
  var valid_606950 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606950 = validateParameter(valid_606950, JString, required = false,
                                 default = nil)
  if valid_606950 != nil:
    section.add "X-Amz-Content-Sha256", valid_606950
  var valid_606951 = header.getOrDefault("X-Amz-Date")
  valid_606951 = validateParameter(valid_606951, JString, required = false,
                                 default = nil)
  if valid_606951 != nil:
    section.add "X-Amz-Date", valid_606951
  var valid_606952 = header.getOrDefault("X-Amz-Credential")
  valid_606952 = validateParameter(valid_606952, JString, required = false,
                                 default = nil)
  if valid_606952 != nil:
    section.add "X-Amz-Credential", valid_606952
  var valid_606953 = header.getOrDefault("X-Amz-Security-Token")
  valid_606953 = validateParameter(valid_606953, JString, required = false,
                                 default = nil)
  if valid_606953 != nil:
    section.add "X-Amz-Security-Token", valid_606953
  var valid_606954 = header.getOrDefault("X-Amz-Algorithm")
  valid_606954 = validateParameter(valid_606954, JString, required = false,
                                 default = nil)
  if valid_606954 != nil:
    section.add "X-Amz-Algorithm", valid_606954
  var valid_606955 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606955 = validateParameter(valid_606955, JString, required = false,
                                 default = nil)
  if valid_606955 != nil:
    section.add "X-Amz-SignedHeaders", valid_606955
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   CustomAvailabilityZoneId: JString
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  section = newJObject()
  var valid_606956 = formData.getOrDefault("MaxRecords")
  valid_606956 = validateParameter(valid_606956, JInt, required = false, default = nil)
  if valid_606956 != nil:
    section.add "MaxRecords", valid_606956
  var valid_606957 = formData.getOrDefault("Marker")
  valid_606957 = validateParameter(valid_606957, JString, required = false,
                                 default = nil)
  if valid_606957 != nil:
    section.add "Marker", valid_606957
  var valid_606958 = formData.getOrDefault("Filters")
  valid_606958 = validateParameter(valid_606958, JArray, required = false,
                                 default = nil)
  if valid_606958 != nil:
    section.add "Filters", valid_606958
  var valid_606959 = formData.getOrDefault("CustomAvailabilityZoneId")
  valid_606959 = validateParameter(valid_606959, JString, required = false,
                                 default = nil)
  if valid_606959 != nil:
    section.add "CustomAvailabilityZoneId", valid_606959
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606960: Call_PostDescribeCustomAvailabilityZones_606944;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_606960.validator(path, query, header, formData, body)
  let scheme = call_606960.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606960.url(scheme.get, call_606960.host, call_606960.base,
                         call_606960.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606960, url, valid)

proc call*(call_606961: Call_PostDescribeCustomAvailabilityZones_606944;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeCustomAvailabilityZones";
          Filters: JsonNode = nil; CustomAvailabilityZoneId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeCustomAvailabilityZones
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   CustomAvailabilityZoneId: string
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  ##   Version: string (required)
  var query_606962 = newJObject()
  var formData_606963 = newJObject()
  add(formData_606963, "MaxRecords", newJInt(MaxRecords))
  add(formData_606963, "Marker", newJString(Marker))
  add(query_606962, "Action", newJString(Action))
  if Filters != nil:
    formData_606963.add "Filters", Filters
  add(formData_606963, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_606962, "Version", newJString(Version))
  result = call_606961.call(nil, query_606962, nil, formData_606963, nil)

var postDescribeCustomAvailabilityZones* = Call_PostDescribeCustomAvailabilityZones_606944(
    name: "postDescribeCustomAvailabilityZones", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCustomAvailabilityZones",
    validator: validate_PostDescribeCustomAvailabilityZones_606945, base: "/",
    url: url_PostDescribeCustomAvailabilityZones_606946,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCustomAvailabilityZones_606925 = ref object of OpenApiRestCall_604389
proc url_GetDescribeCustomAvailabilityZones_606927(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCustomAvailabilityZones_606926(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CustomAvailabilityZoneId: JString
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_606928 = query.getOrDefault("Marker")
  valid_606928 = validateParameter(valid_606928, JString, required = false,
                                 default = nil)
  if valid_606928 != nil:
    section.add "Marker", valid_606928
  var valid_606929 = query.getOrDefault("CustomAvailabilityZoneId")
  valid_606929 = validateParameter(valid_606929, JString, required = false,
                                 default = nil)
  if valid_606929 != nil:
    section.add "CustomAvailabilityZoneId", valid_606929
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606930 = query.getOrDefault("Action")
  valid_606930 = validateParameter(valid_606930, JString, required = true, default = newJString(
      "DescribeCustomAvailabilityZones"))
  if valid_606930 != nil:
    section.add "Action", valid_606930
  var valid_606931 = query.getOrDefault("Version")
  valid_606931 = validateParameter(valid_606931, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606931 != nil:
    section.add "Version", valid_606931
  var valid_606932 = query.getOrDefault("Filters")
  valid_606932 = validateParameter(valid_606932, JArray, required = false,
                                 default = nil)
  if valid_606932 != nil:
    section.add "Filters", valid_606932
  var valid_606933 = query.getOrDefault("MaxRecords")
  valid_606933 = validateParameter(valid_606933, JInt, required = false, default = nil)
  if valid_606933 != nil:
    section.add "MaxRecords", valid_606933
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606934 = header.getOrDefault("X-Amz-Signature")
  valid_606934 = validateParameter(valid_606934, JString, required = false,
                                 default = nil)
  if valid_606934 != nil:
    section.add "X-Amz-Signature", valid_606934
  var valid_606935 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606935 = validateParameter(valid_606935, JString, required = false,
                                 default = nil)
  if valid_606935 != nil:
    section.add "X-Amz-Content-Sha256", valid_606935
  var valid_606936 = header.getOrDefault("X-Amz-Date")
  valid_606936 = validateParameter(valid_606936, JString, required = false,
                                 default = nil)
  if valid_606936 != nil:
    section.add "X-Amz-Date", valid_606936
  var valid_606937 = header.getOrDefault("X-Amz-Credential")
  valid_606937 = validateParameter(valid_606937, JString, required = false,
                                 default = nil)
  if valid_606937 != nil:
    section.add "X-Amz-Credential", valid_606937
  var valid_606938 = header.getOrDefault("X-Amz-Security-Token")
  valid_606938 = validateParameter(valid_606938, JString, required = false,
                                 default = nil)
  if valid_606938 != nil:
    section.add "X-Amz-Security-Token", valid_606938
  var valid_606939 = header.getOrDefault("X-Amz-Algorithm")
  valid_606939 = validateParameter(valid_606939, JString, required = false,
                                 default = nil)
  if valid_606939 != nil:
    section.add "X-Amz-Algorithm", valid_606939
  var valid_606940 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606940 = validateParameter(valid_606940, JString, required = false,
                                 default = nil)
  if valid_606940 != nil:
    section.add "X-Amz-SignedHeaders", valid_606940
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606941: Call_GetDescribeCustomAvailabilityZones_606925;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_606941.validator(path, query, header, formData, body)
  let scheme = call_606941.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606941.url(scheme.get, call_606941.host, call_606941.base,
                         call_606941.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606941, url, valid)

proc call*(call_606942: Call_GetDescribeCustomAvailabilityZones_606925;
          Marker: string = ""; CustomAvailabilityZoneId: string = "";
          Action: string = "DescribeCustomAvailabilityZones";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeCustomAvailabilityZones
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CustomAvailabilityZoneId: string
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_606943 = newJObject()
  add(query_606943, "Marker", newJString(Marker))
  add(query_606943, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_606943, "Action", newJString(Action))
  add(query_606943, "Version", newJString(Version))
  if Filters != nil:
    query_606943.add "Filters", Filters
  add(query_606943, "MaxRecords", newJInt(MaxRecords))
  result = call_606942.call(nil, query_606943, nil, nil, nil)

var getDescribeCustomAvailabilityZones* = Call_GetDescribeCustomAvailabilityZones_606925(
    name: "getDescribeCustomAvailabilityZones", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCustomAvailabilityZones",
    validator: validate_GetDescribeCustomAvailabilityZones_606926, base: "/",
    url: url_GetDescribeCustomAvailabilityZones_606927,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterBacktracks_606984 = ref object of OpenApiRestCall_604389
proc url_PostDescribeDBClusterBacktracks_606986(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterBacktracks_606985(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_606987 = query.getOrDefault("Action")
  valid_606987 = validateParameter(valid_606987, JString, required = true, default = newJString(
      "DescribeDBClusterBacktracks"))
  if valid_606987 != nil:
    section.add "Action", valid_606987
  var valid_606988 = query.getOrDefault("Version")
  valid_606988 = validateParameter(valid_606988, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606988 != nil:
    section.add "Version", valid_606988
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606989 = header.getOrDefault("X-Amz-Signature")
  valid_606989 = validateParameter(valid_606989, JString, required = false,
                                 default = nil)
  if valid_606989 != nil:
    section.add "X-Amz-Signature", valid_606989
  var valid_606990 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606990 = validateParameter(valid_606990, JString, required = false,
                                 default = nil)
  if valid_606990 != nil:
    section.add "X-Amz-Content-Sha256", valid_606990
  var valid_606991 = header.getOrDefault("X-Amz-Date")
  valid_606991 = validateParameter(valid_606991, JString, required = false,
                                 default = nil)
  if valid_606991 != nil:
    section.add "X-Amz-Date", valid_606991
  var valid_606992 = header.getOrDefault("X-Amz-Credential")
  valid_606992 = validateParameter(valid_606992, JString, required = false,
                                 default = nil)
  if valid_606992 != nil:
    section.add "X-Amz-Credential", valid_606992
  var valid_606993 = header.getOrDefault("X-Amz-Security-Token")
  valid_606993 = validateParameter(valid_606993, JString, required = false,
                                 default = nil)
  if valid_606993 != nil:
    section.add "X-Amz-Security-Token", valid_606993
  var valid_606994 = header.getOrDefault("X-Amz-Algorithm")
  valid_606994 = validateParameter(valid_606994, JString, required = false,
                                 default = nil)
  if valid_606994 != nil:
    section.add "X-Amz-Algorithm", valid_606994
  var valid_606995 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606995 = validateParameter(valid_606995, JString, required = false,
                                 default = nil)
  if valid_606995 != nil:
    section.add "X-Amz-SignedHeaders", valid_606995
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   BacktrackIdentifier: JString
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  var valid_606996 = formData.getOrDefault("MaxRecords")
  valid_606996 = validateParameter(valid_606996, JInt, required = false, default = nil)
  if valid_606996 != nil:
    section.add "MaxRecords", valid_606996
  var valid_606997 = formData.getOrDefault("Marker")
  valid_606997 = validateParameter(valid_606997, JString, required = false,
                                 default = nil)
  if valid_606997 != nil:
    section.add "Marker", valid_606997
  var valid_606998 = formData.getOrDefault("BacktrackIdentifier")
  valid_606998 = validateParameter(valid_606998, JString, required = false,
                                 default = nil)
  if valid_606998 != nil:
    section.add "BacktrackIdentifier", valid_606998
  var valid_606999 = formData.getOrDefault("Filters")
  valid_606999 = validateParameter(valid_606999, JArray, required = false,
                                 default = nil)
  if valid_606999 != nil:
    section.add "Filters", valid_606999
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_607000 = formData.getOrDefault("DBClusterIdentifier")
  valid_607000 = validateParameter(valid_607000, JString, required = true,
                                 default = nil)
  if valid_607000 != nil:
    section.add "DBClusterIdentifier", valid_607000
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607001: Call_PostDescribeDBClusterBacktracks_606984;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607001.validator(path, query, header, formData, body)
  let scheme = call_607001.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607001.url(scheme.get, call_607001.host, call_607001.base,
                         call_607001.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607001, url, valid)

proc call*(call_607002: Call_PostDescribeDBClusterBacktracks_606984;
          DBClusterIdentifier: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterBacktracks";
          BacktrackIdentifier: string = ""; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterBacktracks
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   BacktrackIdentifier: string
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  var query_607003 = newJObject()
  var formData_607004 = newJObject()
  add(formData_607004, "MaxRecords", newJInt(MaxRecords))
  add(formData_607004, "Marker", newJString(Marker))
  add(query_607003, "Action", newJString(Action))
  add(formData_607004, "BacktrackIdentifier", newJString(BacktrackIdentifier))
  if Filters != nil:
    formData_607004.add "Filters", Filters
  add(query_607003, "Version", newJString(Version))
  add(formData_607004, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_607002.call(nil, query_607003, nil, formData_607004, nil)

var postDescribeDBClusterBacktracks* = Call_PostDescribeDBClusterBacktracks_606984(
    name: "postDescribeDBClusterBacktracks", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterBacktracks",
    validator: validate_PostDescribeDBClusterBacktracks_606985, base: "/",
    url: url_PostDescribeDBClusterBacktracks_606986,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterBacktracks_606964 = ref object of OpenApiRestCall_604389
proc url_GetDescribeDBClusterBacktracks_606966(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterBacktracks_606965(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackIdentifier: JString
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_606967 = query.getOrDefault("Marker")
  valid_606967 = validateParameter(valid_606967, JString, required = false,
                                 default = nil)
  if valid_606967 != nil:
    section.add "Marker", valid_606967
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_606968 = query.getOrDefault("DBClusterIdentifier")
  valid_606968 = validateParameter(valid_606968, JString, required = true,
                                 default = nil)
  if valid_606968 != nil:
    section.add "DBClusterIdentifier", valid_606968
  var valid_606969 = query.getOrDefault("BacktrackIdentifier")
  valid_606969 = validateParameter(valid_606969, JString, required = false,
                                 default = nil)
  if valid_606969 != nil:
    section.add "BacktrackIdentifier", valid_606969
  var valid_606970 = query.getOrDefault("Action")
  valid_606970 = validateParameter(valid_606970, JString, required = true, default = newJString(
      "DescribeDBClusterBacktracks"))
  if valid_606970 != nil:
    section.add "Action", valid_606970
  var valid_606971 = query.getOrDefault("Version")
  valid_606971 = validateParameter(valid_606971, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_606971 != nil:
    section.add "Version", valid_606971
  var valid_606972 = query.getOrDefault("Filters")
  valid_606972 = validateParameter(valid_606972, JArray, required = false,
                                 default = nil)
  if valid_606972 != nil:
    section.add "Filters", valid_606972
  var valid_606973 = query.getOrDefault("MaxRecords")
  valid_606973 = validateParameter(valid_606973, JInt, required = false, default = nil)
  if valid_606973 != nil:
    section.add "MaxRecords", valid_606973
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_606974 = header.getOrDefault("X-Amz-Signature")
  valid_606974 = validateParameter(valid_606974, JString, required = false,
                                 default = nil)
  if valid_606974 != nil:
    section.add "X-Amz-Signature", valid_606974
  var valid_606975 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_606975 = validateParameter(valid_606975, JString, required = false,
                                 default = nil)
  if valid_606975 != nil:
    section.add "X-Amz-Content-Sha256", valid_606975
  var valid_606976 = header.getOrDefault("X-Amz-Date")
  valid_606976 = validateParameter(valid_606976, JString, required = false,
                                 default = nil)
  if valid_606976 != nil:
    section.add "X-Amz-Date", valid_606976
  var valid_606977 = header.getOrDefault("X-Amz-Credential")
  valid_606977 = validateParameter(valid_606977, JString, required = false,
                                 default = nil)
  if valid_606977 != nil:
    section.add "X-Amz-Credential", valid_606977
  var valid_606978 = header.getOrDefault("X-Amz-Security-Token")
  valid_606978 = validateParameter(valid_606978, JString, required = false,
                                 default = nil)
  if valid_606978 != nil:
    section.add "X-Amz-Security-Token", valid_606978
  var valid_606979 = header.getOrDefault("X-Amz-Algorithm")
  valid_606979 = validateParameter(valid_606979, JString, required = false,
                                 default = nil)
  if valid_606979 != nil:
    section.add "X-Amz-Algorithm", valid_606979
  var valid_606980 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_606980 = validateParameter(valid_606980, JString, required = false,
                                 default = nil)
  if valid_606980 != nil:
    section.add "X-Amz-SignedHeaders", valid_606980
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_606981: Call_GetDescribeDBClusterBacktracks_606964; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_606981.validator(path, query, header, formData, body)
  let scheme = call_606981.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_606981.url(scheme.get, call_606981.host, call_606981.base,
                         call_606981.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_606981, url, valid)

proc call*(call_606982: Call_GetDescribeDBClusterBacktracks_606964;
          DBClusterIdentifier: string; Marker: string = "";
          BacktrackIdentifier: string = "";
          Action: string = "DescribeDBClusterBacktracks";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterBacktracks
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackIdentifier: string
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_606983 = newJObject()
  add(query_606983, "Marker", newJString(Marker))
  add(query_606983, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_606983, "BacktrackIdentifier", newJString(BacktrackIdentifier))
  add(query_606983, "Action", newJString(Action))
  add(query_606983, "Version", newJString(Version))
  if Filters != nil:
    query_606983.add "Filters", Filters
  add(query_606983, "MaxRecords", newJInt(MaxRecords))
  result = call_606982.call(nil, query_606983, nil, nil, nil)

var getDescribeDBClusterBacktracks* = Call_GetDescribeDBClusterBacktracks_606964(
    name: "getDescribeDBClusterBacktracks", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterBacktracks",
    validator: validate_GetDescribeDBClusterBacktracks_606965, base: "/",
    url: url_GetDescribeDBClusterBacktracks_606966,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterEndpoints_607025 = ref object of OpenApiRestCall_604389
proc url_PostDescribeDBClusterEndpoints_607027(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterEndpoints_607026(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607028 = query.getOrDefault("Action")
  valid_607028 = validateParameter(valid_607028, JString, required = true, default = newJString(
      "DescribeDBClusterEndpoints"))
  if valid_607028 != nil:
    section.add "Action", valid_607028
  var valid_607029 = query.getOrDefault("Version")
  valid_607029 = validateParameter(valid_607029, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607029 != nil:
    section.add "Version", valid_607029
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607030 = header.getOrDefault("X-Amz-Signature")
  valid_607030 = validateParameter(valid_607030, JString, required = false,
                                 default = nil)
  if valid_607030 != nil:
    section.add "X-Amz-Signature", valid_607030
  var valid_607031 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607031 = validateParameter(valid_607031, JString, required = false,
                                 default = nil)
  if valid_607031 != nil:
    section.add "X-Amz-Content-Sha256", valid_607031
  var valid_607032 = header.getOrDefault("X-Amz-Date")
  valid_607032 = validateParameter(valid_607032, JString, required = false,
                                 default = nil)
  if valid_607032 != nil:
    section.add "X-Amz-Date", valid_607032
  var valid_607033 = header.getOrDefault("X-Amz-Credential")
  valid_607033 = validateParameter(valid_607033, JString, required = false,
                                 default = nil)
  if valid_607033 != nil:
    section.add "X-Amz-Credential", valid_607033
  var valid_607034 = header.getOrDefault("X-Amz-Security-Token")
  valid_607034 = validateParameter(valid_607034, JString, required = false,
                                 default = nil)
  if valid_607034 != nil:
    section.add "X-Amz-Security-Token", valid_607034
  var valid_607035 = header.getOrDefault("X-Amz-Algorithm")
  valid_607035 = validateParameter(valid_607035, JString, required = false,
                                 default = nil)
  if valid_607035 != nil:
    section.add "X-Amz-Algorithm", valid_607035
  var valid_607036 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607036 = validateParameter(valid_607036, JString, required = false,
                                 default = nil)
  if valid_607036 != nil:
    section.add "X-Amz-SignedHeaders", valid_607036
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterEndpointIdentifier: JString
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   DBClusterIdentifier: JString
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  var valid_607037 = formData.getOrDefault("MaxRecords")
  valid_607037 = validateParameter(valid_607037, JInt, required = false, default = nil)
  if valid_607037 != nil:
    section.add "MaxRecords", valid_607037
  var valid_607038 = formData.getOrDefault("Marker")
  valid_607038 = validateParameter(valid_607038, JString, required = false,
                                 default = nil)
  if valid_607038 != nil:
    section.add "Marker", valid_607038
  var valid_607039 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_607039 = validateParameter(valid_607039, JString, required = false,
                                 default = nil)
  if valid_607039 != nil:
    section.add "DBClusterEndpointIdentifier", valid_607039
  var valid_607040 = formData.getOrDefault("Filters")
  valid_607040 = validateParameter(valid_607040, JArray, required = false,
                                 default = nil)
  if valid_607040 != nil:
    section.add "Filters", valid_607040
  var valid_607041 = formData.getOrDefault("DBClusterIdentifier")
  valid_607041 = validateParameter(valid_607041, JString, required = false,
                                 default = nil)
  if valid_607041 != nil:
    section.add "DBClusterIdentifier", valid_607041
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607042: Call_PostDescribeDBClusterEndpoints_607025; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607042.validator(path, query, header, formData, body)
  let scheme = call_607042.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607042.url(scheme.get, call_607042.host, call_607042.base,
                         call_607042.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607042, url, valid)

proc call*(call_607043: Call_PostDescribeDBClusterEndpoints_607025;
          MaxRecords: int = 0; Marker: string = "";
          DBClusterEndpointIdentifier: string = "";
          Action: string = "DescribeDBClusterEndpoints"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusterEndpoints
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterEndpointIdentifier: string
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  var query_607044 = newJObject()
  var formData_607045 = newJObject()
  add(formData_607045, "MaxRecords", newJInt(MaxRecords))
  add(formData_607045, "Marker", newJString(Marker))
  add(formData_607045, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_607044, "Action", newJString(Action))
  if Filters != nil:
    formData_607045.add "Filters", Filters
  add(query_607044, "Version", newJString(Version))
  add(formData_607045, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_607043.call(nil, query_607044, nil, formData_607045, nil)

var postDescribeDBClusterEndpoints* = Call_PostDescribeDBClusterEndpoints_607025(
    name: "postDescribeDBClusterEndpoints", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterEndpoints",
    validator: validate_PostDescribeDBClusterEndpoints_607026, base: "/",
    url: url_PostDescribeDBClusterEndpoints_607027,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterEndpoints_607005 = ref object of OpenApiRestCall_604389
proc url_GetDescribeDBClusterEndpoints_607007(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterEndpoints_607006(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: JString
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: JString
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607008 = query.getOrDefault("Marker")
  valid_607008 = validateParameter(valid_607008, JString, required = false,
                                 default = nil)
  if valid_607008 != nil:
    section.add "Marker", valid_607008
  var valid_607009 = query.getOrDefault("DBClusterIdentifier")
  valid_607009 = validateParameter(valid_607009, JString, required = false,
                                 default = nil)
  if valid_607009 != nil:
    section.add "DBClusterIdentifier", valid_607009
  var valid_607010 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_607010 = validateParameter(valid_607010, JString, required = false,
                                 default = nil)
  if valid_607010 != nil:
    section.add "DBClusterEndpointIdentifier", valid_607010
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607011 = query.getOrDefault("Action")
  valid_607011 = validateParameter(valid_607011, JString, required = true, default = newJString(
      "DescribeDBClusterEndpoints"))
  if valid_607011 != nil:
    section.add "Action", valid_607011
  var valid_607012 = query.getOrDefault("Version")
  valid_607012 = validateParameter(valid_607012, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607012 != nil:
    section.add "Version", valid_607012
  var valid_607013 = query.getOrDefault("Filters")
  valid_607013 = validateParameter(valid_607013, JArray, required = false,
                                 default = nil)
  if valid_607013 != nil:
    section.add "Filters", valid_607013
  var valid_607014 = query.getOrDefault("MaxRecords")
  valid_607014 = validateParameter(valid_607014, JInt, required = false, default = nil)
  if valid_607014 != nil:
    section.add "MaxRecords", valid_607014
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607015 = header.getOrDefault("X-Amz-Signature")
  valid_607015 = validateParameter(valid_607015, JString, required = false,
                                 default = nil)
  if valid_607015 != nil:
    section.add "X-Amz-Signature", valid_607015
  var valid_607016 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607016 = validateParameter(valid_607016, JString, required = false,
                                 default = nil)
  if valid_607016 != nil:
    section.add "X-Amz-Content-Sha256", valid_607016
  var valid_607017 = header.getOrDefault("X-Amz-Date")
  valid_607017 = validateParameter(valid_607017, JString, required = false,
                                 default = nil)
  if valid_607017 != nil:
    section.add "X-Amz-Date", valid_607017
  var valid_607018 = header.getOrDefault("X-Amz-Credential")
  valid_607018 = validateParameter(valid_607018, JString, required = false,
                                 default = nil)
  if valid_607018 != nil:
    section.add "X-Amz-Credential", valid_607018
  var valid_607019 = header.getOrDefault("X-Amz-Security-Token")
  valid_607019 = validateParameter(valid_607019, JString, required = false,
                                 default = nil)
  if valid_607019 != nil:
    section.add "X-Amz-Security-Token", valid_607019
  var valid_607020 = header.getOrDefault("X-Amz-Algorithm")
  valid_607020 = validateParameter(valid_607020, JString, required = false,
                                 default = nil)
  if valid_607020 != nil:
    section.add "X-Amz-Algorithm", valid_607020
  var valid_607021 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607021 = validateParameter(valid_607021, JString, required = false,
                                 default = nil)
  if valid_607021 != nil:
    section.add "X-Amz-SignedHeaders", valid_607021
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607022: Call_GetDescribeDBClusterEndpoints_607005; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607022.validator(path, query, header, formData, body)
  let scheme = call_607022.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607022.url(scheme.get, call_607022.host, call_607022.base,
                         call_607022.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607022, url, valid)

proc call*(call_607023: Call_GetDescribeDBClusterEndpoints_607005;
          Marker: string = ""; DBClusterIdentifier: string = "";
          DBClusterEndpointIdentifier: string = "";
          Action: string = "DescribeDBClusterEndpoints";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterEndpoints
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: string
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: string
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607024 = newJObject()
  add(query_607024, "Marker", newJString(Marker))
  add(query_607024, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_607024, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_607024, "Action", newJString(Action))
  add(query_607024, "Version", newJString(Version))
  if Filters != nil:
    query_607024.add "Filters", Filters
  add(query_607024, "MaxRecords", newJInt(MaxRecords))
  result = call_607023.call(nil, query_607024, nil, nil, nil)

var getDescribeDBClusterEndpoints* = Call_GetDescribeDBClusterEndpoints_607005(
    name: "getDescribeDBClusterEndpoints", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterEndpoints",
    validator: validate_GetDescribeDBClusterEndpoints_607006, base: "/",
    url: url_GetDescribeDBClusterEndpoints_607007,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameterGroups_607065 = ref object of OpenApiRestCall_604389
proc url_PostDescribeDBClusterParameterGroups_607067(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterParameterGroups_607066(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607068 = query.getOrDefault("Action")
  valid_607068 = validateParameter(valid_607068, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_607068 != nil:
    section.add "Action", valid_607068
  var valid_607069 = query.getOrDefault("Version")
  valid_607069 = validateParameter(valid_607069, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607069 != nil:
    section.add "Version", valid_607069
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607070 = header.getOrDefault("X-Amz-Signature")
  valid_607070 = validateParameter(valid_607070, JString, required = false,
                                 default = nil)
  if valid_607070 != nil:
    section.add "X-Amz-Signature", valid_607070
  var valid_607071 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607071 = validateParameter(valid_607071, JString, required = false,
                                 default = nil)
  if valid_607071 != nil:
    section.add "X-Amz-Content-Sha256", valid_607071
  var valid_607072 = header.getOrDefault("X-Amz-Date")
  valid_607072 = validateParameter(valid_607072, JString, required = false,
                                 default = nil)
  if valid_607072 != nil:
    section.add "X-Amz-Date", valid_607072
  var valid_607073 = header.getOrDefault("X-Amz-Credential")
  valid_607073 = validateParameter(valid_607073, JString, required = false,
                                 default = nil)
  if valid_607073 != nil:
    section.add "X-Amz-Credential", valid_607073
  var valid_607074 = header.getOrDefault("X-Amz-Security-Token")
  valid_607074 = validateParameter(valid_607074, JString, required = false,
                                 default = nil)
  if valid_607074 != nil:
    section.add "X-Amz-Security-Token", valid_607074
  var valid_607075 = header.getOrDefault("X-Amz-Algorithm")
  valid_607075 = validateParameter(valid_607075, JString, required = false,
                                 default = nil)
  if valid_607075 != nil:
    section.add "X-Amz-Algorithm", valid_607075
  var valid_607076 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607076 = validateParameter(valid_607076, JString, required = false,
                                 default = nil)
  if valid_607076 != nil:
    section.add "X-Amz-SignedHeaders", valid_607076
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  section = newJObject()
  var valid_607077 = formData.getOrDefault("MaxRecords")
  valid_607077 = validateParameter(valid_607077, JInt, required = false, default = nil)
  if valid_607077 != nil:
    section.add "MaxRecords", valid_607077
  var valid_607078 = formData.getOrDefault("Marker")
  valid_607078 = validateParameter(valid_607078, JString, required = false,
                                 default = nil)
  if valid_607078 != nil:
    section.add "Marker", valid_607078
  var valid_607079 = formData.getOrDefault("Filters")
  valid_607079 = validateParameter(valid_607079, JArray, required = false,
                                 default = nil)
  if valid_607079 != nil:
    section.add "Filters", valid_607079
  var valid_607080 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_607080 = validateParameter(valid_607080, JString, required = false,
                                 default = nil)
  if valid_607080 != nil:
    section.add "DBClusterParameterGroupName", valid_607080
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607081: Call_PostDescribeDBClusterParameterGroups_607065;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607081.validator(path, query, header, formData, body)
  let scheme = call_607081.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607081.url(scheme.get, call_607081.host, call_607081.base,
                         call_607081.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607081, url, valid)

proc call*(call_607082: Call_PostDescribeDBClusterParameterGroups_607065;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterParameterGroups";
          Filters: JsonNode = nil; DBClusterParameterGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameterGroups
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  var query_607083 = newJObject()
  var formData_607084 = newJObject()
  add(formData_607084, "MaxRecords", newJInt(MaxRecords))
  add(formData_607084, "Marker", newJString(Marker))
  add(query_607083, "Action", newJString(Action))
  if Filters != nil:
    formData_607084.add "Filters", Filters
  add(formData_607084, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_607083, "Version", newJString(Version))
  result = call_607082.call(nil, query_607083, nil, formData_607084, nil)

var postDescribeDBClusterParameterGroups* = Call_PostDescribeDBClusterParameterGroups_607065(
    name: "postDescribeDBClusterParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_PostDescribeDBClusterParameterGroups_607066, base: "/",
    url: url_PostDescribeDBClusterParameterGroups_607067,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameterGroups_607046 = ref object of OpenApiRestCall_604389
proc url_GetDescribeDBClusterParameterGroups_607048(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterParameterGroups_607047(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607049 = query.getOrDefault("Marker")
  valid_607049 = validateParameter(valid_607049, JString, required = false,
                                 default = nil)
  if valid_607049 != nil:
    section.add "Marker", valid_607049
  var valid_607050 = query.getOrDefault("DBClusterParameterGroupName")
  valid_607050 = validateParameter(valid_607050, JString, required = false,
                                 default = nil)
  if valid_607050 != nil:
    section.add "DBClusterParameterGroupName", valid_607050
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607051 = query.getOrDefault("Action")
  valid_607051 = validateParameter(valid_607051, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_607051 != nil:
    section.add "Action", valid_607051
  var valid_607052 = query.getOrDefault("Version")
  valid_607052 = validateParameter(valid_607052, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607052 != nil:
    section.add "Version", valid_607052
  var valid_607053 = query.getOrDefault("Filters")
  valid_607053 = validateParameter(valid_607053, JArray, required = false,
                                 default = nil)
  if valid_607053 != nil:
    section.add "Filters", valid_607053
  var valid_607054 = query.getOrDefault("MaxRecords")
  valid_607054 = validateParameter(valid_607054, JInt, required = false, default = nil)
  if valid_607054 != nil:
    section.add "MaxRecords", valid_607054
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607055 = header.getOrDefault("X-Amz-Signature")
  valid_607055 = validateParameter(valid_607055, JString, required = false,
                                 default = nil)
  if valid_607055 != nil:
    section.add "X-Amz-Signature", valid_607055
  var valid_607056 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607056 = validateParameter(valid_607056, JString, required = false,
                                 default = nil)
  if valid_607056 != nil:
    section.add "X-Amz-Content-Sha256", valid_607056
  var valid_607057 = header.getOrDefault("X-Amz-Date")
  valid_607057 = validateParameter(valid_607057, JString, required = false,
                                 default = nil)
  if valid_607057 != nil:
    section.add "X-Amz-Date", valid_607057
  var valid_607058 = header.getOrDefault("X-Amz-Credential")
  valid_607058 = validateParameter(valid_607058, JString, required = false,
                                 default = nil)
  if valid_607058 != nil:
    section.add "X-Amz-Credential", valid_607058
  var valid_607059 = header.getOrDefault("X-Amz-Security-Token")
  valid_607059 = validateParameter(valid_607059, JString, required = false,
                                 default = nil)
  if valid_607059 != nil:
    section.add "X-Amz-Security-Token", valid_607059
  var valid_607060 = header.getOrDefault("X-Amz-Algorithm")
  valid_607060 = validateParameter(valid_607060, JString, required = false,
                                 default = nil)
  if valid_607060 != nil:
    section.add "X-Amz-Algorithm", valid_607060
  var valid_607061 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607061 = validateParameter(valid_607061, JString, required = false,
                                 default = nil)
  if valid_607061 != nil:
    section.add "X-Amz-SignedHeaders", valid_607061
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607062: Call_GetDescribeDBClusterParameterGroups_607046;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607062.validator(path, query, header, formData, body)
  let scheme = call_607062.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607062.url(scheme.get, call_607062.host, call_607062.base,
                         call_607062.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607062, url, valid)

proc call*(call_607063: Call_GetDescribeDBClusterParameterGroups_607046;
          Marker: string = ""; DBClusterParameterGroupName: string = "";
          Action: string = "DescribeDBClusterParameterGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterParameterGroups
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607064 = newJObject()
  add(query_607064, "Marker", newJString(Marker))
  add(query_607064, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_607064, "Action", newJString(Action))
  add(query_607064, "Version", newJString(Version))
  if Filters != nil:
    query_607064.add "Filters", Filters
  add(query_607064, "MaxRecords", newJInt(MaxRecords))
  result = call_607063.call(nil, query_607064, nil, nil, nil)

var getDescribeDBClusterParameterGroups* = Call_GetDescribeDBClusterParameterGroups_607046(
    name: "getDescribeDBClusterParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_GetDescribeDBClusterParameterGroups_607047, base: "/",
    url: url_GetDescribeDBClusterParameterGroups_607048,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameters_607105 = ref object of OpenApiRestCall_604389
proc url_PostDescribeDBClusterParameters_607107(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterParameters_607106(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607108 = query.getOrDefault("Action")
  valid_607108 = validateParameter(valid_607108, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_607108 != nil:
    section.add "Action", valid_607108
  var valid_607109 = query.getOrDefault("Version")
  valid_607109 = validateParameter(valid_607109, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607109 != nil:
    section.add "Version", valid_607109
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607110 = header.getOrDefault("X-Amz-Signature")
  valid_607110 = validateParameter(valid_607110, JString, required = false,
                                 default = nil)
  if valid_607110 != nil:
    section.add "X-Amz-Signature", valid_607110
  var valid_607111 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607111 = validateParameter(valid_607111, JString, required = false,
                                 default = nil)
  if valid_607111 != nil:
    section.add "X-Amz-Content-Sha256", valid_607111
  var valid_607112 = header.getOrDefault("X-Amz-Date")
  valid_607112 = validateParameter(valid_607112, JString, required = false,
                                 default = nil)
  if valid_607112 != nil:
    section.add "X-Amz-Date", valid_607112
  var valid_607113 = header.getOrDefault("X-Amz-Credential")
  valid_607113 = validateParameter(valid_607113, JString, required = false,
                                 default = nil)
  if valid_607113 != nil:
    section.add "X-Amz-Credential", valid_607113
  var valid_607114 = header.getOrDefault("X-Amz-Security-Token")
  valid_607114 = validateParameter(valid_607114, JString, required = false,
                                 default = nil)
  if valid_607114 != nil:
    section.add "X-Amz-Security-Token", valid_607114
  var valid_607115 = header.getOrDefault("X-Amz-Algorithm")
  valid_607115 = validateParameter(valid_607115, JString, required = false,
                                 default = nil)
  if valid_607115 != nil:
    section.add "X-Amz-Algorithm", valid_607115
  var valid_607116 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607116 = validateParameter(valid_607116, JString, required = false,
                                 default = nil)
  if valid_607116 != nil:
    section.add "X-Amz-SignedHeaders", valid_607116
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  section = newJObject()
  var valid_607117 = formData.getOrDefault("Source")
  valid_607117 = validateParameter(valid_607117, JString, required = false,
                                 default = nil)
  if valid_607117 != nil:
    section.add "Source", valid_607117
  var valid_607118 = formData.getOrDefault("MaxRecords")
  valid_607118 = validateParameter(valid_607118, JInt, required = false, default = nil)
  if valid_607118 != nil:
    section.add "MaxRecords", valid_607118
  var valid_607119 = formData.getOrDefault("Marker")
  valid_607119 = validateParameter(valid_607119, JString, required = false,
                                 default = nil)
  if valid_607119 != nil:
    section.add "Marker", valid_607119
  var valid_607120 = formData.getOrDefault("Filters")
  valid_607120 = validateParameter(valid_607120, JArray, required = false,
                                 default = nil)
  if valid_607120 != nil:
    section.add "Filters", valid_607120
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_607121 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_607121 = validateParameter(valid_607121, JString, required = true,
                                 default = nil)
  if valid_607121 != nil:
    section.add "DBClusterParameterGroupName", valid_607121
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607122: Call_PostDescribeDBClusterParameters_607105;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607122.validator(path, query, header, formData, body)
  let scheme = call_607122.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607122.url(scheme.get, call_607122.host, call_607122.base,
                         call_607122.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607122, url, valid)

proc call*(call_607123: Call_PostDescribeDBClusterParameters_607105;
          DBClusterParameterGroupName: string; Source: string = "";
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBClusterParameters"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameters
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  var query_607124 = newJObject()
  var formData_607125 = newJObject()
  add(formData_607125, "Source", newJString(Source))
  add(formData_607125, "MaxRecords", newJInt(MaxRecords))
  add(formData_607125, "Marker", newJString(Marker))
  add(query_607124, "Action", newJString(Action))
  if Filters != nil:
    formData_607125.add "Filters", Filters
  add(formData_607125, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_607124, "Version", newJString(Version))
  result = call_607123.call(nil, query_607124, nil, formData_607125, nil)

var postDescribeDBClusterParameters* = Call_PostDescribeDBClusterParameters_607105(
    name: "postDescribeDBClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_PostDescribeDBClusterParameters_607106, base: "/",
    url: url_PostDescribeDBClusterParameters_607107,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameters_607085 = ref object of OpenApiRestCall_604389
proc url_GetDescribeDBClusterParameters_607087(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterParameters_607086(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607088 = query.getOrDefault("Marker")
  valid_607088 = validateParameter(valid_607088, JString, required = false,
                                 default = nil)
  if valid_607088 != nil:
    section.add "Marker", valid_607088
  var valid_607089 = query.getOrDefault("Source")
  valid_607089 = validateParameter(valid_607089, JString, required = false,
                                 default = nil)
  if valid_607089 != nil:
    section.add "Source", valid_607089
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_607090 = query.getOrDefault("DBClusterParameterGroupName")
  valid_607090 = validateParameter(valid_607090, JString, required = true,
                                 default = nil)
  if valid_607090 != nil:
    section.add "DBClusterParameterGroupName", valid_607090
  var valid_607091 = query.getOrDefault("Action")
  valid_607091 = validateParameter(valid_607091, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_607091 != nil:
    section.add "Action", valid_607091
  var valid_607092 = query.getOrDefault("Version")
  valid_607092 = validateParameter(valid_607092, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607092 != nil:
    section.add "Version", valid_607092
  var valid_607093 = query.getOrDefault("Filters")
  valid_607093 = validateParameter(valid_607093, JArray, required = false,
                                 default = nil)
  if valid_607093 != nil:
    section.add "Filters", valid_607093
  var valid_607094 = query.getOrDefault("MaxRecords")
  valid_607094 = validateParameter(valid_607094, JInt, required = false, default = nil)
  if valid_607094 != nil:
    section.add "MaxRecords", valid_607094
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607095 = header.getOrDefault("X-Amz-Signature")
  valid_607095 = validateParameter(valid_607095, JString, required = false,
                                 default = nil)
  if valid_607095 != nil:
    section.add "X-Amz-Signature", valid_607095
  var valid_607096 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607096 = validateParameter(valid_607096, JString, required = false,
                                 default = nil)
  if valid_607096 != nil:
    section.add "X-Amz-Content-Sha256", valid_607096
  var valid_607097 = header.getOrDefault("X-Amz-Date")
  valid_607097 = validateParameter(valid_607097, JString, required = false,
                                 default = nil)
  if valid_607097 != nil:
    section.add "X-Amz-Date", valid_607097
  var valid_607098 = header.getOrDefault("X-Amz-Credential")
  valid_607098 = validateParameter(valid_607098, JString, required = false,
                                 default = nil)
  if valid_607098 != nil:
    section.add "X-Amz-Credential", valid_607098
  var valid_607099 = header.getOrDefault("X-Amz-Security-Token")
  valid_607099 = validateParameter(valid_607099, JString, required = false,
                                 default = nil)
  if valid_607099 != nil:
    section.add "X-Amz-Security-Token", valid_607099
  var valid_607100 = header.getOrDefault("X-Amz-Algorithm")
  valid_607100 = validateParameter(valid_607100, JString, required = false,
                                 default = nil)
  if valid_607100 != nil:
    section.add "X-Amz-Algorithm", valid_607100
  var valid_607101 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607101 = validateParameter(valid_607101, JString, required = false,
                                 default = nil)
  if valid_607101 != nil:
    section.add "X-Amz-SignedHeaders", valid_607101
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607102: Call_GetDescribeDBClusterParameters_607085; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607102.validator(path, query, header, formData, body)
  let scheme = call_607102.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607102.url(scheme.get, call_607102.host, call_607102.base,
                         call_607102.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607102, url, valid)

proc call*(call_607103: Call_GetDescribeDBClusterParameters_607085;
          DBClusterParameterGroupName: string; Marker: string = "";
          Source: string = ""; Action: string = "DescribeDBClusterParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterParameters
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607104 = newJObject()
  add(query_607104, "Marker", newJString(Marker))
  add(query_607104, "Source", newJString(Source))
  add(query_607104, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_607104, "Action", newJString(Action))
  add(query_607104, "Version", newJString(Version))
  if Filters != nil:
    query_607104.add "Filters", Filters
  add(query_607104, "MaxRecords", newJInt(MaxRecords))
  result = call_607103.call(nil, query_607104, nil, nil, nil)

var getDescribeDBClusterParameters* = Call_GetDescribeDBClusterParameters_607085(
    name: "getDescribeDBClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_GetDescribeDBClusterParameters_607086, base: "/",
    url: url_GetDescribeDBClusterParameters_607087,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshotAttributes_607142 = ref object of OpenApiRestCall_604389
proc url_PostDescribeDBClusterSnapshotAttributes_607144(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterSnapshotAttributes_607143(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607145 = query.getOrDefault("Action")
  valid_607145 = validateParameter(valid_607145, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_607145 != nil:
    section.add "Action", valid_607145
  var valid_607146 = query.getOrDefault("Version")
  valid_607146 = validateParameter(valid_607146, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607146 != nil:
    section.add "Version", valid_607146
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607147 = header.getOrDefault("X-Amz-Signature")
  valid_607147 = validateParameter(valid_607147, JString, required = false,
                                 default = nil)
  if valid_607147 != nil:
    section.add "X-Amz-Signature", valid_607147
  var valid_607148 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607148 = validateParameter(valid_607148, JString, required = false,
                                 default = nil)
  if valid_607148 != nil:
    section.add "X-Amz-Content-Sha256", valid_607148
  var valid_607149 = header.getOrDefault("X-Amz-Date")
  valid_607149 = validateParameter(valid_607149, JString, required = false,
                                 default = nil)
  if valid_607149 != nil:
    section.add "X-Amz-Date", valid_607149
  var valid_607150 = header.getOrDefault("X-Amz-Credential")
  valid_607150 = validateParameter(valid_607150, JString, required = false,
                                 default = nil)
  if valid_607150 != nil:
    section.add "X-Amz-Credential", valid_607150
  var valid_607151 = header.getOrDefault("X-Amz-Security-Token")
  valid_607151 = validateParameter(valid_607151, JString, required = false,
                                 default = nil)
  if valid_607151 != nil:
    section.add "X-Amz-Security-Token", valid_607151
  var valid_607152 = header.getOrDefault("X-Amz-Algorithm")
  valid_607152 = validateParameter(valid_607152, JString, required = false,
                                 default = nil)
  if valid_607152 != nil:
    section.add "X-Amz-Algorithm", valid_607152
  var valid_607153 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607153 = validateParameter(valid_607153, JString, required = false,
                                 default = nil)
  if valid_607153 != nil:
    section.add "X-Amz-SignedHeaders", valid_607153
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_607154 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_607154 = validateParameter(valid_607154, JString, required = true,
                                 default = nil)
  if valid_607154 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_607154
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607155: Call_PostDescribeDBClusterSnapshotAttributes_607142;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607155.validator(path, query, header, formData, body)
  let scheme = call_607155.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607155.url(scheme.get, call_607155.host, call_607155.base,
                         call_607155.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607155, url, valid)

proc call*(call_607156: Call_PostDescribeDBClusterSnapshotAttributes_607142;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607157 = newJObject()
  var formData_607158 = newJObject()
  add(formData_607158, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_607157, "Action", newJString(Action))
  add(query_607157, "Version", newJString(Version))
  result = call_607156.call(nil, query_607157, nil, formData_607158, nil)

var postDescribeDBClusterSnapshotAttributes* = Call_PostDescribeDBClusterSnapshotAttributes_607142(
    name: "postDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_PostDescribeDBClusterSnapshotAttributes_607143, base: "/",
    url: url_PostDescribeDBClusterSnapshotAttributes_607144,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshotAttributes_607126 = ref object of OpenApiRestCall_604389
proc url_GetDescribeDBClusterSnapshotAttributes_607128(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterSnapshotAttributes_607127(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_607129 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_607129 = validateParameter(valid_607129, JString, required = true,
                                 default = nil)
  if valid_607129 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_607129
  var valid_607130 = query.getOrDefault("Action")
  valid_607130 = validateParameter(valid_607130, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_607130 != nil:
    section.add "Action", valid_607130
  var valid_607131 = query.getOrDefault("Version")
  valid_607131 = validateParameter(valid_607131, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607131 != nil:
    section.add "Version", valid_607131
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607132 = header.getOrDefault("X-Amz-Signature")
  valid_607132 = validateParameter(valid_607132, JString, required = false,
                                 default = nil)
  if valid_607132 != nil:
    section.add "X-Amz-Signature", valid_607132
  var valid_607133 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607133 = validateParameter(valid_607133, JString, required = false,
                                 default = nil)
  if valid_607133 != nil:
    section.add "X-Amz-Content-Sha256", valid_607133
  var valid_607134 = header.getOrDefault("X-Amz-Date")
  valid_607134 = validateParameter(valid_607134, JString, required = false,
                                 default = nil)
  if valid_607134 != nil:
    section.add "X-Amz-Date", valid_607134
  var valid_607135 = header.getOrDefault("X-Amz-Credential")
  valid_607135 = validateParameter(valid_607135, JString, required = false,
                                 default = nil)
  if valid_607135 != nil:
    section.add "X-Amz-Credential", valid_607135
  var valid_607136 = header.getOrDefault("X-Amz-Security-Token")
  valid_607136 = validateParameter(valid_607136, JString, required = false,
                                 default = nil)
  if valid_607136 != nil:
    section.add "X-Amz-Security-Token", valid_607136
  var valid_607137 = header.getOrDefault("X-Amz-Algorithm")
  valid_607137 = validateParameter(valid_607137, JString, required = false,
                                 default = nil)
  if valid_607137 != nil:
    section.add "X-Amz-Algorithm", valid_607137
  var valid_607138 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607138 = validateParameter(valid_607138, JString, required = false,
                                 default = nil)
  if valid_607138 != nil:
    section.add "X-Amz-SignedHeaders", valid_607138
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607139: Call_GetDescribeDBClusterSnapshotAttributes_607126;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607139.validator(path, query, header, formData, body)
  let scheme = call_607139.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607139.url(scheme.get, call_607139.host, call_607139.base,
                         call_607139.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607139, url, valid)

proc call*(call_607140: Call_GetDescribeDBClusterSnapshotAttributes_607126;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607141 = newJObject()
  add(query_607141, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_607141, "Action", newJString(Action))
  add(query_607141, "Version", newJString(Version))
  result = call_607140.call(nil, query_607141, nil, nil, nil)

var getDescribeDBClusterSnapshotAttributes* = Call_GetDescribeDBClusterSnapshotAttributes_607126(
    name: "getDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_GetDescribeDBClusterSnapshotAttributes_607127, base: "/",
    url: url_GetDescribeDBClusterSnapshotAttributes_607128,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshots_607182 = ref object of OpenApiRestCall_604389
proc url_PostDescribeDBClusterSnapshots_607184(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterSnapshots_607183(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607185 = query.getOrDefault("Action")
  valid_607185 = validateParameter(valid_607185, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_607185 != nil:
    section.add "Action", valid_607185
  var valid_607186 = query.getOrDefault("Version")
  valid_607186 = validateParameter(valid_607186, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607186 != nil:
    section.add "Version", valid_607186
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607187 = header.getOrDefault("X-Amz-Signature")
  valid_607187 = validateParameter(valid_607187, JString, required = false,
                                 default = nil)
  if valid_607187 != nil:
    section.add "X-Amz-Signature", valid_607187
  var valid_607188 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607188 = validateParameter(valid_607188, JString, required = false,
                                 default = nil)
  if valid_607188 != nil:
    section.add "X-Amz-Content-Sha256", valid_607188
  var valid_607189 = header.getOrDefault("X-Amz-Date")
  valid_607189 = validateParameter(valid_607189, JString, required = false,
                                 default = nil)
  if valid_607189 != nil:
    section.add "X-Amz-Date", valid_607189
  var valid_607190 = header.getOrDefault("X-Amz-Credential")
  valid_607190 = validateParameter(valid_607190, JString, required = false,
                                 default = nil)
  if valid_607190 != nil:
    section.add "X-Amz-Credential", valid_607190
  var valid_607191 = header.getOrDefault("X-Amz-Security-Token")
  valid_607191 = validateParameter(valid_607191, JString, required = false,
                                 default = nil)
  if valid_607191 != nil:
    section.add "X-Amz-Security-Token", valid_607191
  var valid_607192 = header.getOrDefault("X-Amz-Algorithm")
  valid_607192 = validateParameter(valid_607192, JString, required = false,
                                 default = nil)
  if valid_607192 != nil:
    section.add "X-Amz-Algorithm", valid_607192
  var valid_607193 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607193 = validateParameter(valid_607193, JString, required = false,
                                 default = nil)
  if valid_607193 != nil:
    section.add "X-Amz-SignedHeaders", valid_607193
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_607194 = formData.getOrDefault("SnapshotType")
  valid_607194 = validateParameter(valid_607194, JString, required = false,
                                 default = nil)
  if valid_607194 != nil:
    section.add "SnapshotType", valid_607194
  var valid_607195 = formData.getOrDefault("MaxRecords")
  valid_607195 = validateParameter(valid_607195, JInt, required = false, default = nil)
  if valid_607195 != nil:
    section.add "MaxRecords", valid_607195
  var valid_607196 = formData.getOrDefault("IncludePublic")
  valid_607196 = validateParameter(valid_607196, JBool, required = false, default = nil)
  if valid_607196 != nil:
    section.add "IncludePublic", valid_607196
  var valid_607197 = formData.getOrDefault("Marker")
  valid_607197 = validateParameter(valid_607197, JString, required = false,
                                 default = nil)
  if valid_607197 != nil:
    section.add "Marker", valid_607197
  var valid_607198 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_607198 = validateParameter(valid_607198, JString, required = false,
                                 default = nil)
  if valid_607198 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_607198
  var valid_607199 = formData.getOrDefault("IncludeShared")
  valid_607199 = validateParameter(valid_607199, JBool, required = false, default = nil)
  if valid_607199 != nil:
    section.add "IncludeShared", valid_607199
  var valid_607200 = formData.getOrDefault("Filters")
  valid_607200 = validateParameter(valid_607200, JArray, required = false,
                                 default = nil)
  if valid_607200 != nil:
    section.add "Filters", valid_607200
  var valid_607201 = formData.getOrDefault("DBClusterIdentifier")
  valid_607201 = validateParameter(valid_607201, JString, required = false,
                                 default = nil)
  if valid_607201 != nil:
    section.add "DBClusterIdentifier", valid_607201
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607202: Call_PostDescribeDBClusterSnapshots_607182; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607202.validator(path, query, header, formData, body)
  let scheme = call_607202.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607202.url(scheme.get, call_607202.host, call_607202.base,
                         call_607202.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607202, url, valid)

proc call*(call_607203: Call_PostDescribeDBClusterSnapshots_607182;
          SnapshotType: string = ""; MaxRecords: int = 0; IncludePublic: bool = false;
          Marker: string = ""; DBClusterSnapshotIdentifier: string = "";
          IncludeShared: bool = false;
          Action: string = "DescribeDBClusterSnapshots"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusterSnapshots
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  var query_607204 = newJObject()
  var formData_607205 = newJObject()
  add(formData_607205, "SnapshotType", newJString(SnapshotType))
  add(formData_607205, "MaxRecords", newJInt(MaxRecords))
  add(formData_607205, "IncludePublic", newJBool(IncludePublic))
  add(formData_607205, "Marker", newJString(Marker))
  add(formData_607205, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(formData_607205, "IncludeShared", newJBool(IncludeShared))
  add(query_607204, "Action", newJString(Action))
  if Filters != nil:
    formData_607205.add "Filters", Filters
  add(query_607204, "Version", newJString(Version))
  add(formData_607205, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_607203.call(nil, query_607204, nil, formData_607205, nil)

var postDescribeDBClusterSnapshots* = Call_PostDescribeDBClusterSnapshots_607182(
    name: "postDescribeDBClusterSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_PostDescribeDBClusterSnapshots_607183, base: "/",
    url: url_PostDescribeDBClusterSnapshots_607184,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshots_607159 = ref object of OpenApiRestCall_604389
proc url_GetDescribeDBClusterSnapshots_607161(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterSnapshots_607160(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607162 = query.getOrDefault("Marker")
  valid_607162 = validateParameter(valid_607162, JString, required = false,
                                 default = nil)
  if valid_607162 != nil:
    section.add "Marker", valid_607162
  var valid_607163 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_607163 = validateParameter(valid_607163, JString, required = false,
                                 default = nil)
  if valid_607163 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_607163
  var valid_607164 = query.getOrDefault("DBClusterIdentifier")
  valid_607164 = validateParameter(valid_607164, JString, required = false,
                                 default = nil)
  if valid_607164 != nil:
    section.add "DBClusterIdentifier", valid_607164
  var valid_607165 = query.getOrDefault("SnapshotType")
  valid_607165 = validateParameter(valid_607165, JString, required = false,
                                 default = nil)
  if valid_607165 != nil:
    section.add "SnapshotType", valid_607165
  var valid_607166 = query.getOrDefault("IncludePublic")
  valid_607166 = validateParameter(valid_607166, JBool, required = false, default = nil)
  if valid_607166 != nil:
    section.add "IncludePublic", valid_607166
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607167 = query.getOrDefault("Action")
  valid_607167 = validateParameter(valid_607167, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_607167 != nil:
    section.add "Action", valid_607167
  var valid_607168 = query.getOrDefault("IncludeShared")
  valid_607168 = validateParameter(valid_607168, JBool, required = false, default = nil)
  if valid_607168 != nil:
    section.add "IncludeShared", valid_607168
  var valid_607169 = query.getOrDefault("Version")
  valid_607169 = validateParameter(valid_607169, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607169 != nil:
    section.add "Version", valid_607169
  var valid_607170 = query.getOrDefault("Filters")
  valid_607170 = validateParameter(valid_607170, JArray, required = false,
                                 default = nil)
  if valid_607170 != nil:
    section.add "Filters", valid_607170
  var valid_607171 = query.getOrDefault("MaxRecords")
  valid_607171 = validateParameter(valid_607171, JInt, required = false, default = nil)
  if valid_607171 != nil:
    section.add "MaxRecords", valid_607171
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607172 = header.getOrDefault("X-Amz-Signature")
  valid_607172 = validateParameter(valid_607172, JString, required = false,
                                 default = nil)
  if valid_607172 != nil:
    section.add "X-Amz-Signature", valid_607172
  var valid_607173 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607173 = validateParameter(valid_607173, JString, required = false,
                                 default = nil)
  if valid_607173 != nil:
    section.add "X-Amz-Content-Sha256", valid_607173
  var valid_607174 = header.getOrDefault("X-Amz-Date")
  valid_607174 = validateParameter(valid_607174, JString, required = false,
                                 default = nil)
  if valid_607174 != nil:
    section.add "X-Amz-Date", valid_607174
  var valid_607175 = header.getOrDefault("X-Amz-Credential")
  valid_607175 = validateParameter(valid_607175, JString, required = false,
                                 default = nil)
  if valid_607175 != nil:
    section.add "X-Amz-Credential", valid_607175
  var valid_607176 = header.getOrDefault("X-Amz-Security-Token")
  valid_607176 = validateParameter(valid_607176, JString, required = false,
                                 default = nil)
  if valid_607176 != nil:
    section.add "X-Amz-Security-Token", valid_607176
  var valid_607177 = header.getOrDefault("X-Amz-Algorithm")
  valid_607177 = validateParameter(valid_607177, JString, required = false,
                                 default = nil)
  if valid_607177 != nil:
    section.add "X-Amz-Algorithm", valid_607177
  var valid_607178 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607178 = validateParameter(valid_607178, JString, required = false,
                                 default = nil)
  if valid_607178 != nil:
    section.add "X-Amz-SignedHeaders", valid_607178
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607179: Call_GetDescribeDBClusterSnapshots_607159; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_607179.validator(path, query, header, formData, body)
  let scheme = call_607179.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607179.url(scheme.get, call_607179.host, call_607179.base,
                         call_607179.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607179, url, valid)

proc call*(call_607180: Call_GetDescribeDBClusterSnapshots_607159;
          Marker: string = ""; DBClusterSnapshotIdentifier: string = "";
          DBClusterIdentifier: string = ""; SnapshotType: string = "";
          IncludePublic: bool = false;
          Action: string = "DescribeDBClusterSnapshots";
          IncludeShared: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusterSnapshots
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607181 = newJObject()
  add(query_607181, "Marker", newJString(Marker))
  add(query_607181, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_607181, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_607181, "SnapshotType", newJString(SnapshotType))
  add(query_607181, "IncludePublic", newJBool(IncludePublic))
  add(query_607181, "Action", newJString(Action))
  add(query_607181, "IncludeShared", newJBool(IncludeShared))
  add(query_607181, "Version", newJString(Version))
  if Filters != nil:
    query_607181.add "Filters", Filters
  add(query_607181, "MaxRecords", newJInt(MaxRecords))
  result = call_607180.call(nil, query_607181, nil, nil, nil)

var getDescribeDBClusterSnapshots* = Call_GetDescribeDBClusterSnapshots_607159(
    name: "getDescribeDBClusterSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_GetDescribeDBClusterSnapshots_607160, base: "/",
    url: url_GetDescribeDBClusterSnapshots_607161,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusters_607226 = ref object of OpenApiRestCall_604389
proc url_PostDescribeDBClusters_607228(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusters_607227(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607229 = query.getOrDefault("Action")
  valid_607229 = validateParameter(valid_607229, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_607229 != nil:
    section.add "Action", valid_607229
  var valid_607230 = query.getOrDefault("Version")
  valid_607230 = validateParameter(valid_607230, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607230 != nil:
    section.add "Version", valid_607230
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607231 = header.getOrDefault("X-Amz-Signature")
  valid_607231 = validateParameter(valid_607231, JString, required = false,
                                 default = nil)
  if valid_607231 != nil:
    section.add "X-Amz-Signature", valid_607231
  var valid_607232 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607232 = validateParameter(valid_607232, JString, required = false,
                                 default = nil)
  if valid_607232 != nil:
    section.add "X-Amz-Content-Sha256", valid_607232
  var valid_607233 = header.getOrDefault("X-Amz-Date")
  valid_607233 = validateParameter(valid_607233, JString, required = false,
                                 default = nil)
  if valid_607233 != nil:
    section.add "X-Amz-Date", valid_607233
  var valid_607234 = header.getOrDefault("X-Amz-Credential")
  valid_607234 = validateParameter(valid_607234, JString, required = false,
                                 default = nil)
  if valid_607234 != nil:
    section.add "X-Amz-Credential", valid_607234
  var valid_607235 = header.getOrDefault("X-Amz-Security-Token")
  valid_607235 = validateParameter(valid_607235, JString, required = false,
                                 default = nil)
  if valid_607235 != nil:
    section.add "X-Amz-Security-Token", valid_607235
  var valid_607236 = header.getOrDefault("X-Amz-Algorithm")
  valid_607236 = validateParameter(valid_607236, JString, required = false,
                                 default = nil)
  if valid_607236 != nil:
    section.add "X-Amz-Algorithm", valid_607236
  var valid_607237 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607237 = validateParameter(valid_607237, JString, required = false,
                                 default = nil)
  if valid_607237 != nil:
    section.add "X-Amz-SignedHeaders", valid_607237
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeShared: JBool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_607238 = formData.getOrDefault("MaxRecords")
  valid_607238 = validateParameter(valid_607238, JInt, required = false, default = nil)
  if valid_607238 != nil:
    section.add "MaxRecords", valid_607238
  var valid_607239 = formData.getOrDefault("Marker")
  valid_607239 = validateParameter(valid_607239, JString, required = false,
                                 default = nil)
  if valid_607239 != nil:
    section.add "Marker", valid_607239
  var valid_607240 = formData.getOrDefault("IncludeShared")
  valid_607240 = validateParameter(valid_607240, JBool, required = false, default = nil)
  if valid_607240 != nil:
    section.add "IncludeShared", valid_607240
  var valid_607241 = formData.getOrDefault("Filters")
  valid_607241 = validateParameter(valid_607241, JArray, required = false,
                                 default = nil)
  if valid_607241 != nil:
    section.add "Filters", valid_607241
  var valid_607242 = formData.getOrDefault("DBClusterIdentifier")
  valid_607242 = validateParameter(valid_607242, JString, required = false,
                                 default = nil)
  if valid_607242 != nil:
    section.add "DBClusterIdentifier", valid_607242
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607243: Call_PostDescribeDBClusters_607226; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  let valid = call_607243.validator(path, query, header, formData, body)
  let scheme = call_607243.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607243.url(scheme.get, call_607243.host, call_607243.base,
                         call_607243.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607243, url, valid)

proc call*(call_607244: Call_PostDescribeDBClusters_607226; MaxRecords: int = 0;
          Marker: string = ""; IncludeShared: bool = false;
          Action: string = "DescribeDBClusters"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBClusterIdentifier: string = ""): Recallable =
  ## postDescribeDBClusters
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeShared: bool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  var query_607245 = newJObject()
  var formData_607246 = newJObject()
  add(formData_607246, "MaxRecords", newJInt(MaxRecords))
  add(formData_607246, "Marker", newJString(Marker))
  add(formData_607246, "IncludeShared", newJBool(IncludeShared))
  add(query_607245, "Action", newJString(Action))
  if Filters != nil:
    formData_607246.add "Filters", Filters
  add(query_607245, "Version", newJString(Version))
  add(formData_607246, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_607244.call(nil, query_607245, nil, formData_607246, nil)

var postDescribeDBClusters* = Call_PostDescribeDBClusters_607226(
    name: "postDescribeDBClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_PostDescribeDBClusters_607227, base: "/",
    url: url_PostDescribeDBClusters_607228, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusters_607206 = ref object of OpenApiRestCall_604389
proc url_GetDescribeDBClusters_607208(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusters_607207(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607209 = query.getOrDefault("Marker")
  valid_607209 = validateParameter(valid_607209, JString, required = false,
                                 default = nil)
  if valid_607209 != nil:
    section.add "Marker", valid_607209
  var valid_607210 = query.getOrDefault("DBClusterIdentifier")
  valid_607210 = validateParameter(valid_607210, JString, required = false,
                                 default = nil)
  if valid_607210 != nil:
    section.add "DBClusterIdentifier", valid_607210
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607211 = query.getOrDefault("Action")
  valid_607211 = validateParameter(valid_607211, JString, required = true,
                                 default = newJString("DescribeDBClusters"))
  if valid_607211 != nil:
    section.add "Action", valid_607211
  var valid_607212 = query.getOrDefault("IncludeShared")
  valid_607212 = validateParameter(valid_607212, JBool, required = false, default = nil)
  if valid_607212 != nil:
    section.add "IncludeShared", valid_607212
  var valid_607213 = query.getOrDefault("Version")
  valid_607213 = validateParameter(valid_607213, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607213 != nil:
    section.add "Version", valid_607213
  var valid_607214 = query.getOrDefault("Filters")
  valid_607214 = validateParameter(valid_607214, JArray, required = false,
                                 default = nil)
  if valid_607214 != nil:
    section.add "Filters", valid_607214
  var valid_607215 = query.getOrDefault("MaxRecords")
  valid_607215 = validateParameter(valid_607215, JInt, required = false, default = nil)
  if valid_607215 != nil:
    section.add "MaxRecords", valid_607215
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607216 = header.getOrDefault("X-Amz-Signature")
  valid_607216 = validateParameter(valid_607216, JString, required = false,
                                 default = nil)
  if valid_607216 != nil:
    section.add "X-Amz-Signature", valid_607216
  var valid_607217 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607217 = validateParameter(valid_607217, JString, required = false,
                                 default = nil)
  if valid_607217 != nil:
    section.add "X-Amz-Content-Sha256", valid_607217
  var valid_607218 = header.getOrDefault("X-Amz-Date")
  valid_607218 = validateParameter(valid_607218, JString, required = false,
                                 default = nil)
  if valid_607218 != nil:
    section.add "X-Amz-Date", valid_607218
  var valid_607219 = header.getOrDefault("X-Amz-Credential")
  valid_607219 = validateParameter(valid_607219, JString, required = false,
                                 default = nil)
  if valid_607219 != nil:
    section.add "X-Amz-Credential", valid_607219
  var valid_607220 = header.getOrDefault("X-Amz-Security-Token")
  valid_607220 = validateParameter(valid_607220, JString, required = false,
                                 default = nil)
  if valid_607220 != nil:
    section.add "X-Amz-Security-Token", valid_607220
  var valid_607221 = header.getOrDefault("X-Amz-Algorithm")
  valid_607221 = validateParameter(valid_607221, JString, required = false,
                                 default = nil)
  if valid_607221 != nil:
    section.add "X-Amz-Algorithm", valid_607221
  var valid_607222 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607222 = validateParameter(valid_607222, JString, required = false,
                                 default = nil)
  if valid_607222 != nil:
    section.add "X-Amz-SignedHeaders", valid_607222
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607223: Call_GetDescribeDBClusters_607206; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  let valid = call_607223.validator(path, query, header, formData, body)
  let scheme = call_607223.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607223.url(scheme.get, call_607223.host, call_607223.base,
                         call_607223.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607223, url, valid)

proc call*(call_607224: Call_GetDescribeDBClusters_607206; Marker: string = "";
          DBClusterIdentifier: string = ""; Action: string = "DescribeDBClusters";
          IncludeShared: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBClusters
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607225 = newJObject()
  add(query_607225, "Marker", newJString(Marker))
  add(query_607225, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_607225, "Action", newJString(Action))
  add(query_607225, "IncludeShared", newJBool(IncludeShared))
  add(query_607225, "Version", newJString(Version))
  if Filters != nil:
    query_607225.add "Filters", Filters
  add(query_607225, "MaxRecords", newJInt(MaxRecords))
  result = call_607224.call(nil, query_607225, nil, nil, nil)

var getDescribeDBClusters* = Call_GetDescribeDBClusters_607206(
    name: "getDescribeDBClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_GetDescribeDBClusters_607207, base: "/",
    url: url_GetDescribeDBClusters_607208, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBEngineVersions_607272 = ref object of OpenApiRestCall_604389
proc url_PostDescribeDBEngineVersions_607274(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBEngineVersions_607273(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607275 = query.getOrDefault("Action")
  valid_607275 = validateParameter(valid_607275, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_607275 != nil:
    section.add "Action", valid_607275
  var valid_607276 = query.getOrDefault("Version")
  valid_607276 = validateParameter(valid_607276, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607276 != nil:
    section.add "Version", valid_607276
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607277 = header.getOrDefault("X-Amz-Signature")
  valid_607277 = validateParameter(valid_607277, JString, required = false,
                                 default = nil)
  if valid_607277 != nil:
    section.add "X-Amz-Signature", valid_607277
  var valid_607278 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607278 = validateParameter(valid_607278, JString, required = false,
                                 default = nil)
  if valid_607278 != nil:
    section.add "X-Amz-Content-Sha256", valid_607278
  var valid_607279 = header.getOrDefault("X-Amz-Date")
  valid_607279 = validateParameter(valid_607279, JString, required = false,
                                 default = nil)
  if valid_607279 != nil:
    section.add "X-Amz-Date", valid_607279
  var valid_607280 = header.getOrDefault("X-Amz-Credential")
  valid_607280 = validateParameter(valid_607280, JString, required = false,
                                 default = nil)
  if valid_607280 != nil:
    section.add "X-Amz-Credential", valid_607280
  var valid_607281 = header.getOrDefault("X-Amz-Security-Token")
  valid_607281 = validateParameter(valid_607281, JString, required = false,
                                 default = nil)
  if valid_607281 != nil:
    section.add "X-Amz-Security-Token", valid_607281
  var valid_607282 = header.getOrDefault("X-Amz-Algorithm")
  valid_607282 = validateParameter(valid_607282, JString, required = false,
                                 default = nil)
  if valid_607282 != nil:
    section.add "X-Amz-Algorithm", valid_607282
  var valid_607283 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607283 = validateParameter(valid_607283, JString, required = false,
                                 default = nil)
  if valid_607283 != nil:
    section.add "X-Amz-SignedHeaders", valid_607283
  result.add "header", section
  ## parameters in `formData` object:
  ##   DefaultOnly: JBool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeAll: JBool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   Engine: JString
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: JBool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   ListSupportedTimezones: JBool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  section = newJObject()
  var valid_607284 = formData.getOrDefault("DefaultOnly")
  valid_607284 = validateParameter(valid_607284, JBool, required = false, default = nil)
  if valid_607284 != nil:
    section.add "DefaultOnly", valid_607284
  var valid_607285 = formData.getOrDefault("MaxRecords")
  valid_607285 = validateParameter(valid_607285, JInt, required = false, default = nil)
  if valid_607285 != nil:
    section.add "MaxRecords", valid_607285
  var valid_607286 = formData.getOrDefault("EngineVersion")
  valid_607286 = validateParameter(valid_607286, JString, required = false,
                                 default = nil)
  if valid_607286 != nil:
    section.add "EngineVersion", valid_607286
  var valid_607287 = formData.getOrDefault("Marker")
  valid_607287 = validateParameter(valid_607287, JString, required = false,
                                 default = nil)
  if valid_607287 != nil:
    section.add "Marker", valid_607287
  var valid_607288 = formData.getOrDefault("IncludeAll")
  valid_607288 = validateParameter(valid_607288, JBool, required = false, default = nil)
  if valid_607288 != nil:
    section.add "IncludeAll", valid_607288
  var valid_607289 = formData.getOrDefault("Engine")
  valid_607289 = validateParameter(valid_607289, JString, required = false,
                                 default = nil)
  if valid_607289 != nil:
    section.add "Engine", valid_607289
  var valid_607290 = formData.getOrDefault("ListSupportedCharacterSets")
  valid_607290 = validateParameter(valid_607290, JBool, required = false, default = nil)
  if valid_607290 != nil:
    section.add "ListSupportedCharacterSets", valid_607290
  var valid_607291 = formData.getOrDefault("ListSupportedTimezones")
  valid_607291 = validateParameter(valid_607291, JBool, required = false, default = nil)
  if valid_607291 != nil:
    section.add "ListSupportedTimezones", valid_607291
  var valid_607292 = formData.getOrDefault("Filters")
  valid_607292 = validateParameter(valid_607292, JArray, required = false,
                                 default = nil)
  if valid_607292 != nil:
    section.add "Filters", valid_607292
  var valid_607293 = formData.getOrDefault("DBParameterGroupFamily")
  valid_607293 = validateParameter(valid_607293, JString, required = false,
                                 default = nil)
  if valid_607293 != nil:
    section.add "DBParameterGroupFamily", valid_607293
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607294: Call_PostDescribeDBEngineVersions_607272; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_607294.validator(path, query, header, formData, body)
  let scheme = call_607294.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607294.url(scheme.get, call_607294.host, call_607294.base,
                         call_607294.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607294, url, valid)

proc call*(call_607295: Call_PostDescribeDBEngineVersions_607272;
          DefaultOnly: bool = false; MaxRecords: int = 0; EngineVersion: string = "";
          Marker: string = ""; IncludeAll: bool = false; Engine: string = "";
          ListSupportedCharacterSets: bool = false;
          Action: string = "DescribeDBEngineVersions";
          ListSupportedTimezones: bool = false; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; DBParameterGroupFamily: string = ""): Recallable =
  ## postDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   DefaultOnly: bool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   IncludeAll: bool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   Engine: string
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: bool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Action: string (required)
  ##   ListSupportedTimezones: bool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  var query_607296 = newJObject()
  var formData_607297 = newJObject()
  add(formData_607297, "DefaultOnly", newJBool(DefaultOnly))
  add(formData_607297, "MaxRecords", newJInt(MaxRecords))
  add(formData_607297, "EngineVersion", newJString(EngineVersion))
  add(formData_607297, "Marker", newJString(Marker))
  add(formData_607297, "IncludeAll", newJBool(IncludeAll))
  add(formData_607297, "Engine", newJString(Engine))
  add(formData_607297, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_607296, "Action", newJString(Action))
  add(formData_607297, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  if Filters != nil:
    formData_607297.add "Filters", Filters
  add(query_607296, "Version", newJString(Version))
  add(formData_607297, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_607295.call(nil, query_607296, nil, formData_607297, nil)

var postDescribeDBEngineVersions* = Call_PostDescribeDBEngineVersions_607272(
    name: "postDescribeDBEngineVersions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_PostDescribeDBEngineVersions_607273, base: "/",
    url: url_PostDescribeDBEngineVersions_607274,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBEngineVersions_607247 = ref object of OpenApiRestCall_604389
proc url_GetDescribeDBEngineVersions_607249(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBEngineVersions_607248(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ListSupportedTimezones: JBool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Engine: JString
  ##         : The database engine to return.
  ##   IncludeAll: JBool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Action: JString (required)
  ##   ListSupportedCharacterSets: JBool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DefaultOnly: JBool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  section = newJObject()
  var valid_607250 = query.getOrDefault("Marker")
  valid_607250 = validateParameter(valid_607250, JString, required = false,
                                 default = nil)
  if valid_607250 != nil:
    section.add "Marker", valid_607250
  var valid_607251 = query.getOrDefault("ListSupportedTimezones")
  valid_607251 = validateParameter(valid_607251, JBool, required = false, default = nil)
  if valid_607251 != nil:
    section.add "ListSupportedTimezones", valid_607251
  var valid_607252 = query.getOrDefault("DBParameterGroupFamily")
  valid_607252 = validateParameter(valid_607252, JString, required = false,
                                 default = nil)
  if valid_607252 != nil:
    section.add "DBParameterGroupFamily", valid_607252
  var valid_607253 = query.getOrDefault("Engine")
  valid_607253 = validateParameter(valid_607253, JString, required = false,
                                 default = nil)
  if valid_607253 != nil:
    section.add "Engine", valid_607253
  var valid_607254 = query.getOrDefault("IncludeAll")
  valid_607254 = validateParameter(valid_607254, JBool, required = false, default = nil)
  if valid_607254 != nil:
    section.add "IncludeAll", valid_607254
  var valid_607255 = query.getOrDefault("EngineVersion")
  valid_607255 = validateParameter(valid_607255, JString, required = false,
                                 default = nil)
  if valid_607255 != nil:
    section.add "EngineVersion", valid_607255
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607256 = query.getOrDefault("Action")
  valid_607256 = validateParameter(valid_607256, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_607256 != nil:
    section.add "Action", valid_607256
  var valid_607257 = query.getOrDefault("ListSupportedCharacterSets")
  valid_607257 = validateParameter(valid_607257, JBool, required = false, default = nil)
  if valid_607257 != nil:
    section.add "ListSupportedCharacterSets", valid_607257
  var valid_607258 = query.getOrDefault("Version")
  valid_607258 = validateParameter(valid_607258, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607258 != nil:
    section.add "Version", valid_607258
  var valid_607259 = query.getOrDefault("Filters")
  valid_607259 = validateParameter(valid_607259, JArray, required = false,
                                 default = nil)
  if valid_607259 != nil:
    section.add "Filters", valid_607259
  var valid_607260 = query.getOrDefault("MaxRecords")
  valid_607260 = validateParameter(valid_607260, JInt, required = false, default = nil)
  if valid_607260 != nil:
    section.add "MaxRecords", valid_607260
  var valid_607261 = query.getOrDefault("DefaultOnly")
  valid_607261 = validateParameter(valid_607261, JBool, required = false, default = nil)
  if valid_607261 != nil:
    section.add "DefaultOnly", valid_607261
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607262 = header.getOrDefault("X-Amz-Signature")
  valid_607262 = validateParameter(valid_607262, JString, required = false,
                                 default = nil)
  if valid_607262 != nil:
    section.add "X-Amz-Signature", valid_607262
  var valid_607263 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607263 = validateParameter(valid_607263, JString, required = false,
                                 default = nil)
  if valid_607263 != nil:
    section.add "X-Amz-Content-Sha256", valid_607263
  var valid_607264 = header.getOrDefault("X-Amz-Date")
  valid_607264 = validateParameter(valid_607264, JString, required = false,
                                 default = nil)
  if valid_607264 != nil:
    section.add "X-Amz-Date", valid_607264
  var valid_607265 = header.getOrDefault("X-Amz-Credential")
  valid_607265 = validateParameter(valid_607265, JString, required = false,
                                 default = nil)
  if valid_607265 != nil:
    section.add "X-Amz-Credential", valid_607265
  var valid_607266 = header.getOrDefault("X-Amz-Security-Token")
  valid_607266 = validateParameter(valid_607266, JString, required = false,
                                 default = nil)
  if valid_607266 != nil:
    section.add "X-Amz-Security-Token", valid_607266
  var valid_607267 = header.getOrDefault("X-Amz-Algorithm")
  valid_607267 = validateParameter(valid_607267, JString, required = false,
                                 default = nil)
  if valid_607267 != nil:
    section.add "X-Amz-Algorithm", valid_607267
  var valid_607268 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607268 = validateParameter(valid_607268, JString, required = false,
                                 default = nil)
  if valid_607268 != nil:
    section.add "X-Amz-SignedHeaders", valid_607268
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607269: Call_GetDescribeDBEngineVersions_607247; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_607269.validator(path, query, header, formData, body)
  let scheme = call_607269.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607269.url(scheme.get, call_607269.host, call_607269.base,
                         call_607269.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607269, url, valid)

proc call*(call_607270: Call_GetDescribeDBEngineVersions_607247;
          Marker: string = ""; ListSupportedTimezones: bool = false;
          DBParameterGroupFamily: string = ""; Engine: string = "";
          IncludeAll: bool = false; EngineVersion: string = "";
          Action: string = "DescribeDBEngineVersions";
          ListSupportedCharacterSets: bool = false; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0; DefaultOnly: bool = false): Recallable =
  ## getDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ListSupportedTimezones: bool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Engine: string
  ##         : The database engine to return.
  ##   IncludeAll: bool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   Action: string (required)
  ##   ListSupportedCharacterSets: bool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DefaultOnly: bool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  var query_607271 = newJObject()
  add(query_607271, "Marker", newJString(Marker))
  add(query_607271, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  add(query_607271, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_607271, "Engine", newJString(Engine))
  add(query_607271, "IncludeAll", newJBool(IncludeAll))
  add(query_607271, "EngineVersion", newJString(EngineVersion))
  add(query_607271, "Action", newJString(Action))
  add(query_607271, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_607271, "Version", newJString(Version))
  if Filters != nil:
    query_607271.add "Filters", Filters
  add(query_607271, "MaxRecords", newJInt(MaxRecords))
  add(query_607271, "DefaultOnly", newJBool(DefaultOnly))
  result = call_607270.call(nil, query_607271, nil, nil, nil)

var getDescribeDBEngineVersions* = Call_GetDescribeDBEngineVersions_607247(
    name: "getDescribeDBEngineVersions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_GetDescribeDBEngineVersions_607248, base: "/",
    url: url_GetDescribeDBEngineVersions_607249,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstanceAutomatedBackups_607318 = ref object of OpenApiRestCall_604389
proc url_PostDescribeDBInstanceAutomatedBackups_607320(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBInstanceAutomatedBackups_607319(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607321 = query.getOrDefault("Action")
  valid_607321 = validateParameter(valid_607321, JString, required = true, default = newJString(
      "DescribeDBInstanceAutomatedBackups"))
  if valid_607321 != nil:
    section.add "Action", valid_607321
  var valid_607322 = query.getOrDefault("Version")
  valid_607322 = validateParameter(valid_607322, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607322 != nil:
    section.add "Version", valid_607322
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607323 = header.getOrDefault("X-Amz-Signature")
  valid_607323 = validateParameter(valid_607323, JString, required = false,
                                 default = nil)
  if valid_607323 != nil:
    section.add "X-Amz-Signature", valid_607323
  var valid_607324 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607324 = validateParameter(valid_607324, JString, required = false,
                                 default = nil)
  if valid_607324 != nil:
    section.add "X-Amz-Content-Sha256", valid_607324
  var valid_607325 = header.getOrDefault("X-Amz-Date")
  valid_607325 = validateParameter(valid_607325, JString, required = false,
                                 default = nil)
  if valid_607325 != nil:
    section.add "X-Amz-Date", valid_607325
  var valid_607326 = header.getOrDefault("X-Amz-Credential")
  valid_607326 = validateParameter(valid_607326, JString, required = false,
                                 default = nil)
  if valid_607326 != nil:
    section.add "X-Amz-Credential", valid_607326
  var valid_607327 = header.getOrDefault("X-Amz-Security-Token")
  valid_607327 = validateParameter(valid_607327, JString, required = false,
                                 default = nil)
  if valid_607327 != nil:
    section.add "X-Amz-Security-Token", valid_607327
  var valid_607328 = header.getOrDefault("X-Amz-Algorithm")
  valid_607328 = validateParameter(valid_607328, JString, required = false,
                                 default = nil)
  if valid_607328 != nil:
    section.add "X-Amz-Algorithm", valid_607328
  var valid_607329 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607329 = validateParameter(valid_607329, JString, required = false,
                                 default = nil)
  if valid_607329 != nil:
    section.add "X-Amz-SignedHeaders", valid_607329
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DbiResourceId: JString
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   DBInstanceIdentifier: JString
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  section = newJObject()
  var valid_607330 = formData.getOrDefault("MaxRecords")
  valid_607330 = validateParameter(valid_607330, JInt, required = false, default = nil)
  if valid_607330 != nil:
    section.add "MaxRecords", valid_607330
  var valid_607331 = formData.getOrDefault("Marker")
  valid_607331 = validateParameter(valid_607331, JString, required = false,
                                 default = nil)
  if valid_607331 != nil:
    section.add "Marker", valid_607331
  var valid_607332 = formData.getOrDefault("DbiResourceId")
  valid_607332 = validateParameter(valid_607332, JString, required = false,
                                 default = nil)
  if valid_607332 != nil:
    section.add "DbiResourceId", valid_607332
  var valid_607333 = formData.getOrDefault("DBInstanceIdentifier")
  valid_607333 = validateParameter(valid_607333, JString, required = false,
                                 default = nil)
  if valid_607333 != nil:
    section.add "DBInstanceIdentifier", valid_607333
  var valid_607334 = formData.getOrDefault("Filters")
  valid_607334 = validateParameter(valid_607334, JArray, required = false,
                                 default = nil)
  if valid_607334 != nil:
    section.add "Filters", valid_607334
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607335: Call_PostDescribeDBInstanceAutomatedBackups_607318;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  let valid = call_607335.validator(path, query, header, formData, body)
  let scheme = call_607335.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607335.url(scheme.get, call_607335.host, call_607335.base,
                         call_607335.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607335, url, valid)

proc call*(call_607336: Call_PostDescribeDBInstanceAutomatedBackups_607318;
          MaxRecords: int = 0; Marker: string = ""; DbiResourceId: string = "";
          DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstanceAutomatedBackups";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstanceAutomatedBackups
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DbiResourceId: string
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   DBInstanceIdentifier: string
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   Version: string (required)
  var query_607337 = newJObject()
  var formData_607338 = newJObject()
  add(formData_607338, "MaxRecords", newJInt(MaxRecords))
  add(formData_607338, "Marker", newJString(Marker))
  add(formData_607338, "DbiResourceId", newJString(DbiResourceId))
  add(formData_607338, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_607337, "Action", newJString(Action))
  if Filters != nil:
    formData_607338.add "Filters", Filters
  add(query_607337, "Version", newJString(Version))
  result = call_607336.call(nil, query_607337, nil, formData_607338, nil)

var postDescribeDBInstanceAutomatedBackups* = Call_PostDescribeDBInstanceAutomatedBackups_607318(
    name: "postDescribeDBInstanceAutomatedBackups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBInstanceAutomatedBackups",
    validator: validate_PostDescribeDBInstanceAutomatedBackups_607319, base: "/",
    url: url_PostDescribeDBInstanceAutomatedBackups_607320,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstanceAutomatedBackups_607298 = ref object of OpenApiRestCall_604389
proc url_GetDescribeDBInstanceAutomatedBackups_607300(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBInstanceAutomatedBackups_607299(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: JString
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  section = newJObject()
  var valid_607301 = query.getOrDefault("DbiResourceId")
  valid_607301 = validateParameter(valid_607301, JString, required = false,
                                 default = nil)
  if valid_607301 != nil:
    section.add "DbiResourceId", valid_607301
  var valid_607302 = query.getOrDefault("Marker")
  valid_607302 = validateParameter(valid_607302, JString, required = false,
                                 default = nil)
  if valid_607302 != nil:
    section.add "Marker", valid_607302
  var valid_607303 = query.getOrDefault("DBInstanceIdentifier")
  valid_607303 = validateParameter(valid_607303, JString, required = false,
                                 default = nil)
  if valid_607303 != nil:
    section.add "DBInstanceIdentifier", valid_607303
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607304 = query.getOrDefault("Action")
  valid_607304 = validateParameter(valid_607304, JString, required = true, default = newJString(
      "DescribeDBInstanceAutomatedBackups"))
  if valid_607304 != nil:
    section.add "Action", valid_607304
  var valid_607305 = query.getOrDefault("Version")
  valid_607305 = validateParameter(valid_607305, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607305 != nil:
    section.add "Version", valid_607305
  var valid_607306 = query.getOrDefault("Filters")
  valid_607306 = validateParameter(valid_607306, JArray, required = false,
                                 default = nil)
  if valid_607306 != nil:
    section.add "Filters", valid_607306
  var valid_607307 = query.getOrDefault("MaxRecords")
  valid_607307 = validateParameter(valid_607307, JInt, required = false, default = nil)
  if valid_607307 != nil:
    section.add "MaxRecords", valid_607307
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607308 = header.getOrDefault("X-Amz-Signature")
  valid_607308 = validateParameter(valid_607308, JString, required = false,
                                 default = nil)
  if valid_607308 != nil:
    section.add "X-Amz-Signature", valid_607308
  var valid_607309 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607309 = validateParameter(valid_607309, JString, required = false,
                                 default = nil)
  if valid_607309 != nil:
    section.add "X-Amz-Content-Sha256", valid_607309
  var valid_607310 = header.getOrDefault("X-Amz-Date")
  valid_607310 = validateParameter(valid_607310, JString, required = false,
                                 default = nil)
  if valid_607310 != nil:
    section.add "X-Amz-Date", valid_607310
  var valid_607311 = header.getOrDefault("X-Amz-Credential")
  valid_607311 = validateParameter(valid_607311, JString, required = false,
                                 default = nil)
  if valid_607311 != nil:
    section.add "X-Amz-Credential", valid_607311
  var valid_607312 = header.getOrDefault("X-Amz-Security-Token")
  valid_607312 = validateParameter(valid_607312, JString, required = false,
                                 default = nil)
  if valid_607312 != nil:
    section.add "X-Amz-Security-Token", valid_607312
  var valid_607313 = header.getOrDefault("X-Amz-Algorithm")
  valid_607313 = validateParameter(valid_607313, JString, required = false,
                                 default = nil)
  if valid_607313 != nil:
    section.add "X-Amz-Algorithm", valid_607313
  var valid_607314 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607314 = validateParameter(valid_607314, JString, required = false,
                                 default = nil)
  if valid_607314 != nil:
    section.add "X-Amz-SignedHeaders", valid_607314
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607315: Call_GetDescribeDBInstanceAutomatedBackups_607298;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  let valid = call_607315.validator(path, query, header, formData, body)
  let scheme = call_607315.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607315.url(scheme.get, call_607315.host, call_607315.base,
                         call_607315.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607315, url, valid)

proc call*(call_607316: Call_GetDescribeDBInstanceAutomatedBackups_607298;
          DbiResourceId: string = ""; Marker: string = "";
          DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstanceAutomatedBackups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBInstanceAutomatedBackups
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ##   DbiResourceId: string
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   DBInstanceIdentifier: string
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  var query_607317 = newJObject()
  add(query_607317, "DbiResourceId", newJString(DbiResourceId))
  add(query_607317, "Marker", newJString(Marker))
  add(query_607317, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_607317, "Action", newJString(Action))
  add(query_607317, "Version", newJString(Version))
  if Filters != nil:
    query_607317.add "Filters", Filters
  add(query_607317, "MaxRecords", newJInt(MaxRecords))
  result = call_607316.call(nil, query_607317, nil, nil, nil)

var getDescribeDBInstanceAutomatedBackups* = Call_GetDescribeDBInstanceAutomatedBackups_607298(
    name: "getDescribeDBInstanceAutomatedBackups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBInstanceAutomatedBackups",
    validator: validate_GetDescribeDBInstanceAutomatedBackups_607299, base: "/",
    url: url_GetDescribeDBInstanceAutomatedBackups_607300,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstances_607358 = ref object of OpenApiRestCall_604389
proc url_PostDescribeDBInstances_607360(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBInstances_607359(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607361 = query.getOrDefault("Action")
  valid_607361 = validateParameter(valid_607361, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_607361 != nil:
    section.add "Action", valid_607361
  var valid_607362 = query.getOrDefault("Version")
  valid_607362 = validateParameter(valid_607362, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607362 != nil:
    section.add "Version", valid_607362
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607363 = header.getOrDefault("X-Amz-Signature")
  valid_607363 = validateParameter(valid_607363, JString, required = false,
                                 default = nil)
  if valid_607363 != nil:
    section.add "X-Amz-Signature", valid_607363
  var valid_607364 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607364 = validateParameter(valid_607364, JString, required = false,
                                 default = nil)
  if valid_607364 != nil:
    section.add "X-Amz-Content-Sha256", valid_607364
  var valid_607365 = header.getOrDefault("X-Amz-Date")
  valid_607365 = validateParameter(valid_607365, JString, required = false,
                                 default = nil)
  if valid_607365 != nil:
    section.add "X-Amz-Date", valid_607365
  var valid_607366 = header.getOrDefault("X-Amz-Credential")
  valid_607366 = validateParameter(valid_607366, JString, required = false,
                                 default = nil)
  if valid_607366 != nil:
    section.add "X-Amz-Credential", valid_607366
  var valid_607367 = header.getOrDefault("X-Amz-Security-Token")
  valid_607367 = validateParameter(valid_607367, JString, required = false,
                                 default = nil)
  if valid_607367 != nil:
    section.add "X-Amz-Security-Token", valid_607367
  var valid_607368 = header.getOrDefault("X-Amz-Algorithm")
  valid_607368 = validateParameter(valid_607368, JString, required = false,
                                 default = nil)
  if valid_607368 != nil:
    section.add "X-Amz-Algorithm", valid_607368
  var valid_607369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607369 = validateParameter(valid_607369, JString, required = false,
                                 default = nil)
  if valid_607369 != nil:
    section.add "X-Amz-SignedHeaders", valid_607369
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  section = newJObject()
  var valid_607370 = formData.getOrDefault("MaxRecords")
  valid_607370 = validateParameter(valid_607370, JInt, required = false, default = nil)
  if valid_607370 != nil:
    section.add "MaxRecords", valid_607370
  var valid_607371 = formData.getOrDefault("Marker")
  valid_607371 = validateParameter(valid_607371, JString, required = false,
                                 default = nil)
  if valid_607371 != nil:
    section.add "Marker", valid_607371
  var valid_607372 = formData.getOrDefault("DBInstanceIdentifier")
  valid_607372 = validateParameter(valid_607372, JString, required = false,
                                 default = nil)
  if valid_607372 != nil:
    section.add "DBInstanceIdentifier", valid_607372
  var valid_607373 = formData.getOrDefault("Filters")
  valid_607373 = validateParameter(valid_607373, JArray, required = false,
                                 default = nil)
  if valid_607373 != nil:
    section.add "Filters", valid_607373
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607374: Call_PostDescribeDBInstances_607358; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  let valid = call_607374.validator(path, query, header, formData, body)
  let scheme = call_607374.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607374.url(scheme.get, call_607374.host, call_607374.base,
                         call_607374.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607374, url, valid)

proc call*(call_607375: Call_PostDescribeDBInstances_607358; MaxRecords: int = 0;
          Marker: string = ""; DBInstanceIdentifier: string = "";
          Action: string = "DescribeDBInstances"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstances
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   Version: string (required)
  var query_607376 = newJObject()
  var formData_607377 = newJObject()
  add(formData_607377, "MaxRecords", newJInt(MaxRecords))
  add(formData_607377, "Marker", newJString(Marker))
  add(formData_607377, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_607376, "Action", newJString(Action))
  if Filters != nil:
    formData_607377.add "Filters", Filters
  add(query_607376, "Version", newJString(Version))
  result = call_607375.call(nil, query_607376, nil, formData_607377, nil)

var postDescribeDBInstances* = Call_PostDescribeDBInstances_607358(
    name: "postDescribeDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_PostDescribeDBInstances_607359, base: "/",
    url: url_PostDescribeDBInstances_607360, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstances_607339 = ref object of OpenApiRestCall_604389
proc url_GetDescribeDBInstances_607341(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBInstances_607340(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607342 = query.getOrDefault("Marker")
  valid_607342 = validateParameter(valid_607342, JString, required = false,
                                 default = nil)
  if valid_607342 != nil:
    section.add "Marker", valid_607342
  var valid_607343 = query.getOrDefault("DBInstanceIdentifier")
  valid_607343 = validateParameter(valid_607343, JString, required = false,
                                 default = nil)
  if valid_607343 != nil:
    section.add "DBInstanceIdentifier", valid_607343
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607344 = query.getOrDefault("Action")
  valid_607344 = validateParameter(valid_607344, JString, required = true,
                                 default = newJString("DescribeDBInstances"))
  if valid_607344 != nil:
    section.add "Action", valid_607344
  var valid_607345 = query.getOrDefault("Version")
  valid_607345 = validateParameter(valid_607345, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607345 != nil:
    section.add "Version", valid_607345
  var valid_607346 = query.getOrDefault("Filters")
  valid_607346 = validateParameter(valid_607346, JArray, required = false,
                                 default = nil)
  if valid_607346 != nil:
    section.add "Filters", valid_607346
  var valid_607347 = query.getOrDefault("MaxRecords")
  valid_607347 = validateParameter(valid_607347, JInt, required = false, default = nil)
  if valid_607347 != nil:
    section.add "MaxRecords", valid_607347
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607348 = header.getOrDefault("X-Amz-Signature")
  valid_607348 = validateParameter(valid_607348, JString, required = false,
                                 default = nil)
  if valid_607348 != nil:
    section.add "X-Amz-Signature", valid_607348
  var valid_607349 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607349 = validateParameter(valid_607349, JString, required = false,
                                 default = nil)
  if valid_607349 != nil:
    section.add "X-Amz-Content-Sha256", valid_607349
  var valid_607350 = header.getOrDefault("X-Amz-Date")
  valid_607350 = validateParameter(valid_607350, JString, required = false,
                                 default = nil)
  if valid_607350 != nil:
    section.add "X-Amz-Date", valid_607350
  var valid_607351 = header.getOrDefault("X-Amz-Credential")
  valid_607351 = validateParameter(valid_607351, JString, required = false,
                                 default = nil)
  if valid_607351 != nil:
    section.add "X-Amz-Credential", valid_607351
  var valid_607352 = header.getOrDefault("X-Amz-Security-Token")
  valid_607352 = validateParameter(valid_607352, JString, required = false,
                                 default = nil)
  if valid_607352 != nil:
    section.add "X-Amz-Security-Token", valid_607352
  var valid_607353 = header.getOrDefault("X-Amz-Algorithm")
  valid_607353 = validateParameter(valid_607353, JString, required = false,
                                 default = nil)
  if valid_607353 != nil:
    section.add "X-Amz-Algorithm", valid_607353
  var valid_607354 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607354 = validateParameter(valid_607354, JString, required = false,
                                 default = nil)
  if valid_607354 != nil:
    section.add "X-Amz-SignedHeaders", valid_607354
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607355: Call_GetDescribeDBInstances_607339; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  let valid = call_607355.validator(path, query, header, formData, body)
  let scheme = call_607355.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607355.url(scheme.get, call_607355.host, call_607355.base,
                         call_607355.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607355, url, valid)

proc call*(call_607356: Call_GetDescribeDBInstances_607339; Marker: string = "";
          DBInstanceIdentifier: string = ""; Action: string = "DescribeDBInstances";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBInstances
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607357 = newJObject()
  add(query_607357, "Marker", newJString(Marker))
  add(query_607357, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_607357, "Action", newJString(Action))
  add(query_607357, "Version", newJString(Version))
  if Filters != nil:
    query_607357.add "Filters", Filters
  add(query_607357, "MaxRecords", newJInt(MaxRecords))
  result = call_607356.call(nil, query_607357, nil, nil, nil)

var getDescribeDBInstances* = Call_GetDescribeDBInstances_607339(
    name: "getDescribeDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_GetDescribeDBInstances_607340, base: "/",
    url: url_GetDescribeDBInstances_607341, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBLogFiles_607400 = ref object of OpenApiRestCall_604389
proc url_PostDescribeDBLogFiles_607402(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBLogFiles_607401(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of DB log files for the DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607403 = query.getOrDefault("Action")
  valid_607403 = validateParameter(valid_607403, JString, required = true,
                                 default = newJString("DescribeDBLogFiles"))
  if valid_607403 != nil:
    section.add "Action", valid_607403
  var valid_607404 = query.getOrDefault("Version")
  valid_607404 = validateParameter(valid_607404, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607404 != nil:
    section.add "Version", valid_607404
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607405 = header.getOrDefault("X-Amz-Signature")
  valid_607405 = validateParameter(valid_607405, JString, required = false,
                                 default = nil)
  if valid_607405 != nil:
    section.add "X-Amz-Signature", valid_607405
  var valid_607406 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607406 = validateParameter(valid_607406, JString, required = false,
                                 default = nil)
  if valid_607406 != nil:
    section.add "X-Amz-Content-Sha256", valid_607406
  var valid_607407 = header.getOrDefault("X-Amz-Date")
  valid_607407 = validateParameter(valid_607407, JString, required = false,
                                 default = nil)
  if valid_607407 != nil:
    section.add "X-Amz-Date", valid_607407
  var valid_607408 = header.getOrDefault("X-Amz-Credential")
  valid_607408 = validateParameter(valid_607408, JString, required = false,
                                 default = nil)
  if valid_607408 != nil:
    section.add "X-Amz-Credential", valid_607408
  var valid_607409 = header.getOrDefault("X-Amz-Security-Token")
  valid_607409 = validateParameter(valid_607409, JString, required = false,
                                 default = nil)
  if valid_607409 != nil:
    section.add "X-Amz-Security-Token", valid_607409
  var valid_607410 = header.getOrDefault("X-Amz-Algorithm")
  valid_607410 = validateParameter(valid_607410, JString, required = false,
                                 default = nil)
  if valid_607410 != nil:
    section.add "X-Amz-Algorithm", valid_607410
  var valid_607411 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607411 = validateParameter(valid_607411, JString, required = false,
                                 default = nil)
  if valid_607411 != nil:
    section.add "X-Amz-SignedHeaders", valid_607411
  result.add "header", section
  ## parameters in `formData` object:
  ##   FileSize: JInt
  ##           : Filters the available log files for files larger than the specified size.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FilenameContains: JString
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   FileLastWritten: JInt
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  section = newJObject()
  var valid_607412 = formData.getOrDefault("FileSize")
  valid_607412 = validateParameter(valid_607412, JInt, required = false, default = nil)
  if valid_607412 != nil:
    section.add "FileSize", valid_607412
  var valid_607413 = formData.getOrDefault("MaxRecords")
  valid_607413 = validateParameter(valid_607413, JInt, required = false, default = nil)
  if valid_607413 != nil:
    section.add "MaxRecords", valid_607413
  var valid_607414 = formData.getOrDefault("Marker")
  valid_607414 = validateParameter(valid_607414, JString, required = false,
                                 default = nil)
  if valid_607414 != nil:
    section.add "Marker", valid_607414
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_607415 = formData.getOrDefault("DBInstanceIdentifier")
  valid_607415 = validateParameter(valid_607415, JString, required = true,
                                 default = nil)
  if valid_607415 != nil:
    section.add "DBInstanceIdentifier", valid_607415
  var valid_607416 = formData.getOrDefault("FilenameContains")
  valid_607416 = validateParameter(valid_607416, JString, required = false,
                                 default = nil)
  if valid_607416 != nil:
    section.add "FilenameContains", valid_607416
  var valid_607417 = formData.getOrDefault("Filters")
  valid_607417 = validateParameter(valid_607417, JArray, required = false,
                                 default = nil)
  if valid_607417 != nil:
    section.add "Filters", valid_607417
  var valid_607418 = formData.getOrDefault("FileLastWritten")
  valid_607418 = validateParameter(valid_607418, JInt, required = false, default = nil)
  if valid_607418 != nil:
    section.add "FileLastWritten", valid_607418
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607419: Call_PostDescribeDBLogFiles_607400; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of DB log files for the DB instance.
  ## 
  let valid = call_607419.validator(path, query, header, formData, body)
  let scheme = call_607419.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607419.url(scheme.get, call_607419.host, call_607419.base,
                         call_607419.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607419, url, valid)

proc call*(call_607420: Call_PostDescribeDBLogFiles_607400;
          DBInstanceIdentifier: string; FileSize: int = 0; MaxRecords: int = 0;
          Marker: string = ""; FilenameContains: string = "";
          Action: string = "DescribeDBLogFiles"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; FileLastWritten: int = 0): Recallable =
  ## postDescribeDBLogFiles
  ## Returns a list of DB log files for the DB instance.
  ##   FileSize: int
  ##           : Filters the available log files for files larger than the specified size.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FilenameContains: string
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   FileLastWritten: int
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  var query_607421 = newJObject()
  var formData_607422 = newJObject()
  add(formData_607422, "FileSize", newJInt(FileSize))
  add(formData_607422, "MaxRecords", newJInt(MaxRecords))
  add(formData_607422, "Marker", newJString(Marker))
  add(formData_607422, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_607422, "FilenameContains", newJString(FilenameContains))
  add(query_607421, "Action", newJString(Action))
  if Filters != nil:
    formData_607422.add "Filters", Filters
  add(query_607421, "Version", newJString(Version))
  add(formData_607422, "FileLastWritten", newJInt(FileLastWritten))
  result = call_607420.call(nil, query_607421, nil, formData_607422, nil)

var postDescribeDBLogFiles* = Call_PostDescribeDBLogFiles_607400(
    name: "postDescribeDBLogFiles", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBLogFiles",
    validator: validate_PostDescribeDBLogFiles_607401, base: "/",
    url: url_PostDescribeDBLogFiles_607402, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBLogFiles_607378 = ref object of OpenApiRestCall_604389
proc url_GetDescribeDBLogFiles_607380(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBLogFiles_607379(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of DB log files for the DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FileLastWritten: JInt
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   Action: JString (required)
  ##   FilenameContains: JString
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   FileSize: JInt
  ##           : Filters the available log files for files larger than the specified size.
  section = newJObject()
  var valid_607381 = query.getOrDefault("Marker")
  valid_607381 = validateParameter(valid_607381, JString, required = false,
                                 default = nil)
  if valid_607381 != nil:
    section.add "Marker", valid_607381
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_607382 = query.getOrDefault("DBInstanceIdentifier")
  valid_607382 = validateParameter(valid_607382, JString, required = true,
                                 default = nil)
  if valid_607382 != nil:
    section.add "DBInstanceIdentifier", valid_607382
  var valid_607383 = query.getOrDefault("FileLastWritten")
  valid_607383 = validateParameter(valid_607383, JInt, required = false, default = nil)
  if valid_607383 != nil:
    section.add "FileLastWritten", valid_607383
  var valid_607384 = query.getOrDefault("Action")
  valid_607384 = validateParameter(valid_607384, JString, required = true,
                                 default = newJString("DescribeDBLogFiles"))
  if valid_607384 != nil:
    section.add "Action", valid_607384
  var valid_607385 = query.getOrDefault("FilenameContains")
  valid_607385 = validateParameter(valid_607385, JString, required = false,
                                 default = nil)
  if valid_607385 != nil:
    section.add "FilenameContains", valid_607385
  var valid_607386 = query.getOrDefault("Version")
  valid_607386 = validateParameter(valid_607386, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607386 != nil:
    section.add "Version", valid_607386
  var valid_607387 = query.getOrDefault("Filters")
  valid_607387 = validateParameter(valid_607387, JArray, required = false,
                                 default = nil)
  if valid_607387 != nil:
    section.add "Filters", valid_607387
  var valid_607388 = query.getOrDefault("MaxRecords")
  valid_607388 = validateParameter(valid_607388, JInt, required = false, default = nil)
  if valid_607388 != nil:
    section.add "MaxRecords", valid_607388
  var valid_607389 = query.getOrDefault("FileSize")
  valid_607389 = validateParameter(valid_607389, JInt, required = false, default = nil)
  if valid_607389 != nil:
    section.add "FileSize", valid_607389
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607390 = header.getOrDefault("X-Amz-Signature")
  valid_607390 = validateParameter(valid_607390, JString, required = false,
                                 default = nil)
  if valid_607390 != nil:
    section.add "X-Amz-Signature", valid_607390
  var valid_607391 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607391 = validateParameter(valid_607391, JString, required = false,
                                 default = nil)
  if valid_607391 != nil:
    section.add "X-Amz-Content-Sha256", valid_607391
  var valid_607392 = header.getOrDefault("X-Amz-Date")
  valid_607392 = validateParameter(valid_607392, JString, required = false,
                                 default = nil)
  if valid_607392 != nil:
    section.add "X-Amz-Date", valid_607392
  var valid_607393 = header.getOrDefault("X-Amz-Credential")
  valid_607393 = validateParameter(valid_607393, JString, required = false,
                                 default = nil)
  if valid_607393 != nil:
    section.add "X-Amz-Credential", valid_607393
  var valid_607394 = header.getOrDefault("X-Amz-Security-Token")
  valid_607394 = validateParameter(valid_607394, JString, required = false,
                                 default = nil)
  if valid_607394 != nil:
    section.add "X-Amz-Security-Token", valid_607394
  var valid_607395 = header.getOrDefault("X-Amz-Algorithm")
  valid_607395 = validateParameter(valid_607395, JString, required = false,
                                 default = nil)
  if valid_607395 != nil:
    section.add "X-Amz-Algorithm", valid_607395
  var valid_607396 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607396 = validateParameter(valid_607396, JString, required = false,
                                 default = nil)
  if valid_607396 != nil:
    section.add "X-Amz-SignedHeaders", valid_607396
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607397: Call_GetDescribeDBLogFiles_607378; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of DB log files for the DB instance.
  ## 
  let valid = call_607397.validator(path, query, header, formData, body)
  let scheme = call_607397.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607397.url(scheme.get, call_607397.host, call_607397.base,
                         call_607397.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607397, url, valid)

proc call*(call_607398: Call_GetDescribeDBLogFiles_607378;
          DBInstanceIdentifier: string; Marker: string = ""; FileLastWritten: int = 0;
          Action: string = "DescribeDBLogFiles"; FilenameContains: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0;
          FileSize: int = 0): Recallable =
  ## getDescribeDBLogFiles
  ## Returns a list of DB log files for the DB instance.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FileLastWritten: int
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   Action: string (required)
  ##   FilenameContains: string
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   FileSize: int
  ##           : Filters the available log files for files larger than the specified size.
  var query_607399 = newJObject()
  add(query_607399, "Marker", newJString(Marker))
  add(query_607399, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_607399, "FileLastWritten", newJInt(FileLastWritten))
  add(query_607399, "Action", newJString(Action))
  add(query_607399, "FilenameContains", newJString(FilenameContains))
  add(query_607399, "Version", newJString(Version))
  if Filters != nil:
    query_607399.add "Filters", Filters
  add(query_607399, "MaxRecords", newJInt(MaxRecords))
  add(query_607399, "FileSize", newJInt(FileSize))
  result = call_607398.call(nil, query_607399, nil, nil, nil)

var getDescribeDBLogFiles* = Call_GetDescribeDBLogFiles_607378(
    name: "getDescribeDBLogFiles", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBLogFiles",
    validator: validate_GetDescribeDBLogFiles_607379, base: "/",
    url: url_GetDescribeDBLogFiles_607380, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameterGroups_607442 = ref object of OpenApiRestCall_604389
proc url_PostDescribeDBParameterGroups_607444(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBParameterGroups_607443(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607445 = query.getOrDefault("Action")
  valid_607445 = validateParameter(valid_607445, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_607445 != nil:
    section.add "Action", valid_607445
  var valid_607446 = query.getOrDefault("Version")
  valid_607446 = validateParameter(valid_607446, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607446 != nil:
    section.add "Version", valid_607446
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607447 = header.getOrDefault("X-Amz-Signature")
  valid_607447 = validateParameter(valid_607447, JString, required = false,
                                 default = nil)
  if valid_607447 != nil:
    section.add "X-Amz-Signature", valid_607447
  var valid_607448 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607448 = validateParameter(valid_607448, JString, required = false,
                                 default = nil)
  if valid_607448 != nil:
    section.add "X-Amz-Content-Sha256", valid_607448
  var valid_607449 = header.getOrDefault("X-Amz-Date")
  valid_607449 = validateParameter(valid_607449, JString, required = false,
                                 default = nil)
  if valid_607449 != nil:
    section.add "X-Amz-Date", valid_607449
  var valid_607450 = header.getOrDefault("X-Amz-Credential")
  valid_607450 = validateParameter(valid_607450, JString, required = false,
                                 default = nil)
  if valid_607450 != nil:
    section.add "X-Amz-Credential", valid_607450
  var valid_607451 = header.getOrDefault("X-Amz-Security-Token")
  valid_607451 = validateParameter(valid_607451, JString, required = false,
                                 default = nil)
  if valid_607451 != nil:
    section.add "X-Amz-Security-Token", valid_607451
  var valid_607452 = header.getOrDefault("X-Amz-Algorithm")
  valid_607452 = validateParameter(valid_607452, JString, required = false,
                                 default = nil)
  if valid_607452 != nil:
    section.add "X-Amz-Algorithm", valid_607452
  var valid_607453 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607453 = validateParameter(valid_607453, JString, required = false,
                                 default = nil)
  if valid_607453 != nil:
    section.add "X-Amz-SignedHeaders", valid_607453
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_607454 = formData.getOrDefault("MaxRecords")
  valid_607454 = validateParameter(valid_607454, JInt, required = false, default = nil)
  if valid_607454 != nil:
    section.add "MaxRecords", valid_607454
  var valid_607455 = formData.getOrDefault("DBParameterGroupName")
  valid_607455 = validateParameter(valid_607455, JString, required = false,
                                 default = nil)
  if valid_607455 != nil:
    section.add "DBParameterGroupName", valid_607455
  var valid_607456 = formData.getOrDefault("Marker")
  valid_607456 = validateParameter(valid_607456, JString, required = false,
                                 default = nil)
  if valid_607456 != nil:
    section.add "Marker", valid_607456
  var valid_607457 = formData.getOrDefault("Filters")
  valid_607457 = validateParameter(valid_607457, JArray, required = false,
                                 default = nil)
  if valid_607457 != nil:
    section.add "Filters", valid_607457
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607458: Call_PostDescribeDBParameterGroups_607442; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  let valid = call_607458.validator(path, query, header, formData, body)
  let scheme = call_607458.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607458.url(scheme.get, call_607458.host, call_607458.base,
                         call_607458.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607458, url, valid)

proc call*(call_607459: Call_PostDescribeDBParameterGroups_607442;
          MaxRecords: int = 0; DBParameterGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBParameterGroups"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameterGroups
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_607460 = newJObject()
  var formData_607461 = newJObject()
  add(formData_607461, "MaxRecords", newJInt(MaxRecords))
  add(formData_607461, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_607461, "Marker", newJString(Marker))
  add(query_607460, "Action", newJString(Action))
  if Filters != nil:
    formData_607461.add "Filters", Filters
  add(query_607460, "Version", newJString(Version))
  result = call_607459.call(nil, query_607460, nil, formData_607461, nil)

var postDescribeDBParameterGroups* = Call_PostDescribeDBParameterGroups_607442(
    name: "postDescribeDBParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_PostDescribeDBParameterGroups_607443, base: "/",
    url: url_PostDescribeDBParameterGroups_607444,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameterGroups_607423 = ref object of OpenApiRestCall_604389
proc url_GetDescribeDBParameterGroups_607425(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBParameterGroups_607424(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607426 = query.getOrDefault("Marker")
  valid_607426 = validateParameter(valid_607426, JString, required = false,
                                 default = nil)
  if valid_607426 != nil:
    section.add "Marker", valid_607426
  var valid_607427 = query.getOrDefault("DBParameterGroupName")
  valid_607427 = validateParameter(valid_607427, JString, required = false,
                                 default = nil)
  if valid_607427 != nil:
    section.add "DBParameterGroupName", valid_607427
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607428 = query.getOrDefault("Action")
  valid_607428 = validateParameter(valid_607428, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_607428 != nil:
    section.add "Action", valid_607428
  var valid_607429 = query.getOrDefault("Version")
  valid_607429 = validateParameter(valid_607429, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607429 != nil:
    section.add "Version", valid_607429
  var valid_607430 = query.getOrDefault("Filters")
  valid_607430 = validateParameter(valid_607430, JArray, required = false,
                                 default = nil)
  if valid_607430 != nil:
    section.add "Filters", valid_607430
  var valid_607431 = query.getOrDefault("MaxRecords")
  valid_607431 = validateParameter(valid_607431, JInt, required = false, default = nil)
  if valid_607431 != nil:
    section.add "MaxRecords", valid_607431
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607432 = header.getOrDefault("X-Amz-Signature")
  valid_607432 = validateParameter(valid_607432, JString, required = false,
                                 default = nil)
  if valid_607432 != nil:
    section.add "X-Amz-Signature", valid_607432
  var valid_607433 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607433 = validateParameter(valid_607433, JString, required = false,
                                 default = nil)
  if valid_607433 != nil:
    section.add "X-Amz-Content-Sha256", valid_607433
  var valid_607434 = header.getOrDefault("X-Amz-Date")
  valid_607434 = validateParameter(valid_607434, JString, required = false,
                                 default = nil)
  if valid_607434 != nil:
    section.add "X-Amz-Date", valid_607434
  var valid_607435 = header.getOrDefault("X-Amz-Credential")
  valid_607435 = validateParameter(valid_607435, JString, required = false,
                                 default = nil)
  if valid_607435 != nil:
    section.add "X-Amz-Credential", valid_607435
  var valid_607436 = header.getOrDefault("X-Amz-Security-Token")
  valid_607436 = validateParameter(valid_607436, JString, required = false,
                                 default = nil)
  if valid_607436 != nil:
    section.add "X-Amz-Security-Token", valid_607436
  var valid_607437 = header.getOrDefault("X-Amz-Algorithm")
  valid_607437 = validateParameter(valid_607437, JString, required = false,
                                 default = nil)
  if valid_607437 != nil:
    section.add "X-Amz-Algorithm", valid_607437
  var valid_607438 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607438 = validateParameter(valid_607438, JString, required = false,
                                 default = nil)
  if valid_607438 != nil:
    section.add "X-Amz-SignedHeaders", valid_607438
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607439: Call_GetDescribeDBParameterGroups_607423; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  let valid = call_607439.validator(path, query, header, formData, body)
  let scheme = call_607439.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607439.url(scheme.get, call_607439.host, call_607439.base,
                         call_607439.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607439, url, valid)

proc call*(call_607440: Call_GetDescribeDBParameterGroups_607423;
          Marker: string = ""; DBParameterGroupName: string = "";
          Action: string = "DescribeDBParameterGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBParameterGroups
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607441 = newJObject()
  add(query_607441, "Marker", newJString(Marker))
  add(query_607441, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_607441, "Action", newJString(Action))
  add(query_607441, "Version", newJString(Version))
  if Filters != nil:
    query_607441.add "Filters", Filters
  add(query_607441, "MaxRecords", newJInt(MaxRecords))
  result = call_607440.call(nil, query_607441, nil, nil, nil)

var getDescribeDBParameterGroups* = Call_GetDescribeDBParameterGroups_607423(
    name: "getDescribeDBParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_GetDescribeDBParameterGroups_607424, base: "/",
    url: url_GetDescribeDBParameterGroups_607425,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameters_607482 = ref object of OpenApiRestCall_604389
proc url_PostDescribeDBParameters_607484(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBParameters_607483(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607485 = query.getOrDefault("Action")
  valid_607485 = validateParameter(valid_607485, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_607485 != nil:
    section.add "Action", valid_607485
  var valid_607486 = query.getOrDefault("Version")
  valid_607486 = validateParameter(valid_607486, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607486 != nil:
    section.add "Version", valid_607486
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607487 = header.getOrDefault("X-Amz-Signature")
  valid_607487 = validateParameter(valid_607487, JString, required = false,
                                 default = nil)
  if valid_607487 != nil:
    section.add "X-Amz-Signature", valid_607487
  var valid_607488 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607488 = validateParameter(valid_607488, JString, required = false,
                                 default = nil)
  if valid_607488 != nil:
    section.add "X-Amz-Content-Sha256", valid_607488
  var valid_607489 = header.getOrDefault("X-Amz-Date")
  valid_607489 = validateParameter(valid_607489, JString, required = false,
                                 default = nil)
  if valid_607489 != nil:
    section.add "X-Amz-Date", valid_607489
  var valid_607490 = header.getOrDefault("X-Amz-Credential")
  valid_607490 = validateParameter(valid_607490, JString, required = false,
                                 default = nil)
  if valid_607490 != nil:
    section.add "X-Amz-Credential", valid_607490
  var valid_607491 = header.getOrDefault("X-Amz-Security-Token")
  valid_607491 = validateParameter(valid_607491, JString, required = false,
                                 default = nil)
  if valid_607491 != nil:
    section.add "X-Amz-Security-Token", valid_607491
  var valid_607492 = header.getOrDefault("X-Amz-Algorithm")
  valid_607492 = validateParameter(valid_607492, JString, required = false,
                                 default = nil)
  if valid_607492 != nil:
    section.add "X-Amz-Algorithm", valid_607492
  var valid_607493 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607493 = validateParameter(valid_607493, JString, required = false,
                                 default = nil)
  if valid_607493 != nil:
    section.add "X-Amz-SignedHeaders", valid_607493
  result.add "header", section
  ## parameters in `formData` object:
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_607494 = formData.getOrDefault("Source")
  valid_607494 = validateParameter(valid_607494, JString, required = false,
                                 default = nil)
  if valid_607494 != nil:
    section.add "Source", valid_607494
  var valid_607495 = formData.getOrDefault("MaxRecords")
  valid_607495 = validateParameter(valid_607495, JInt, required = false, default = nil)
  if valid_607495 != nil:
    section.add "MaxRecords", valid_607495
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_607496 = formData.getOrDefault("DBParameterGroupName")
  valid_607496 = validateParameter(valid_607496, JString, required = true,
                                 default = nil)
  if valid_607496 != nil:
    section.add "DBParameterGroupName", valid_607496
  var valid_607497 = formData.getOrDefault("Marker")
  valid_607497 = validateParameter(valid_607497, JString, required = false,
                                 default = nil)
  if valid_607497 != nil:
    section.add "Marker", valid_607497
  var valid_607498 = formData.getOrDefault("Filters")
  valid_607498 = validateParameter(valid_607498, JArray, required = false,
                                 default = nil)
  if valid_607498 != nil:
    section.add "Filters", valid_607498
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607499: Call_PostDescribeDBParameters_607482; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_607499.validator(path, query, header, formData, body)
  let scheme = call_607499.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607499.url(scheme.get, call_607499.host, call_607499.base,
                         call_607499.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607499, url, valid)

proc call*(call_607500: Call_PostDescribeDBParameters_607482;
          DBParameterGroupName: string; Source: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeDBParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_607501 = newJObject()
  var formData_607502 = newJObject()
  add(formData_607502, "Source", newJString(Source))
  add(formData_607502, "MaxRecords", newJInt(MaxRecords))
  add(formData_607502, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_607502, "Marker", newJString(Marker))
  add(query_607501, "Action", newJString(Action))
  if Filters != nil:
    formData_607502.add "Filters", Filters
  add(query_607501, "Version", newJString(Version))
  result = call_607500.call(nil, query_607501, nil, formData_607502, nil)

var postDescribeDBParameters* = Call_PostDescribeDBParameters_607482(
    name: "postDescribeDBParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_PostDescribeDBParameters_607483, base: "/",
    url: url_PostDescribeDBParameters_607484, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameters_607462 = ref object of OpenApiRestCall_604389
proc url_GetDescribeDBParameters_607464(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBParameters_607463(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607465 = query.getOrDefault("Marker")
  valid_607465 = validateParameter(valid_607465, JString, required = false,
                                 default = nil)
  if valid_607465 != nil:
    section.add "Marker", valid_607465
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_607466 = query.getOrDefault("DBParameterGroupName")
  valid_607466 = validateParameter(valid_607466, JString, required = true,
                                 default = nil)
  if valid_607466 != nil:
    section.add "DBParameterGroupName", valid_607466
  var valid_607467 = query.getOrDefault("Source")
  valid_607467 = validateParameter(valid_607467, JString, required = false,
                                 default = nil)
  if valid_607467 != nil:
    section.add "Source", valid_607467
  var valid_607468 = query.getOrDefault("Action")
  valid_607468 = validateParameter(valid_607468, JString, required = true,
                                 default = newJString("DescribeDBParameters"))
  if valid_607468 != nil:
    section.add "Action", valid_607468
  var valid_607469 = query.getOrDefault("Version")
  valid_607469 = validateParameter(valid_607469, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607469 != nil:
    section.add "Version", valid_607469
  var valid_607470 = query.getOrDefault("Filters")
  valid_607470 = validateParameter(valid_607470, JArray, required = false,
                                 default = nil)
  if valid_607470 != nil:
    section.add "Filters", valid_607470
  var valid_607471 = query.getOrDefault("MaxRecords")
  valid_607471 = validateParameter(valid_607471, JInt, required = false, default = nil)
  if valid_607471 != nil:
    section.add "MaxRecords", valid_607471
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607472 = header.getOrDefault("X-Amz-Signature")
  valid_607472 = validateParameter(valid_607472, JString, required = false,
                                 default = nil)
  if valid_607472 != nil:
    section.add "X-Amz-Signature", valid_607472
  var valid_607473 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607473 = validateParameter(valid_607473, JString, required = false,
                                 default = nil)
  if valid_607473 != nil:
    section.add "X-Amz-Content-Sha256", valid_607473
  var valid_607474 = header.getOrDefault("X-Amz-Date")
  valid_607474 = validateParameter(valid_607474, JString, required = false,
                                 default = nil)
  if valid_607474 != nil:
    section.add "X-Amz-Date", valid_607474
  var valid_607475 = header.getOrDefault("X-Amz-Credential")
  valid_607475 = validateParameter(valid_607475, JString, required = false,
                                 default = nil)
  if valid_607475 != nil:
    section.add "X-Amz-Credential", valid_607475
  var valid_607476 = header.getOrDefault("X-Amz-Security-Token")
  valid_607476 = validateParameter(valid_607476, JString, required = false,
                                 default = nil)
  if valid_607476 != nil:
    section.add "X-Amz-Security-Token", valid_607476
  var valid_607477 = header.getOrDefault("X-Amz-Algorithm")
  valid_607477 = validateParameter(valid_607477, JString, required = false,
                                 default = nil)
  if valid_607477 != nil:
    section.add "X-Amz-Algorithm", valid_607477
  var valid_607478 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607478 = validateParameter(valid_607478, JString, required = false,
                                 default = nil)
  if valid_607478 != nil:
    section.add "X-Amz-SignedHeaders", valid_607478
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607479: Call_GetDescribeDBParameters_607462; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_607479.validator(path, query, header, formData, body)
  let scheme = call_607479.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607479.url(scheme.get, call_607479.host, call_607479.base,
                         call_607479.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607479, url, valid)

proc call*(call_607480: Call_GetDescribeDBParameters_607462;
          DBParameterGroupName: string; Marker: string = ""; Source: string = "";
          Action: string = "DescribeDBParameters"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607481 = newJObject()
  add(query_607481, "Marker", newJString(Marker))
  add(query_607481, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_607481, "Source", newJString(Source))
  add(query_607481, "Action", newJString(Action))
  add(query_607481, "Version", newJString(Version))
  if Filters != nil:
    query_607481.add "Filters", Filters
  add(query_607481, "MaxRecords", newJInt(MaxRecords))
  result = call_607480.call(nil, query_607481, nil, nil, nil)

var getDescribeDBParameters* = Call_GetDescribeDBParameters_607462(
    name: "getDescribeDBParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_GetDescribeDBParameters_607463, base: "/",
    url: url_GetDescribeDBParameters_607464, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBProxies_607522 = ref object of OpenApiRestCall_604389
proc url_PostDescribeDBProxies_607524(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBProxies_607523(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607525 = query.getOrDefault("Action")
  valid_607525 = validateParameter(valid_607525, JString, required = true,
                                 default = newJString("DescribeDBProxies"))
  if valid_607525 != nil:
    section.add "Action", valid_607525
  var valid_607526 = query.getOrDefault("Version")
  valid_607526 = validateParameter(valid_607526, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607526 != nil:
    section.add "Version", valid_607526
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607527 = header.getOrDefault("X-Amz-Signature")
  valid_607527 = validateParameter(valid_607527, JString, required = false,
                                 default = nil)
  if valid_607527 != nil:
    section.add "X-Amz-Signature", valid_607527
  var valid_607528 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607528 = validateParameter(valid_607528, JString, required = false,
                                 default = nil)
  if valid_607528 != nil:
    section.add "X-Amz-Content-Sha256", valid_607528
  var valid_607529 = header.getOrDefault("X-Amz-Date")
  valid_607529 = validateParameter(valid_607529, JString, required = false,
                                 default = nil)
  if valid_607529 != nil:
    section.add "X-Amz-Date", valid_607529
  var valid_607530 = header.getOrDefault("X-Amz-Credential")
  valid_607530 = validateParameter(valid_607530, JString, required = false,
                                 default = nil)
  if valid_607530 != nil:
    section.add "X-Amz-Credential", valid_607530
  var valid_607531 = header.getOrDefault("X-Amz-Security-Token")
  valid_607531 = validateParameter(valid_607531, JString, required = false,
                                 default = nil)
  if valid_607531 != nil:
    section.add "X-Amz-Security-Token", valid_607531
  var valid_607532 = header.getOrDefault("X-Amz-Algorithm")
  valid_607532 = validateParameter(valid_607532, JString, required = false,
                                 default = nil)
  if valid_607532 != nil:
    section.add "X-Amz-Algorithm", valid_607532
  var valid_607533 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607533 = validateParameter(valid_607533, JString, required = false,
                                 default = nil)
  if valid_607533 != nil:
    section.add "X-Amz-SignedHeaders", valid_607533
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: JString
  ##              : The name of the DB proxy.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_607534 = formData.getOrDefault("MaxRecords")
  valid_607534 = validateParameter(valid_607534, JInt, required = false, default = nil)
  if valid_607534 != nil:
    section.add "MaxRecords", valid_607534
  var valid_607535 = formData.getOrDefault("Marker")
  valid_607535 = validateParameter(valid_607535, JString, required = false,
                                 default = nil)
  if valid_607535 != nil:
    section.add "Marker", valid_607535
  var valid_607536 = formData.getOrDefault("DBProxyName")
  valid_607536 = validateParameter(valid_607536, JString, required = false,
                                 default = nil)
  if valid_607536 != nil:
    section.add "DBProxyName", valid_607536
  var valid_607537 = formData.getOrDefault("Filters")
  valid_607537 = validateParameter(valid_607537, JArray, required = false,
                                 default = nil)
  if valid_607537 != nil:
    section.add "Filters", valid_607537
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607538: Call_PostDescribeDBProxies_607522; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  let valid = call_607538.validator(path, query, header, formData, body)
  let scheme = call_607538.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607538.url(scheme.get, call_607538.host, call_607538.base,
                         call_607538.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607538, url, valid)

proc call*(call_607539: Call_PostDescribeDBProxies_607522; MaxRecords: int = 0;
          Marker: string = ""; DBProxyName: string = "";
          Action: string = "DescribeDBProxies"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBProxies
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: string
  ##              : The name of the DB proxy.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_607540 = newJObject()
  var formData_607541 = newJObject()
  add(formData_607541, "MaxRecords", newJInt(MaxRecords))
  add(formData_607541, "Marker", newJString(Marker))
  add(formData_607541, "DBProxyName", newJString(DBProxyName))
  add(query_607540, "Action", newJString(Action))
  if Filters != nil:
    formData_607541.add "Filters", Filters
  add(query_607540, "Version", newJString(Version))
  result = call_607539.call(nil, query_607540, nil, formData_607541, nil)

var postDescribeDBProxies* = Call_PostDescribeDBProxies_607522(
    name: "postDescribeDBProxies", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxies",
    validator: validate_PostDescribeDBProxies_607523, base: "/",
    url: url_PostDescribeDBProxies_607524, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBProxies_607503 = ref object of OpenApiRestCall_604389
proc url_GetDescribeDBProxies_607505(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBProxies_607504(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString
  ##              : The name of the DB proxy.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607506 = query.getOrDefault("Marker")
  valid_607506 = validateParameter(valid_607506, JString, required = false,
                                 default = nil)
  if valid_607506 != nil:
    section.add "Marker", valid_607506
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607507 = query.getOrDefault("Action")
  valid_607507 = validateParameter(valid_607507, JString, required = true,
                                 default = newJString("DescribeDBProxies"))
  if valid_607507 != nil:
    section.add "Action", valid_607507
  var valid_607508 = query.getOrDefault("Version")
  valid_607508 = validateParameter(valid_607508, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607508 != nil:
    section.add "Version", valid_607508
  var valid_607509 = query.getOrDefault("DBProxyName")
  valid_607509 = validateParameter(valid_607509, JString, required = false,
                                 default = nil)
  if valid_607509 != nil:
    section.add "DBProxyName", valid_607509
  var valid_607510 = query.getOrDefault("Filters")
  valid_607510 = validateParameter(valid_607510, JArray, required = false,
                                 default = nil)
  if valid_607510 != nil:
    section.add "Filters", valid_607510
  var valid_607511 = query.getOrDefault("MaxRecords")
  valid_607511 = validateParameter(valid_607511, JInt, required = false, default = nil)
  if valid_607511 != nil:
    section.add "MaxRecords", valid_607511
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607512 = header.getOrDefault("X-Amz-Signature")
  valid_607512 = validateParameter(valid_607512, JString, required = false,
                                 default = nil)
  if valid_607512 != nil:
    section.add "X-Amz-Signature", valid_607512
  var valid_607513 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607513 = validateParameter(valid_607513, JString, required = false,
                                 default = nil)
  if valid_607513 != nil:
    section.add "X-Amz-Content-Sha256", valid_607513
  var valid_607514 = header.getOrDefault("X-Amz-Date")
  valid_607514 = validateParameter(valid_607514, JString, required = false,
                                 default = nil)
  if valid_607514 != nil:
    section.add "X-Amz-Date", valid_607514
  var valid_607515 = header.getOrDefault("X-Amz-Credential")
  valid_607515 = validateParameter(valid_607515, JString, required = false,
                                 default = nil)
  if valid_607515 != nil:
    section.add "X-Amz-Credential", valid_607515
  var valid_607516 = header.getOrDefault("X-Amz-Security-Token")
  valid_607516 = validateParameter(valid_607516, JString, required = false,
                                 default = nil)
  if valid_607516 != nil:
    section.add "X-Amz-Security-Token", valid_607516
  var valid_607517 = header.getOrDefault("X-Amz-Algorithm")
  valid_607517 = validateParameter(valid_607517, JString, required = false,
                                 default = nil)
  if valid_607517 != nil:
    section.add "X-Amz-Algorithm", valid_607517
  var valid_607518 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607518 = validateParameter(valid_607518, JString, required = false,
                                 default = nil)
  if valid_607518 != nil:
    section.add "X-Amz-SignedHeaders", valid_607518
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607519: Call_GetDescribeDBProxies_607503; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  let valid = call_607519.validator(path, query, header, formData, body)
  let scheme = call_607519.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607519.url(scheme.get, call_607519.host, call_607519.base,
                         call_607519.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607519, url, valid)

proc call*(call_607520: Call_GetDescribeDBProxies_607503; Marker: string = "";
          Action: string = "DescribeDBProxies"; Version: string = "2014-10-31";
          DBProxyName: string = ""; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBProxies
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string
  ##              : The name of the DB proxy.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607521 = newJObject()
  add(query_607521, "Marker", newJString(Marker))
  add(query_607521, "Action", newJString(Action))
  add(query_607521, "Version", newJString(Version))
  add(query_607521, "DBProxyName", newJString(DBProxyName))
  if Filters != nil:
    query_607521.add "Filters", Filters
  add(query_607521, "MaxRecords", newJInt(MaxRecords))
  result = call_607520.call(nil, query_607521, nil, nil, nil)

var getDescribeDBProxies* = Call_GetDescribeDBProxies_607503(
    name: "getDescribeDBProxies", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxies",
    validator: validate_GetDescribeDBProxies_607504, base: "/",
    url: url_GetDescribeDBProxies_607505, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBProxyTargetGroups_607562 = ref object of OpenApiRestCall_604389
proc url_PostDescribeDBProxyTargetGroups_607564(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBProxyTargetGroups_607563(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607565 = query.getOrDefault("Action")
  valid_607565 = validateParameter(valid_607565, JString, required = true, default = newJString(
      "DescribeDBProxyTargetGroups"))
  if valid_607565 != nil:
    section.add "Action", valid_607565
  var valid_607566 = query.getOrDefault("Version")
  valid_607566 = validateParameter(valid_607566, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607566 != nil:
    section.add "Version", valid_607566
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607567 = header.getOrDefault("X-Amz-Signature")
  valid_607567 = validateParameter(valid_607567, JString, required = false,
                                 default = nil)
  if valid_607567 != nil:
    section.add "X-Amz-Signature", valid_607567
  var valid_607568 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607568 = validateParameter(valid_607568, JString, required = false,
                                 default = nil)
  if valid_607568 != nil:
    section.add "X-Amz-Content-Sha256", valid_607568
  var valid_607569 = header.getOrDefault("X-Amz-Date")
  valid_607569 = validateParameter(valid_607569, JString, required = false,
                                 default = nil)
  if valid_607569 != nil:
    section.add "X-Amz-Date", valid_607569
  var valid_607570 = header.getOrDefault("X-Amz-Credential")
  valid_607570 = validateParameter(valid_607570, JString, required = false,
                                 default = nil)
  if valid_607570 != nil:
    section.add "X-Amz-Credential", valid_607570
  var valid_607571 = header.getOrDefault("X-Amz-Security-Token")
  valid_607571 = validateParameter(valid_607571, JString, required = false,
                                 default = nil)
  if valid_607571 != nil:
    section.add "X-Amz-Security-Token", valid_607571
  var valid_607572 = header.getOrDefault("X-Amz-Algorithm")
  valid_607572 = validateParameter(valid_607572, JString, required = false,
                                 default = nil)
  if valid_607572 != nil:
    section.add "X-Amz-Algorithm", valid_607572
  var valid_607573 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607573 = validateParameter(valid_607573, JString, required = false,
                                 default = nil)
  if valid_607573 != nil:
    section.add "X-Amz-SignedHeaders", valid_607573
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_607574 = formData.getOrDefault("MaxRecords")
  valid_607574 = validateParameter(valid_607574, JInt, required = false, default = nil)
  if valid_607574 != nil:
    section.add "MaxRecords", valid_607574
  var valid_607575 = formData.getOrDefault("TargetGroupName")
  valid_607575 = validateParameter(valid_607575, JString, required = false,
                                 default = nil)
  if valid_607575 != nil:
    section.add "TargetGroupName", valid_607575
  var valid_607576 = formData.getOrDefault("Marker")
  valid_607576 = validateParameter(valid_607576, JString, required = false,
                                 default = nil)
  if valid_607576 != nil:
    section.add "Marker", valid_607576
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_607577 = formData.getOrDefault("DBProxyName")
  valid_607577 = validateParameter(valid_607577, JString, required = true,
                                 default = nil)
  if valid_607577 != nil:
    section.add "DBProxyName", valid_607577
  var valid_607578 = formData.getOrDefault("Filters")
  valid_607578 = validateParameter(valid_607578, JArray, required = false,
                                 default = nil)
  if valid_607578 != nil:
    section.add "Filters", valid_607578
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607579: Call_PostDescribeDBProxyTargetGroups_607562;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  let valid = call_607579.validator(path, query, header, formData, body)
  let scheme = call_607579.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607579.url(scheme.get, call_607579.host, call_607579.base,
                         call_607579.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607579, url, valid)

proc call*(call_607580: Call_PostDescribeDBProxyTargetGroups_607562;
          DBProxyName: string; MaxRecords: int = 0; TargetGroupName: string = "";
          Marker: string = ""; Action: string = "DescribeDBProxyTargetGroups";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBProxyTargetGroups
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_607581 = newJObject()
  var formData_607582 = newJObject()
  add(formData_607582, "MaxRecords", newJInt(MaxRecords))
  add(formData_607582, "TargetGroupName", newJString(TargetGroupName))
  add(formData_607582, "Marker", newJString(Marker))
  add(formData_607582, "DBProxyName", newJString(DBProxyName))
  add(query_607581, "Action", newJString(Action))
  if Filters != nil:
    formData_607582.add "Filters", Filters
  add(query_607581, "Version", newJString(Version))
  result = call_607580.call(nil, query_607581, nil, formData_607582, nil)

var postDescribeDBProxyTargetGroups* = Call_PostDescribeDBProxyTargetGroups_607562(
    name: "postDescribeDBProxyTargetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargetGroups",
    validator: validate_PostDescribeDBProxyTargetGroups_607563, base: "/",
    url: url_PostDescribeDBProxyTargetGroups_607564,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBProxyTargetGroups_607542 = ref object of OpenApiRestCall_604389
proc url_GetDescribeDBProxyTargetGroups_607544(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBProxyTargetGroups_607543(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607545 = query.getOrDefault("Marker")
  valid_607545 = validateParameter(valid_607545, JString, required = false,
                                 default = nil)
  if valid_607545 != nil:
    section.add "Marker", valid_607545
  var valid_607546 = query.getOrDefault("TargetGroupName")
  valid_607546 = validateParameter(valid_607546, JString, required = false,
                                 default = nil)
  if valid_607546 != nil:
    section.add "TargetGroupName", valid_607546
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607547 = query.getOrDefault("Action")
  valid_607547 = validateParameter(valid_607547, JString, required = true, default = newJString(
      "DescribeDBProxyTargetGroups"))
  if valid_607547 != nil:
    section.add "Action", valid_607547
  var valid_607548 = query.getOrDefault("Version")
  valid_607548 = validateParameter(valid_607548, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607548 != nil:
    section.add "Version", valid_607548
  var valid_607549 = query.getOrDefault("DBProxyName")
  valid_607549 = validateParameter(valid_607549, JString, required = true,
                                 default = nil)
  if valid_607549 != nil:
    section.add "DBProxyName", valid_607549
  var valid_607550 = query.getOrDefault("Filters")
  valid_607550 = validateParameter(valid_607550, JArray, required = false,
                                 default = nil)
  if valid_607550 != nil:
    section.add "Filters", valid_607550
  var valid_607551 = query.getOrDefault("MaxRecords")
  valid_607551 = validateParameter(valid_607551, JInt, required = false, default = nil)
  if valid_607551 != nil:
    section.add "MaxRecords", valid_607551
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607552 = header.getOrDefault("X-Amz-Signature")
  valid_607552 = validateParameter(valid_607552, JString, required = false,
                                 default = nil)
  if valid_607552 != nil:
    section.add "X-Amz-Signature", valid_607552
  var valid_607553 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607553 = validateParameter(valid_607553, JString, required = false,
                                 default = nil)
  if valid_607553 != nil:
    section.add "X-Amz-Content-Sha256", valid_607553
  var valid_607554 = header.getOrDefault("X-Amz-Date")
  valid_607554 = validateParameter(valid_607554, JString, required = false,
                                 default = nil)
  if valid_607554 != nil:
    section.add "X-Amz-Date", valid_607554
  var valid_607555 = header.getOrDefault("X-Amz-Credential")
  valid_607555 = validateParameter(valid_607555, JString, required = false,
                                 default = nil)
  if valid_607555 != nil:
    section.add "X-Amz-Credential", valid_607555
  var valid_607556 = header.getOrDefault("X-Amz-Security-Token")
  valid_607556 = validateParameter(valid_607556, JString, required = false,
                                 default = nil)
  if valid_607556 != nil:
    section.add "X-Amz-Security-Token", valid_607556
  var valid_607557 = header.getOrDefault("X-Amz-Algorithm")
  valid_607557 = validateParameter(valid_607557, JString, required = false,
                                 default = nil)
  if valid_607557 != nil:
    section.add "X-Amz-Algorithm", valid_607557
  var valid_607558 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607558 = validateParameter(valid_607558, JString, required = false,
                                 default = nil)
  if valid_607558 != nil:
    section.add "X-Amz-SignedHeaders", valid_607558
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607559: Call_GetDescribeDBProxyTargetGroups_607542; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  let valid = call_607559.validator(path, query, header, formData, body)
  let scheme = call_607559.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607559.url(scheme.get, call_607559.host, call_607559.base,
                         call_607559.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607559, url, valid)

proc call*(call_607560: Call_GetDescribeDBProxyTargetGroups_607542;
          DBProxyName: string; Marker: string = ""; TargetGroupName: string = "";
          Action: string = "DescribeDBProxyTargetGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBProxyTargetGroups
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607561 = newJObject()
  add(query_607561, "Marker", newJString(Marker))
  add(query_607561, "TargetGroupName", newJString(TargetGroupName))
  add(query_607561, "Action", newJString(Action))
  add(query_607561, "Version", newJString(Version))
  add(query_607561, "DBProxyName", newJString(DBProxyName))
  if Filters != nil:
    query_607561.add "Filters", Filters
  add(query_607561, "MaxRecords", newJInt(MaxRecords))
  result = call_607560.call(nil, query_607561, nil, nil, nil)

var getDescribeDBProxyTargetGroups* = Call_GetDescribeDBProxyTargetGroups_607542(
    name: "getDescribeDBProxyTargetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargetGroups",
    validator: validate_GetDescribeDBProxyTargetGroups_607543, base: "/",
    url: url_GetDescribeDBProxyTargetGroups_607544,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBProxyTargets_607603 = ref object of OpenApiRestCall_604389
proc url_PostDescribeDBProxyTargets_607605(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBProxyTargets_607604(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607606 = query.getOrDefault("Action")
  valid_607606 = validateParameter(valid_607606, JString, required = true,
                                 default = newJString("DescribeDBProxyTargets"))
  if valid_607606 != nil:
    section.add "Action", valid_607606
  var valid_607607 = query.getOrDefault("Version")
  valid_607607 = validateParameter(valid_607607, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607607 != nil:
    section.add "Version", valid_607607
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607608 = header.getOrDefault("X-Amz-Signature")
  valid_607608 = validateParameter(valid_607608, JString, required = false,
                                 default = nil)
  if valid_607608 != nil:
    section.add "X-Amz-Signature", valid_607608
  var valid_607609 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607609 = validateParameter(valid_607609, JString, required = false,
                                 default = nil)
  if valid_607609 != nil:
    section.add "X-Amz-Content-Sha256", valid_607609
  var valid_607610 = header.getOrDefault("X-Amz-Date")
  valid_607610 = validateParameter(valid_607610, JString, required = false,
                                 default = nil)
  if valid_607610 != nil:
    section.add "X-Amz-Date", valid_607610
  var valid_607611 = header.getOrDefault("X-Amz-Credential")
  valid_607611 = validateParameter(valid_607611, JString, required = false,
                                 default = nil)
  if valid_607611 != nil:
    section.add "X-Amz-Credential", valid_607611
  var valid_607612 = header.getOrDefault("X-Amz-Security-Token")
  valid_607612 = validateParameter(valid_607612, JString, required = false,
                                 default = nil)
  if valid_607612 != nil:
    section.add "X-Amz-Security-Token", valid_607612
  var valid_607613 = header.getOrDefault("X-Amz-Algorithm")
  valid_607613 = validateParameter(valid_607613, JString, required = false,
                                 default = nil)
  if valid_607613 != nil:
    section.add "X-Amz-Algorithm", valid_607613
  var valid_607614 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607614 = validateParameter(valid_607614, JString, required = false,
                                 default = nil)
  if valid_607614 != nil:
    section.add "X-Amz-SignedHeaders", valid_607614
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  section = newJObject()
  var valid_607615 = formData.getOrDefault("MaxRecords")
  valid_607615 = validateParameter(valid_607615, JInt, required = false, default = nil)
  if valid_607615 != nil:
    section.add "MaxRecords", valid_607615
  var valid_607616 = formData.getOrDefault("TargetGroupName")
  valid_607616 = validateParameter(valid_607616, JString, required = false,
                                 default = nil)
  if valid_607616 != nil:
    section.add "TargetGroupName", valid_607616
  var valid_607617 = formData.getOrDefault("Marker")
  valid_607617 = validateParameter(valid_607617, JString, required = false,
                                 default = nil)
  if valid_607617 != nil:
    section.add "Marker", valid_607617
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_607618 = formData.getOrDefault("DBProxyName")
  valid_607618 = validateParameter(valid_607618, JString, required = true,
                                 default = nil)
  if valid_607618 != nil:
    section.add "DBProxyName", valid_607618
  var valid_607619 = formData.getOrDefault("Filters")
  valid_607619 = validateParameter(valid_607619, JArray, required = false,
                                 default = nil)
  if valid_607619 != nil:
    section.add "Filters", valid_607619
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607620: Call_PostDescribeDBProxyTargets_607603; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  let valid = call_607620.validator(path, query, header, formData, body)
  let scheme = call_607620.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607620.url(scheme.get, call_607620.host, call_607620.base,
                         call_607620.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607620, url, valid)

proc call*(call_607621: Call_PostDescribeDBProxyTargets_607603;
          DBProxyName: string; MaxRecords: int = 0; TargetGroupName: string = "";
          Marker: string = ""; Action: string = "DescribeDBProxyTargets";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Version: string (required)
  var query_607622 = newJObject()
  var formData_607623 = newJObject()
  add(formData_607623, "MaxRecords", newJInt(MaxRecords))
  add(formData_607623, "TargetGroupName", newJString(TargetGroupName))
  add(formData_607623, "Marker", newJString(Marker))
  add(formData_607623, "DBProxyName", newJString(DBProxyName))
  add(query_607622, "Action", newJString(Action))
  if Filters != nil:
    formData_607623.add "Filters", Filters
  add(query_607622, "Version", newJString(Version))
  result = call_607621.call(nil, query_607622, nil, formData_607623, nil)

var postDescribeDBProxyTargets* = Call_PostDescribeDBProxyTargets_607603(
    name: "postDescribeDBProxyTargets", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargets",
    validator: validate_PostDescribeDBProxyTargets_607604, base: "/",
    url: url_PostDescribeDBProxyTargets_607605,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBProxyTargets_607583 = ref object of OpenApiRestCall_604389
proc url_GetDescribeDBProxyTargets_607585(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBProxyTargets_607584(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607586 = query.getOrDefault("Marker")
  valid_607586 = validateParameter(valid_607586, JString, required = false,
                                 default = nil)
  if valid_607586 != nil:
    section.add "Marker", valid_607586
  var valid_607587 = query.getOrDefault("TargetGroupName")
  valid_607587 = validateParameter(valid_607587, JString, required = false,
                                 default = nil)
  if valid_607587 != nil:
    section.add "TargetGroupName", valid_607587
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607588 = query.getOrDefault("Action")
  valid_607588 = validateParameter(valid_607588, JString, required = true,
                                 default = newJString("DescribeDBProxyTargets"))
  if valid_607588 != nil:
    section.add "Action", valid_607588
  var valid_607589 = query.getOrDefault("Version")
  valid_607589 = validateParameter(valid_607589, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607589 != nil:
    section.add "Version", valid_607589
  var valid_607590 = query.getOrDefault("DBProxyName")
  valid_607590 = validateParameter(valid_607590, JString, required = true,
                                 default = nil)
  if valid_607590 != nil:
    section.add "DBProxyName", valid_607590
  var valid_607591 = query.getOrDefault("Filters")
  valid_607591 = validateParameter(valid_607591, JArray, required = false,
                                 default = nil)
  if valid_607591 != nil:
    section.add "Filters", valid_607591
  var valid_607592 = query.getOrDefault("MaxRecords")
  valid_607592 = validateParameter(valid_607592, JInt, required = false, default = nil)
  if valid_607592 != nil:
    section.add "MaxRecords", valid_607592
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607593 = header.getOrDefault("X-Amz-Signature")
  valid_607593 = validateParameter(valid_607593, JString, required = false,
                                 default = nil)
  if valid_607593 != nil:
    section.add "X-Amz-Signature", valid_607593
  var valid_607594 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607594 = validateParameter(valid_607594, JString, required = false,
                                 default = nil)
  if valid_607594 != nil:
    section.add "X-Amz-Content-Sha256", valid_607594
  var valid_607595 = header.getOrDefault("X-Amz-Date")
  valid_607595 = validateParameter(valid_607595, JString, required = false,
                                 default = nil)
  if valid_607595 != nil:
    section.add "X-Amz-Date", valid_607595
  var valid_607596 = header.getOrDefault("X-Amz-Credential")
  valid_607596 = validateParameter(valid_607596, JString, required = false,
                                 default = nil)
  if valid_607596 != nil:
    section.add "X-Amz-Credential", valid_607596
  var valid_607597 = header.getOrDefault("X-Amz-Security-Token")
  valid_607597 = validateParameter(valid_607597, JString, required = false,
                                 default = nil)
  if valid_607597 != nil:
    section.add "X-Amz-Security-Token", valid_607597
  var valid_607598 = header.getOrDefault("X-Amz-Algorithm")
  valid_607598 = validateParameter(valid_607598, JString, required = false,
                                 default = nil)
  if valid_607598 != nil:
    section.add "X-Amz-Algorithm", valid_607598
  var valid_607599 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607599 = validateParameter(valid_607599, JString, required = false,
                                 default = nil)
  if valid_607599 != nil:
    section.add "X-Amz-SignedHeaders", valid_607599
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607600: Call_GetDescribeDBProxyTargets_607583; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  let valid = call_607600.validator(path, query, header, formData, body)
  let scheme = call_607600.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607600.url(scheme.get, call_607600.host, call_607600.base,
                         call_607600.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607600, url, valid)

proc call*(call_607601: Call_GetDescribeDBProxyTargets_607583; DBProxyName: string;
          Marker: string = ""; TargetGroupName: string = "";
          Action: string = "DescribeDBProxyTargets"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607602 = newJObject()
  add(query_607602, "Marker", newJString(Marker))
  add(query_607602, "TargetGroupName", newJString(TargetGroupName))
  add(query_607602, "Action", newJString(Action))
  add(query_607602, "Version", newJString(Version))
  add(query_607602, "DBProxyName", newJString(DBProxyName))
  if Filters != nil:
    query_607602.add "Filters", Filters
  add(query_607602, "MaxRecords", newJInt(MaxRecords))
  result = call_607601.call(nil, query_607602, nil, nil, nil)

var getDescribeDBProxyTargets* = Call_GetDescribeDBProxyTargets_607583(
    name: "getDescribeDBProxyTargets", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargets",
    validator: validate_GetDescribeDBProxyTargets_607584, base: "/",
    url: url_GetDescribeDBProxyTargets_607585,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSecurityGroups_607643 = ref object of OpenApiRestCall_604389
proc url_PostDescribeDBSecurityGroups_607645(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSecurityGroups_607644(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607646 = query.getOrDefault("Action")
  valid_607646 = validateParameter(valid_607646, JString, required = true, default = newJString(
      "DescribeDBSecurityGroups"))
  if valid_607646 != nil:
    section.add "Action", valid_607646
  var valid_607647 = query.getOrDefault("Version")
  valid_607647 = validateParameter(valid_607647, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607647 != nil:
    section.add "Version", valid_607647
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607648 = header.getOrDefault("X-Amz-Signature")
  valid_607648 = validateParameter(valid_607648, JString, required = false,
                                 default = nil)
  if valid_607648 != nil:
    section.add "X-Amz-Signature", valid_607648
  var valid_607649 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607649 = validateParameter(valid_607649, JString, required = false,
                                 default = nil)
  if valid_607649 != nil:
    section.add "X-Amz-Content-Sha256", valid_607649
  var valid_607650 = header.getOrDefault("X-Amz-Date")
  valid_607650 = validateParameter(valid_607650, JString, required = false,
                                 default = nil)
  if valid_607650 != nil:
    section.add "X-Amz-Date", valid_607650
  var valid_607651 = header.getOrDefault("X-Amz-Credential")
  valid_607651 = validateParameter(valid_607651, JString, required = false,
                                 default = nil)
  if valid_607651 != nil:
    section.add "X-Amz-Credential", valid_607651
  var valid_607652 = header.getOrDefault("X-Amz-Security-Token")
  valid_607652 = validateParameter(valid_607652, JString, required = false,
                                 default = nil)
  if valid_607652 != nil:
    section.add "X-Amz-Security-Token", valid_607652
  var valid_607653 = header.getOrDefault("X-Amz-Algorithm")
  valid_607653 = validateParameter(valid_607653, JString, required = false,
                                 default = nil)
  if valid_607653 != nil:
    section.add "X-Amz-Algorithm", valid_607653
  var valid_607654 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607654 = validateParameter(valid_607654, JString, required = false,
                                 default = nil)
  if valid_607654 != nil:
    section.add "X-Amz-SignedHeaders", valid_607654
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString
  ##                      : The name of the DB security group to return details for.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_607655 = formData.getOrDefault("DBSecurityGroupName")
  valid_607655 = validateParameter(valid_607655, JString, required = false,
                                 default = nil)
  if valid_607655 != nil:
    section.add "DBSecurityGroupName", valid_607655
  var valid_607656 = formData.getOrDefault("MaxRecords")
  valid_607656 = validateParameter(valid_607656, JInt, required = false, default = nil)
  if valid_607656 != nil:
    section.add "MaxRecords", valid_607656
  var valid_607657 = formData.getOrDefault("Marker")
  valid_607657 = validateParameter(valid_607657, JString, required = false,
                                 default = nil)
  if valid_607657 != nil:
    section.add "Marker", valid_607657
  var valid_607658 = formData.getOrDefault("Filters")
  valid_607658 = validateParameter(valid_607658, JArray, required = false,
                                 default = nil)
  if valid_607658 != nil:
    section.add "Filters", valid_607658
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607659: Call_PostDescribeDBSecurityGroups_607643; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  let valid = call_607659.validator(path, query, header, formData, body)
  let scheme = call_607659.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607659.url(scheme.get, call_607659.host, call_607659.base,
                         call_607659.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607659, url, valid)

proc call*(call_607660: Call_PostDescribeDBSecurityGroups_607643;
          DBSecurityGroupName: string = ""; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBSecurityGroups"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSecurityGroups
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ##   DBSecurityGroupName: string
  ##                      : The name of the DB security group to return details for.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_607661 = newJObject()
  var formData_607662 = newJObject()
  add(formData_607662, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_607662, "MaxRecords", newJInt(MaxRecords))
  add(formData_607662, "Marker", newJString(Marker))
  add(query_607661, "Action", newJString(Action))
  if Filters != nil:
    formData_607662.add "Filters", Filters
  add(query_607661, "Version", newJString(Version))
  result = call_607660.call(nil, query_607661, nil, formData_607662, nil)

var postDescribeDBSecurityGroups* = Call_PostDescribeDBSecurityGroups_607643(
    name: "postDescribeDBSecurityGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSecurityGroups",
    validator: validate_PostDescribeDBSecurityGroups_607644, base: "/",
    url: url_PostDescribeDBSecurityGroups_607645,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSecurityGroups_607624 = ref object of OpenApiRestCall_604389
proc url_GetDescribeDBSecurityGroups_607626(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSecurityGroups_607625(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSecurityGroupName: JString
  ##                      : The name of the DB security group to return details for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607627 = query.getOrDefault("Marker")
  valid_607627 = validateParameter(valid_607627, JString, required = false,
                                 default = nil)
  if valid_607627 != nil:
    section.add "Marker", valid_607627
  var valid_607628 = query.getOrDefault("DBSecurityGroupName")
  valid_607628 = validateParameter(valid_607628, JString, required = false,
                                 default = nil)
  if valid_607628 != nil:
    section.add "DBSecurityGroupName", valid_607628
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607629 = query.getOrDefault("Action")
  valid_607629 = validateParameter(valid_607629, JString, required = true, default = newJString(
      "DescribeDBSecurityGroups"))
  if valid_607629 != nil:
    section.add "Action", valid_607629
  var valid_607630 = query.getOrDefault("Version")
  valid_607630 = validateParameter(valid_607630, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607630 != nil:
    section.add "Version", valid_607630
  var valid_607631 = query.getOrDefault("Filters")
  valid_607631 = validateParameter(valid_607631, JArray, required = false,
                                 default = nil)
  if valid_607631 != nil:
    section.add "Filters", valid_607631
  var valid_607632 = query.getOrDefault("MaxRecords")
  valid_607632 = validateParameter(valid_607632, JInt, required = false, default = nil)
  if valid_607632 != nil:
    section.add "MaxRecords", valid_607632
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607633 = header.getOrDefault("X-Amz-Signature")
  valid_607633 = validateParameter(valid_607633, JString, required = false,
                                 default = nil)
  if valid_607633 != nil:
    section.add "X-Amz-Signature", valid_607633
  var valid_607634 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607634 = validateParameter(valid_607634, JString, required = false,
                                 default = nil)
  if valid_607634 != nil:
    section.add "X-Amz-Content-Sha256", valid_607634
  var valid_607635 = header.getOrDefault("X-Amz-Date")
  valid_607635 = validateParameter(valid_607635, JString, required = false,
                                 default = nil)
  if valid_607635 != nil:
    section.add "X-Amz-Date", valid_607635
  var valid_607636 = header.getOrDefault("X-Amz-Credential")
  valid_607636 = validateParameter(valid_607636, JString, required = false,
                                 default = nil)
  if valid_607636 != nil:
    section.add "X-Amz-Credential", valid_607636
  var valid_607637 = header.getOrDefault("X-Amz-Security-Token")
  valid_607637 = validateParameter(valid_607637, JString, required = false,
                                 default = nil)
  if valid_607637 != nil:
    section.add "X-Amz-Security-Token", valid_607637
  var valid_607638 = header.getOrDefault("X-Amz-Algorithm")
  valid_607638 = validateParameter(valid_607638, JString, required = false,
                                 default = nil)
  if valid_607638 != nil:
    section.add "X-Amz-Algorithm", valid_607638
  var valid_607639 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607639 = validateParameter(valid_607639, JString, required = false,
                                 default = nil)
  if valid_607639 != nil:
    section.add "X-Amz-SignedHeaders", valid_607639
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607640: Call_GetDescribeDBSecurityGroups_607624; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  let valid = call_607640.validator(path, query, header, formData, body)
  let scheme = call_607640.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607640.url(scheme.get, call_607640.host, call_607640.base,
                         call_607640.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607640, url, valid)

proc call*(call_607641: Call_GetDescribeDBSecurityGroups_607624;
          Marker: string = ""; DBSecurityGroupName: string = "";
          Action: string = "DescribeDBSecurityGroups";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSecurityGroups
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSecurityGroupName: string
  ##                      : The name of the DB security group to return details for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607642 = newJObject()
  add(query_607642, "Marker", newJString(Marker))
  add(query_607642, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_607642, "Action", newJString(Action))
  add(query_607642, "Version", newJString(Version))
  if Filters != nil:
    query_607642.add "Filters", Filters
  add(query_607642, "MaxRecords", newJInt(MaxRecords))
  result = call_607641.call(nil, query_607642, nil, nil, nil)

var getDescribeDBSecurityGroups* = Call_GetDescribeDBSecurityGroups_607624(
    name: "getDescribeDBSecurityGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSecurityGroups",
    validator: validate_GetDescribeDBSecurityGroups_607625, base: "/",
    url: url_GetDescribeDBSecurityGroups_607626,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSnapshotAttributes_607679 = ref object of OpenApiRestCall_604389
proc url_PostDescribeDBSnapshotAttributes_607681(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSnapshotAttributes_607680(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607682 = query.getOrDefault("Action")
  valid_607682 = validateParameter(valid_607682, JString, required = true, default = newJString(
      "DescribeDBSnapshotAttributes"))
  if valid_607682 != nil:
    section.add "Action", valid_607682
  var valid_607683 = query.getOrDefault("Version")
  valid_607683 = validateParameter(valid_607683, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607683 != nil:
    section.add "Version", valid_607683
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607684 = header.getOrDefault("X-Amz-Signature")
  valid_607684 = validateParameter(valid_607684, JString, required = false,
                                 default = nil)
  if valid_607684 != nil:
    section.add "X-Amz-Signature", valid_607684
  var valid_607685 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607685 = validateParameter(valid_607685, JString, required = false,
                                 default = nil)
  if valid_607685 != nil:
    section.add "X-Amz-Content-Sha256", valid_607685
  var valid_607686 = header.getOrDefault("X-Amz-Date")
  valid_607686 = validateParameter(valid_607686, JString, required = false,
                                 default = nil)
  if valid_607686 != nil:
    section.add "X-Amz-Date", valid_607686
  var valid_607687 = header.getOrDefault("X-Amz-Credential")
  valid_607687 = validateParameter(valid_607687, JString, required = false,
                                 default = nil)
  if valid_607687 != nil:
    section.add "X-Amz-Credential", valid_607687
  var valid_607688 = header.getOrDefault("X-Amz-Security-Token")
  valid_607688 = validateParameter(valid_607688, JString, required = false,
                                 default = nil)
  if valid_607688 != nil:
    section.add "X-Amz-Security-Token", valid_607688
  var valid_607689 = header.getOrDefault("X-Amz-Algorithm")
  valid_607689 = validateParameter(valid_607689, JString, required = false,
                                 default = nil)
  if valid_607689 != nil:
    section.add "X-Amz-Algorithm", valid_607689
  var valid_607690 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607690 = validateParameter(valid_607690, JString, required = false,
                                 default = nil)
  if valid_607690 != nil:
    section.add "X-Amz-SignedHeaders", valid_607690
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_607691 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_607691 = validateParameter(valid_607691, JString, required = true,
                                 default = nil)
  if valid_607691 != nil:
    section.add "DBSnapshotIdentifier", valid_607691
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607692: Call_PostDescribeDBSnapshotAttributes_607679;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  let valid = call_607692.validator(path, query, header, formData, body)
  let scheme = call_607692.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607692.url(scheme.get, call_607692.host, call_607692.base,
                         call_607692.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607692, url, valid)

proc call*(call_607693: Call_PostDescribeDBSnapshotAttributes_607679;
          DBSnapshotIdentifier: string;
          Action: string = "DescribeDBSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSnapshotAttributes
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607694 = newJObject()
  var formData_607695 = newJObject()
  add(formData_607695, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_607694, "Action", newJString(Action))
  add(query_607694, "Version", newJString(Version))
  result = call_607693.call(nil, query_607694, nil, formData_607695, nil)

var postDescribeDBSnapshotAttributes* = Call_PostDescribeDBSnapshotAttributes_607679(
    name: "postDescribeDBSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshotAttributes",
    validator: validate_PostDescribeDBSnapshotAttributes_607680, base: "/",
    url: url_PostDescribeDBSnapshotAttributes_607681,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSnapshotAttributes_607663 = ref object of OpenApiRestCall_604389
proc url_GetDescribeDBSnapshotAttributes_607665(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSnapshotAttributes_607664(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_607666 = query.getOrDefault("DBSnapshotIdentifier")
  valid_607666 = validateParameter(valid_607666, JString, required = true,
                                 default = nil)
  if valid_607666 != nil:
    section.add "DBSnapshotIdentifier", valid_607666
  var valid_607667 = query.getOrDefault("Action")
  valid_607667 = validateParameter(valid_607667, JString, required = true, default = newJString(
      "DescribeDBSnapshotAttributes"))
  if valid_607667 != nil:
    section.add "Action", valid_607667
  var valid_607668 = query.getOrDefault("Version")
  valid_607668 = validateParameter(valid_607668, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607668 != nil:
    section.add "Version", valid_607668
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607669 = header.getOrDefault("X-Amz-Signature")
  valid_607669 = validateParameter(valid_607669, JString, required = false,
                                 default = nil)
  if valid_607669 != nil:
    section.add "X-Amz-Signature", valid_607669
  var valid_607670 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607670 = validateParameter(valid_607670, JString, required = false,
                                 default = nil)
  if valid_607670 != nil:
    section.add "X-Amz-Content-Sha256", valid_607670
  var valid_607671 = header.getOrDefault("X-Amz-Date")
  valid_607671 = validateParameter(valid_607671, JString, required = false,
                                 default = nil)
  if valid_607671 != nil:
    section.add "X-Amz-Date", valid_607671
  var valid_607672 = header.getOrDefault("X-Amz-Credential")
  valid_607672 = validateParameter(valid_607672, JString, required = false,
                                 default = nil)
  if valid_607672 != nil:
    section.add "X-Amz-Credential", valid_607672
  var valid_607673 = header.getOrDefault("X-Amz-Security-Token")
  valid_607673 = validateParameter(valid_607673, JString, required = false,
                                 default = nil)
  if valid_607673 != nil:
    section.add "X-Amz-Security-Token", valid_607673
  var valid_607674 = header.getOrDefault("X-Amz-Algorithm")
  valid_607674 = validateParameter(valid_607674, JString, required = false,
                                 default = nil)
  if valid_607674 != nil:
    section.add "X-Amz-Algorithm", valid_607674
  var valid_607675 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607675 = validateParameter(valid_607675, JString, required = false,
                                 default = nil)
  if valid_607675 != nil:
    section.add "X-Amz-SignedHeaders", valid_607675
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607676: Call_GetDescribeDBSnapshotAttributes_607663;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  let valid = call_607676.validator(path, query, header, formData, body)
  let scheme = call_607676.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607676.url(scheme.get, call_607676.host, call_607676.base,
                         call_607676.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607676, url, valid)

proc call*(call_607677: Call_GetDescribeDBSnapshotAttributes_607663;
          DBSnapshotIdentifier: string;
          Action: string = "DescribeDBSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBSnapshotAttributes
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_607678 = newJObject()
  add(query_607678, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_607678, "Action", newJString(Action))
  add(query_607678, "Version", newJString(Version))
  result = call_607677.call(nil, query_607678, nil, nil, nil)

var getDescribeDBSnapshotAttributes* = Call_GetDescribeDBSnapshotAttributes_607663(
    name: "getDescribeDBSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshotAttributes",
    validator: validate_GetDescribeDBSnapshotAttributes_607664, base: "/",
    url: url_GetDescribeDBSnapshotAttributes_607665,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSnapshots_607720 = ref object of OpenApiRestCall_604389
proc url_PostDescribeDBSnapshots_607722(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSnapshots_607721(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607723 = query.getOrDefault("Action")
  valid_607723 = validateParameter(valid_607723, JString, required = true,
                                 default = newJString("DescribeDBSnapshots"))
  if valid_607723 != nil:
    section.add "Action", valid_607723
  var valid_607724 = query.getOrDefault("Version")
  valid_607724 = validateParameter(valid_607724, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607724 != nil:
    section.add "Version", valid_607724
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607725 = header.getOrDefault("X-Amz-Signature")
  valid_607725 = validateParameter(valid_607725, JString, required = false,
                                 default = nil)
  if valid_607725 != nil:
    section.add "X-Amz-Signature", valid_607725
  var valid_607726 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607726 = validateParameter(valid_607726, JString, required = false,
                                 default = nil)
  if valid_607726 != nil:
    section.add "X-Amz-Content-Sha256", valid_607726
  var valid_607727 = header.getOrDefault("X-Amz-Date")
  valid_607727 = validateParameter(valid_607727, JString, required = false,
                                 default = nil)
  if valid_607727 != nil:
    section.add "X-Amz-Date", valid_607727
  var valid_607728 = header.getOrDefault("X-Amz-Credential")
  valid_607728 = validateParameter(valid_607728, JString, required = false,
                                 default = nil)
  if valid_607728 != nil:
    section.add "X-Amz-Credential", valid_607728
  var valid_607729 = header.getOrDefault("X-Amz-Security-Token")
  valid_607729 = validateParameter(valid_607729, JString, required = false,
                                 default = nil)
  if valid_607729 != nil:
    section.add "X-Amz-Security-Token", valid_607729
  var valid_607730 = header.getOrDefault("X-Amz-Algorithm")
  valid_607730 = validateParameter(valid_607730, JString, required = false,
                                 default = nil)
  if valid_607730 != nil:
    section.add "X-Amz-Algorithm", valid_607730
  var valid_607731 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607731 = validateParameter(valid_607731, JString, required = false,
                                 default = nil)
  if valid_607731 != nil:
    section.add "X-Amz-SignedHeaders", valid_607731
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DbiResourceId: JString
  ##                : A specific DB resource ID to describe.
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  section = newJObject()
  var valid_607732 = formData.getOrDefault("SnapshotType")
  valid_607732 = validateParameter(valid_607732, JString, required = false,
                                 default = nil)
  if valid_607732 != nil:
    section.add "SnapshotType", valid_607732
  var valid_607733 = formData.getOrDefault("MaxRecords")
  valid_607733 = validateParameter(valid_607733, JInt, required = false, default = nil)
  if valid_607733 != nil:
    section.add "MaxRecords", valid_607733
  var valid_607734 = formData.getOrDefault("IncludePublic")
  valid_607734 = validateParameter(valid_607734, JBool, required = false, default = nil)
  if valid_607734 != nil:
    section.add "IncludePublic", valid_607734
  var valid_607735 = formData.getOrDefault("Marker")
  valid_607735 = validateParameter(valid_607735, JString, required = false,
                                 default = nil)
  if valid_607735 != nil:
    section.add "Marker", valid_607735
  var valid_607736 = formData.getOrDefault("DbiResourceId")
  valid_607736 = validateParameter(valid_607736, JString, required = false,
                                 default = nil)
  if valid_607736 != nil:
    section.add "DbiResourceId", valid_607736
  var valid_607737 = formData.getOrDefault("IncludeShared")
  valid_607737 = validateParameter(valid_607737, JBool, required = false, default = nil)
  if valid_607737 != nil:
    section.add "IncludeShared", valid_607737
  var valid_607738 = formData.getOrDefault("DBInstanceIdentifier")
  valid_607738 = validateParameter(valid_607738, JString, required = false,
                                 default = nil)
  if valid_607738 != nil:
    section.add "DBInstanceIdentifier", valid_607738
  var valid_607739 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_607739 = validateParameter(valid_607739, JString, required = false,
                                 default = nil)
  if valid_607739 != nil:
    section.add "DBSnapshotIdentifier", valid_607739
  var valid_607740 = formData.getOrDefault("Filters")
  valid_607740 = validateParameter(valid_607740, JArray, required = false,
                                 default = nil)
  if valid_607740 != nil:
    section.add "Filters", valid_607740
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607741: Call_PostDescribeDBSnapshots_607720; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  let valid = call_607741.validator(path, query, header, formData, body)
  let scheme = call_607741.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607741.url(scheme.get, call_607741.host, call_607741.base,
                         call_607741.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607741, url, valid)

proc call*(call_607742: Call_PostDescribeDBSnapshots_607720;
          SnapshotType: string = ""; MaxRecords: int = 0; IncludePublic: bool = false;
          Marker: string = ""; DbiResourceId: string = ""; IncludeShared: bool = false;
          DBInstanceIdentifier: string = ""; DBSnapshotIdentifier: string = "";
          Action: string = "DescribeDBSnapshots"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSnapshots
  ## Returns information about DB snapshots. This API action supports pagination.
  ##   SnapshotType: string
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DbiResourceId: string
  ##                : A specific DB resource ID to describe.
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBInstanceIdentifier: string
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   Version: string (required)
  var query_607743 = newJObject()
  var formData_607744 = newJObject()
  add(formData_607744, "SnapshotType", newJString(SnapshotType))
  add(formData_607744, "MaxRecords", newJInt(MaxRecords))
  add(formData_607744, "IncludePublic", newJBool(IncludePublic))
  add(formData_607744, "Marker", newJString(Marker))
  add(formData_607744, "DbiResourceId", newJString(DbiResourceId))
  add(formData_607744, "IncludeShared", newJBool(IncludeShared))
  add(formData_607744, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_607744, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_607743, "Action", newJString(Action))
  if Filters != nil:
    formData_607744.add "Filters", Filters
  add(query_607743, "Version", newJString(Version))
  result = call_607742.call(nil, query_607743, nil, formData_607744, nil)

var postDescribeDBSnapshots* = Call_PostDescribeDBSnapshots_607720(
    name: "postDescribeDBSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshots",
    validator: validate_PostDescribeDBSnapshots_607721, base: "/",
    url: url_PostDescribeDBSnapshots_607722, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSnapshots_607696 = ref object of OpenApiRestCall_604389
proc url_GetDescribeDBSnapshots_607698(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSnapshots_607697(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString
  ##                : A specific DB resource ID to describe.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Action: JString (required)
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607699 = query.getOrDefault("DbiResourceId")
  valid_607699 = validateParameter(valid_607699, JString, required = false,
                                 default = nil)
  if valid_607699 != nil:
    section.add "DbiResourceId", valid_607699
  var valid_607700 = query.getOrDefault("Marker")
  valid_607700 = validateParameter(valid_607700, JString, required = false,
                                 default = nil)
  if valid_607700 != nil:
    section.add "Marker", valid_607700
  var valid_607701 = query.getOrDefault("DBInstanceIdentifier")
  valid_607701 = validateParameter(valid_607701, JString, required = false,
                                 default = nil)
  if valid_607701 != nil:
    section.add "DBInstanceIdentifier", valid_607701
  var valid_607702 = query.getOrDefault("DBSnapshotIdentifier")
  valid_607702 = validateParameter(valid_607702, JString, required = false,
                                 default = nil)
  if valid_607702 != nil:
    section.add "DBSnapshotIdentifier", valid_607702
  var valid_607703 = query.getOrDefault("SnapshotType")
  valid_607703 = validateParameter(valid_607703, JString, required = false,
                                 default = nil)
  if valid_607703 != nil:
    section.add "SnapshotType", valid_607703
  var valid_607704 = query.getOrDefault("IncludePublic")
  valid_607704 = validateParameter(valid_607704, JBool, required = false, default = nil)
  if valid_607704 != nil:
    section.add "IncludePublic", valid_607704
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607705 = query.getOrDefault("Action")
  valid_607705 = validateParameter(valid_607705, JString, required = true,
                                 default = newJString("DescribeDBSnapshots"))
  if valid_607705 != nil:
    section.add "Action", valid_607705
  var valid_607706 = query.getOrDefault("IncludeShared")
  valid_607706 = validateParameter(valid_607706, JBool, required = false, default = nil)
  if valid_607706 != nil:
    section.add "IncludeShared", valid_607706
  var valid_607707 = query.getOrDefault("Version")
  valid_607707 = validateParameter(valid_607707, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607707 != nil:
    section.add "Version", valid_607707
  var valid_607708 = query.getOrDefault("Filters")
  valid_607708 = validateParameter(valid_607708, JArray, required = false,
                                 default = nil)
  if valid_607708 != nil:
    section.add "Filters", valid_607708
  var valid_607709 = query.getOrDefault("MaxRecords")
  valid_607709 = validateParameter(valid_607709, JInt, required = false, default = nil)
  if valid_607709 != nil:
    section.add "MaxRecords", valid_607709
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607710 = header.getOrDefault("X-Amz-Signature")
  valid_607710 = validateParameter(valid_607710, JString, required = false,
                                 default = nil)
  if valid_607710 != nil:
    section.add "X-Amz-Signature", valid_607710
  var valid_607711 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607711 = validateParameter(valid_607711, JString, required = false,
                                 default = nil)
  if valid_607711 != nil:
    section.add "X-Amz-Content-Sha256", valid_607711
  var valid_607712 = header.getOrDefault("X-Amz-Date")
  valid_607712 = validateParameter(valid_607712, JString, required = false,
                                 default = nil)
  if valid_607712 != nil:
    section.add "X-Amz-Date", valid_607712
  var valid_607713 = header.getOrDefault("X-Amz-Credential")
  valid_607713 = validateParameter(valid_607713, JString, required = false,
                                 default = nil)
  if valid_607713 != nil:
    section.add "X-Amz-Credential", valid_607713
  var valid_607714 = header.getOrDefault("X-Amz-Security-Token")
  valid_607714 = validateParameter(valid_607714, JString, required = false,
                                 default = nil)
  if valid_607714 != nil:
    section.add "X-Amz-Security-Token", valid_607714
  var valid_607715 = header.getOrDefault("X-Amz-Algorithm")
  valid_607715 = validateParameter(valid_607715, JString, required = false,
                                 default = nil)
  if valid_607715 != nil:
    section.add "X-Amz-Algorithm", valid_607715
  var valid_607716 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607716 = validateParameter(valid_607716, JString, required = false,
                                 default = nil)
  if valid_607716 != nil:
    section.add "X-Amz-SignedHeaders", valid_607716
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607717: Call_GetDescribeDBSnapshots_607696; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  let valid = call_607717.validator(path, query, header, formData, body)
  let scheme = call_607717.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607717.url(scheme.get, call_607717.host, call_607717.base,
                         call_607717.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607717, url, valid)

proc call*(call_607718: Call_GetDescribeDBSnapshots_607696;
          DbiResourceId: string = ""; Marker: string = "";
          DBInstanceIdentifier: string = ""; DBSnapshotIdentifier: string = "";
          SnapshotType: string = ""; IncludePublic: bool = false;
          Action: string = "DescribeDBSnapshots"; IncludeShared: bool = false;
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSnapshots
  ## Returns information about DB snapshots. This API action supports pagination.
  ##   DbiResourceId: string
  ##                : A specific DB resource ID to describe.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBInstanceIdentifier: string
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   SnapshotType: string
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   Action: string (required)
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607719 = newJObject()
  add(query_607719, "DbiResourceId", newJString(DbiResourceId))
  add(query_607719, "Marker", newJString(Marker))
  add(query_607719, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_607719, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_607719, "SnapshotType", newJString(SnapshotType))
  add(query_607719, "IncludePublic", newJBool(IncludePublic))
  add(query_607719, "Action", newJString(Action))
  add(query_607719, "IncludeShared", newJBool(IncludeShared))
  add(query_607719, "Version", newJString(Version))
  if Filters != nil:
    query_607719.add "Filters", Filters
  add(query_607719, "MaxRecords", newJInt(MaxRecords))
  result = call_607718.call(nil, query_607719, nil, nil, nil)

var getDescribeDBSnapshots* = Call_GetDescribeDBSnapshots_607696(
    name: "getDescribeDBSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshots",
    validator: validate_GetDescribeDBSnapshots_607697, base: "/",
    url: url_GetDescribeDBSnapshots_607698, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSubnetGroups_607764 = ref object of OpenApiRestCall_604389
proc url_PostDescribeDBSubnetGroups_607766(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSubnetGroups_607765(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607767 = query.getOrDefault("Action")
  valid_607767 = validateParameter(valid_607767, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_607767 != nil:
    section.add "Action", valid_607767
  var valid_607768 = query.getOrDefault("Version")
  valid_607768 = validateParameter(valid_607768, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607768 != nil:
    section.add "Version", valid_607768
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607769 = header.getOrDefault("X-Amz-Signature")
  valid_607769 = validateParameter(valid_607769, JString, required = false,
                                 default = nil)
  if valid_607769 != nil:
    section.add "X-Amz-Signature", valid_607769
  var valid_607770 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607770 = validateParameter(valid_607770, JString, required = false,
                                 default = nil)
  if valid_607770 != nil:
    section.add "X-Amz-Content-Sha256", valid_607770
  var valid_607771 = header.getOrDefault("X-Amz-Date")
  valid_607771 = validateParameter(valid_607771, JString, required = false,
                                 default = nil)
  if valid_607771 != nil:
    section.add "X-Amz-Date", valid_607771
  var valid_607772 = header.getOrDefault("X-Amz-Credential")
  valid_607772 = validateParameter(valid_607772, JString, required = false,
                                 default = nil)
  if valid_607772 != nil:
    section.add "X-Amz-Credential", valid_607772
  var valid_607773 = header.getOrDefault("X-Amz-Security-Token")
  valid_607773 = validateParameter(valid_607773, JString, required = false,
                                 default = nil)
  if valid_607773 != nil:
    section.add "X-Amz-Security-Token", valid_607773
  var valid_607774 = header.getOrDefault("X-Amz-Algorithm")
  valid_607774 = validateParameter(valid_607774, JString, required = false,
                                 default = nil)
  if valid_607774 != nil:
    section.add "X-Amz-Algorithm", valid_607774
  var valid_607775 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607775 = validateParameter(valid_607775, JString, required = false,
                                 default = nil)
  if valid_607775 != nil:
    section.add "X-Amz-SignedHeaders", valid_607775
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_607776 = formData.getOrDefault("MaxRecords")
  valid_607776 = validateParameter(valid_607776, JInt, required = false, default = nil)
  if valid_607776 != nil:
    section.add "MaxRecords", valid_607776
  var valid_607777 = formData.getOrDefault("Marker")
  valid_607777 = validateParameter(valid_607777, JString, required = false,
                                 default = nil)
  if valid_607777 != nil:
    section.add "Marker", valid_607777
  var valid_607778 = formData.getOrDefault("DBSubnetGroupName")
  valid_607778 = validateParameter(valid_607778, JString, required = false,
                                 default = nil)
  if valid_607778 != nil:
    section.add "DBSubnetGroupName", valid_607778
  var valid_607779 = formData.getOrDefault("Filters")
  valid_607779 = validateParameter(valid_607779, JArray, required = false,
                                 default = nil)
  if valid_607779 != nil:
    section.add "Filters", valid_607779
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607780: Call_PostDescribeDBSubnetGroups_607764; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_607780.validator(path, query, header, formData, body)
  let scheme = call_607780.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607780.url(scheme.get, call_607780.host, call_607780.base,
                         call_607780.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607780, url, valid)

proc call*(call_607781: Call_PostDescribeDBSubnetGroups_607764;
          MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; DBSubnetGroupName: string = "";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_607782 = newJObject()
  var formData_607783 = newJObject()
  add(formData_607783, "MaxRecords", newJInt(MaxRecords))
  add(formData_607783, "Marker", newJString(Marker))
  add(query_607782, "Action", newJString(Action))
  add(formData_607783, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if Filters != nil:
    formData_607783.add "Filters", Filters
  add(query_607782, "Version", newJString(Version))
  result = call_607781.call(nil, query_607782, nil, formData_607783, nil)

var postDescribeDBSubnetGroups* = Call_PostDescribeDBSubnetGroups_607764(
    name: "postDescribeDBSubnetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_PostDescribeDBSubnetGroups_607765, base: "/",
    url: url_PostDescribeDBSubnetGroups_607766,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSubnetGroups_607745 = ref object of OpenApiRestCall_604389
proc url_GetDescribeDBSubnetGroups_607747(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSubnetGroups_607746(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607748 = query.getOrDefault("Marker")
  valid_607748 = validateParameter(valid_607748, JString, required = false,
                                 default = nil)
  if valid_607748 != nil:
    section.add "Marker", valid_607748
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607749 = query.getOrDefault("Action")
  valid_607749 = validateParameter(valid_607749, JString, required = true,
                                 default = newJString("DescribeDBSubnetGroups"))
  if valid_607749 != nil:
    section.add "Action", valid_607749
  var valid_607750 = query.getOrDefault("DBSubnetGroupName")
  valid_607750 = validateParameter(valid_607750, JString, required = false,
                                 default = nil)
  if valid_607750 != nil:
    section.add "DBSubnetGroupName", valid_607750
  var valid_607751 = query.getOrDefault("Version")
  valid_607751 = validateParameter(valid_607751, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607751 != nil:
    section.add "Version", valid_607751
  var valid_607752 = query.getOrDefault("Filters")
  valid_607752 = validateParameter(valid_607752, JArray, required = false,
                                 default = nil)
  if valid_607752 != nil:
    section.add "Filters", valid_607752
  var valid_607753 = query.getOrDefault("MaxRecords")
  valid_607753 = validateParameter(valid_607753, JInt, required = false, default = nil)
  if valid_607753 != nil:
    section.add "MaxRecords", valid_607753
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607754 = header.getOrDefault("X-Amz-Signature")
  valid_607754 = validateParameter(valid_607754, JString, required = false,
                                 default = nil)
  if valid_607754 != nil:
    section.add "X-Amz-Signature", valid_607754
  var valid_607755 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607755 = validateParameter(valid_607755, JString, required = false,
                                 default = nil)
  if valid_607755 != nil:
    section.add "X-Amz-Content-Sha256", valid_607755
  var valid_607756 = header.getOrDefault("X-Amz-Date")
  valid_607756 = validateParameter(valid_607756, JString, required = false,
                                 default = nil)
  if valid_607756 != nil:
    section.add "X-Amz-Date", valid_607756
  var valid_607757 = header.getOrDefault("X-Amz-Credential")
  valid_607757 = validateParameter(valid_607757, JString, required = false,
                                 default = nil)
  if valid_607757 != nil:
    section.add "X-Amz-Credential", valid_607757
  var valid_607758 = header.getOrDefault("X-Amz-Security-Token")
  valid_607758 = validateParameter(valid_607758, JString, required = false,
                                 default = nil)
  if valid_607758 != nil:
    section.add "X-Amz-Security-Token", valid_607758
  var valid_607759 = header.getOrDefault("X-Amz-Algorithm")
  valid_607759 = validateParameter(valid_607759, JString, required = false,
                                 default = nil)
  if valid_607759 != nil:
    section.add "X-Amz-Algorithm", valid_607759
  var valid_607760 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607760 = validateParameter(valid_607760, JString, required = false,
                                 default = nil)
  if valid_607760 != nil:
    section.add "X-Amz-SignedHeaders", valid_607760
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607761: Call_GetDescribeDBSubnetGroups_607745; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_607761.validator(path, query, header, formData, body)
  let scheme = call_607761.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607761.url(scheme.get, call_607761.host, call_607761.base,
                         call_607761.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607761, url, valid)

proc call*(call_607762: Call_GetDescribeDBSubnetGroups_607745; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; DBSubnetGroupName: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607763 = newJObject()
  add(query_607763, "Marker", newJString(Marker))
  add(query_607763, "Action", newJString(Action))
  add(query_607763, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_607763, "Version", newJString(Version))
  if Filters != nil:
    query_607763.add "Filters", Filters
  add(query_607763, "MaxRecords", newJInt(MaxRecords))
  result = call_607762.call(nil, query_607763, nil, nil, nil)

var getDescribeDBSubnetGroups* = Call_GetDescribeDBSubnetGroups_607745(
    name: "getDescribeDBSubnetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_GetDescribeDBSubnetGroups_607746, base: "/",
    url: url_GetDescribeDBSubnetGroups_607747,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultClusterParameters_607803 = ref object of OpenApiRestCall_604389
proc url_PostDescribeEngineDefaultClusterParameters_607805(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultClusterParameters_607804(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607806 = query.getOrDefault("Action")
  valid_607806 = validateParameter(valid_607806, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_607806 != nil:
    section.add "Action", valid_607806
  var valid_607807 = query.getOrDefault("Version")
  valid_607807 = validateParameter(valid_607807, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607807 != nil:
    section.add "Version", valid_607807
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607808 = header.getOrDefault("X-Amz-Signature")
  valid_607808 = validateParameter(valid_607808, JString, required = false,
                                 default = nil)
  if valid_607808 != nil:
    section.add "X-Amz-Signature", valid_607808
  var valid_607809 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607809 = validateParameter(valid_607809, JString, required = false,
                                 default = nil)
  if valid_607809 != nil:
    section.add "X-Amz-Content-Sha256", valid_607809
  var valid_607810 = header.getOrDefault("X-Amz-Date")
  valid_607810 = validateParameter(valid_607810, JString, required = false,
                                 default = nil)
  if valid_607810 != nil:
    section.add "X-Amz-Date", valid_607810
  var valid_607811 = header.getOrDefault("X-Amz-Credential")
  valid_607811 = validateParameter(valid_607811, JString, required = false,
                                 default = nil)
  if valid_607811 != nil:
    section.add "X-Amz-Credential", valid_607811
  var valid_607812 = header.getOrDefault("X-Amz-Security-Token")
  valid_607812 = validateParameter(valid_607812, JString, required = false,
                                 default = nil)
  if valid_607812 != nil:
    section.add "X-Amz-Security-Token", valid_607812
  var valid_607813 = header.getOrDefault("X-Amz-Algorithm")
  valid_607813 = validateParameter(valid_607813, JString, required = false,
                                 default = nil)
  if valid_607813 != nil:
    section.add "X-Amz-Algorithm", valid_607813
  var valid_607814 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607814 = validateParameter(valid_607814, JString, required = false,
                                 default = nil)
  if valid_607814 != nil:
    section.add "X-Amz-SignedHeaders", valid_607814
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  section = newJObject()
  var valid_607815 = formData.getOrDefault("MaxRecords")
  valid_607815 = validateParameter(valid_607815, JInt, required = false, default = nil)
  if valid_607815 != nil:
    section.add "MaxRecords", valid_607815
  var valid_607816 = formData.getOrDefault("Marker")
  valid_607816 = validateParameter(valid_607816, JString, required = false,
                                 default = nil)
  if valid_607816 != nil:
    section.add "Marker", valid_607816
  var valid_607817 = formData.getOrDefault("Filters")
  valid_607817 = validateParameter(valid_607817, JArray, required = false,
                                 default = nil)
  if valid_607817 != nil:
    section.add "Filters", valid_607817
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_607818 = formData.getOrDefault("DBParameterGroupFamily")
  valid_607818 = validateParameter(valid_607818, JString, required = true,
                                 default = nil)
  if valid_607818 != nil:
    section.add "DBParameterGroupFamily", valid_607818
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607819: Call_PostDescribeEngineDefaultClusterParameters_607803;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_607819.validator(path, query, header, formData, body)
  let scheme = call_607819.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607819.url(scheme.get, call_607819.host, call_607819.base,
                         call_607819.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607819, url, valid)

proc call*(call_607820: Call_PostDescribeEngineDefaultClusterParameters_607803;
          DBParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultClusterParameters
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  var query_607821 = newJObject()
  var formData_607822 = newJObject()
  add(formData_607822, "MaxRecords", newJInt(MaxRecords))
  add(formData_607822, "Marker", newJString(Marker))
  add(query_607821, "Action", newJString(Action))
  if Filters != nil:
    formData_607822.add "Filters", Filters
  add(query_607821, "Version", newJString(Version))
  add(formData_607822, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_607820.call(nil, query_607821, nil, formData_607822, nil)

var postDescribeEngineDefaultClusterParameters* = Call_PostDescribeEngineDefaultClusterParameters_607803(
    name: "postDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_PostDescribeEngineDefaultClusterParameters_607804,
    base: "/", url: url_PostDescribeEngineDefaultClusterParameters_607805,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultClusterParameters_607784 = ref object of OpenApiRestCall_604389
proc url_GetDescribeEngineDefaultClusterParameters_607786(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultClusterParameters_607785(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607787 = query.getOrDefault("Marker")
  valid_607787 = validateParameter(valid_607787, JString, required = false,
                                 default = nil)
  if valid_607787 != nil:
    section.add "Marker", valid_607787
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_607788 = query.getOrDefault("DBParameterGroupFamily")
  valid_607788 = validateParameter(valid_607788, JString, required = true,
                                 default = nil)
  if valid_607788 != nil:
    section.add "DBParameterGroupFamily", valid_607788
  var valid_607789 = query.getOrDefault("Action")
  valid_607789 = validateParameter(valid_607789, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_607789 != nil:
    section.add "Action", valid_607789
  var valid_607790 = query.getOrDefault("Version")
  valid_607790 = validateParameter(valid_607790, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607790 != nil:
    section.add "Version", valid_607790
  var valid_607791 = query.getOrDefault("Filters")
  valid_607791 = validateParameter(valid_607791, JArray, required = false,
                                 default = nil)
  if valid_607791 != nil:
    section.add "Filters", valid_607791
  var valid_607792 = query.getOrDefault("MaxRecords")
  valid_607792 = validateParameter(valid_607792, JInt, required = false, default = nil)
  if valid_607792 != nil:
    section.add "MaxRecords", valid_607792
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607793 = header.getOrDefault("X-Amz-Signature")
  valid_607793 = validateParameter(valid_607793, JString, required = false,
                                 default = nil)
  if valid_607793 != nil:
    section.add "X-Amz-Signature", valid_607793
  var valid_607794 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607794 = validateParameter(valid_607794, JString, required = false,
                                 default = nil)
  if valid_607794 != nil:
    section.add "X-Amz-Content-Sha256", valid_607794
  var valid_607795 = header.getOrDefault("X-Amz-Date")
  valid_607795 = validateParameter(valid_607795, JString, required = false,
                                 default = nil)
  if valid_607795 != nil:
    section.add "X-Amz-Date", valid_607795
  var valid_607796 = header.getOrDefault("X-Amz-Credential")
  valid_607796 = validateParameter(valid_607796, JString, required = false,
                                 default = nil)
  if valid_607796 != nil:
    section.add "X-Amz-Credential", valid_607796
  var valid_607797 = header.getOrDefault("X-Amz-Security-Token")
  valid_607797 = validateParameter(valid_607797, JString, required = false,
                                 default = nil)
  if valid_607797 != nil:
    section.add "X-Amz-Security-Token", valid_607797
  var valid_607798 = header.getOrDefault("X-Amz-Algorithm")
  valid_607798 = validateParameter(valid_607798, JString, required = false,
                                 default = nil)
  if valid_607798 != nil:
    section.add "X-Amz-Algorithm", valid_607798
  var valid_607799 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607799 = validateParameter(valid_607799, JString, required = false,
                                 default = nil)
  if valid_607799 != nil:
    section.add "X-Amz-SignedHeaders", valid_607799
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607800: Call_GetDescribeEngineDefaultClusterParameters_607784;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_607800.validator(path, query, header, formData, body)
  let scheme = call_607800.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607800.url(scheme.get, call_607800.host, call_607800.base,
                         call_607800.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607800, url, valid)

proc call*(call_607801: Call_GetDescribeEngineDefaultClusterParameters_607784;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultClusterParameters
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607802 = newJObject()
  add(query_607802, "Marker", newJString(Marker))
  add(query_607802, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_607802, "Action", newJString(Action))
  add(query_607802, "Version", newJString(Version))
  if Filters != nil:
    query_607802.add "Filters", Filters
  add(query_607802, "MaxRecords", newJInt(MaxRecords))
  result = call_607801.call(nil, query_607802, nil, nil, nil)

var getDescribeEngineDefaultClusterParameters* = Call_GetDescribeEngineDefaultClusterParameters_607784(
    name: "getDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_GetDescribeEngineDefaultClusterParameters_607785,
    base: "/", url: url_GetDescribeEngineDefaultClusterParameters_607786,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_607842 = ref object of OpenApiRestCall_604389
proc url_PostDescribeEngineDefaultParameters_607844(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultParameters_607843(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607845 = query.getOrDefault("Action")
  valid_607845 = validateParameter(valid_607845, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_607845 != nil:
    section.add "Action", valid_607845
  var valid_607846 = query.getOrDefault("Version")
  valid_607846 = validateParameter(valid_607846, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607846 != nil:
    section.add "Version", valid_607846
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607847 = header.getOrDefault("X-Amz-Signature")
  valid_607847 = validateParameter(valid_607847, JString, required = false,
                                 default = nil)
  if valid_607847 != nil:
    section.add "X-Amz-Signature", valid_607847
  var valid_607848 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607848 = validateParameter(valid_607848, JString, required = false,
                                 default = nil)
  if valid_607848 != nil:
    section.add "X-Amz-Content-Sha256", valid_607848
  var valid_607849 = header.getOrDefault("X-Amz-Date")
  valid_607849 = validateParameter(valid_607849, JString, required = false,
                                 default = nil)
  if valid_607849 != nil:
    section.add "X-Amz-Date", valid_607849
  var valid_607850 = header.getOrDefault("X-Amz-Credential")
  valid_607850 = validateParameter(valid_607850, JString, required = false,
                                 default = nil)
  if valid_607850 != nil:
    section.add "X-Amz-Credential", valid_607850
  var valid_607851 = header.getOrDefault("X-Amz-Security-Token")
  valid_607851 = validateParameter(valid_607851, JString, required = false,
                                 default = nil)
  if valid_607851 != nil:
    section.add "X-Amz-Security-Token", valid_607851
  var valid_607852 = header.getOrDefault("X-Amz-Algorithm")
  valid_607852 = validateParameter(valid_607852, JString, required = false,
                                 default = nil)
  if valid_607852 != nil:
    section.add "X-Amz-Algorithm", valid_607852
  var valid_607853 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607853 = validateParameter(valid_607853, JString, required = false,
                                 default = nil)
  if valid_607853 != nil:
    section.add "X-Amz-SignedHeaders", valid_607853
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  section = newJObject()
  var valid_607854 = formData.getOrDefault("MaxRecords")
  valid_607854 = validateParameter(valid_607854, JInt, required = false, default = nil)
  if valid_607854 != nil:
    section.add "MaxRecords", valid_607854
  var valid_607855 = formData.getOrDefault("Marker")
  valid_607855 = validateParameter(valid_607855, JString, required = false,
                                 default = nil)
  if valid_607855 != nil:
    section.add "Marker", valid_607855
  var valid_607856 = formData.getOrDefault("Filters")
  valid_607856 = validateParameter(valid_607856, JArray, required = false,
                                 default = nil)
  if valid_607856 != nil:
    section.add "Filters", valid_607856
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_607857 = formData.getOrDefault("DBParameterGroupFamily")
  valid_607857 = validateParameter(valid_607857, JString, required = true,
                                 default = nil)
  if valid_607857 != nil:
    section.add "DBParameterGroupFamily", valid_607857
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607858: Call_PostDescribeEngineDefaultParameters_607842;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_607858.validator(path, query, header, formData, body)
  let scheme = call_607858.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607858.url(scheme.get, call_607858.host, call_607858.base,
                         call_607858.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607858, url, valid)

proc call*(call_607859: Call_PostDescribeEngineDefaultParameters_607842;
          DBParameterGroupFamily: string; MaxRecords: int = 0; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  var query_607860 = newJObject()
  var formData_607861 = newJObject()
  add(formData_607861, "MaxRecords", newJInt(MaxRecords))
  add(formData_607861, "Marker", newJString(Marker))
  add(query_607860, "Action", newJString(Action))
  if Filters != nil:
    formData_607861.add "Filters", Filters
  add(query_607860, "Version", newJString(Version))
  add(formData_607861, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  result = call_607859.call(nil, query_607860, nil, formData_607861, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_607842(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_607843, base: "/",
    url: url_PostDescribeEngineDefaultParameters_607844,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_607823 = ref object of OpenApiRestCall_604389
proc url_GetDescribeEngineDefaultParameters_607825(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultParameters_607824(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607826 = query.getOrDefault("Marker")
  valid_607826 = validateParameter(valid_607826, JString, required = false,
                                 default = nil)
  if valid_607826 != nil:
    section.add "Marker", valid_607826
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_607827 = query.getOrDefault("DBParameterGroupFamily")
  valid_607827 = validateParameter(valid_607827, JString, required = true,
                                 default = nil)
  if valid_607827 != nil:
    section.add "DBParameterGroupFamily", valid_607827
  var valid_607828 = query.getOrDefault("Action")
  valid_607828 = validateParameter(valid_607828, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_607828 != nil:
    section.add "Action", valid_607828
  var valid_607829 = query.getOrDefault("Version")
  valid_607829 = validateParameter(valid_607829, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607829 != nil:
    section.add "Version", valid_607829
  var valid_607830 = query.getOrDefault("Filters")
  valid_607830 = validateParameter(valid_607830, JArray, required = false,
                                 default = nil)
  if valid_607830 != nil:
    section.add "Filters", valid_607830
  var valid_607831 = query.getOrDefault("MaxRecords")
  valid_607831 = validateParameter(valid_607831, JInt, required = false, default = nil)
  if valid_607831 != nil:
    section.add "MaxRecords", valid_607831
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607832 = header.getOrDefault("X-Amz-Signature")
  valid_607832 = validateParameter(valid_607832, JString, required = false,
                                 default = nil)
  if valid_607832 != nil:
    section.add "X-Amz-Signature", valid_607832
  var valid_607833 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607833 = validateParameter(valid_607833, JString, required = false,
                                 default = nil)
  if valid_607833 != nil:
    section.add "X-Amz-Content-Sha256", valid_607833
  var valid_607834 = header.getOrDefault("X-Amz-Date")
  valid_607834 = validateParameter(valid_607834, JString, required = false,
                                 default = nil)
  if valid_607834 != nil:
    section.add "X-Amz-Date", valid_607834
  var valid_607835 = header.getOrDefault("X-Amz-Credential")
  valid_607835 = validateParameter(valid_607835, JString, required = false,
                                 default = nil)
  if valid_607835 != nil:
    section.add "X-Amz-Credential", valid_607835
  var valid_607836 = header.getOrDefault("X-Amz-Security-Token")
  valid_607836 = validateParameter(valid_607836, JString, required = false,
                                 default = nil)
  if valid_607836 != nil:
    section.add "X-Amz-Security-Token", valid_607836
  var valid_607837 = header.getOrDefault("X-Amz-Algorithm")
  valid_607837 = validateParameter(valid_607837, JString, required = false,
                                 default = nil)
  if valid_607837 != nil:
    section.add "X-Amz-Algorithm", valid_607837
  var valid_607838 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607838 = validateParameter(valid_607838, JString, required = false,
                                 default = nil)
  if valid_607838 != nil:
    section.add "X-Amz-SignedHeaders", valid_607838
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607839: Call_GetDescribeEngineDefaultParameters_607823;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_607839.validator(path, query, header, formData, body)
  let scheme = call_607839.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607839.url(scheme.get, call_607839.host, call_607839.base,
                         call_607839.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607839, url, valid)

proc call*(call_607840: Call_GetDescribeEngineDefaultParameters_607823;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607841 = newJObject()
  add(query_607841, "Marker", newJString(Marker))
  add(query_607841, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  add(query_607841, "Action", newJString(Action))
  add(query_607841, "Version", newJString(Version))
  if Filters != nil:
    query_607841.add "Filters", Filters
  add(query_607841, "MaxRecords", newJInt(MaxRecords))
  result = call_607840.call(nil, query_607841, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_607823(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_607824, base: "/",
    url: url_GetDescribeEngineDefaultParameters_607825,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventCategories_607879 = ref object of OpenApiRestCall_604389
proc url_PostDescribeEventCategories_607881(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventCategories_607880(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607882 = query.getOrDefault("Action")
  valid_607882 = validateParameter(valid_607882, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_607882 != nil:
    section.add "Action", valid_607882
  var valid_607883 = query.getOrDefault("Version")
  valid_607883 = validateParameter(valid_607883, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607883 != nil:
    section.add "Version", valid_607883
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607884 = header.getOrDefault("X-Amz-Signature")
  valid_607884 = validateParameter(valid_607884, JString, required = false,
                                 default = nil)
  if valid_607884 != nil:
    section.add "X-Amz-Signature", valid_607884
  var valid_607885 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607885 = validateParameter(valid_607885, JString, required = false,
                                 default = nil)
  if valid_607885 != nil:
    section.add "X-Amz-Content-Sha256", valid_607885
  var valid_607886 = header.getOrDefault("X-Amz-Date")
  valid_607886 = validateParameter(valid_607886, JString, required = false,
                                 default = nil)
  if valid_607886 != nil:
    section.add "X-Amz-Date", valid_607886
  var valid_607887 = header.getOrDefault("X-Amz-Credential")
  valid_607887 = validateParameter(valid_607887, JString, required = false,
                                 default = nil)
  if valid_607887 != nil:
    section.add "X-Amz-Credential", valid_607887
  var valid_607888 = header.getOrDefault("X-Amz-Security-Token")
  valid_607888 = validateParameter(valid_607888, JString, required = false,
                                 default = nil)
  if valid_607888 != nil:
    section.add "X-Amz-Security-Token", valid_607888
  var valid_607889 = header.getOrDefault("X-Amz-Algorithm")
  valid_607889 = validateParameter(valid_607889, JString, required = false,
                                 default = nil)
  if valid_607889 != nil:
    section.add "X-Amz-Algorithm", valid_607889
  var valid_607890 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607890 = validateParameter(valid_607890, JString, required = false,
                                 default = nil)
  if valid_607890 != nil:
    section.add "X-Amz-SignedHeaders", valid_607890
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_607891 = formData.getOrDefault("SourceType")
  valid_607891 = validateParameter(valid_607891, JString, required = false,
                                 default = nil)
  if valid_607891 != nil:
    section.add "SourceType", valid_607891
  var valid_607892 = formData.getOrDefault("Filters")
  valid_607892 = validateParameter(valid_607892, JArray, required = false,
                                 default = nil)
  if valid_607892 != nil:
    section.add "Filters", valid_607892
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607893: Call_PostDescribeEventCategories_607879; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_607893.validator(path, query, header, formData, body)
  let scheme = call_607893.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607893.url(scheme.get, call_607893.host, call_607893.base,
                         call_607893.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607893, url, valid)

proc call*(call_607894: Call_PostDescribeEventCategories_607879;
          SourceType: string = ""; Action: string = "DescribeEventCategories";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_607895 = newJObject()
  var formData_607896 = newJObject()
  add(formData_607896, "SourceType", newJString(SourceType))
  add(query_607895, "Action", newJString(Action))
  if Filters != nil:
    formData_607896.add "Filters", Filters
  add(query_607895, "Version", newJString(Version))
  result = call_607894.call(nil, query_607895, nil, formData_607896, nil)

var postDescribeEventCategories* = Call_PostDescribeEventCategories_607879(
    name: "postDescribeEventCategories", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_PostDescribeEventCategories_607880, base: "/",
    url: url_PostDescribeEventCategories_607881,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventCategories_607862 = ref object of OpenApiRestCall_604389
proc url_GetDescribeEventCategories_607864(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventCategories_607863(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_607865 = query.getOrDefault("SourceType")
  valid_607865 = validateParameter(valid_607865, JString, required = false,
                                 default = nil)
  if valid_607865 != nil:
    section.add "SourceType", valid_607865
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607866 = query.getOrDefault("Action")
  valid_607866 = validateParameter(valid_607866, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_607866 != nil:
    section.add "Action", valid_607866
  var valid_607867 = query.getOrDefault("Version")
  valid_607867 = validateParameter(valid_607867, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607867 != nil:
    section.add "Version", valid_607867
  var valid_607868 = query.getOrDefault("Filters")
  valid_607868 = validateParameter(valid_607868, JArray, required = false,
                                 default = nil)
  if valid_607868 != nil:
    section.add "Filters", valid_607868
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607869 = header.getOrDefault("X-Amz-Signature")
  valid_607869 = validateParameter(valid_607869, JString, required = false,
                                 default = nil)
  if valid_607869 != nil:
    section.add "X-Amz-Signature", valid_607869
  var valid_607870 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607870 = validateParameter(valid_607870, JString, required = false,
                                 default = nil)
  if valid_607870 != nil:
    section.add "X-Amz-Content-Sha256", valid_607870
  var valid_607871 = header.getOrDefault("X-Amz-Date")
  valid_607871 = validateParameter(valid_607871, JString, required = false,
                                 default = nil)
  if valid_607871 != nil:
    section.add "X-Amz-Date", valid_607871
  var valid_607872 = header.getOrDefault("X-Amz-Credential")
  valid_607872 = validateParameter(valid_607872, JString, required = false,
                                 default = nil)
  if valid_607872 != nil:
    section.add "X-Amz-Credential", valid_607872
  var valid_607873 = header.getOrDefault("X-Amz-Security-Token")
  valid_607873 = validateParameter(valid_607873, JString, required = false,
                                 default = nil)
  if valid_607873 != nil:
    section.add "X-Amz-Security-Token", valid_607873
  var valid_607874 = header.getOrDefault("X-Amz-Algorithm")
  valid_607874 = validateParameter(valid_607874, JString, required = false,
                                 default = nil)
  if valid_607874 != nil:
    section.add "X-Amz-Algorithm", valid_607874
  var valid_607875 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607875 = validateParameter(valid_607875, JString, required = false,
                                 default = nil)
  if valid_607875 != nil:
    section.add "X-Amz-SignedHeaders", valid_607875
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607876: Call_GetDescribeEventCategories_607862; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_607876.validator(path, query, header, formData, body)
  let scheme = call_607876.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607876.url(scheme.get, call_607876.host, call_607876.base,
                         call_607876.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607876, url, valid)

proc call*(call_607877: Call_GetDescribeEventCategories_607862;
          SourceType: string = ""; Action: string = "DescribeEventCategories";
          Version: string = "2014-10-31"; Filters: JsonNode = nil): Recallable =
  ## getDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  var query_607878 = newJObject()
  add(query_607878, "SourceType", newJString(SourceType))
  add(query_607878, "Action", newJString(Action))
  add(query_607878, "Version", newJString(Version))
  if Filters != nil:
    query_607878.add "Filters", Filters
  result = call_607877.call(nil, query_607878, nil, nil, nil)

var getDescribeEventCategories* = Call_GetDescribeEventCategories_607862(
    name: "getDescribeEventCategories", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_GetDescribeEventCategories_607863, base: "/",
    url: url_GetDescribeEventCategories_607864,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventSubscriptions_607916 = ref object of OpenApiRestCall_604389
proc url_PostDescribeEventSubscriptions_607918(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventSubscriptions_607917(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607919 = query.getOrDefault("Action")
  valid_607919 = validateParameter(valid_607919, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_607919 != nil:
    section.add "Action", valid_607919
  var valid_607920 = query.getOrDefault("Version")
  valid_607920 = validateParameter(valid_607920, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607920 != nil:
    section.add "Version", valid_607920
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607921 = header.getOrDefault("X-Amz-Signature")
  valid_607921 = validateParameter(valid_607921, JString, required = false,
                                 default = nil)
  if valid_607921 != nil:
    section.add "X-Amz-Signature", valid_607921
  var valid_607922 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607922 = validateParameter(valid_607922, JString, required = false,
                                 default = nil)
  if valid_607922 != nil:
    section.add "X-Amz-Content-Sha256", valid_607922
  var valid_607923 = header.getOrDefault("X-Amz-Date")
  valid_607923 = validateParameter(valid_607923, JString, required = false,
                                 default = nil)
  if valid_607923 != nil:
    section.add "X-Amz-Date", valid_607923
  var valid_607924 = header.getOrDefault("X-Amz-Credential")
  valid_607924 = validateParameter(valid_607924, JString, required = false,
                                 default = nil)
  if valid_607924 != nil:
    section.add "X-Amz-Credential", valid_607924
  var valid_607925 = header.getOrDefault("X-Amz-Security-Token")
  valid_607925 = validateParameter(valid_607925, JString, required = false,
                                 default = nil)
  if valid_607925 != nil:
    section.add "X-Amz-Security-Token", valid_607925
  var valid_607926 = header.getOrDefault("X-Amz-Algorithm")
  valid_607926 = validateParameter(valid_607926, JString, required = false,
                                 default = nil)
  if valid_607926 != nil:
    section.add "X-Amz-Algorithm", valid_607926
  var valid_607927 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607927 = validateParameter(valid_607927, JString, required = false,
                                 default = nil)
  if valid_607927 != nil:
    section.add "X-Amz-SignedHeaders", valid_607927
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: JString
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_607928 = formData.getOrDefault("MaxRecords")
  valid_607928 = validateParameter(valid_607928, JInt, required = false, default = nil)
  if valid_607928 != nil:
    section.add "MaxRecords", valid_607928
  var valid_607929 = formData.getOrDefault("Marker")
  valid_607929 = validateParameter(valid_607929, JString, required = false,
                                 default = nil)
  if valid_607929 != nil:
    section.add "Marker", valid_607929
  var valid_607930 = formData.getOrDefault("SubscriptionName")
  valid_607930 = validateParameter(valid_607930, JString, required = false,
                                 default = nil)
  if valid_607930 != nil:
    section.add "SubscriptionName", valid_607930
  var valid_607931 = formData.getOrDefault("Filters")
  valid_607931 = validateParameter(valid_607931, JArray, required = false,
                                 default = nil)
  if valid_607931 != nil:
    section.add "Filters", valid_607931
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607932: Call_PostDescribeEventSubscriptions_607916; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_607932.validator(path, query, header, formData, body)
  let scheme = call_607932.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607932.url(scheme.get, call_607932.host, call_607932.base,
                         call_607932.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607932, url, valid)

proc call*(call_607933: Call_PostDescribeEventSubscriptions_607916;
          MaxRecords: int = 0; Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: string
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_607934 = newJObject()
  var formData_607935 = newJObject()
  add(formData_607935, "MaxRecords", newJInt(MaxRecords))
  add(formData_607935, "Marker", newJString(Marker))
  add(formData_607935, "SubscriptionName", newJString(SubscriptionName))
  add(query_607934, "Action", newJString(Action))
  if Filters != nil:
    formData_607935.add "Filters", Filters
  add(query_607934, "Version", newJString(Version))
  result = call_607933.call(nil, query_607934, nil, formData_607935, nil)

var postDescribeEventSubscriptions* = Call_PostDescribeEventSubscriptions_607916(
    name: "postDescribeEventSubscriptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_PostDescribeEventSubscriptions_607917, base: "/",
    url: url_PostDescribeEventSubscriptions_607918,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventSubscriptions_607897 = ref object of OpenApiRestCall_604389
proc url_GetDescribeEventSubscriptions_607899(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventSubscriptions_607898(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: JString
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607900 = query.getOrDefault("Marker")
  valid_607900 = validateParameter(valid_607900, JString, required = false,
                                 default = nil)
  if valid_607900 != nil:
    section.add "Marker", valid_607900
  var valid_607901 = query.getOrDefault("SubscriptionName")
  valid_607901 = validateParameter(valid_607901, JString, required = false,
                                 default = nil)
  if valid_607901 != nil:
    section.add "SubscriptionName", valid_607901
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607902 = query.getOrDefault("Action")
  valid_607902 = validateParameter(valid_607902, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_607902 != nil:
    section.add "Action", valid_607902
  var valid_607903 = query.getOrDefault("Version")
  valid_607903 = validateParameter(valid_607903, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607903 != nil:
    section.add "Version", valid_607903
  var valid_607904 = query.getOrDefault("Filters")
  valid_607904 = validateParameter(valid_607904, JArray, required = false,
                                 default = nil)
  if valid_607904 != nil:
    section.add "Filters", valid_607904
  var valid_607905 = query.getOrDefault("MaxRecords")
  valid_607905 = validateParameter(valid_607905, JInt, required = false, default = nil)
  if valid_607905 != nil:
    section.add "MaxRecords", valid_607905
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607906 = header.getOrDefault("X-Amz-Signature")
  valid_607906 = validateParameter(valid_607906, JString, required = false,
                                 default = nil)
  if valid_607906 != nil:
    section.add "X-Amz-Signature", valid_607906
  var valid_607907 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607907 = validateParameter(valid_607907, JString, required = false,
                                 default = nil)
  if valid_607907 != nil:
    section.add "X-Amz-Content-Sha256", valid_607907
  var valid_607908 = header.getOrDefault("X-Amz-Date")
  valid_607908 = validateParameter(valid_607908, JString, required = false,
                                 default = nil)
  if valid_607908 != nil:
    section.add "X-Amz-Date", valid_607908
  var valid_607909 = header.getOrDefault("X-Amz-Credential")
  valid_607909 = validateParameter(valid_607909, JString, required = false,
                                 default = nil)
  if valid_607909 != nil:
    section.add "X-Amz-Credential", valid_607909
  var valid_607910 = header.getOrDefault("X-Amz-Security-Token")
  valid_607910 = validateParameter(valid_607910, JString, required = false,
                                 default = nil)
  if valid_607910 != nil:
    section.add "X-Amz-Security-Token", valid_607910
  var valid_607911 = header.getOrDefault("X-Amz-Algorithm")
  valid_607911 = validateParameter(valid_607911, JString, required = false,
                                 default = nil)
  if valid_607911 != nil:
    section.add "X-Amz-Algorithm", valid_607911
  var valid_607912 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607912 = validateParameter(valid_607912, JString, required = false,
                                 default = nil)
  if valid_607912 != nil:
    section.add "X-Amz-SignedHeaders", valid_607912
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607913: Call_GetDescribeEventSubscriptions_607897; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_607913.validator(path, query, header, formData, body)
  let scheme = call_607913.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607913.url(scheme.get, call_607913.host, call_607913.base,
                         call_607913.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607913, url, valid)

proc call*(call_607914: Call_GetDescribeEventSubscriptions_607897;
          Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: string
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607915 = newJObject()
  add(query_607915, "Marker", newJString(Marker))
  add(query_607915, "SubscriptionName", newJString(SubscriptionName))
  add(query_607915, "Action", newJString(Action))
  add(query_607915, "Version", newJString(Version))
  if Filters != nil:
    query_607915.add "Filters", Filters
  add(query_607915, "MaxRecords", newJInt(MaxRecords))
  result = call_607914.call(nil, query_607915, nil, nil, nil)

var getDescribeEventSubscriptions* = Call_GetDescribeEventSubscriptions_607897(
    name: "getDescribeEventSubscriptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_GetDescribeEventSubscriptions_607898, base: "/",
    url: url_GetDescribeEventSubscriptions_607899,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_607960 = ref object of OpenApiRestCall_604389
proc url_PostDescribeEvents_607962(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEvents_607961(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607963 = query.getOrDefault("Action")
  valid_607963 = validateParameter(valid_607963, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_607963 != nil:
    section.add "Action", valid_607963
  var valid_607964 = query.getOrDefault("Version")
  valid_607964 = validateParameter(valid_607964, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607964 != nil:
    section.add "Version", valid_607964
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607965 = header.getOrDefault("X-Amz-Signature")
  valid_607965 = validateParameter(valid_607965, JString, required = false,
                                 default = nil)
  if valid_607965 != nil:
    section.add "X-Amz-Signature", valid_607965
  var valid_607966 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607966 = validateParameter(valid_607966, JString, required = false,
                                 default = nil)
  if valid_607966 != nil:
    section.add "X-Amz-Content-Sha256", valid_607966
  var valid_607967 = header.getOrDefault("X-Amz-Date")
  valid_607967 = validateParameter(valid_607967, JString, required = false,
                                 default = nil)
  if valid_607967 != nil:
    section.add "X-Amz-Date", valid_607967
  var valid_607968 = header.getOrDefault("X-Amz-Credential")
  valid_607968 = validateParameter(valid_607968, JString, required = false,
                                 default = nil)
  if valid_607968 != nil:
    section.add "X-Amz-Credential", valid_607968
  var valid_607969 = header.getOrDefault("X-Amz-Security-Token")
  valid_607969 = validateParameter(valid_607969, JString, required = false,
                                 default = nil)
  if valid_607969 != nil:
    section.add "X-Amz-Security-Token", valid_607969
  var valid_607970 = header.getOrDefault("X-Amz-Algorithm")
  valid_607970 = validateParameter(valid_607970, JString, required = false,
                                 default = nil)
  if valid_607970 != nil:
    section.add "X-Amz-Algorithm", valid_607970
  var valid_607971 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607971 = validateParameter(valid_607971, JString, required = false,
                                 default = nil)
  if valid_607971 != nil:
    section.add "X-Amz-SignedHeaders", valid_607971
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_607972 = formData.getOrDefault("MaxRecords")
  valid_607972 = validateParameter(valid_607972, JInt, required = false, default = nil)
  if valid_607972 != nil:
    section.add "MaxRecords", valid_607972
  var valid_607973 = formData.getOrDefault("Marker")
  valid_607973 = validateParameter(valid_607973, JString, required = false,
                                 default = nil)
  if valid_607973 != nil:
    section.add "Marker", valid_607973
  var valid_607974 = formData.getOrDefault("SourceIdentifier")
  valid_607974 = validateParameter(valid_607974, JString, required = false,
                                 default = nil)
  if valid_607974 != nil:
    section.add "SourceIdentifier", valid_607974
  var valid_607975 = formData.getOrDefault("SourceType")
  valid_607975 = validateParameter(valid_607975, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_607975 != nil:
    section.add "SourceType", valid_607975
  var valid_607976 = formData.getOrDefault("Duration")
  valid_607976 = validateParameter(valid_607976, JInt, required = false, default = nil)
  if valid_607976 != nil:
    section.add "Duration", valid_607976
  var valid_607977 = formData.getOrDefault("EndTime")
  valid_607977 = validateParameter(valid_607977, JString, required = false,
                                 default = nil)
  if valid_607977 != nil:
    section.add "EndTime", valid_607977
  var valid_607978 = formData.getOrDefault("StartTime")
  valid_607978 = validateParameter(valid_607978, JString, required = false,
                                 default = nil)
  if valid_607978 != nil:
    section.add "StartTime", valid_607978
  var valid_607979 = formData.getOrDefault("EventCategories")
  valid_607979 = validateParameter(valid_607979, JArray, required = false,
                                 default = nil)
  if valid_607979 != nil:
    section.add "EventCategories", valid_607979
  var valid_607980 = formData.getOrDefault("Filters")
  valid_607980 = validateParameter(valid_607980, JArray, required = false,
                                 default = nil)
  if valid_607980 != nil:
    section.add "Filters", valid_607980
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607981: Call_PostDescribeEvents_607960; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_607981.validator(path, query, header, formData, body)
  let scheme = call_607981.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607981.url(scheme.get, call_607981.host, call_607981.base,
                         call_607981.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607981, url, valid)

proc call*(call_607982: Call_PostDescribeEvents_607960; MaxRecords: int = 0;
          Marker: string = ""; SourceIdentifier: string = "";
          SourceType: string = "db-instance"; Duration: int = 0; EndTime: string = "";
          StartTime: string = ""; EventCategories: JsonNode = nil;
          Action: string = "DescribeEvents"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_607983 = newJObject()
  var formData_607984 = newJObject()
  add(formData_607984, "MaxRecords", newJInt(MaxRecords))
  add(formData_607984, "Marker", newJString(Marker))
  add(formData_607984, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_607984, "SourceType", newJString(SourceType))
  add(formData_607984, "Duration", newJInt(Duration))
  add(formData_607984, "EndTime", newJString(EndTime))
  add(formData_607984, "StartTime", newJString(StartTime))
  if EventCategories != nil:
    formData_607984.add "EventCategories", EventCategories
  add(query_607983, "Action", newJString(Action))
  if Filters != nil:
    formData_607984.add "Filters", Filters
  add(query_607983, "Version", newJString(Version))
  result = call_607982.call(nil, query_607983, nil, formData_607984, nil)

var postDescribeEvents* = Call_PostDescribeEvents_607960(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_607961, base: "/",
    url: url_PostDescribeEvents_607962, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_607936 = ref object of OpenApiRestCall_604389
proc url_GetDescribeEvents_607938(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEvents_607937(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: JString (required)
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607939 = query.getOrDefault("Marker")
  valid_607939 = validateParameter(valid_607939, JString, required = false,
                                 default = nil)
  if valid_607939 != nil:
    section.add "Marker", valid_607939
  var valid_607940 = query.getOrDefault("SourceType")
  valid_607940 = validateParameter(valid_607940, JString, required = false,
                                 default = newJString("db-instance"))
  if valid_607940 != nil:
    section.add "SourceType", valid_607940
  var valid_607941 = query.getOrDefault("SourceIdentifier")
  valid_607941 = validateParameter(valid_607941, JString, required = false,
                                 default = nil)
  if valid_607941 != nil:
    section.add "SourceIdentifier", valid_607941
  var valid_607942 = query.getOrDefault("EventCategories")
  valid_607942 = validateParameter(valid_607942, JArray, required = false,
                                 default = nil)
  if valid_607942 != nil:
    section.add "EventCategories", valid_607942
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607943 = query.getOrDefault("Action")
  valid_607943 = validateParameter(valid_607943, JString, required = true,
                                 default = newJString("DescribeEvents"))
  if valid_607943 != nil:
    section.add "Action", valid_607943
  var valid_607944 = query.getOrDefault("StartTime")
  valid_607944 = validateParameter(valid_607944, JString, required = false,
                                 default = nil)
  if valid_607944 != nil:
    section.add "StartTime", valid_607944
  var valid_607945 = query.getOrDefault("Duration")
  valid_607945 = validateParameter(valid_607945, JInt, required = false, default = nil)
  if valid_607945 != nil:
    section.add "Duration", valid_607945
  var valid_607946 = query.getOrDefault("EndTime")
  valid_607946 = validateParameter(valid_607946, JString, required = false,
                                 default = nil)
  if valid_607946 != nil:
    section.add "EndTime", valid_607946
  var valid_607947 = query.getOrDefault("Version")
  valid_607947 = validateParameter(valid_607947, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607947 != nil:
    section.add "Version", valid_607947
  var valid_607948 = query.getOrDefault("Filters")
  valid_607948 = validateParameter(valid_607948, JArray, required = false,
                                 default = nil)
  if valid_607948 != nil:
    section.add "Filters", valid_607948
  var valid_607949 = query.getOrDefault("MaxRecords")
  valid_607949 = validateParameter(valid_607949, JInt, required = false, default = nil)
  if valid_607949 != nil:
    section.add "MaxRecords", valid_607949
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607950 = header.getOrDefault("X-Amz-Signature")
  valid_607950 = validateParameter(valid_607950, JString, required = false,
                                 default = nil)
  if valid_607950 != nil:
    section.add "X-Amz-Signature", valid_607950
  var valid_607951 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607951 = validateParameter(valid_607951, JString, required = false,
                                 default = nil)
  if valid_607951 != nil:
    section.add "X-Amz-Content-Sha256", valid_607951
  var valid_607952 = header.getOrDefault("X-Amz-Date")
  valid_607952 = validateParameter(valid_607952, JString, required = false,
                                 default = nil)
  if valid_607952 != nil:
    section.add "X-Amz-Date", valid_607952
  var valid_607953 = header.getOrDefault("X-Amz-Credential")
  valid_607953 = validateParameter(valid_607953, JString, required = false,
                                 default = nil)
  if valid_607953 != nil:
    section.add "X-Amz-Credential", valid_607953
  var valid_607954 = header.getOrDefault("X-Amz-Security-Token")
  valid_607954 = validateParameter(valid_607954, JString, required = false,
                                 default = nil)
  if valid_607954 != nil:
    section.add "X-Amz-Security-Token", valid_607954
  var valid_607955 = header.getOrDefault("X-Amz-Algorithm")
  valid_607955 = validateParameter(valid_607955, JString, required = false,
                                 default = nil)
  if valid_607955 != nil:
    section.add "X-Amz-Algorithm", valid_607955
  var valid_607956 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_607956 = validateParameter(valid_607956, JString, required = false,
                                 default = nil)
  if valid_607956 != nil:
    section.add "X-Amz-SignedHeaders", valid_607956
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_607957: Call_GetDescribeEvents_607936; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_607957.validator(path, query, header, formData, body)
  let scheme = call_607957.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_607957.url(scheme.get, call_607957.host, call_607957.base,
                         call_607957.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_607957, url, valid)

proc call*(call_607958: Call_GetDescribeEvents_607936; Marker: string = "";
          SourceType: string = "db-instance"; SourceIdentifier: string = "";
          EventCategories: JsonNode = nil; Action: string = "DescribeEvents";
          StartTime: string = ""; Duration: int = 0; EndTime: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Action: string (required)
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_607959 = newJObject()
  add(query_607959, "Marker", newJString(Marker))
  add(query_607959, "SourceType", newJString(SourceType))
  add(query_607959, "SourceIdentifier", newJString(SourceIdentifier))
  if EventCategories != nil:
    query_607959.add "EventCategories", EventCategories
  add(query_607959, "Action", newJString(Action))
  add(query_607959, "StartTime", newJString(StartTime))
  add(query_607959, "Duration", newJInt(Duration))
  add(query_607959, "EndTime", newJString(EndTime))
  add(query_607959, "Version", newJString(Version))
  if Filters != nil:
    query_607959.add "Filters", Filters
  add(query_607959, "MaxRecords", newJInt(MaxRecords))
  result = call_607958.call(nil, query_607959, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_607936(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_607937,
    base: "/", url: url_GetDescribeEvents_607938,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeGlobalClusters_608004 = ref object of OpenApiRestCall_604389
proc url_PostDescribeGlobalClusters_608006(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeGlobalClusters_608005(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608007 = query.getOrDefault("Action")
  valid_608007 = validateParameter(valid_608007, JString, required = true,
                                 default = newJString("DescribeGlobalClusters"))
  if valid_608007 != nil:
    section.add "Action", valid_608007
  var valid_608008 = query.getOrDefault("Version")
  valid_608008 = validateParameter(valid_608008, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608008 != nil:
    section.add "Version", valid_608008
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608009 = header.getOrDefault("X-Amz-Signature")
  valid_608009 = validateParameter(valid_608009, JString, required = false,
                                 default = nil)
  if valid_608009 != nil:
    section.add "X-Amz-Signature", valid_608009
  var valid_608010 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608010 = validateParameter(valid_608010, JString, required = false,
                                 default = nil)
  if valid_608010 != nil:
    section.add "X-Amz-Content-Sha256", valid_608010
  var valid_608011 = header.getOrDefault("X-Amz-Date")
  valid_608011 = validateParameter(valid_608011, JString, required = false,
                                 default = nil)
  if valid_608011 != nil:
    section.add "X-Amz-Date", valid_608011
  var valid_608012 = header.getOrDefault("X-Amz-Credential")
  valid_608012 = validateParameter(valid_608012, JString, required = false,
                                 default = nil)
  if valid_608012 != nil:
    section.add "X-Amz-Credential", valid_608012
  var valid_608013 = header.getOrDefault("X-Amz-Security-Token")
  valid_608013 = validateParameter(valid_608013, JString, required = false,
                                 default = nil)
  if valid_608013 != nil:
    section.add "X-Amz-Security-Token", valid_608013
  var valid_608014 = header.getOrDefault("X-Amz-Algorithm")
  valid_608014 = validateParameter(valid_608014, JString, required = false,
                                 default = nil)
  if valid_608014 != nil:
    section.add "X-Amz-Algorithm", valid_608014
  var valid_608015 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608015 = validateParameter(valid_608015, JString, required = false,
                                 default = nil)
  if valid_608015 != nil:
    section.add "X-Amz-SignedHeaders", valid_608015
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  section = newJObject()
  var valid_608016 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_608016 = validateParameter(valid_608016, JString, required = false,
                                 default = nil)
  if valid_608016 != nil:
    section.add "GlobalClusterIdentifier", valid_608016
  var valid_608017 = formData.getOrDefault("MaxRecords")
  valid_608017 = validateParameter(valid_608017, JInt, required = false, default = nil)
  if valid_608017 != nil:
    section.add "MaxRecords", valid_608017
  var valid_608018 = formData.getOrDefault("Marker")
  valid_608018 = validateParameter(valid_608018, JString, required = false,
                                 default = nil)
  if valid_608018 != nil:
    section.add "Marker", valid_608018
  var valid_608019 = formData.getOrDefault("Filters")
  valid_608019 = validateParameter(valid_608019, JArray, required = false,
                                 default = nil)
  if valid_608019 != nil:
    section.add "Filters", valid_608019
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608020: Call_PostDescribeGlobalClusters_608004; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608020.validator(path, query, header, formData, body)
  let scheme = call_608020.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608020.url(scheme.get, call_608020.host, call_608020.base,
                         call_608020.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608020, url, valid)

proc call*(call_608021: Call_PostDescribeGlobalClusters_608004;
          GlobalClusterIdentifier: string = ""; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeGlobalClusters";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeGlobalClusters
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  var query_608022 = newJObject()
  var formData_608023 = newJObject()
  add(formData_608023, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_608023, "MaxRecords", newJInt(MaxRecords))
  add(formData_608023, "Marker", newJString(Marker))
  add(query_608022, "Action", newJString(Action))
  if Filters != nil:
    formData_608023.add "Filters", Filters
  add(query_608022, "Version", newJString(Version))
  result = call_608021.call(nil, query_608022, nil, formData_608023, nil)

var postDescribeGlobalClusters* = Call_PostDescribeGlobalClusters_608004(
    name: "postDescribeGlobalClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeGlobalClusters",
    validator: validate_PostDescribeGlobalClusters_608005, base: "/",
    url: url_PostDescribeGlobalClusters_608006,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeGlobalClusters_607985 = ref object of OpenApiRestCall_604389
proc url_GetDescribeGlobalClusters_607987(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeGlobalClusters_607986(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_607988 = query.getOrDefault("Marker")
  valid_607988 = validateParameter(valid_607988, JString, required = false,
                                 default = nil)
  if valid_607988 != nil:
    section.add "Marker", valid_607988
  var valid_607989 = query.getOrDefault("GlobalClusterIdentifier")
  valid_607989 = validateParameter(valid_607989, JString, required = false,
                                 default = nil)
  if valid_607989 != nil:
    section.add "GlobalClusterIdentifier", valid_607989
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_607990 = query.getOrDefault("Action")
  valid_607990 = validateParameter(valid_607990, JString, required = true,
                                 default = newJString("DescribeGlobalClusters"))
  if valid_607990 != nil:
    section.add "Action", valid_607990
  var valid_607991 = query.getOrDefault("Version")
  valid_607991 = validateParameter(valid_607991, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_607991 != nil:
    section.add "Version", valid_607991
  var valid_607992 = query.getOrDefault("Filters")
  valid_607992 = validateParameter(valid_607992, JArray, required = false,
                                 default = nil)
  if valid_607992 != nil:
    section.add "Filters", valid_607992
  var valid_607993 = query.getOrDefault("MaxRecords")
  valid_607993 = validateParameter(valid_607993, JInt, required = false, default = nil)
  if valid_607993 != nil:
    section.add "MaxRecords", valid_607993
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_607994 = header.getOrDefault("X-Amz-Signature")
  valid_607994 = validateParameter(valid_607994, JString, required = false,
                                 default = nil)
  if valid_607994 != nil:
    section.add "X-Amz-Signature", valid_607994
  var valid_607995 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_607995 = validateParameter(valid_607995, JString, required = false,
                                 default = nil)
  if valid_607995 != nil:
    section.add "X-Amz-Content-Sha256", valid_607995
  var valid_607996 = header.getOrDefault("X-Amz-Date")
  valid_607996 = validateParameter(valid_607996, JString, required = false,
                                 default = nil)
  if valid_607996 != nil:
    section.add "X-Amz-Date", valid_607996
  var valid_607997 = header.getOrDefault("X-Amz-Credential")
  valid_607997 = validateParameter(valid_607997, JString, required = false,
                                 default = nil)
  if valid_607997 != nil:
    section.add "X-Amz-Credential", valid_607997
  var valid_607998 = header.getOrDefault("X-Amz-Security-Token")
  valid_607998 = validateParameter(valid_607998, JString, required = false,
                                 default = nil)
  if valid_607998 != nil:
    section.add "X-Amz-Security-Token", valid_607998
  var valid_607999 = header.getOrDefault("X-Amz-Algorithm")
  valid_607999 = validateParameter(valid_607999, JString, required = false,
                                 default = nil)
  if valid_607999 != nil:
    section.add "X-Amz-Algorithm", valid_607999
  var valid_608000 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608000 = validateParameter(valid_608000, JString, required = false,
                                 default = nil)
  if valid_608000 != nil:
    section.add "X-Amz-SignedHeaders", valid_608000
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608001: Call_GetDescribeGlobalClusters_607985; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608001.validator(path, query, header, formData, body)
  let scheme = call_608001.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608001.url(scheme.get, call_608001.host, call_608001.base,
                         call_608001.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608001, url, valid)

proc call*(call_608002: Call_GetDescribeGlobalClusters_607985; Marker: string = "";
          GlobalClusterIdentifier: string = "";
          Action: string = "DescribeGlobalClusters"; Version: string = "2014-10-31";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeGlobalClusters
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608003 = newJObject()
  add(query_608003, "Marker", newJString(Marker))
  add(query_608003, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_608003, "Action", newJString(Action))
  add(query_608003, "Version", newJString(Version))
  if Filters != nil:
    query_608003.add "Filters", Filters
  add(query_608003, "MaxRecords", newJInt(MaxRecords))
  result = call_608002.call(nil, query_608003, nil, nil, nil)

var getDescribeGlobalClusters* = Call_GetDescribeGlobalClusters_607985(
    name: "getDescribeGlobalClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeGlobalClusters",
    validator: validate_GetDescribeGlobalClusters_607986, base: "/",
    url: url_GetDescribeGlobalClusters_607987,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeInstallationMedia_608043 = ref object of OpenApiRestCall_604389
proc url_PostDescribeInstallationMedia_608045(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeInstallationMedia_608044(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608046 = query.getOrDefault("Action")
  valid_608046 = validateParameter(valid_608046, JString, required = true, default = newJString(
      "DescribeInstallationMedia"))
  if valid_608046 != nil:
    section.add "Action", valid_608046
  var valid_608047 = query.getOrDefault("Version")
  valid_608047 = validateParameter(valid_608047, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608047 != nil:
    section.add "Version", valid_608047
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608048 = header.getOrDefault("X-Amz-Signature")
  valid_608048 = validateParameter(valid_608048, JString, required = false,
                                 default = nil)
  if valid_608048 != nil:
    section.add "X-Amz-Signature", valid_608048
  var valid_608049 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608049 = validateParameter(valid_608049, JString, required = false,
                                 default = nil)
  if valid_608049 != nil:
    section.add "X-Amz-Content-Sha256", valid_608049
  var valid_608050 = header.getOrDefault("X-Amz-Date")
  valid_608050 = validateParameter(valid_608050, JString, required = false,
                                 default = nil)
  if valid_608050 != nil:
    section.add "X-Amz-Date", valid_608050
  var valid_608051 = header.getOrDefault("X-Amz-Credential")
  valid_608051 = validateParameter(valid_608051, JString, required = false,
                                 default = nil)
  if valid_608051 != nil:
    section.add "X-Amz-Credential", valid_608051
  var valid_608052 = header.getOrDefault("X-Amz-Security-Token")
  valid_608052 = validateParameter(valid_608052, JString, required = false,
                                 default = nil)
  if valid_608052 != nil:
    section.add "X-Amz-Security-Token", valid_608052
  var valid_608053 = header.getOrDefault("X-Amz-Algorithm")
  valid_608053 = validateParameter(valid_608053, JString, required = false,
                                 default = nil)
  if valid_608053 != nil:
    section.add "X-Amz-Algorithm", valid_608053
  var valid_608054 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608054 = validateParameter(valid_608054, JString, required = false,
                                 default = nil)
  if valid_608054 != nil:
    section.add "X-Amz-SignedHeaders", valid_608054
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: JString
  ##                      : The installation medium ID.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  section = newJObject()
  var valid_608055 = formData.getOrDefault("MaxRecords")
  valid_608055 = validateParameter(valid_608055, JInt, required = false, default = nil)
  if valid_608055 != nil:
    section.add "MaxRecords", valid_608055
  var valid_608056 = formData.getOrDefault("Marker")
  valid_608056 = validateParameter(valid_608056, JString, required = false,
                                 default = nil)
  if valid_608056 != nil:
    section.add "Marker", valid_608056
  var valid_608057 = formData.getOrDefault("InstallationMediaId")
  valid_608057 = validateParameter(valid_608057, JString, required = false,
                                 default = nil)
  if valid_608057 != nil:
    section.add "InstallationMediaId", valid_608057
  var valid_608058 = formData.getOrDefault("Filters")
  valid_608058 = validateParameter(valid_608058, JArray, required = false,
                                 default = nil)
  if valid_608058 != nil:
    section.add "Filters", valid_608058
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608059: Call_PostDescribeInstallationMedia_608043; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_608059.validator(path, query, header, formData, body)
  let scheme = call_608059.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608059.url(scheme.get, call_608059.host, call_608059.base,
                         call_608059.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608059, url, valid)

proc call*(call_608060: Call_PostDescribeInstallationMedia_608043;
          MaxRecords: int = 0; Marker: string = ""; InstallationMediaId: string = "";
          Action: string = "DescribeInstallationMedia"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeInstallationMedia
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   MaxRecords: int
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: string
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   Version: string (required)
  var query_608061 = newJObject()
  var formData_608062 = newJObject()
  add(formData_608062, "MaxRecords", newJInt(MaxRecords))
  add(formData_608062, "Marker", newJString(Marker))
  add(formData_608062, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_608061, "Action", newJString(Action))
  if Filters != nil:
    formData_608062.add "Filters", Filters
  add(query_608061, "Version", newJString(Version))
  result = call_608060.call(nil, query_608061, nil, formData_608062, nil)

var postDescribeInstallationMedia* = Call_PostDescribeInstallationMedia_608043(
    name: "postDescribeInstallationMedia", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeInstallationMedia",
    validator: validate_PostDescribeInstallationMedia_608044, base: "/",
    url: url_PostDescribeInstallationMedia_608045,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeInstallationMedia_608024 = ref object of OpenApiRestCall_604389
proc url_GetDescribeInstallationMedia_608026(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeInstallationMedia_608025(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: JString
  ##                      : The installation medium ID.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  section = newJObject()
  var valid_608027 = query.getOrDefault("Marker")
  valid_608027 = validateParameter(valid_608027, JString, required = false,
                                 default = nil)
  if valid_608027 != nil:
    section.add "Marker", valid_608027
  var valid_608028 = query.getOrDefault("InstallationMediaId")
  valid_608028 = validateParameter(valid_608028, JString, required = false,
                                 default = nil)
  if valid_608028 != nil:
    section.add "InstallationMediaId", valid_608028
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608029 = query.getOrDefault("Action")
  valid_608029 = validateParameter(valid_608029, JString, required = true, default = newJString(
      "DescribeInstallationMedia"))
  if valid_608029 != nil:
    section.add "Action", valid_608029
  var valid_608030 = query.getOrDefault("Version")
  valid_608030 = validateParameter(valid_608030, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608030 != nil:
    section.add "Version", valid_608030
  var valid_608031 = query.getOrDefault("Filters")
  valid_608031 = validateParameter(valid_608031, JArray, required = false,
                                 default = nil)
  if valid_608031 != nil:
    section.add "Filters", valid_608031
  var valid_608032 = query.getOrDefault("MaxRecords")
  valid_608032 = validateParameter(valid_608032, JInt, required = false, default = nil)
  if valid_608032 != nil:
    section.add "MaxRecords", valid_608032
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608033 = header.getOrDefault("X-Amz-Signature")
  valid_608033 = validateParameter(valid_608033, JString, required = false,
                                 default = nil)
  if valid_608033 != nil:
    section.add "X-Amz-Signature", valid_608033
  var valid_608034 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608034 = validateParameter(valid_608034, JString, required = false,
                                 default = nil)
  if valid_608034 != nil:
    section.add "X-Amz-Content-Sha256", valid_608034
  var valid_608035 = header.getOrDefault("X-Amz-Date")
  valid_608035 = validateParameter(valid_608035, JString, required = false,
                                 default = nil)
  if valid_608035 != nil:
    section.add "X-Amz-Date", valid_608035
  var valid_608036 = header.getOrDefault("X-Amz-Credential")
  valid_608036 = validateParameter(valid_608036, JString, required = false,
                                 default = nil)
  if valid_608036 != nil:
    section.add "X-Amz-Credential", valid_608036
  var valid_608037 = header.getOrDefault("X-Amz-Security-Token")
  valid_608037 = validateParameter(valid_608037, JString, required = false,
                                 default = nil)
  if valid_608037 != nil:
    section.add "X-Amz-Security-Token", valid_608037
  var valid_608038 = header.getOrDefault("X-Amz-Algorithm")
  valid_608038 = validateParameter(valid_608038, JString, required = false,
                                 default = nil)
  if valid_608038 != nil:
    section.add "X-Amz-Algorithm", valid_608038
  var valid_608039 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608039 = validateParameter(valid_608039, JString, required = false,
                                 default = nil)
  if valid_608039 != nil:
    section.add "X-Amz-SignedHeaders", valid_608039
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608040: Call_GetDescribeInstallationMedia_608024; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_608040.validator(path, query, header, formData, body)
  let scheme = call_608040.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608040.url(scheme.get, call_608040.host, call_608040.base,
                         call_608040.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608040, url, valid)

proc call*(call_608041: Call_GetDescribeInstallationMedia_608024;
          Marker: string = ""; InstallationMediaId: string = "";
          Action: string = "DescribeInstallationMedia";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeInstallationMedia
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   InstallationMediaId: string
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  var query_608042 = newJObject()
  add(query_608042, "Marker", newJString(Marker))
  add(query_608042, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_608042, "Action", newJString(Action))
  add(query_608042, "Version", newJString(Version))
  if Filters != nil:
    query_608042.add "Filters", Filters
  add(query_608042, "MaxRecords", newJInt(MaxRecords))
  result = call_608041.call(nil, query_608042, nil, nil, nil)

var getDescribeInstallationMedia* = Call_GetDescribeInstallationMedia_608024(
    name: "getDescribeInstallationMedia", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeInstallationMedia",
    validator: validate_GetDescribeInstallationMedia_608025, base: "/",
    url: url_GetDescribeInstallationMedia_608026,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOptionGroupOptions_608083 = ref object of OpenApiRestCall_604389
proc url_PostDescribeOptionGroupOptions_608085(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOptionGroupOptions_608084(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes all available options.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608086 = query.getOrDefault("Action")
  valid_608086 = validateParameter(valid_608086, JString, required = true, default = newJString(
      "DescribeOptionGroupOptions"))
  if valid_608086 != nil:
    section.add "Action", valid_608086
  var valid_608087 = query.getOrDefault("Version")
  valid_608087 = validateParameter(valid_608087, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608087 != nil:
    section.add "Version", valid_608087
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608088 = header.getOrDefault("X-Amz-Signature")
  valid_608088 = validateParameter(valid_608088, JString, required = false,
                                 default = nil)
  if valid_608088 != nil:
    section.add "X-Amz-Signature", valid_608088
  var valid_608089 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608089 = validateParameter(valid_608089, JString, required = false,
                                 default = nil)
  if valid_608089 != nil:
    section.add "X-Amz-Content-Sha256", valid_608089
  var valid_608090 = header.getOrDefault("X-Amz-Date")
  valid_608090 = validateParameter(valid_608090, JString, required = false,
                                 default = nil)
  if valid_608090 != nil:
    section.add "X-Amz-Date", valid_608090
  var valid_608091 = header.getOrDefault("X-Amz-Credential")
  valid_608091 = validateParameter(valid_608091, JString, required = false,
                                 default = nil)
  if valid_608091 != nil:
    section.add "X-Amz-Credential", valid_608091
  var valid_608092 = header.getOrDefault("X-Amz-Security-Token")
  valid_608092 = validateParameter(valid_608092, JString, required = false,
                                 default = nil)
  if valid_608092 != nil:
    section.add "X-Amz-Security-Token", valid_608092
  var valid_608093 = header.getOrDefault("X-Amz-Algorithm")
  valid_608093 = validateParameter(valid_608093, JString, required = false,
                                 default = nil)
  if valid_608093 != nil:
    section.add "X-Amz-Algorithm", valid_608093
  var valid_608094 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608094 = validateParameter(valid_608094, JString, required = false,
                                 default = nil)
  if valid_608094 != nil:
    section.add "X-Amz-SignedHeaders", valid_608094
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineName: JString (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   MajorEngineVersion: JString
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_608095 = formData.getOrDefault("MaxRecords")
  valid_608095 = validateParameter(valid_608095, JInt, required = false, default = nil)
  if valid_608095 != nil:
    section.add "MaxRecords", valid_608095
  var valid_608096 = formData.getOrDefault("Marker")
  valid_608096 = validateParameter(valid_608096, JString, required = false,
                                 default = nil)
  if valid_608096 != nil:
    section.add "Marker", valid_608096
  assert formData != nil,
        "formData argument is necessary due to required `EngineName` field"
  var valid_608097 = formData.getOrDefault("EngineName")
  valid_608097 = validateParameter(valid_608097, JString, required = true,
                                 default = nil)
  if valid_608097 != nil:
    section.add "EngineName", valid_608097
  var valid_608098 = formData.getOrDefault("MajorEngineVersion")
  valid_608098 = validateParameter(valid_608098, JString, required = false,
                                 default = nil)
  if valid_608098 != nil:
    section.add "MajorEngineVersion", valid_608098
  var valid_608099 = formData.getOrDefault("Filters")
  valid_608099 = validateParameter(valid_608099, JArray, required = false,
                                 default = nil)
  if valid_608099 != nil:
    section.add "Filters", valid_608099
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608100: Call_PostDescribeOptionGroupOptions_608083; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes all available options.
  ## 
  let valid = call_608100.validator(path, query, header, formData, body)
  let scheme = call_608100.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608100.url(scheme.get, call_608100.host, call_608100.base,
                         call_608100.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608100, url, valid)

proc call*(call_608101: Call_PostDescribeOptionGroupOptions_608083;
          EngineName: string; MaxRecords: int = 0; Marker: string = "";
          MajorEngineVersion: string = "";
          Action: string = "DescribeOptionGroupOptions"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOptionGroupOptions
  ## Describes all available options.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineName: string (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   MajorEngineVersion: string
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_608102 = newJObject()
  var formData_608103 = newJObject()
  add(formData_608103, "MaxRecords", newJInt(MaxRecords))
  add(formData_608103, "Marker", newJString(Marker))
  add(formData_608103, "EngineName", newJString(EngineName))
  add(formData_608103, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(query_608102, "Action", newJString(Action))
  if Filters != nil:
    formData_608103.add "Filters", Filters
  add(query_608102, "Version", newJString(Version))
  result = call_608101.call(nil, query_608102, nil, formData_608103, nil)

var postDescribeOptionGroupOptions* = Call_PostDescribeOptionGroupOptions_608083(
    name: "postDescribeOptionGroupOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroupOptions",
    validator: validate_PostDescribeOptionGroupOptions_608084, base: "/",
    url: url_PostDescribeOptionGroupOptions_608085,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOptionGroupOptions_608063 = ref object of OpenApiRestCall_604389
proc url_GetDescribeOptionGroupOptions_608065(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOptionGroupOptions_608064(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes all available options.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EngineName: JString (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: JString
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EngineName` field"
  var valid_608066 = query.getOrDefault("EngineName")
  valid_608066 = validateParameter(valid_608066, JString, required = true,
                                 default = nil)
  if valid_608066 != nil:
    section.add "EngineName", valid_608066
  var valid_608067 = query.getOrDefault("Marker")
  valid_608067 = validateParameter(valid_608067, JString, required = false,
                                 default = nil)
  if valid_608067 != nil:
    section.add "Marker", valid_608067
  var valid_608068 = query.getOrDefault("Action")
  valid_608068 = validateParameter(valid_608068, JString, required = true, default = newJString(
      "DescribeOptionGroupOptions"))
  if valid_608068 != nil:
    section.add "Action", valid_608068
  var valid_608069 = query.getOrDefault("Version")
  valid_608069 = validateParameter(valid_608069, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608069 != nil:
    section.add "Version", valid_608069
  var valid_608070 = query.getOrDefault("Filters")
  valid_608070 = validateParameter(valid_608070, JArray, required = false,
                                 default = nil)
  if valid_608070 != nil:
    section.add "Filters", valid_608070
  var valid_608071 = query.getOrDefault("MaxRecords")
  valid_608071 = validateParameter(valid_608071, JInt, required = false, default = nil)
  if valid_608071 != nil:
    section.add "MaxRecords", valid_608071
  var valid_608072 = query.getOrDefault("MajorEngineVersion")
  valid_608072 = validateParameter(valid_608072, JString, required = false,
                                 default = nil)
  if valid_608072 != nil:
    section.add "MajorEngineVersion", valid_608072
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608073 = header.getOrDefault("X-Amz-Signature")
  valid_608073 = validateParameter(valid_608073, JString, required = false,
                                 default = nil)
  if valid_608073 != nil:
    section.add "X-Amz-Signature", valid_608073
  var valid_608074 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608074 = validateParameter(valid_608074, JString, required = false,
                                 default = nil)
  if valid_608074 != nil:
    section.add "X-Amz-Content-Sha256", valid_608074
  var valid_608075 = header.getOrDefault("X-Amz-Date")
  valid_608075 = validateParameter(valid_608075, JString, required = false,
                                 default = nil)
  if valid_608075 != nil:
    section.add "X-Amz-Date", valid_608075
  var valid_608076 = header.getOrDefault("X-Amz-Credential")
  valid_608076 = validateParameter(valid_608076, JString, required = false,
                                 default = nil)
  if valid_608076 != nil:
    section.add "X-Amz-Credential", valid_608076
  var valid_608077 = header.getOrDefault("X-Amz-Security-Token")
  valid_608077 = validateParameter(valid_608077, JString, required = false,
                                 default = nil)
  if valid_608077 != nil:
    section.add "X-Amz-Security-Token", valid_608077
  var valid_608078 = header.getOrDefault("X-Amz-Algorithm")
  valid_608078 = validateParameter(valid_608078, JString, required = false,
                                 default = nil)
  if valid_608078 != nil:
    section.add "X-Amz-Algorithm", valid_608078
  var valid_608079 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608079 = validateParameter(valid_608079, JString, required = false,
                                 default = nil)
  if valid_608079 != nil:
    section.add "X-Amz-SignedHeaders", valid_608079
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608080: Call_GetDescribeOptionGroupOptions_608063; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes all available options.
  ## 
  let valid = call_608080.validator(path, query, header, formData, body)
  let scheme = call_608080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608080.url(scheme.get, call_608080.host, call_608080.base,
                         call_608080.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608080, url, valid)

proc call*(call_608081: Call_GetDescribeOptionGroupOptions_608063;
          EngineName: string; Marker: string = "";
          Action: string = "DescribeOptionGroupOptions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0;
          MajorEngineVersion: string = ""): Recallable =
  ## getDescribeOptionGroupOptions
  ## Describes all available options.
  ##   EngineName: string (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: string
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  var query_608082 = newJObject()
  add(query_608082, "EngineName", newJString(EngineName))
  add(query_608082, "Marker", newJString(Marker))
  add(query_608082, "Action", newJString(Action))
  add(query_608082, "Version", newJString(Version))
  if Filters != nil:
    query_608082.add "Filters", Filters
  add(query_608082, "MaxRecords", newJInt(MaxRecords))
  add(query_608082, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_608081.call(nil, query_608082, nil, nil, nil)

var getDescribeOptionGroupOptions* = Call_GetDescribeOptionGroupOptions_608063(
    name: "getDescribeOptionGroupOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroupOptions",
    validator: validate_GetDescribeOptionGroupOptions_608064, base: "/",
    url: url_GetDescribeOptionGroupOptions_608065,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOptionGroups_608125 = ref object of OpenApiRestCall_604389
proc url_PostDescribeOptionGroups_608127(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOptionGroups_608126(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608128 = query.getOrDefault("Action")
  valid_608128 = validateParameter(valid_608128, JString, required = true,
                                 default = newJString("DescribeOptionGroups"))
  if valid_608128 != nil:
    section.add "Action", valid_608128
  var valid_608129 = query.getOrDefault("Version")
  valid_608129 = validateParameter(valid_608129, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608129 != nil:
    section.add "Version", valid_608129
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608130 = header.getOrDefault("X-Amz-Signature")
  valid_608130 = validateParameter(valid_608130, JString, required = false,
                                 default = nil)
  if valid_608130 != nil:
    section.add "X-Amz-Signature", valid_608130
  var valid_608131 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608131 = validateParameter(valid_608131, JString, required = false,
                                 default = nil)
  if valid_608131 != nil:
    section.add "X-Amz-Content-Sha256", valid_608131
  var valid_608132 = header.getOrDefault("X-Amz-Date")
  valid_608132 = validateParameter(valid_608132, JString, required = false,
                                 default = nil)
  if valid_608132 != nil:
    section.add "X-Amz-Date", valid_608132
  var valid_608133 = header.getOrDefault("X-Amz-Credential")
  valid_608133 = validateParameter(valid_608133, JString, required = false,
                                 default = nil)
  if valid_608133 != nil:
    section.add "X-Amz-Credential", valid_608133
  var valid_608134 = header.getOrDefault("X-Amz-Security-Token")
  valid_608134 = validateParameter(valid_608134, JString, required = false,
                                 default = nil)
  if valid_608134 != nil:
    section.add "X-Amz-Security-Token", valid_608134
  var valid_608135 = header.getOrDefault("X-Amz-Algorithm")
  valid_608135 = validateParameter(valid_608135, JString, required = false,
                                 default = nil)
  if valid_608135 != nil:
    section.add "X-Amz-Algorithm", valid_608135
  var valid_608136 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608136 = validateParameter(valid_608136, JString, required = false,
                                 default = nil)
  if valid_608136 != nil:
    section.add "X-Amz-SignedHeaders", valid_608136
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineName: JString
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   MajorEngineVersion: JString
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_608137 = formData.getOrDefault("MaxRecords")
  valid_608137 = validateParameter(valid_608137, JInt, required = false, default = nil)
  if valid_608137 != nil:
    section.add "MaxRecords", valid_608137
  var valid_608138 = formData.getOrDefault("Marker")
  valid_608138 = validateParameter(valid_608138, JString, required = false,
                                 default = nil)
  if valid_608138 != nil:
    section.add "Marker", valid_608138
  var valid_608139 = formData.getOrDefault("EngineName")
  valid_608139 = validateParameter(valid_608139, JString, required = false,
                                 default = nil)
  if valid_608139 != nil:
    section.add "EngineName", valid_608139
  var valid_608140 = formData.getOrDefault("MajorEngineVersion")
  valid_608140 = validateParameter(valid_608140, JString, required = false,
                                 default = nil)
  if valid_608140 != nil:
    section.add "MajorEngineVersion", valid_608140
  var valid_608141 = formData.getOrDefault("OptionGroupName")
  valid_608141 = validateParameter(valid_608141, JString, required = false,
                                 default = nil)
  if valid_608141 != nil:
    section.add "OptionGroupName", valid_608141
  var valid_608142 = formData.getOrDefault("Filters")
  valid_608142 = validateParameter(valid_608142, JArray, required = false,
                                 default = nil)
  if valid_608142 != nil:
    section.add "Filters", valid_608142
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608143: Call_PostDescribeOptionGroups_608125; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available option groups.
  ## 
  let valid = call_608143.validator(path, query, header, formData, body)
  let scheme = call_608143.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608143.url(scheme.get, call_608143.host, call_608143.base,
                         call_608143.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608143, url, valid)

proc call*(call_608144: Call_PostDescribeOptionGroups_608125; MaxRecords: int = 0;
          Marker: string = ""; EngineName: string = ""; MajorEngineVersion: string = "";
          Action: string = "DescribeOptionGroups"; OptionGroupName: string = "";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribeOptionGroups
  ## Describes the available option groups.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineName: string
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   MajorEngineVersion: string
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_608145 = newJObject()
  var formData_608146 = newJObject()
  add(formData_608146, "MaxRecords", newJInt(MaxRecords))
  add(formData_608146, "Marker", newJString(Marker))
  add(formData_608146, "EngineName", newJString(EngineName))
  add(formData_608146, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(query_608145, "Action", newJString(Action))
  add(formData_608146, "OptionGroupName", newJString(OptionGroupName))
  if Filters != nil:
    formData_608146.add "Filters", Filters
  add(query_608145, "Version", newJString(Version))
  result = call_608144.call(nil, query_608145, nil, formData_608146, nil)

var postDescribeOptionGroups* = Call_PostDescribeOptionGroups_608125(
    name: "postDescribeOptionGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroups",
    validator: validate_PostDescribeOptionGroups_608126, base: "/",
    url: url_PostDescribeOptionGroups_608127, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOptionGroups_608104 = ref object of OpenApiRestCall_604389
proc url_GetDescribeOptionGroups_608106(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOptionGroups_608105(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Describes the available option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EngineName: JString
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   OptionGroupName: JString
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: JString
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  section = newJObject()
  var valid_608107 = query.getOrDefault("EngineName")
  valid_608107 = validateParameter(valid_608107, JString, required = false,
                                 default = nil)
  if valid_608107 != nil:
    section.add "EngineName", valid_608107
  var valid_608108 = query.getOrDefault("Marker")
  valid_608108 = validateParameter(valid_608108, JString, required = false,
                                 default = nil)
  if valid_608108 != nil:
    section.add "Marker", valid_608108
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608109 = query.getOrDefault("Action")
  valid_608109 = validateParameter(valid_608109, JString, required = true,
                                 default = newJString("DescribeOptionGroups"))
  if valid_608109 != nil:
    section.add "Action", valid_608109
  var valid_608110 = query.getOrDefault("OptionGroupName")
  valid_608110 = validateParameter(valid_608110, JString, required = false,
                                 default = nil)
  if valid_608110 != nil:
    section.add "OptionGroupName", valid_608110
  var valid_608111 = query.getOrDefault("Version")
  valid_608111 = validateParameter(valid_608111, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608111 != nil:
    section.add "Version", valid_608111
  var valid_608112 = query.getOrDefault("Filters")
  valid_608112 = validateParameter(valid_608112, JArray, required = false,
                                 default = nil)
  if valid_608112 != nil:
    section.add "Filters", valid_608112
  var valid_608113 = query.getOrDefault("MaxRecords")
  valid_608113 = validateParameter(valid_608113, JInt, required = false, default = nil)
  if valid_608113 != nil:
    section.add "MaxRecords", valid_608113
  var valid_608114 = query.getOrDefault("MajorEngineVersion")
  valid_608114 = validateParameter(valid_608114, JString, required = false,
                                 default = nil)
  if valid_608114 != nil:
    section.add "MajorEngineVersion", valid_608114
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608115 = header.getOrDefault("X-Amz-Signature")
  valid_608115 = validateParameter(valid_608115, JString, required = false,
                                 default = nil)
  if valid_608115 != nil:
    section.add "X-Amz-Signature", valid_608115
  var valid_608116 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608116 = validateParameter(valid_608116, JString, required = false,
                                 default = nil)
  if valid_608116 != nil:
    section.add "X-Amz-Content-Sha256", valid_608116
  var valid_608117 = header.getOrDefault("X-Amz-Date")
  valid_608117 = validateParameter(valid_608117, JString, required = false,
                                 default = nil)
  if valid_608117 != nil:
    section.add "X-Amz-Date", valid_608117
  var valid_608118 = header.getOrDefault("X-Amz-Credential")
  valid_608118 = validateParameter(valid_608118, JString, required = false,
                                 default = nil)
  if valid_608118 != nil:
    section.add "X-Amz-Credential", valid_608118
  var valid_608119 = header.getOrDefault("X-Amz-Security-Token")
  valid_608119 = validateParameter(valid_608119, JString, required = false,
                                 default = nil)
  if valid_608119 != nil:
    section.add "X-Amz-Security-Token", valid_608119
  var valid_608120 = header.getOrDefault("X-Amz-Algorithm")
  valid_608120 = validateParameter(valid_608120, JString, required = false,
                                 default = nil)
  if valid_608120 != nil:
    section.add "X-Amz-Algorithm", valid_608120
  var valid_608121 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608121 = validateParameter(valid_608121, JString, required = false,
                                 default = nil)
  if valid_608121 != nil:
    section.add "X-Amz-SignedHeaders", valid_608121
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608122: Call_GetDescribeOptionGroups_608104; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Describes the available option groups.
  ## 
  let valid = call_608122.validator(path, query, header, formData, body)
  let scheme = call_608122.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608122.url(scheme.get, call_608122.host, call_608122.base,
                         call_608122.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608122, url, valid)

proc call*(call_608123: Call_GetDescribeOptionGroups_608104;
          EngineName: string = ""; Marker: string = "";
          Action: string = "DescribeOptionGroups"; OptionGroupName: string = "";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0;
          MajorEngineVersion: string = ""): Recallable =
  ## getDescribeOptionGroups
  ## Describes the available option groups.
  ##   EngineName: string
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   MajorEngineVersion: string
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  var query_608124 = newJObject()
  add(query_608124, "EngineName", newJString(EngineName))
  add(query_608124, "Marker", newJString(Marker))
  add(query_608124, "Action", newJString(Action))
  add(query_608124, "OptionGroupName", newJString(OptionGroupName))
  add(query_608124, "Version", newJString(Version))
  if Filters != nil:
    query_608124.add "Filters", Filters
  add(query_608124, "MaxRecords", newJInt(MaxRecords))
  add(query_608124, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_608123.call(nil, query_608124, nil, nil, nil)

var getDescribeOptionGroups* = Call_GetDescribeOptionGroups_608104(
    name: "getDescribeOptionGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroups",
    validator: validate_GetDescribeOptionGroups_608105, base: "/",
    url: url_GetDescribeOptionGroups_608106, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOrderableDBInstanceOptions_608170 = ref object of OpenApiRestCall_604389
proc url_PostDescribeOrderableDBInstanceOptions_608172(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOrderableDBInstanceOptions_608171(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608173 = query.getOrDefault("Action")
  valid_608173 = validateParameter(valid_608173, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_608173 != nil:
    section.add "Action", valid_608173
  var valid_608174 = query.getOrDefault("Version")
  valid_608174 = validateParameter(valid_608174, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608174 != nil:
    section.add "Version", valid_608174
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608175 = header.getOrDefault("X-Amz-Signature")
  valid_608175 = validateParameter(valid_608175, JString, required = false,
                                 default = nil)
  if valid_608175 != nil:
    section.add "X-Amz-Signature", valid_608175
  var valid_608176 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608176 = validateParameter(valid_608176, JString, required = false,
                                 default = nil)
  if valid_608176 != nil:
    section.add "X-Amz-Content-Sha256", valid_608176
  var valid_608177 = header.getOrDefault("X-Amz-Date")
  valid_608177 = validateParameter(valid_608177, JString, required = false,
                                 default = nil)
  if valid_608177 != nil:
    section.add "X-Amz-Date", valid_608177
  var valid_608178 = header.getOrDefault("X-Amz-Credential")
  valid_608178 = validateParameter(valid_608178, JString, required = false,
                                 default = nil)
  if valid_608178 != nil:
    section.add "X-Amz-Credential", valid_608178
  var valid_608179 = header.getOrDefault("X-Amz-Security-Token")
  valid_608179 = validateParameter(valid_608179, JString, required = false,
                                 default = nil)
  if valid_608179 != nil:
    section.add "X-Amz-Security-Token", valid_608179
  var valid_608180 = header.getOrDefault("X-Amz-Algorithm")
  valid_608180 = validateParameter(valid_608180, JString, required = false,
                                 default = nil)
  if valid_608180 != nil:
    section.add "X-Amz-Algorithm", valid_608180
  var valid_608181 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608181 = validateParameter(valid_608181, JString, required = false,
                                 default = nil)
  if valid_608181 != nil:
    section.add "X-Amz-SignedHeaders", valid_608181
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Vpc: JBool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  var valid_608182 = formData.getOrDefault("DBInstanceClass")
  valid_608182 = validateParameter(valid_608182, JString, required = false,
                                 default = nil)
  if valid_608182 != nil:
    section.add "DBInstanceClass", valid_608182
  var valid_608183 = formData.getOrDefault("MaxRecords")
  valid_608183 = validateParameter(valid_608183, JInt, required = false, default = nil)
  if valid_608183 != nil:
    section.add "MaxRecords", valid_608183
  var valid_608184 = formData.getOrDefault("EngineVersion")
  valid_608184 = validateParameter(valid_608184, JString, required = false,
                                 default = nil)
  if valid_608184 != nil:
    section.add "EngineVersion", valid_608184
  var valid_608185 = formData.getOrDefault("Marker")
  valid_608185 = validateParameter(valid_608185, JString, required = false,
                                 default = nil)
  if valid_608185 != nil:
    section.add "Marker", valid_608185
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_608186 = formData.getOrDefault("Engine")
  valid_608186 = validateParameter(valid_608186, JString, required = true,
                                 default = nil)
  if valid_608186 != nil:
    section.add "Engine", valid_608186
  var valid_608187 = formData.getOrDefault("Vpc")
  valid_608187 = validateParameter(valid_608187, JBool, required = false, default = nil)
  if valid_608187 != nil:
    section.add "Vpc", valid_608187
  var valid_608188 = formData.getOrDefault("LicenseModel")
  valid_608188 = validateParameter(valid_608188, JString, required = false,
                                 default = nil)
  if valid_608188 != nil:
    section.add "LicenseModel", valid_608188
  var valid_608189 = formData.getOrDefault("Filters")
  valid_608189 = validateParameter(valid_608189, JArray, required = false,
                                 default = nil)
  if valid_608189 != nil:
    section.add "Filters", valid_608189
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608190: Call_PostDescribeOrderableDBInstanceOptions_608170;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_608190.validator(path, query, header, formData, body)
  let scheme = call_608190.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608190.url(scheme.get, call_608190.host, call_608190.base,
                         call_608190.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608190, url, valid)

proc call*(call_608191: Call_PostDescribeOrderableDBInstanceOptions_608170;
          Engine: string; DBInstanceClass: string = ""; MaxRecords: int = 0;
          EngineVersion: string = ""; Marker: string = ""; Vpc: bool = false;
          Action: string = "DescribeOrderableDBInstanceOptions";
          LicenseModel: string = ""; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Vpc: bool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  var query_608192 = newJObject()
  var formData_608193 = newJObject()
  add(formData_608193, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_608193, "MaxRecords", newJInt(MaxRecords))
  add(formData_608193, "EngineVersion", newJString(EngineVersion))
  add(formData_608193, "Marker", newJString(Marker))
  add(formData_608193, "Engine", newJString(Engine))
  add(formData_608193, "Vpc", newJBool(Vpc))
  add(query_608192, "Action", newJString(Action))
  add(formData_608193, "LicenseModel", newJString(LicenseModel))
  if Filters != nil:
    formData_608193.add "Filters", Filters
  add(query_608192, "Version", newJString(Version))
  result = call_608191.call(nil, query_608192, nil, formData_608193, nil)

var postDescribeOrderableDBInstanceOptions* = Call_PostDescribeOrderableDBInstanceOptions_608170(
    name: "postDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_PostDescribeOrderableDBInstanceOptions_608171, base: "/",
    url: url_PostDescribeOrderableDBInstanceOptions_608172,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOrderableDBInstanceOptions_608147 = ref object of OpenApiRestCall_604389
proc url_GetDescribeOrderableDBInstanceOptions_608149(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOrderableDBInstanceOptions_608148(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: JBool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608150 = query.getOrDefault("Marker")
  valid_608150 = validateParameter(valid_608150, JString, required = false,
                                 default = nil)
  if valid_608150 != nil:
    section.add "Marker", valid_608150
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_608151 = query.getOrDefault("Engine")
  valid_608151 = validateParameter(valid_608151, JString, required = true,
                                 default = nil)
  if valid_608151 != nil:
    section.add "Engine", valid_608151
  var valid_608152 = query.getOrDefault("LicenseModel")
  valid_608152 = validateParameter(valid_608152, JString, required = false,
                                 default = nil)
  if valid_608152 != nil:
    section.add "LicenseModel", valid_608152
  var valid_608153 = query.getOrDefault("Vpc")
  valid_608153 = validateParameter(valid_608153, JBool, required = false, default = nil)
  if valid_608153 != nil:
    section.add "Vpc", valid_608153
  var valid_608154 = query.getOrDefault("EngineVersion")
  valid_608154 = validateParameter(valid_608154, JString, required = false,
                                 default = nil)
  if valid_608154 != nil:
    section.add "EngineVersion", valid_608154
  var valid_608155 = query.getOrDefault("Action")
  valid_608155 = validateParameter(valid_608155, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_608155 != nil:
    section.add "Action", valid_608155
  var valid_608156 = query.getOrDefault("Version")
  valid_608156 = validateParameter(valid_608156, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608156 != nil:
    section.add "Version", valid_608156
  var valid_608157 = query.getOrDefault("DBInstanceClass")
  valid_608157 = validateParameter(valid_608157, JString, required = false,
                                 default = nil)
  if valid_608157 != nil:
    section.add "DBInstanceClass", valid_608157
  var valid_608158 = query.getOrDefault("Filters")
  valid_608158 = validateParameter(valid_608158, JArray, required = false,
                                 default = nil)
  if valid_608158 != nil:
    section.add "Filters", valid_608158
  var valid_608159 = query.getOrDefault("MaxRecords")
  valid_608159 = validateParameter(valid_608159, JInt, required = false, default = nil)
  if valid_608159 != nil:
    section.add "MaxRecords", valid_608159
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608160 = header.getOrDefault("X-Amz-Signature")
  valid_608160 = validateParameter(valid_608160, JString, required = false,
                                 default = nil)
  if valid_608160 != nil:
    section.add "X-Amz-Signature", valid_608160
  var valid_608161 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608161 = validateParameter(valid_608161, JString, required = false,
                                 default = nil)
  if valid_608161 != nil:
    section.add "X-Amz-Content-Sha256", valid_608161
  var valid_608162 = header.getOrDefault("X-Amz-Date")
  valid_608162 = validateParameter(valid_608162, JString, required = false,
                                 default = nil)
  if valid_608162 != nil:
    section.add "X-Amz-Date", valid_608162
  var valid_608163 = header.getOrDefault("X-Amz-Credential")
  valid_608163 = validateParameter(valid_608163, JString, required = false,
                                 default = nil)
  if valid_608163 != nil:
    section.add "X-Amz-Credential", valid_608163
  var valid_608164 = header.getOrDefault("X-Amz-Security-Token")
  valid_608164 = validateParameter(valid_608164, JString, required = false,
                                 default = nil)
  if valid_608164 != nil:
    section.add "X-Amz-Security-Token", valid_608164
  var valid_608165 = header.getOrDefault("X-Amz-Algorithm")
  valid_608165 = validateParameter(valid_608165, JString, required = false,
                                 default = nil)
  if valid_608165 != nil:
    section.add "X-Amz-Algorithm", valid_608165
  var valid_608166 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608166 = validateParameter(valid_608166, JString, required = false,
                                 default = nil)
  if valid_608166 != nil:
    section.add "X-Amz-SignedHeaders", valid_608166
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608167: Call_GetDescribeOrderableDBInstanceOptions_608147;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_608167.validator(path, query, header, formData, body)
  let scheme = call_608167.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608167.url(scheme.get, call_608167.host, call_608167.base,
                         call_608167.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608167, url, valid)

proc call*(call_608168: Call_GetDescribeOrderableDBInstanceOptions_608147;
          Engine: string; Marker: string = ""; LicenseModel: string = "";
          Vpc: bool = false; EngineVersion: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: bool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608169 = newJObject()
  add(query_608169, "Marker", newJString(Marker))
  add(query_608169, "Engine", newJString(Engine))
  add(query_608169, "LicenseModel", newJString(LicenseModel))
  add(query_608169, "Vpc", newJBool(Vpc))
  add(query_608169, "EngineVersion", newJString(EngineVersion))
  add(query_608169, "Action", newJString(Action))
  add(query_608169, "Version", newJString(Version))
  add(query_608169, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_608169.add "Filters", Filters
  add(query_608169, "MaxRecords", newJInt(MaxRecords))
  result = call_608168.call(nil, query_608169, nil, nil, nil)

var getDescribeOrderableDBInstanceOptions* = Call_GetDescribeOrderableDBInstanceOptions_608147(
    name: "getDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_GetDescribeOrderableDBInstanceOptions_608148, base: "/",
    url: url_GetDescribeOrderableDBInstanceOptions_608149,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePendingMaintenanceActions_608213 = ref object of OpenApiRestCall_604389
proc url_PostDescribePendingMaintenanceActions_608215(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribePendingMaintenanceActions_608214(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608216 = query.getOrDefault("Action")
  valid_608216 = validateParameter(valid_608216, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_608216 != nil:
    section.add "Action", valid_608216
  var valid_608217 = query.getOrDefault("Version")
  valid_608217 = validateParameter(valid_608217, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608217 != nil:
    section.add "Version", valid_608217
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608218 = header.getOrDefault("X-Amz-Signature")
  valid_608218 = validateParameter(valid_608218, JString, required = false,
                                 default = nil)
  if valid_608218 != nil:
    section.add "X-Amz-Signature", valid_608218
  var valid_608219 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608219 = validateParameter(valid_608219, JString, required = false,
                                 default = nil)
  if valid_608219 != nil:
    section.add "X-Amz-Content-Sha256", valid_608219
  var valid_608220 = header.getOrDefault("X-Amz-Date")
  valid_608220 = validateParameter(valid_608220, JString, required = false,
                                 default = nil)
  if valid_608220 != nil:
    section.add "X-Amz-Date", valid_608220
  var valid_608221 = header.getOrDefault("X-Amz-Credential")
  valid_608221 = validateParameter(valid_608221, JString, required = false,
                                 default = nil)
  if valid_608221 != nil:
    section.add "X-Amz-Credential", valid_608221
  var valid_608222 = header.getOrDefault("X-Amz-Security-Token")
  valid_608222 = validateParameter(valid_608222, JString, required = false,
                                 default = nil)
  if valid_608222 != nil:
    section.add "X-Amz-Security-Token", valid_608222
  var valid_608223 = header.getOrDefault("X-Amz-Algorithm")
  valid_608223 = validateParameter(valid_608223, JString, required = false,
                                 default = nil)
  if valid_608223 != nil:
    section.add "X-Amz-Algorithm", valid_608223
  var valid_608224 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608224 = validateParameter(valid_608224, JString, required = false,
                                 default = nil)
  if valid_608224 != nil:
    section.add "X-Amz-SignedHeaders", valid_608224
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  section = newJObject()
  var valid_608225 = formData.getOrDefault("MaxRecords")
  valid_608225 = validateParameter(valid_608225, JInt, required = false, default = nil)
  if valid_608225 != nil:
    section.add "MaxRecords", valid_608225
  var valid_608226 = formData.getOrDefault("Marker")
  valid_608226 = validateParameter(valid_608226, JString, required = false,
                                 default = nil)
  if valid_608226 != nil:
    section.add "Marker", valid_608226
  var valid_608227 = formData.getOrDefault("ResourceIdentifier")
  valid_608227 = validateParameter(valid_608227, JString, required = false,
                                 default = nil)
  if valid_608227 != nil:
    section.add "ResourceIdentifier", valid_608227
  var valid_608228 = formData.getOrDefault("Filters")
  valid_608228 = validateParameter(valid_608228, JArray, required = false,
                                 default = nil)
  if valid_608228 != nil:
    section.add "Filters", valid_608228
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608229: Call_PostDescribePendingMaintenanceActions_608213;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_608229.validator(path, query, header, formData, body)
  let scheme = call_608229.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608229.url(scheme.get, call_608229.host, call_608229.base,
                         call_608229.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608229, url, valid)

proc call*(call_608230: Call_PostDescribePendingMaintenanceActions_608213;
          MaxRecords: int = 0; Marker: string = ""; ResourceIdentifier: string = "";
          Action: string = "DescribePendingMaintenanceActions";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   Version: string (required)
  var query_608231 = newJObject()
  var formData_608232 = newJObject()
  add(formData_608232, "MaxRecords", newJInt(MaxRecords))
  add(formData_608232, "Marker", newJString(Marker))
  add(formData_608232, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_608231, "Action", newJString(Action))
  if Filters != nil:
    formData_608232.add "Filters", Filters
  add(query_608231, "Version", newJString(Version))
  result = call_608230.call(nil, query_608231, nil, formData_608232, nil)

var postDescribePendingMaintenanceActions* = Call_PostDescribePendingMaintenanceActions_608213(
    name: "postDescribePendingMaintenanceActions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_PostDescribePendingMaintenanceActions_608214, base: "/",
    url: url_PostDescribePendingMaintenanceActions_608215,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePendingMaintenanceActions_608194 = ref object of OpenApiRestCall_604389
proc url_GetDescribePendingMaintenanceActions_608196(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribePendingMaintenanceActions_608195(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608197 = query.getOrDefault("ResourceIdentifier")
  valid_608197 = validateParameter(valid_608197, JString, required = false,
                                 default = nil)
  if valid_608197 != nil:
    section.add "ResourceIdentifier", valid_608197
  var valid_608198 = query.getOrDefault("Marker")
  valid_608198 = validateParameter(valid_608198, JString, required = false,
                                 default = nil)
  if valid_608198 != nil:
    section.add "Marker", valid_608198
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608199 = query.getOrDefault("Action")
  valid_608199 = validateParameter(valid_608199, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_608199 != nil:
    section.add "Action", valid_608199
  var valid_608200 = query.getOrDefault("Version")
  valid_608200 = validateParameter(valid_608200, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608200 != nil:
    section.add "Version", valid_608200
  var valid_608201 = query.getOrDefault("Filters")
  valid_608201 = validateParameter(valid_608201, JArray, required = false,
                                 default = nil)
  if valid_608201 != nil:
    section.add "Filters", valid_608201
  var valid_608202 = query.getOrDefault("MaxRecords")
  valid_608202 = validateParameter(valid_608202, JInt, required = false, default = nil)
  if valid_608202 != nil:
    section.add "MaxRecords", valid_608202
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608203 = header.getOrDefault("X-Amz-Signature")
  valid_608203 = validateParameter(valid_608203, JString, required = false,
                                 default = nil)
  if valid_608203 != nil:
    section.add "X-Amz-Signature", valid_608203
  var valid_608204 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608204 = validateParameter(valid_608204, JString, required = false,
                                 default = nil)
  if valid_608204 != nil:
    section.add "X-Amz-Content-Sha256", valid_608204
  var valid_608205 = header.getOrDefault("X-Amz-Date")
  valid_608205 = validateParameter(valid_608205, JString, required = false,
                                 default = nil)
  if valid_608205 != nil:
    section.add "X-Amz-Date", valid_608205
  var valid_608206 = header.getOrDefault("X-Amz-Credential")
  valid_608206 = validateParameter(valid_608206, JString, required = false,
                                 default = nil)
  if valid_608206 != nil:
    section.add "X-Amz-Credential", valid_608206
  var valid_608207 = header.getOrDefault("X-Amz-Security-Token")
  valid_608207 = validateParameter(valid_608207, JString, required = false,
                                 default = nil)
  if valid_608207 != nil:
    section.add "X-Amz-Security-Token", valid_608207
  var valid_608208 = header.getOrDefault("X-Amz-Algorithm")
  valid_608208 = validateParameter(valid_608208, JString, required = false,
                                 default = nil)
  if valid_608208 != nil:
    section.add "X-Amz-Algorithm", valid_608208
  var valid_608209 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608209 = validateParameter(valid_608209, JString, required = false,
                                 default = nil)
  if valid_608209 != nil:
    section.add "X-Amz-SignedHeaders", valid_608209
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608210: Call_GetDescribePendingMaintenanceActions_608194;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_608210.validator(path, query, header, formData, body)
  let scheme = call_608210.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608210.url(scheme.get, call_608210.host, call_608210.base,
                         call_608210.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608210, url, valid)

proc call*(call_608211: Call_GetDescribePendingMaintenanceActions_608194;
          ResourceIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribePendingMaintenanceActions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608212 = newJObject()
  add(query_608212, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_608212, "Marker", newJString(Marker))
  add(query_608212, "Action", newJString(Action))
  add(query_608212, "Version", newJString(Version))
  if Filters != nil:
    query_608212.add "Filters", Filters
  add(query_608212, "MaxRecords", newJInt(MaxRecords))
  result = call_608211.call(nil, query_608212, nil, nil, nil)

var getDescribePendingMaintenanceActions* = Call_GetDescribePendingMaintenanceActions_608194(
    name: "getDescribePendingMaintenanceActions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_GetDescribePendingMaintenanceActions_608195, base: "/",
    url: url_GetDescribePendingMaintenanceActions_608196,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedDBInstances_608259 = ref object of OpenApiRestCall_604389
proc url_PostDescribeReservedDBInstances_608261(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReservedDBInstances_608260(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608262 = query.getOrDefault("Action")
  valid_608262 = validateParameter(valid_608262, JString, required = true, default = newJString(
      "DescribeReservedDBInstances"))
  if valid_608262 != nil:
    section.add "Action", valid_608262
  var valid_608263 = query.getOrDefault("Version")
  valid_608263 = validateParameter(valid_608263, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608263 != nil:
    section.add "Version", valid_608263
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608264 = header.getOrDefault("X-Amz-Signature")
  valid_608264 = validateParameter(valid_608264, JString, required = false,
                                 default = nil)
  if valid_608264 != nil:
    section.add "X-Amz-Signature", valid_608264
  var valid_608265 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608265 = validateParameter(valid_608265, JString, required = false,
                                 default = nil)
  if valid_608265 != nil:
    section.add "X-Amz-Content-Sha256", valid_608265
  var valid_608266 = header.getOrDefault("X-Amz-Date")
  valid_608266 = validateParameter(valid_608266, JString, required = false,
                                 default = nil)
  if valid_608266 != nil:
    section.add "X-Amz-Date", valid_608266
  var valid_608267 = header.getOrDefault("X-Amz-Credential")
  valid_608267 = validateParameter(valid_608267, JString, required = false,
                                 default = nil)
  if valid_608267 != nil:
    section.add "X-Amz-Credential", valid_608267
  var valid_608268 = header.getOrDefault("X-Amz-Security-Token")
  valid_608268 = validateParameter(valid_608268, JString, required = false,
                                 default = nil)
  if valid_608268 != nil:
    section.add "X-Amz-Security-Token", valid_608268
  var valid_608269 = header.getOrDefault("X-Amz-Algorithm")
  valid_608269 = validateParameter(valid_608269, JString, required = false,
                                 default = nil)
  if valid_608269 != nil:
    section.add "X-Amz-Algorithm", valid_608269
  var valid_608270 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608270 = validateParameter(valid_608270, JString, required = false,
                                 default = nil)
  if valid_608270 != nil:
    section.add "X-Amz-SignedHeaders", valid_608270
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   LeaseId: JString
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   ReservedDBInstanceId: JString
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: JString
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  section = newJObject()
  var valid_608271 = formData.getOrDefault("DBInstanceClass")
  valid_608271 = validateParameter(valid_608271, JString, required = false,
                                 default = nil)
  if valid_608271 != nil:
    section.add "DBInstanceClass", valid_608271
  var valid_608272 = formData.getOrDefault("MultiAZ")
  valid_608272 = validateParameter(valid_608272, JBool, required = false, default = nil)
  if valid_608272 != nil:
    section.add "MultiAZ", valid_608272
  var valid_608273 = formData.getOrDefault("MaxRecords")
  valid_608273 = validateParameter(valid_608273, JInt, required = false, default = nil)
  if valid_608273 != nil:
    section.add "MaxRecords", valid_608273
  var valid_608274 = formData.getOrDefault("LeaseId")
  valid_608274 = validateParameter(valid_608274, JString, required = false,
                                 default = nil)
  if valid_608274 != nil:
    section.add "LeaseId", valid_608274
  var valid_608275 = formData.getOrDefault("ReservedDBInstanceId")
  valid_608275 = validateParameter(valid_608275, JString, required = false,
                                 default = nil)
  if valid_608275 != nil:
    section.add "ReservedDBInstanceId", valid_608275
  var valid_608276 = formData.getOrDefault("Marker")
  valid_608276 = validateParameter(valid_608276, JString, required = false,
                                 default = nil)
  if valid_608276 != nil:
    section.add "Marker", valid_608276
  var valid_608277 = formData.getOrDefault("Duration")
  valid_608277 = validateParameter(valid_608277, JString, required = false,
                                 default = nil)
  if valid_608277 != nil:
    section.add "Duration", valid_608277
  var valid_608278 = formData.getOrDefault("OfferingType")
  valid_608278 = validateParameter(valid_608278, JString, required = false,
                                 default = nil)
  if valid_608278 != nil:
    section.add "OfferingType", valid_608278
  var valid_608279 = formData.getOrDefault("ProductDescription")
  valid_608279 = validateParameter(valid_608279, JString, required = false,
                                 default = nil)
  if valid_608279 != nil:
    section.add "ProductDescription", valid_608279
  var valid_608280 = formData.getOrDefault("Filters")
  valid_608280 = validateParameter(valid_608280, JArray, required = false,
                                 default = nil)
  if valid_608280 != nil:
    section.add "Filters", valid_608280
  var valid_608281 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_608281 = validateParameter(valid_608281, JString, required = false,
                                 default = nil)
  if valid_608281 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_608281
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608282: Call_PostDescribeReservedDBInstances_608259;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  let valid = call_608282.validator(path, query, header, formData, body)
  let scheme = call_608282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608282.url(scheme.get, call_608282.host, call_608282.base,
                         call_608282.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608282, url, valid)

proc call*(call_608283: Call_PostDescribeReservedDBInstances_608259;
          DBInstanceClass: string = ""; MultiAZ: bool = false; MaxRecords: int = 0;
          LeaseId: string = ""; ReservedDBInstanceId: string = ""; Marker: string = "";
          Duration: string = ""; OfferingType: string = "";
          ProductDescription: string = "";
          Action: string = "DescribeReservedDBInstances"; Filters: JsonNode = nil;
          ReservedDBInstancesOfferingId: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postDescribeReservedDBInstances
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   LeaseId: string
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   ReservedDBInstanceId: string
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: string
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ReservedDBInstancesOfferingId: string
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: string (required)
  var query_608284 = newJObject()
  var formData_608285 = newJObject()
  add(formData_608285, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_608285, "MultiAZ", newJBool(MultiAZ))
  add(formData_608285, "MaxRecords", newJInt(MaxRecords))
  add(formData_608285, "LeaseId", newJString(LeaseId))
  add(formData_608285, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(formData_608285, "Marker", newJString(Marker))
  add(formData_608285, "Duration", newJString(Duration))
  add(formData_608285, "OfferingType", newJString(OfferingType))
  add(formData_608285, "ProductDescription", newJString(ProductDescription))
  add(query_608284, "Action", newJString(Action))
  if Filters != nil:
    formData_608285.add "Filters", Filters
  add(formData_608285, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_608284, "Version", newJString(Version))
  result = call_608283.call(nil, query_608284, nil, formData_608285, nil)

var postDescribeReservedDBInstances* = Call_PostDescribeReservedDBInstances_608259(
    name: "postDescribeReservedDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeReservedDBInstances",
    validator: validate_PostDescribeReservedDBInstances_608260, base: "/",
    url: url_PostDescribeReservedDBInstances_608261,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedDBInstances_608233 = ref object of OpenApiRestCall_604389
proc url_GetDescribeReservedDBInstances_608235(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReservedDBInstances_608234(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: JString
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ReservedDBInstanceId: JString
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   LeaseId: JString
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   Action: JString (required)
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608236 = query.getOrDefault("Marker")
  valid_608236 = validateParameter(valid_608236, JString, required = false,
                                 default = nil)
  if valid_608236 != nil:
    section.add "Marker", valid_608236
  var valid_608237 = query.getOrDefault("ProductDescription")
  valid_608237 = validateParameter(valid_608237, JString, required = false,
                                 default = nil)
  if valid_608237 != nil:
    section.add "ProductDescription", valid_608237
  var valid_608238 = query.getOrDefault("OfferingType")
  valid_608238 = validateParameter(valid_608238, JString, required = false,
                                 default = nil)
  if valid_608238 != nil:
    section.add "OfferingType", valid_608238
  var valid_608239 = query.getOrDefault("ReservedDBInstanceId")
  valid_608239 = validateParameter(valid_608239, JString, required = false,
                                 default = nil)
  if valid_608239 != nil:
    section.add "ReservedDBInstanceId", valid_608239
  var valid_608240 = query.getOrDefault("LeaseId")
  valid_608240 = validateParameter(valid_608240, JString, required = false,
                                 default = nil)
  if valid_608240 != nil:
    section.add "LeaseId", valid_608240
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608241 = query.getOrDefault("Action")
  valid_608241 = validateParameter(valid_608241, JString, required = true, default = newJString(
      "DescribeReservedDBInstances"))
  if valid_608241 != nil:
    section.add "Action", valid_608241
  var valid_608242 = query.getOrDefault("MultiAZ")
  valid_608242 = validateParameter(valid_608242, JBool, required = false, default = nil)
  if valid_608242 != nil:
    section.add "MultiAZ", valid_608242
  var valid_608243 = query.getOrDefault("Duration")
  valid_608243 = validateParameter(valid_608243, JString, required = false,
                                 default = nil)
  if valid_608243 != nil:
    section.add "Duration", valid_608243
  var valid_608244 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_608244 = validateParameter(valid_608244, JString, required = false,
                                 default = nil)
  if valid_608244 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_608244
  var valid_608245 = query.getOrDefault("Version")
  valid_608245 = validateParameter(valid_608245, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608245 != nil:
    section.add "Version", valid_608245
  var valid_608246 = query.getOrDefault("DBInstanceClass")
  valid_608246 = validateParameter(valid_608246, JString, required = false,
                                 default = nil)
  if valid_608246 != nil:
    section.add "DBInstanceClass", valid_608246
  var valid_608247 = query.getOrDefault("Filters")
  valid_608247 = validateParameter(valid_608247, JArray, required = false,
                                 default = nil)
  if valid_608247 != nil:
    section.add "Filters", valid_608247
  var valid_608248 = query.getOrDefault("MaxRecords")
  valid_608248 = validateParameter(valid_608248, JInt, required = false, default = nil)
  if valid_608248 != nil:
    section.add "MaxRecords", valid_608248
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608249 = header.getOrDefault("X-Amz-Signature")
  valid_608249 = validateParameter(valid_608249, JString, required = false,
                                 default = nil)
  if valid_608249 != nil:
    section.add "X-Amz-Signature", valid_608249
  var valid_608250 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608250 = validateParameter(valid_608250, JString, required = false,
                                 default = nil)
  if valid_608250 != nil:
    section.add "X-Amz-Content-Sha256", valid_608250
  var valid_608251 = header.getOrDefault("X-Amz-Date")
  valid_608251 = validateParameter(valid_608251, JString, required = false,
                                 default = nil)
  if valid_608251 != nil:
    section.add "X-Amz-Date", valid_608251
  var valid_608252 = header.getOrDefault("X-Amz-Credential")
  valid_608252 = validateParameter(valid_608252, JString, required = false,
                                 default = nil)
  if valid_608252 != nil:
    section.add "X-Amz-Credential", valid_608252
  var valid_608253 = header.getOrDefault("X-Amz-Security-Token")
  valid_608253 = validateParameter(valid_608253, JString, required = false,
                                 default = nil)
  if valid_608253 != nil:
    section.add "X-Amz-Security-Token", valid_608253
  var valid_608254 = header.getOrDefault("X-Amz-Algorithm")
  valid_608254 = validateParameter(valid_608254, JString, required = false,
                                 default = nil)
  if valid_608254 != nil:
    section.add "X-Amz-Algorithm", valid_608254
  var valid_608255 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608255 = validateParameter(valid_608255, JString, required = false,
                                 default = nil)
  if valid_608255 != nil:
    section.add "X-Amz-SignedHeaders", valid_608255
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608256: Call_GetDescribeReservedDBInstances_608233; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  let valid = call_608256.validator(path, query, header, formData, body)
  let scheme = call_608256.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608256.url(scheme.get, call_608256.host, call_608256.base,
                         call_608256.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608256, url, valid)

proc call*(call_608257: Call_GetDescribeReservedDBInstances_608233;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = ""; ReservedDBInstanceId: string = "";
          LeaseId: string = ""; Action: string = "DescribeReservedDBInstances";
          MultiAZ: bool = false; Duration: string = "";
          ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeReservedDBInstances
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: string
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ReservedDBInstanceId: string
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   LeaseId: string
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   Action: string (required)
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: string
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608258 = newJObject()
  add(query_608258, "Marker", newJString(Marker))
  add(query_608258, "ProductDescription", newJString(ProductDescription))
  add(query_608258, "OfferingType", newJString(OfferingType))
  add(query_608258, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_608258, "LeaseId", newJString(LeaseId))
  add(query_608258, "Action", newJString(Action))
  add(query_608258, "MultiAZ", newJBool(MultiAZ))
  add(query_608258, "Duration", newJString(Duration))
  add(query_608258, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_608258, "Version", newJString(Version))
  add(query_608258, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_608258.add "Filters", Filters
  add(query_608258, "MaxRecords", newJInt(MaxRecords))
  result = call_608257.call(nil, query_608258, nil, nil, nil)

var getDescribeReservedDBInstances* = Call_GetDescribeReservedDBInstances_608233(
    name: "getDescribeReservedDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeReservedDBInstances",
    validator: validate_GetDescribeReservedDBInstances_608234, base: "/",
    url: url_GetDescribeReservedDBInstances_608235,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedDBInstancesOfferings_608310 = ref object of OpenApiRestCall_604389
proc url_PostDescribeReservedDBInstancesOfferings_608312(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReservedDBInstancesOfferings_608311(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved DB instance offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608313 = query.getOrDefault("Action")
  valid_608313 = validateParameter(valid_608313, JString, required = true, default = newJString(
      "DescribeReservedDBInstancesOfferings"))
  if valid_608313 != nil:
    section.add "Action", valid_608313
  var valid_608314 = query.getOrDefault("Version")
  valid_608314 = validateParameter(valid_608314, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608314 != nil:
    section.add "Version", valid_608314
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608315 = header.getOrDefault("X-Amz-Signature")
  valid_608315 = validateParameter(valid_608315, JString, required = false,
                                 default = nil)
  if valid_608315 != nil:
    section.add "X-Amz-Signature", valid_608315
  var valid_608316 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608316 = validateParameter(valid_608316, JString, required = false,
                                 default = nil)
  if valid_608316 != nil:
    section.add "X-Amz-Content-Sha256", valid_608316
  var valid_608317 = header.getOrDefault("X-Amz-Date")
  valid_608317 = validateParameter(valid_608317, JString, required = false,
                                 default = nil)
  if valid_608317 != nil:
    section.add "X-Amz-Date", valid_608317
  var valid_608318 = header.getOrDefault("X-Amz-Credential")
  valid_608318 = validateParameter(valid_608318, JString, required = false,
                                 default = nil)
  if valid_608318 != nil:
    section.add "X-Amz-Credential", valid_608318
  var valid_608319 = header.getOrDefault("X-Amz-Security-Token")
  valid_608319 = validateParameter(valid_608319, JString, required = false,
                                 default = nil)
  if valid_608319 != nil:
    section.add "X-Amz-Security-Token", valid_608319
  var valid_608320 = header.getOrDefault("X-Amz-Algorithm")
  valid_608320 = validateParameter(valid_608320, JString, required = false,
                                 default = nil)
  if valid_608320 != nil:
    section.add "X-Amz-Algorithm", valid_608320
  var valid_608321 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608321 = validateParameter(valid_608321, JString, required = false,
                                 default = nil)
  if valid_608321 != nil:
    section.add "X-Amz-SignedHeaders", valid_608321
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: JString
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_608322 = formData.getOrDefault("DBInstanceClass")
  valid_608322 = validateParameter(valid_608322, JString, required = false,
                                 default = nil)
  if valid_608322 != nil:
    section.add "DBInstanceClass", valid_608322
  var valid_608323 = formData.getOrDefault("MultiAZ")
  valid_608323 = validateParameter(valid_608323, JBool, required = false, default = nil)
  if valid_608323 != nil:
    section.add "MultiAZ", valid_608323
  var valid_608324 = formData.getOrDefault("MaxRecords")
  valid_608324 = validateParameter(valid_608324, JInt, required = false, default = nil)
  if valid_608324 != nil:
    section.add "MaxRecords", valid_608324
  var valid_608325 = formData.getOrDefault("Marker")
  valid_608325 = validateParameter(valid_608325, JString, required = false,
                                 default = nil)
  if valid_608325 != nil:
    section.add "Marker", valid_608325
  var valid_608326 = formData.getOrDefault("Duration")
  valid_608326 = validateParameter(valid_608326, JString, required = false,
                                 default = nil)
  if valid_608326 != nil:
    section.add "Duration", valid_608326
  var valid_608327 = formData.getOrDefault("OfferingType")
  valid_608327 = validateParameter(valid_608327, JString, required = false,
                                 default = nil)
  if valid_608327 != nil:
    section.add "OfferingType", valid_608327
  var valid_608328 = formData.getOrDefault("ProductDescription")
  valid_608328 = validateParameter(valid_608328, JString, required = false,
                                 default = nil)
  if valid_608328 != nil:
    section.add "ProductDescription", valid_608328
  var valid_608329 = formData.getOrDefault("Filters")
  valid_608329 = validateParameter(valid_608329, JArray, required = false,
                                 default = nil)
  if valid_608329 != nil:
    section.add "Filters", valid_608329
  var valid_608330 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_608330 = validateParameter(valid_608330, JString, required = false,
                                 default = nil)
  if valid_608330 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_608330
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608331: Call_PostDescribeReservedDBInstancesOfferings_608310;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved DB instance offerings.
  ## 
  let valid = call_608331.validator(path, query, header, formData, body)
  let scheme = call_608331.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608331.url(scheme.get, call_608331.host, call_608331.base,
                         call_608331.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608331, url, valid)

proc call*(call_608332: Call_PostDescribeReservedDBInstancesOfferings_608310;
          DBInstanceClass: string = ""; MultiAZ: bool = false; MaxRecords: int = 0;
          Marker: string = ""; Duration: string = ""; OfferingType: string = "";
          ProductDescription: string = "";
          Action: string = "DescribeReservedDBInstancesOfferings";
          Filters: JsonNode = nil; ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeReservedDBInstancesOfferings
  ## Lists available reserved DB instance offerings.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ProductDescription: string
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ReservedDBInstancesOfferingId: string
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: string (required)
  var query_608333 = newJObject()
  var formData_608334 = newJObject()
  add(formData_608334, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_608334, "MultiAZ", newJBool(MultiAZ))
  add(formData_608334, "MaxRecords", newJInt(MaxRecords))
  add(formData_608334, "Marker", newJString(Marker))
  add(formData_608334, "Duration", newJString(Duration))
  add(formData_608334, "OfferingType", newJString(OfferingType))
  add(formData_608334, "ProductDescription", newJString(ProductDescription))
  add(query_608333, "Action", newJString(Action))
  if Filters != nil:
    formData_608334.add "Filters", Filters
  add(formData_608334, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_608333, "Version", newJString(Version))
  result = call_608332.call(nil, query_608333, nil, formData_608334, nil)

var postDescribeReservedDBInstancesOfferings* = Call_PostDescribeReservedDBInstancesOfferings_608310(
    name: "postDescribeReservedDBInstancesOfferings", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeReservedDBInstancesOfferings",
    validator: validate_PostDescribeReservedDBInstancesOfferings_608311,
    base: "/", url: url_PostDescribeReservedDBInstancesOfferings_608312,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedDBInstancesOfferings_608286 = ref object of OpenApiRestCall_604389
proc url_GetDescribeReservedDBInstancesOfferings_608288(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReservedDBInstancesOfferings_608287(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Lists available reserved DB instance offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: JString
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Action: JString (required)
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608289 = query.getOrDefault("Marker")
  valid_608289 = validateParameter(valid_608289, JString, required = false,
                                 default = nil)
  if valid_608289 != nil:
    section.add "Marker", valid_608289
  var valid_608290 = query.getOrDefault("ProductDescription")
  valid_608290 = validateParameter(valid_608290, JString, required = false,
                                 default = nil)
  if valid_608290 != nil:
    section.add "ProductDescription", valid_608290
  var valid_608291 = query.getOrDefault("OfferingType")
  valid_608291 = validateParameter(valid_608291, JString, required = false,
                                 default = nil)
  if valid_608291 != nil:
    section.add "OfferingType", valid_608291
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608292 = query.getOrDefault("Action")
  valid_608292 = validateParameter(valid_608292, JString, required = true, default = newJString(
      "DescribeReservedDBInstancesOfferings"))
  if valid_608292 != nil:
    section.add "Action", valid_608292
  var valid_608293 = query.getOrDefault("MultiAZ")
  valid_608293 = validateParameter(valid_608293, JBool, required = false, default = nil)
  if valid_608293 != nil:
    section.add "MultiAZ", valid_608293
  var valid_608294 = query.getOrDefault("Duration")
  valid_608294 = validateParameter(valid_608294, JString, required = false,
                                 default = nil)
  if valid_608294 != nil:
    section.add "Duration", valid_608294
  var valid_608295 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_608295 = validateParameter(valid_608295, JString, required = false,
                                 default = nil)
  if valid_608295 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_608295
  var valid_608296 = query.getOrDefault("Version")
  valid_608296 = validateParameter(valid_608296, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608296 != nil:
    section.add "Version", valid_608296
  var valid_608297 = query.getOrDefault("DBInstanceClass")
  valid_608297 = validateParameter(valid_608297, JString, required = false,
                                 default = nil)
  if valid_608297 != nil:
    section.add "DBInstanceClass", valid_608297
  var valid_608298 = query.getOrDefault("Filters")
  valid_608298 = validateParameter(valid_608298, JArray, required = false,
                                 default = nil)
  if valid_608298 != nil:
    section.add "Filters", valid_608298
  var valid_608299 = query.getOrDefault("MaxRecords")
  valid_608299 = validateParameter(valid_608299, JInt, required = false, default = nil)
  if valid_608299 != nil:
    section.add "MaxRecords", valid_608299
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608300 = header.getOrDefault("X-Amz-Signature")
  valid_608300 = validateParameter(valid_608300, JString, required = false,
                                 default = nil)
  if valid_608300 != nil:
    section.add "X-Amz-Signature", valid_608300
  var valid_608301 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608301 = validateParameter(valid_608301, JString, required = false,
                                 default = nil)
  if valid_608301 != nil:
    section.add "X-Amz-Content-Sha256", valid_608301
  var valid_608302 = header.getOrDefault("X-Amz-Date")
  valid_608302 = validateParameter(valid_608302, JString, required = false,
                                 default = nil)
  if valid_608302 != nil:
    section.add "X-Amz-Date", valid_608302
  var valid_608303 = header.getOrDefault("X-Amz-Credential")
  valid_608303 = validateParameter(valid_608303, JString, required = false,
                                 default = nil)
  if valid_608303 != nil:
    section.add "X-Amz-Credential", valid_608303
  var valid_608304 = header.getOrDefault("X-Amz-Security-Token")
  valid_608304 = validateParameter(valid_608304, JString, required = false,
                                 default = nil)
  if valid_608304 != nil:
    section.add "X-Amz-Security-Token", valid_608304
  var valid_608305 = header.getOrDefault("X-Amz-Algorithm")
  valid_608305 = validateParameter(valid_608305, JString, required = false,
                                 default = nil)
  if valid_608305 != nil:
    section.add "X-Amz-Algorithm", valid_608305
  var valid_608306 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608306 = validateParameter(valid_608306, JString, required = false,
                                 default = nil)
  if valid_608306 != nil:
    section.add "X-Amz-SignedHeaders", valid_608306
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608307: Call_GetDescribeReservedDBInstancesOfferings_608286;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Lists available reserved DB instance offerings.
  ## 
  let valid = call_608307.validator(path, query, header, formData, body)
  let scheme = call_608307.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608307.url(scheme.get, call_608307.host, call_608307.base,
                         call_608307.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608307, url, valid)

proc call*(call_608308: Call_GetDescribeReservedDBInstancesOfferings_608286;
          Marker: string = ""; ProductDescription: string = "";
          OfferingType: string = "";
          Action: string = "DescribeReservedDBInstancesOfferings";
          MultiAZ: bool = false; Duration: string = "";
          ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"; DBInstanceClass: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeReservedDBInstancesOfferings
  ## Lists available reserved DB instance offerings.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   ProductDescription: string
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Action: string (required)
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   ReservedDBInstancesOfferingId: string
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608309 = newJObject()
  add(query_608309, "Marker", newJString(Marker))
  add(query_608309, "ProductDescription", newJString(ProductDescription))
  add(query_608309, "OfferingType", newJString(OfferingType))
  add(query_608309, "Action", newJString(Action))
  add(query_608309, "MultiAZ", newJBool(MultiAZ))
  add(query_608309, "Duration", newJString(Duration))
  add(query_608309, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_608309, "Version", newJString(Version))
  add(query_608309, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    query_608309.add "Filters", Filters
  add(query_608309, "MaxRecords", newJInt(MaxRecords))
  result = call_608308.call(nil, query_608309, nil, nil, nil)

var getDescribeReservedDBInstancesOfferings* = Call_GetDescribeReservedDBInstancesOfferings_608286(
    name: "getDescribeReservedDBInstancesOfferings", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeReservedDBInstancesOfferings",
    validator: validate_GetDescribeReservedDBInstancesOfferings_608287, base: "/",
    url: url_GetDescribeReservedDBInstancesOfferings_608288,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeSourceRegions_608354 = ref object of OpenApiRestCall_604389
proc url_PostDescribeSourceRegions_608356(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeSourceRegions_608355(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608357 = query.getOrDefault("Action")
  valid_608357 = validateParameter(valid_608357, JString, required = true,
                                 default = newJString("DescribeSourceRegions"))
  if valid_608357 != nil:
    section.add "Action", valid_608357
  var valid_608358 = query.getOrDefault("Version")
  valid_608358 = validateParameter(valid_608358, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608358 != nil:
    section.add "Version", valid_608358
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608359 = header.getOrDefault("X-Amz-Signature")
  valid_608359 = validateParameter(valid_608359, JString, required = false,
                                 default = nil)
  if valid_608359 != nil:
    section.add "X-Amz-Signature", valid_608359
  var valid_608360 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608360 = validateParameter(valid_608360, JString, required = false,
                                 default = nil)
  if valid_608360 != nil:
    section.add "X-Amz-Content-Sha256", valid_608360
  var valid_608361 = header.getOrDefault("X-Amz-Date")
  valid_608361 = validateParameter(valid_608361, JString, required = false,
                                 default = nil)
  if valid_608361 != nil:
    section.add "X-Amz-Date", valid_608361
  var valid_608362 = header.getOrDefault("X-Amz-Credential")
  valid_608362 = validateParameter(valid_608362, JString, required = false,
                                 default = nil)
  if valid_608362 != nil:
    section.add "X-Amz-Credential", valid_608362
  var valid_608363 = header.getOrDefault("X-Amz-Security-Token")
  valid_608363 = validateParameter(valid_608363, JString, required = false,
                                 default = nil)
  if valid_608363 != nil:
    section.add "X-Amz-Security-Token", valid_608363
  var valid_608364 = header.getOrDefault("X-Amz-Algorithm")
  valid_608364 = validateParameter(valid_608364, JString, required = false,
                                 default = nil)
  if valid_608364 != nil:
    section.add "X-Amz-Algorithm", valid_608364
  var valid_608365 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608365 = validateParameter(valid_608365, JString, required = false,
                                 default = nil)
  if valid_608365 != nil:
    section.add "X-Amz-SignedHeaders", valid_608365
  result.add "header", section
  ## parameters in `formData` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   RegionName: JString
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  section = newJObject()
  var valid_608366 = formData.getOrDefault("MaxRecords")
  valid_608366 = validateParameter(valid_608366, JInt, required = false, default = nil)
  if valid_608366 != nil:
    section.add "MaxRecords", valid_608366
  var valid_608367 = formData.getOrDefault("Marker")
  valid_608367 = validateParameter(valid_608367, JString, required = false,
                                 default = nil)
  if valid_608367 != nil:
    section.add "Marker", valid_608367
  var valid_608368 = formData.getOrDefault("Filters")
  valid_608368 = validateParameter(valid_608368, JArray, required = false,
                                 default = nil)
  if valid_608368 != nil:
    section.add "Filters", valid_608368
  var valid_608369 = formData.getOrDefault("RegionName")
  valid_608369 = validateParameter(valid_608369, JString, required = false,
                                 default = nil)
  if valid_608369 != nil:
    section.add "RegionName", valid_608369
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608370: Call_PostDescribeSourceRegions_608354; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  let valid = call_608370.validator(path, query, header, formData, body)
  let scheme = call_608370.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608370.url(scheme.get, call_608370.host, call_608370.base,
                         call_608370.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608370, url, valid)

proc call*(call_608371: Call_PostDescribeSourceRegions_608354; MaxRecords: int = 0;
          Marker: string = ""; Action: string = "DescribeSourceRegions";
          Filters: JsonNode = nil; Version: string = "2014-10-31";
          RegionName: string = ""): Recallable =
  ## postDescribeSourceRegions
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   RegionName: string
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  var query_608372 = newJObject()
  var formData_608373 = newJObject()
  add(formData_608373, "MaxRecords", newJInt(MaxRecords))
  add(formData_608373, "Marker", newJString(Marker))
  add(query_608372, "Action", newJString(Action))
  if Filters != nil:
    formData_608373.add "Filters", Filters
  add(query_608372, "Version", newJString(Version))
  add(formData_608373, "RegionName", newJString(RegionName))
  result = call_608371.call(nil, query_608372, nil, formData_608373, nil)

var postDescribeSourceRegions* = Call_PostDescribeSourceRegions_608354(
    name: "postDescribeSourceRegions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeSourceRegions",
    validator: validate_PostDescribeSourceRegions_608355, base: "/",
    url: url_PostDescribeSourceRegions_608356,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeSourceRegions_608335 = ref object of OpenApiRestCall_604389
proc url_GetDescribeSourceRegions_608337(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeSourceRegions_608336(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   RegionName: JString
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_608338 = query.getOrDefault("Marker")
  valid_608338 = validateParameter(valid_608338, JString, required = false,
                                 default = nil)
  if valid_608338 != nil:
    section.add "Marker", valid_608338
  var valid_608339 = query.getOrDefault("RegionName")
  valid_608339 = validateParameter(valid_608339, JString, required = false,
                                 default = nil)
  if valid_608339 != nil:
    section.add "RegionName", valid_608339
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608340 = query.getOrDefault("Action")
  valid_608340 = validateParameter(valid_608340, JString, required = true,
                                 default = newJString("DescribeSourceRegions"))
  if valid_608340 != nil:
    section.add "Action", valid_608340
  var valid_608341 = query.getOrDefault("Version")
  valid_608341 = validateParameter(valid_608341, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608341 != nil:
    section.add "Version", valid_608341
  var valid_608342 = query.getOrDefault("Filters")
  valid_608342 = validateParameter(valid_608342, JArray, required = false,
                                 default = nil)
  if valid_608342 != nil:
    section.add "Filters", valid_608342
  var valid_608343 = query.getOrDefault("MaxRecords")
  valid_608343 = validateParameter(valid_608343, JInt, required = false, default = nil)
  if valid_608343 != nil:
    section.add "MaxRecords", valid_608343
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608344 = header.getOrDefault("X-Amz-Signature")
  valid_608344 = validateParameter(valid_608344, JString, required = false,
                                 default = nil)
  if valid_608344 != nil:
    section.add "X-Amz-Signature", valid_608344
  var valid_608345 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608345 = validateParameter(valid_608345, JString, required = false,
                                 default = nil)
  if valid_608345 != nil:
    section.add "X-Amz-Content-Sha256", valid_608345
  var valid_608346 = header.getOrDefault("X-Amz-Date")
  valid_608346 = validateParameter(valid_608346, JString, required = false,
                                 default = nil)
  if valid_608346 != nil:
    section.add "X-Amz-Date", valid_608346
  var valid_608347 = header.getOrDefault("X-Amz-Credential")
  valid_608347 = validateParameter(valid_608347, JString, required = false,
                                 default = nil)
  if valid_608347 != nil:
    section.add "X-Amz-Credential", valid_608347
  var valid_608348 = header.getOrDefault("X-Amz-Security-Token")
  valid_608348 = validateParameter(valid_608348, JString, required = false,
                                 default = nil)
  if valid_608348 != nil:
    section.add "X-Amz-Security-Token", valid_608348
  var valid_608349 = header.getOrDefault("X-Amz-Algorithm")
  valid_608349 = validateParameter(valid_608349, JString, required = false,
                                 default = nil)
  if valid_608349 != nil:
    section.add "X-Amz-Algorithm", valid_608349
  var valid_608350 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608350 = validateParameter(valid_608350, JString, required = false,
                                 default = nil)
  if valid_608350 != nil:
    section.add "X-Amz-SignedHeaders", valid_608350
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608351: Call_GetDescribeSourceRegions_608335; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  let valid = call_608351.validator(path, query, header, formData, body)
  let scheme = call_608351.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608351.url(scheme.get, call_608351.host, call_608351.base,
                         call_608351.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608351, url, valid)

proc call*(call_608352: Call_GetDescribeSourceRegions_608335; Marker: string = "";
          RegionName: string = ""; Action: string = "DescribeSourceRegions";
          Version: string = "2014-10-31"; Filters: JsonNode = nil; MaxRecords: int = 0): Recallable =
  ## getDescribeSourceRegions
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   RegionName: string
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  var query_608353 = newJObject()
  add(query_608353, "Marker", newJString(Marker))
  add(query_608353, "RegionName", newJString(RegionName))
  add(query_608353, "Action", newJString(Action))
  add(query_608353, "Version", newJString(Version))
  if Filters != nil:
    query_608353.add "Filters", Filters
  add(query_608353, "MaxRecords", newJInt(MaxRecords))
  result = call_608352.call(nil, query_608353, nil, nil, nil)

var getDescribeSourceRegions* = Call_GetDescribeSourceRegions_608335(
    name: "getDescribeSourceRegions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeSourceRegions",
    validator: validate_GetDescribeSourceRegions_608336, base: "/",
    url: url_GetDescribeSourceRegions_608337, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeValidDBInstanceModifications_608390 = ref object of OpenApiRestCall_604389
proc url_PostDescribeValidDBInstanceModifications_608392(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeValidDBInstanceModifications_608391(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608393 = query.getOrDefault("Action")
  valid_608393 = validateParameter(valid_608393, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_608393 != nil:
    section.add "Action", valid_608393
  var valid_608394 = query.getOrDefault("Version")
  valid_608394 = validateParameter(valid_608394, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608394 != nil:
    section.add "Version", valid_608394
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608395 = header.getOrDefault("X-Amz-Signature")
  valid_608395 = validateParameter(valid_608395, JString, required = false,
                                 default = nil)
  if valid_608395 != nil:
    section.add "X-Amz-Signature", valid_608395
  var valid_608396 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608396 = validateParameter(valid_608396, JString, required = false,
                                 default = nil)
  if valid_608396 != nil:
    section.add "X-Amz-Content-Sha256", valid_608396
  var valid_608397 = header.getOrDefault("X-Amz-Date")
  valid_608397 = validateParameter(valid_608397, JString, required = false,
                                 default = nil)
  if valid_608397 != nil:
    section.add "X-Amz-Date", valid_608397
  var valid_608398 = header.getOrDefault("X-Amz-Credential")
  valid_608398 = validateParameter(valid_608398, JString, required = false,
                                 default = nil)
  if valid_608398 != nil:
    section.add "X-Amz-Credential", valid_608398
  var valid_608399 = header.getOrDefault("X-Amz-Security-Token")
  valid_608399 = validateParameter(valid_608399, JString, required = false,
                                 default = nil)
  if valid_608399 != nil:
    section.add "X-Amz-Security-Token", valid_608399
  var valid_608400 = header.getOrDefault("X-Amz-Algorithm")
  valid_608400 = validateParameter(valid_608400, JString, required = false,
                                 default = nil)
  if valid_608400 != nil:
    section.add "X-Amz-Algorithm", valid_608400
  var valid_608401 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608401 = validateParameter(valid_608401, JString, required = false,
                                 default = nil)
  if valid_608401 != nil:
    section.add "X-Amz-SignedHeaders", valid_608401
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_608402 = formData.getOrDefault("DBInstanceIdentifier")
  valid_608402 = validateParameter(valid_608402, JString, required = true,
                                 default = nil)
  if valid_608402 != nil:
    section.add "DBInstanceIdentifier", valid_608402
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608403: Call_PostDescribeValidDBInstanceModifications_608390;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_608403.validator(path, query, header, formData, body)
  let scheme = call_608403.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608403.url(scheme.get, call_608403.host, call_608403.base,
                         call_608403.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608403, url, valid)

proc call*(call_608404: Call_PostDescribeValidDBInstanceModifications_608390;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeValidDBInstanceModifications
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608405 = newJObject()
  var formData_608406 = newJObject()
  add(formData_608406, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_608405, "Action", newJString(Action))
  add(query_608405, "Version", newJString(Version))
  result = call_608404.call(nil, query_608405, nil, formData_608406, nil)

var postDescribeValidDBInstanceModifications* = Call_PostDescribeValidDBInstanceModifications_608390(
    name: "postDescribeValidDBInstanceModifications", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_PostDescribeValidDBInstanceModifications_608391,
    base: "/", url: url_PostDescribeValidDBInstanceModifications_608392,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeValidDBInstanceModifications_608374 = ref object of OpenApiRestCall_604389
proc url_GetDescribeValidDBInstanceModifications_608376(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeValidDBInstanceModifications_608375(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_608377 = query.getOrDefault("DBInstanceIdentifier")
  valid_608377 = validateParameter(valid_608377, JString, required = true,
                                 default = nil)
  if valid_608377 != nil:
    section.add "DBInstanceIdentifier", valid_608377
  var valid_608378 = query.getOrDefault("Action")
  valid_608378 = validateParameter(valid_608378, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_608378 != nil:
    section.add "Action", valid_608378
  var valid_608379 = query.getOrDefault("Version")
  valid_608379 = validateParameter(valid_608379, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608379 != nil:
    section.add "Version", valid_608379
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608380 = header.getOrDefault("X-Amz-Signature")
  valid_608380 = validateParameter(valid_608380, JString, required = false,
                                 default = nil)
  if valid_608380 != nil:
    section.add "X-Amz-Signature", valid_608380
  var valid_608381 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608381 = validateParameter(valid_608381, JString, required = false,
                                 default = nil)
  if valid_608381 != nil:
    section.add "X-Amz-Content-Sha256", valid_608381
  var valid_608382 = header.getOrDefault("X-Amz-Date")
  valid_608382 = validateParameter(valid_608382, JString, required = false,
                                 default = nil)
  if valid_608382 != nil:
    section.add "X-Amz-Date", valid_608382
  var valid_608383 = header.getOrDefault("X-Amz-Credential")
  valid_608383 = validateParameter(valid_608383, JString, required = false,
                                 default = nil)
  if valid_608383 != nil:
    section.add "X-Amz-Credential", valid_608383
  var valid_608384 = header.getOrDefault("X-Amz-Security-Token")
  valid_608384 = validateParameter(valid_608384, JString, required = false,
                                 default = nil)
  if valid_608384 != nil:
    section.add "X-Amz-Security-Token", valid_608384
  var valid_608385 = header.getOrDefault("X-Amz-Algorithm")
  valid_608385 = validateParameter(valid_608385, JString, required = false,
                                 default = nil)
  if valid_608385 != nil:
    section.add "X-Amz-Algorithm", valid_608385
  var valid_608386 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608386 = validateParameter(valid_608386, JString, required = false,
                                 default = nil)
  if valid_608386 != nil:
    section.add "X-Amz-SignedHeaders", valid_608386
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608387: Call_GetDescribeValidDBInstanceModifications_608374;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_608387.validator(path, query, header, formData, body)
  let scheme = call_608387.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608387.url(scheme.get, call_608387.host, call_608387.base,
                         call_608387.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608387, url, valid)

proc call*(call_608388: Call_GetDescribeValidDBInstanceModifications_608374;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeValidDBInstanceModifications
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608389 = newJObject()
  add(query_608389, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_608389, "Action", newJString(Action))
  add(query_608389, "Version", newJString(Version))
  result = call_608388.call(nil, query_608389, nil, nil, nil)

var getDescribeValidDBInstanceModifications* = Call_GetDescribeValidDBInstanceModifications_608374(
    name: "getDescribeValidDBInstanceModifications", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_GetDescribeValidDBInstanceModifications_608375, base: "/",
    url: url_GetDescribeValidDBInstanceModifications_608376,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDownloadDBLogFilePortion_608426 = ref object of OpenApiRestCall_604389
proc url_PostDownloadDBLogFilePortion_608428(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDownloadDBLogFilePortion_608427(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608429 = query.getOrDefault("Action")
  valid_608429 = validateParameter(valid_608429, JString, required = true, default = newJString(
      "DownloadDBLogFilePortion"))
  if valid_608429 != nil:
    section.add "Action", valid_608429
  var valid_608430 = query.getOrDefault("Version")
  valid_608430 = validateParameter(valid_608430, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608430 != nil:
    section.add "Version", valid_608430
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608431 = header.getOrDefault("X-Amz-Signature")
  valid_608431 = validateParameter(valid_608431, JString, required = false,
                                 default = nil)
  if valid_608431 != nil:
    section.add "X-Amz-Signature", valid_608431
  var valid_608432 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608432 = validateParameter(valid_608432, JString, required = false,
                                 default = nil)
  if valid_608432 != nil:
    section.add "X-Amz-Content-Sha256", valid_608432
  var valid_608433 = header.getOrDefault("X-Amz-Date")
  valid_608433 = validateParameter(valid_608433, JString, required = false,
                                 default = nil)
  if valid_608433 != nil:
    section.add "X-Amz-Date", valid_608433
  var valid_608434 = header.getOrDefault("X-Amz-Credential")
  valid_608434 = validateParameter(valid_608434, JString, required = false,
                                 default = nil)
  if valid_608434 != nil:
    section.add "X-Amz-Credential", valid_608434
  var valid_608435 = header.getOrDefault("X-Amz-Security-Token")
  valid_608435 = validateParameter(valid_608435, JString, required = false,
                                 default = nil)
  if valid_608435 != nil:
    section.add "X-Amz-Security-Token", valid_608435
  var valid_608436 = header.getOrDefault("X-Amz-Algorithm")
  valid_608436 = validateParameter(valid_608436, JString, required = false,
                                 default = nil)
  if valid_608436 != nil:
    section.add "X-Amz-Algorithm", valid_608436
  var valid_608437 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608437 = validateParameter(valid_608437, JString, required = false,
                                 default = nil)
  if valid_608437 != nil:
    section.add "X-Amz-SignedHeaders", valid_608437
  result.add "header", section
  ## parameters in `formData` object:
  ##   NumberOfLines: JInt
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   Marker: JString
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   LogFileName: JString (required)
  ##              : The name of the log file to be downloaded.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_608438 = formData.getOrDefault("NumberOfLines")
  valid_608438 = validateParameter(valid_608438, JInt, required = false, default = nil)
  if valid_608438 != nil:
    section.add "NumberOfLines", valid_608438
  var valid_608439 = formData.getOrDefault("Marker")
  valid_608439 = validateParameter(valid_608439, JString, required = false,
                                 default = nil)
  if valid_608439 != nil:
    section.add "Marker", valid_608439
  assert formData != nil,
        "formData argument is necessary due to required `LogFileName` field"
  var valid_608440 = formData.getOrDefault("LogFileName")
  valid_608440 = validateParameter(valid_608440, JString, required = true,
                                 default = nil)
  if valid_608440 != nil:
    section.add "LogFileName", valid_608440
  var valid_608441 = formData.getOrDefault("DBInstanceIdentifier")
  valid_608441 = validateParameter(valid_608441, JString, required = true,
                                 default = nil)
  if valid_608441 != nil:
    section.add "DBInstanceIdentifier", valid_608441
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608442: Call_PostDownloadDBLogFilePortion_608426; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  let valid = call_608442.validator(path, query, header, formData, body)
  let scheme = call_608442.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608442.url(scheme.get, call_608442.host, call_608442.base,
                         call_608442.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608442, url, valid)

proc call*(call_608443: Call_PostDownloadDBLogFilePortion_608426;
          LogFileName: string; DBInstanceIdentifier: string; NumberOfLines: int = 0;
          Marker: string = ""; Action: string = "DownloadDBLogFilePortion";
          Version: string = "2014-10-31"): Recallable =
  ## postDownloadDBLogFilePortion
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ##   NumberOfLines: int
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   Marker: string
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   LogFileName: string (required)
  ##              : The name of the log file to be downloaded.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608444 = newJObject()
  var formData_608445 = newJObject()
  add(formData_608445, "NumberOfLines", newJInt(NumberOfLines))
  add(formData_608445, "Marker", newJString(Marker))
  add(formData_608445, "LogFileName", newJString(LogFileName))
  add(formData_608445, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_608444, "Action", newJString(Action))
  add(query_608444, "Version", newJString(Version))
  result = call_608443.call(nil, query_608444, nil, formData_608445, nil)

var postDownloadDBLogFilePortion* = Call_PostDownloadDBLogFilePortion_608426(
    name: "postDownloadDBLogFilePortion", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DownloadDBLogFilePortion",
    validator: validate_PostDownloadDBLogFilePortion_608427, base: "/",
    url: url_PostDownloadDBLogFilePortion_608428,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDownloadDBLogFilePortion_608407 = ref object of OpenApiRestCall_604389
proc url_GetDownloadDBLogFilePortion_608409(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDownloadDBLogFilePortion_608408(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Marker: JString
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   NumberOfLines: JInt
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   LogFileName: JString (required)
  ##              : The name of the log file to be downloaded.
  ##   Version: JString (required)
  section = newJObject()
  var valid_608410 = query.getOrDefault("Marker")
  valid_608410 = validateParameter(valid_608410, JString, required = false,
                                 default = nil)
  if valid_608410 != nil:
    section.add "Marker", valid_608410
  var valid_608411 = query.getOrDefault("NumberOfLines")
  valid_608411 = validateParameter(valid_608411, JInt, required = false, default = nil)
  if valid_608411 != nil:
    section.add "NumberOfLines", valid_608411
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_608412 = query.getOrDefault("DBInstanceIdentifier")
  valid_608412 = validateParameter(valid_608412, JString, required = true,
                                 default = nil)
  if valid_608412 != nil:
    section.add "DBInstanceIdentifier", valid_608412
  var valid_608413 = query.getOrDefault("Action")
  valid_608413 = validateParameter(valid_608413, JString, required = true, default = newJString(
      "DownloadDBLogFilePortion"))
  if valid_608413 != nil:
    section.add "Action", valid_608413
  var valid_608414 = query.getOrDefault("LogFileName")
  valid_608414 = validateParameter(valid_608414, JString, required = true,
                                 default = nil)
  if valid_608414 != nil:
    section.add "LogFileName", valid_608414
  var valid_608415 = query.getOrDefault("Version")
  valid_608415 = validateParameter(valid_608415, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608415 != nil:
    section.add "Version", valid_608415
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608416 = header.getOrDefault("X-Amz-Signature")
  valid_608416 = validateParameter(valid_608416, JString, required = false,
                                 default = nil)
  if valid_608416 != nil:
    section.add "X-Amz-Signature", valid_608416
  var valid_608417 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608417 = validateParameter(valid_608417, JString, required = false,
                                 default = nil)
  if valid_608417 != nil:
    section.add "X-Amz-Content-Sha256", valid_608417
  var valid_608418 = header.getOrDefault("X-Amz-Date")
  valid_608418 = validateParameter(valid_608418, JString, required = false,
                                 default = nil)
  if valid_608418 != nil:
    section.add "X-Amz-Date", valid_608418
  var valid_608419 = header.getOrDefault("X-Amz-Credential")
  valid_608419 = validateParameter(valid_608419, JString, required = false,
                                 default = nil)
  if valid_608419 != nil:
    section.add "X-Amz-Credential", valid_608419
  var valid_608420 = header.getOrDefault("X-Amz-Security-Token")
  valid_608420 = validateParameter(valid_608420, JString, required = false,
                                 default = nil)
  if valid_608420 != nil:
    section.add "X-Amz-Security-Token", valid_608420
  var valid_608421 = header.getOrDefault("X-Amz-Algorithm")
  valid_608421 = validateParameter(valid_608421, JString, required = false,
                                 default = nil)
  if valid_608421 != nil:
    section.add "X-Amz-Algorithm", valid_608421
  var valid_608422 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608422 = validateParameter(valid_608422, JString, required = false,
                                 default = nil)
  if valid_608422 != nil:
    section.add "X-Amz-SignedHeaders", valid_608422
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608423: Call_GetDownloadDBLogFilePortion_608407; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  let valid = call_608423.validator(path, query, header, formData, body)
  let scheme = call_608423.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608423.url(scheme.get, call_608423.host, call_608423.base,
                         call_608423.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608423, url, valid)

proc call*(call_608424: Call_GetDownloadDBLogFilePortion_608407;
          DBInstanceIdentifier: string; LogFileName: string; Marker: string = "";
          NumberOfLines: int = 0; Action: string = "DownloadDBLogFilePortion";
          Version: string = "2014-10-31"): Recallable =
  ## getDownloadDBLogFilePortion
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ##   Marker: string
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   NumberOfLines: int
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   LogFileName: string (required)
  ##              : The name of the log file to be downloaded.
  ##   Version: string (required)
  var query_608425 = newJObject()
  add(query_608425, "Marker", newJString(Marker))
  add(query_608425, "NumberOfLines", newJInt(NumberOfLines))
  add(query_608425, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_608425, "Action", newJString(Action))
  add(query_608425, "LogFileName", newJString(LogFileName))
  add(query_608425, "Version", newJString(Version))
  result = call_608424.call(nil, query_608425, nil, nil, nil)

var getDownloadDBLogFilePortion* = Call_GetDownloadDBLogFilePortion_608407(
    name: "getDownloadDBLogFilePortion", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DownloadDBLogFilePortion",
    validator: validate_GetDownloadDBLogFilePortion_608408, base: "/",
    url: url_GetDownloadDBLogFilePortion_608409,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostFailoverDBCluster_608463 = ref object of OpenApiRestCall_604389
proc url_PostFailoverDBCluster_608465(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostFailoverDBCluster_608464(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608466 = query.getOrDefault("Action")
  valid_608466 = validateParameter(valid_608466, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_608466 != nil:
    section.add "Action", valid_608466
  var valid_608467 = query.getOrDefault("Version")
  valid_608467 = validateParameter(valid_608467, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608467 != nil:
    section.add "Version", valid_608467
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608468 = header.getOrDefault("X-Amz-Signature")
  valid_608468 = validateParameter(valid_608468, JString, required = false,
                                 default = nil)
  if valid_608468 != nil:
    section.add "X-Amz-Signature", valid_608468
  var valid_608469 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608469 = validateParameter(valid_608469, JString, required = false,
                                 default = nil)
  if valid_608469 != nil:
    section.add "X-Amz-Content-Sha256", valid_608469
  var valid_608470 = header.getOrDefault("X-Amz-Date")
  valid_608470 = validateParameter(valid_608470, JString, required = false,
                                 default = nil)
  if valid_608470 != nil:
    section.add "X-Amz-Date", valid_608470
  var valid_608471 = header.getOrDefault("X-Amz-Credential")
  valid_608471 = validateParameter(valid_608471, JString, required = false,
                                 default = nil)
  if valid_608471 != nil:
    section.add "X-Amz-Credential", valid_608471
  var valid_608472 = header.getOrDefault("X-Amz-Security-Token")
  valid_608472 = validateParameter(valid_608472, JString, required = false,
                                 default = nil)
  if valid_608472 != nil:
    section.add "X-Amz-Security-Token", valid_608472
  var valid_608473 = header.getOrDefault("X-Amz-Algorithm")
  valid_608473 = validateParameter(valid_608473, JString, required = false,
                                 default = nil)
  if valid_608473 != nil:
    section.add "X-Amz-Algorithm", valid_608473
  var valid_608474 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608474 = validateParameter(valid_608474, JString, required = false,
                                 default = nil)
  if valid_608474 != nil:
    section.add "X-Amz-SignedHeaders", valid_608474
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_608475 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_608475 = validateParameter(valid_608475, JString, required = false,
                                 default = nil)
  if valid_608475 != nil:
    section.add "TargetDBInstanceIdentifier", valid_608475
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_608476 = formData.getOrDefault("DBClusterIdentifier")
  valid_608476 = validateParameter(valid_608476, JString, required = true,
                                 default = nil)
  if valid_608476 != nil:
    section.add "DBClusterIdentifier", valid_608476
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608477: Call_PostFailoverDBCluster_608463; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608477.validator(path, query, header, formData, body)
  let scheme = call_608477.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608477.url(scheme.get, call_608477.host, call_608477.base,
                         call_608477.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608477, url, valid)

proc call*(call_608478: Call_PostFailoverDBCluster_608463;
          DBClusterIdentifier: string; Action: string = "FailoverDBCluster";
          TargetDBInstanceIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  var query_608479 = newJObject()
  var formData_608480 = newJObject()
  add(query_608479, "Action", newJString(Action))
  add(formData_608480, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_608479, "Version", newJString(Version))
  add(formData_608480, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_608478.call(nil, query_608479, nil, formData_608480, nil)

var postFailoverDBCluster* = Call_PostFailoverDBCluster_608463(
    name: "postFailoverDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_PostFailoverDBCluster_608464, base: "/",
    url: url_PostFailoverDBCluster_608465, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetFailoverDBCluster_608446 = ref object of OpenApiRestCall_604389
proc url_GetFailoverDBCluster_608448(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetFailoverDBCluster_608447(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_608449 = query.getOrDefault("DBClusterIdentifier")
  valid_608449 = validateParameter(valid_608449, JString, required = true,
                                 default = nil)
  if valid_608449 != nil:
    section.add "DBClusterIdentifier", valid_608449
  var valid_608450 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_608450 = validateParameter(valid_608450, JString, required = false,
                                 default = nil)
  if valid_608450 != nil:
    section.add "TargetDBInstanceIdentifier", valid_608450
  var valid_608451 = query.getOrDefault("Action")
  valid_608451 = validateParameter(valid_608451, JString, required = true,
                                 default = newJString("FailoverDBCluster"))
  if valid_608451 != nil:
    section.add "Action", valid_608451
  var valid_608452 = query.getOrDefault("Version")
  valid_608452 = validateParameter(valid_608452, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608452 != nil:
    section.add "Version", valid_608452
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608453 = header.getOrDefault("X-Amz-Signature")
  valid_608453 = validateParameter(valid_608453, JString, required = false,
                                 default = nil)
  if valid_608453 != nil:
    section.add "X-Amz-Signature", valid_608453
  var valid_608454 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608454 = validateParameter(valid_608454, JString, required = false,
                                 default = nil)
  if valid_608454 != nil:
    section.add "X-Amz-Content-Sha256", valid_608454
  var valid_608455 = header.getOrDefault("X-Amz-Date")
  valid_608455 = validateParameter(valid_608455, JString, required = false,
                                 default = nil)
  if valid_608455 != nil:
    section.add "X-Amz-Date", valid_608455
  var valid_608456 = header.getOrDefault("X-Amz-Credential")
  valid_608456 = validateParameter(valid_608456, JString, required = false,
                                 default = nil)
  if valid_608456 != nil:
    section.add "X-Amz-Credential", valid_608456
  var valid_608457 = header.getOrDefault("X-Amz-Security-Token")
  valid_608457 = validateParameter(valid_608457, JString, required = false,
                                 default = nil)
  if valid_608457 != nil:
    section.add "X-Amz-Security-Token", valid_608457
  var valid_608458 = header.getOrDefault("X-Amz-Algorithm")
  valid_608458 = validateParameter(valid_608458, JString, required = false,
                                 default = nil)
  if valid_608458 != nil:
    section.add "X-Amz-Algorithm", valid_608458
  var valid_608459 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608459 = validateParameter(valid_608459, JString, required = false,
                                 default = nil)
  if valid_608459 != nil:
    section.add "X-Amz-SignedHeaders", valid_608459
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608460: Call_GetFailoverDBCluster_608446; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608460.validator(path, query, header, formData, body)
  let scheme = call_608460.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608460.url(scheme.get, call_608460.host, call_608460.base,
                         call_608460.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608460, url, valid)

proc call*(call_608461: Call_GetFailoverDBCluster_608446;
          DBClusterIdentifier: string; TargetDBInstanceIdentifier: string = "";
          Action: string = "FailoverDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608462 = newJObject()
  add(query_608462, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_608462, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_608462, "Action", newJString(Action))
  add(query_608462, "Version", newJString(Version))
  result = call_608461.call(nil, query_608462, nil, nil, nil)

var getFailoverDBCluster* = Call_GetFailoverDBCluster_608446(
    name: "getFailoverDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_GetFailoverDBCluster_608447, base: "/",
    url: url_GetFailoverDBCluster_608448, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostImportInstallationMedia_608501 = ref object of OpenApiRestCall_604389
proc url_PostImportInstallationMedia_608503(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostImportInstallationMedia_608502(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608504 = query.getOrDefault("Action")
  valid_608504 = validateParameter(valid_608504, JString, required = true, default = newJString(
      "ImportInstallationMedia"))
  if valid_608504 != nil:
    section.add "Action", valid_608504
  var valid_608505 = query.getOrDefault("Version")
  valid_608505 = validateParameter(valid_608505, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608505 != nil:
    section.add "Version", valid_608505
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608506 = header.getOrDefault("X-Amz-Signature")
  valid_608506 = validateParameter(valid_608506, JString, required = false,
                                 default = nil)
  if valid_608506 != nil:
    section.add "X-Amz-Signature", valid_608506
  var valid_608507 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608507 = validateParameter(valid_608507, JString, required = false,
                                 default = nil)
  if valid_608507 != nil:
    section.add "X-Amz-Content-Sha256", valid_608507
  var valid_608508 = header.getOrDefault("X-Amz-Date")
  valid_608508 = validateParameter(valid_608508, JString, required = false,
                                 default = nil)
  if valid_608508 != nil:
    section.add "X-Amz-Date", valid_608508
  var valid_608509 = header.getOrDefault("X-Amz-Credential")
  valid_608509 = validateParameter(valid_608509, JString, required = false,
                                 default = nil)
  if valid_608509 != nil:
    section.add "X-Amz-Credential", valid_608509
  var valid_608510 = header.getOrDefault("X-Amz-Security-Token")
  valid_608510 = validateParameter(valid_608510, JString, required = false,
                                 default = nil)
  if valid_608510 != nil:
    section.add "X-Amz-Security-Token", valid_608510
  var valid_608511 = header.getOrDefault("X-Amz-Algorithm")
  valid_608511 = validateParameter(valid_608511, JString, required = false,
                                 default = nil)
  if valid_608511 != nil:
    section.add "X-Amz-Algorithm", valid_608511
  var valid_608512 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608512 = validateParameter(valid_608512, JString, required = false,
                                 default = nil)
  if valid_608512 != nil:
    section.add "X-Amz-SignedHeaders", valid_608512
  result.add "header", section
  ## parameters in `formData` object:
  ##   OSInstallationMediaPath: JString (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   EngineInstallationMediaPath: JString (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   EngineVersion: JString (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OSInstallationMediaPath` field"
  var valid_608513 = formData.getOrDefault("OSInstallationMediaPath")
  valid_608513 = validateParameter(valid_608513, JString, required = true,
                                 default = nil)
  if valid_608513 != nil:
    section.add "OSInstallationMediaPath", valid_608513
  var valid_608514 = formData.getOrDefault("EngineInstallationMediaPath")
  valid_608514 = validateParameter(valid_608514, JString, required = true,
                                 default = nil)
  if valid_608514 != nil:
    section.add "EngineInstallationMediaPath", valid_608514
  var valid_608515 = formData.getOrDefault("EngineVersion")
  valid_608515 = validateParameter(valid_608515, JString, required = true,
                                 default = nil)
  if valid_608515 != nil:
    section.add "EngineVersion", valid_608515
  var valid_608516 = formData.getOrDefault("Engine")
  valid_608516 = validateParameter(valid_608516, JString, required = true,
                                 default = nil)
  if valid_608516 != nil:
    section.add "Engine", valid_608516
  var valid_608517 = formData.getOrDefault("CustomAvailabilityZoneId")
  valid_608517 = validateParameter(valid_608517, JString, required = true,
                                 default = nil)
  if valid_608517 != nil:
    section.add "CustomAvailabilityZoneId", valid_608517
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608518: Call_PostImportInstallationMedia_608501; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  let valid = call_608518.validator(path, query, header, formData, body)
  let scheme = call_608518.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608518.url(scheme.get, call_608518.host, call_608518.base,
                         call_608518.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608518, url, valid)

proc call*(call_608519: Call_PostImportInstallationMedia_608501;
          OSInstallationMediaPath: string; EngineInstallationMediaPath: string;
          EngineVersion: string; Engine: string; CustomAvailabilityZoneId: string;
          Action: string = "ImportInstallationMedia"; Version: string = "2014-10-31"): Recallable =
  ## postImportInstallationMedia
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ##   OSInstallationMediaPath: string (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   EngineInstallationMediaPath: string (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   EngineVersion: string (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   Version: string (required)
  var query_608520 = newJObject()
  var formData_608521 = newJObject()
  add(formData_608521, "OSInstallationMediaPath",
      newJString(OSInstallationMediaPath))
  add(formData_608521, "EngineInstallationMediaPath",
      newJString(EngineInstallationMediaPath))
  add(formData_608521, "EngineVersion", newJString(EngineVersion))
  add(formData_608521, "Engine", newJString(Engine))
  add(query_608520, "Action", newJString(Action))
  add(formData_608521, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_608520, "Version", newJString(Version))
  result = call_608519.call(nil, query_608520, nil, formData_608521, nil)

var postImportInstallationMedia* = Call_PostImportInstallationMedia_608501(
    name: "postImportInstallationMedia", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ImportInstallationMedia",
    validator: validate_PostImportInstallationMedia_608502, base: "/",
    url: url_PostImportInstallationMedia_608503,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImportInstallationMedia_608481 = ref object of OpenApiRestCall_604389
proc url_GetImportInstallationMedia_608483(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetImportInstallationMedia_608482(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   EngineInstallationMediaPath: JString (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   EngineVersion: JString (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: JString (required)
  ##   OSInstallationMediaPath: JString (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_608484 = query.getOrDefault("Engine")
  valid_608484 = validateParameter(valid_608484, JString, required = true,
                                 default = nil)
  if valid_608484 != nil:
    section.add "Engine", valid_608484
  var valid_608485 = query.getOrDefault("EngineInstallationMediaPath")
  valid_608485 = validateParameter(valid_608485, JString, required = true,
                                 default = nil)
  if valid_608485 != nil:
    section.add "EngineInstallationMediaPath", valid_608485
  var valid_608486 = query.getOrDefault("CustomAvailabilityZoneId")
  valid_608486 = validateParameter(valid_608486, JString, required = true,
                                 default = nil)
  if valid_608486 != nil:
    section.add "CustomAvailabilityZoneId", valid_608486
  var valid_608487 = query.getOrDefault("EngineVersion")
  valid_608487 = validateParameter(valid_608487, JString, required = true,
                                 default = nil)
  if valid_608487 != nil:
    section.add "EngineVersion", valid_608487
  var valid_608488 = query.getOrDefault("Action")
  valid_608488 = validateParameter(valid_608488, JString, required = true, default = newJString(
      "ImportInstallationMedia"))
  if valid_608488 != nil:
    section.add "Action", valid_608488
  var valid_608489 = query.getOrDefault("OSInstallationMediaPath")
  valid_608489 = validateParameter(valid_608489, JString, required = true,
                                 default = nil)
  if valid_608489 != nil:
    section.add "OSInstallationMediaPath", valid_608489
  var valid_608490 = query.getOrDefault("Version")
  valid_608490 = validateParameter(valid_608490, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608490 != nil:
    section.add "Version", valid_608490
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608491 = header.getOrDefault("X-Amz-Signature")
  valid_608491 = validateParameter(valid_608491, JString, required = false,
                                 default = nil)
  if valid_608491 != nil:
    section.add "X-Amz-Signature", valid_608491
  var valid_608492 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608492 = validateParameter(valid_608492, JString, required = false,
                                 default = nil)
  if valid_608492 != nil:
    section.add "X-Amz-Content-Sha256", valid_608492
  var valid_608493 = header.getOrDefault("X-Amz-Date")
  valid_608493 = validateParameter(valid_608493, JString, required = false,
                                 default = nil)
  if valid_608493 != nil:
    section.add "X-Amz-Date", valid_608493
  var valid_608494 = header.getOrDefault("X-Amz-Credential")
  valid_608494 = validateParameter(valid_608494, JString, required = false,
                                 default = nil)
  if valid_608494 != nil:
    section.add "X-Amz-Credential", valid_608494
  var valid_608495 = header.getOrDefault("X-Amz-Security-Token")
  valid_608495 = validateParameter(valid_608495, JString, required = false,
                                 default = nil)
  if valid_608495 != nil:
    section.add "X-Amz-Security-Token", valid_608495
  var valid_608496 = header.getOrDefault("X-Amz-Algorithm")
  valid_608496 = validateParameter(valid_608496, JString, required = false,
                                 default = nil)
  if valid_608496 != nil:
    section.add "X-Amz-Algorithm", valid_608496
  var valid_608497 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608497 = validateParameter(valid_608497, JString, required = false,
                                 default = nil)
  if valid_608497 != nil:
    section.add "X-Amz-SignedHeaders", valid_608497
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608498: Call_GetImportInstallationMedia_608481; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  let valid = call_608498.validator(path, query, header, formData, body)
  let scheme = call_608498.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608498.url(scheme.get, call_608498.host, call_608498.base,
                         call_608498.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608498, url, valid)

proc call*(call_608499: Call_GetImportInstallationMedia_608481; Engine: string;
          EngineInstallationMediaPath: string; CustomAvailabilityZoneId: string;
          EngineVersion: string; OSInstallationMediaPath: string;
          Action: string = "ImportInstallationMedia"; Version: string = "2014-10-31"): Recallable =
  ## getImportInstallationMedia
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   EngineInstallationMediaPath: string (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   EngineVersion: string (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   OSInstallationMediaPath: string (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   Version: string (required)
  var query_608500 = newJObject()
  add(query_608500, "Engine", newJString(Engine))
  add(query_608500, "EngineInstallationMediaPath",
      newJString(EngineInstallationMediaPath))
  add(query_608500, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_608500, "EngineVersion", newJString(EngineVersion))
  add(query_608500, "Action", newJString(Action))
  add(query_608500, "OSInstallationMediaPath", newJString(OSInstallationMediaPath))
  add(query_608500, "Version", newJString(Version))
  result = call_608499.call(nil, query_608500, nil, nil, nil)

var getImportInstallationMedia* = Call_GetImportInstallationMedia_608481(
    name: "getImportInstallationMedia", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ImportInstallationMedia",
    validator: validate_GetImportInstallationMedia_608482, base: "/",
    url: url_GetImportInstallationMedia_608483,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_608539 = ref object of OpenApiRestCall_604389
proc url_PostListTagsForResource_608541(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListTagsForResource_608540(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608542 = query.getOrDefault("Action")
  valid_608542 = validateParameter(valid_608542, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_608542 != nil:
    section.add "Action", valid_608542
  var valid_608543 = query.getOrDefault("Version")
  valid_608543 = validateParameter(valid_608543, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608543 != nil:
    section.add "Version", valid_608543
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608544 = header.getOrDefault("X-Amz-Signature")
  valid_608544 = validateParameter(valid_608544, JString, required = false,
                                 default = nil)
  if valid_608544 != nil:
    section.add "X-Amz-Signature", valid_608544
  var valid_608545 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608545 = validateParameter(valid_608545, JString, required = false,
                                 default = nil)
  if valid_608545 != nil:
    section.add "X-Amz-Content-Sha256", valid_608545
  var valid_608546 = header.getOrDefault("X-Amz-Date")
  valid_608546 = validateParameter(valid_608546, JString, required = false,
                                 default = nil)
  if valid_608546 != nil:
    section.add "X-Amz-Date", valid_608546
  var valid_608547 = header.getOrDefault("X-Amz-Credential")
  valid_608547 = validateParameter(valid_608547, JString, required = false,
                                 default = nil)
  if valid_608547 != nil:
    section.add "X-Amz-Credential", valid_608547
  var valid_608548 = header.getOrDefault("X-Amz-Security-Token")
  valid_608548 = validateParameter(valid_608548, JString, required = false,
                                 default = nil)
  if valid_608548 != nil:
    section.add "X-Amz-Security-Token", valid_608548
  var valid_608549 = header.getOrDefault("X-Amz-Algorithm")
  valid_608549 = validateParameter(valid_608549, JString, required = false,
                                 default = nil)
  if valid_608549 != nil:
    section.add "X-Amz-Algorithm", valid_608549
  var valid_608550 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608550 = validateParameter(valid_608550, JString, required = false,
                                 default = nil)
  if valid_608550 != nil:
    section.add "X-Amz-SignedHeaders", valid_608550
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  section = newJObject()
  var valid_608551 = formData.getOrDefault("Filters")
  valid_608551 = validateParameter(valid_608551, JArray, required = false,
                                 default = nil)
  if valid_608551 != nil:
    section.add "Filters", valid_608551
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_608552 = formData.getOrDefault("ResourceName")
  valid_608552 = validateParameter(valid_608552, JString, required = true,
                                 default = nil)
  if valid_608552 != nil:
    section.add "ResourceName", valid_608552
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608553: Call_PostListTagsForResource_608539; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  let valid = call_608553.validator(path, query, header, formData, body)
  let scheme = call_608553.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608553.url(scheme.get, call_608553.host, call_608553.base,
                         call_608553.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608553, url, valid)

proc call*(call_608554: Call_PostListTagsForResource_608539; ResourceName: string;
          Action: string = "ListTagsForResource"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postListTagsForResource
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  var query_608555 = newJObject()
  var formData_608556 = newJObject()
  add(query_608555, "Action", newJString(Action))
  if Filters != nil:
    formData_608556.add "Filters", Filters
  add(query_608555, "Version", newJString(Version))
  add(formData_608556, "ResourceName", newJString(ResourceName))
  result = call_608554.call(nil, query_608555, nil, formData_608556, nil)

var postListTagsForResource* = Call_PostListTagsForResource_608539(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_608540, base: "/",
    url: url_PostListTagsForResource_608541, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_608522 = ref object of OpenApiRestCall_604389
proc url_GetListTagsForResource_608524(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListTagsForResource_608523(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_608525 = query.getOrDefault("ResourceName")
  valid_608525 = validateParameter(valid_608525, JString, required = true,
                                 default = nil)
  if valid_608525 != nil:
    section.add "ResourceName", valid_608525
  var valid_608526 = query.getOrDefault("Action")
  valid_608526 = validateParameter(valid_608526, JString, required = true,
                                 default = newJString("ListTagsForResource"))
  if valid_608526 != nil:
    section.add "Action", valid_608526
  var valid_608527 = query.getOrDefault("Version")
  valid_608527 = validateParameter(valid_608527, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608527 != nil:
    section.add "Version", valid_608527
  var valid_608528 = query.getOrDefault("Filters")
  valid_608528 = validateParameter(valid_608528, JArray, required = false,
                                 default = nil)
  if valid_608528 != nil:
    section.add "Filters", valid_608528
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608529 = header.getOrDefault("X-Amz-Signature")
  valid_608529 = validateParameter(valid_608529, JString, required = false,
                                 default = nil)
  if valid_608529 != nil:
    section.add "X-Amz-Signature", valid_608529
  var valid_608530 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608530 = validateParameter(valid_608530, JString, required = false,
                                 default = nil)
  if valid_608530 != nil:
    section.add "X-Amz-Content-Sha256", valid_608530
  var valid_608531 = header.getOrDefault("X-Amz-Date")
  valid_608531 = validateParameter(valid_608531, JString, required = false,
                                 default = nil)
  if valid_608531 != nil:
    section.add "X-Amz-Date", valid_608531
  var valid_608532 = header.getOrDefault("X-Amz-Credential")
  valid_608532 = validateParameter(valid_608532, JString, required = false,
                                 default = nil)
  if valid_608532 != nil:
    section.add "X-Amz-Credential", valid_608532
  var valid_608533 = header.getOrDefault("X-Amz-Security-Token")
  valid_608533 = validateParameter(valid_608533, JString, required = false,
                                 default = nil)
  if valid_608533 != nil:
    section.add "X-Amz-Security-Token", valid_608533
  var valid_608534 = header.getOrDefault("X-Amz-Algorithm")
  valid_608534 = validateParameter(valid_608534, JString, required = false,
                                 default = nil)
  if valid_608534 != nil:
    section.add "X-Amz-Algorithm", valid_608534
  var valid_608535 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608535 = validateParameter(valid_608535, JString, required = false,
                                 default = nil)
  if valid_608535 != nil:
    section.add "X-Amz-SignedHeaders", valid_608535
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608536: Call_GetListTagsForResource_608522; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  let valid = call_608536.validator(path, query, header, formData, body)
  let scheme = call_608536.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608536.url(scheme.get, call_608536.host, call_608536.base,
                         call_608536.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608536, url, valid)

proc call*(call_608537: Call_GetListTagsForResource_608522; ResourceName: string;
          Action: string = "ListTagsForResource"; Version: string = "2014-10-31";
          Filters: JsonNode = nil): Recallable =
  ## getListTagsForResource
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  var query_608538 = newJObject()
  add(query_608538, "ResourceName", newJString(ResourceName))
  add(query_608538, "Action", newJString(Action))
  add(query_608538, "Version", newJString(Version))
  if Filters != nil:
    query_608538.add "Filters", Filters
  result = call_608537.call(nil, query_608538, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_608522(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_608523, base: "/",
    url: url_GetListTagsForResource_608524, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCertificates_608574 = ref object of OpenApiRestCall_604389
proc url_PostModifyCertificates_608576(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyCertificates_608575(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608577 = query.getOrDefault("Action")
  valid_608577 = validateParameter(valid_608577, JString, required = true,
                                 default = newJString("ModifyCertificates"))
  if valid_608577 != nil:
    section.add "Action", valid_608577
  var valid_608578 = query.getOrDefault("Version")
  valid_608578 = validateParameter(valid_608578, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608578 != nil:
    section.add "Version", valid_608578
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608579 = header.getOrDefault("X-Amz-Signature")
  valid_608579 = validateParameter(valid_608579, JString, required = false,
                                 default = nil)
  if valid_608579 != nil:
    section.add "X-Amz-Signature", valid_608579
  var valid_608580 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608580 = validateParameter(valid_608580, JString, required = false,
                                 default = nil)
  if valid_608580 != nil:
    section.add "X-Amz-Content-Sha256", valid_608580
  var valid_608581 = header.getOrDefault("X-Amz-Date")
  valid_608581 = validateParameter(valid_608581, JString, required = false,
                                 default = nil)
  if valid_608581 != nil:
    section.add "X-Amz-Date", valid_608581
  var valid_608582 = header.getOrDefault("X-Amz-Credential")
  valid_608582 = validateParameter(valid_608582, JString, required = false,
                                 default = nil)
  if valid_608582 != nil:
    section.add "X-Amz-Credential", valid_608582
  var valid_608583 = header.getOrDefault("X-Amz-Security-Token")
  valid_608583 = validateParameter(valid_608583, JString, required = false,
                                 default = nil)
  if valid_608583 != nil:
    section.add "X-Amz-Security-Token", valid_608583
  var valid_608584 = header.getOrDefault("X-Amz-Algorithm")
  valid_608584 = validateParameter(valid_608584, JString, required = false,
                                 default = nil)
  if valid_608584 != nil:
    section.add "X-Amz-Algorithm", valid_608584
  var valid_608585 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608585 = validateParameter(valid_608585, JString, required = false,
                                 default = nil)
  if valid_608585 != nil:
    section.add "X-Amz-SignedHeaders", valid_608585
  result.add "header", section
  ## parameters in `formData` object:
  ##   RemoveCustomerOverride: JBool
  ##                         : A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
  ##   CertificateIdentifier: JString
  ##                        : <p>The new default certificate identifier to override the current one with.</p> <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI command or the <code>DescribeCertificates</code> API operation.</p>
  section = newJObject()
  var valid_608586 = formData.getOrDefault("RemoveCustomerOverride")
  valid_608586 = validateParameter(valid_608586, JBool, required = false, default = nil)
  if valid_608586 != nil:
    section.add "RemoveCustomerOverride", valid_608586
  var valid_608587 = formData.getOrDefault("CertificateIdentifier")
  valid_608587 = validateParameter(valid_608587, JString, required = false,
                                 default = nil)
  if valid_608587 != nil:
    section.add "CertificateIdentifier", valid_608587
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608588: Call_PostModifyCertificates_608574; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_608588.validator(path, query, header, formData, body)
  let scheme = call_608588.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608588.url(scheme.get, call_608588.host, call_608588.base,
                         call_608588.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608588, url, valid)

proc call*(call_608589: Call_PostModifyCertificates_608574;
          RemoveCustomerOverride: bool = false; CertificateIdentifier: string = "";
          Action: string = "ModifyCertificates"; Version: string = "2014-10-31"): Recallable =
  ## postModifyCertificates
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   RemoveCustomerOverride: bool
  ##                         : A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
  ##   CertificateIdentifier: string
  ##                        : <p>The new default certificate identifier to override the current one with.</p> <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI command or the <code>DescribeCertificates</code> API operation.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608590 = newJObject()
  var formData_608591 = newJObject()
  add(formData_608591, "RemoveCustomerOverride", newJBool(RemoveCustomerOverride))
  add(formData_608591, "CertificateIdentifier", newJString(CertificateIdentifier))
  add(query_608590, "Action", newJString(Action))
  add(query_608590, "Version", newJString(Version))
  result = call_608589.call(nil, query_608590, nil, formData_608591, nil)

var postModifyCertificates* = Call_PostModifyCertificates_608574(
    name: "postModifyCertificates", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCertificates",
    validator: validate_PostModifyCertificates_608575, base: "/",
    url: url_PostModifyCertificates_608576, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCertificates_608557 = ref object of OpenApiRestCall_604389
proc url_GetModifyCertificates_608559(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyCertificates_608558(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RemoveCustomerOverride: JBool
  ##                         : A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CertificateIdentifier: JString
  ##                        : <p>The new default certificate identifier to override the current one with.</p> <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI command or the <code>DescribeCertificates</code> API operation.</p>
  section = newJObject()
  var valid_608560 = query.getOrDefault("RemoveCustomerOverride")
  valid_608560 = validateParameter(valid_608560, JBool, required = false, default = nil)
  if valid_608560 != nil:
    section.add "RemoveCustomerOverride", valid_608560
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608561 = query.getOrDefault("Action")
  valid_608561 = validateParameter(valid_608561, JString, required = true,
                                 default = newJString("ModifyCertificates"))
  if valid_608561 != nil:
    section.add "Action", valid_608561
  var valid_608562 = query.getOrDefault("Version")
  valid_608562 = validateParameter(valid_608562, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608562 != nil:
    section.add "Version", valid_608562
  var valid_608563 = query.getOrDefault("CertificateIdentifier")
  valid_608563 = validateParameter(valid_608563, JString, required = false,
                                 default = nil)
  if valid_608563 != nil:
    section.add "CertificateIdentifier", valid_608563
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608564 = header.getOrDefault("X-Amz-Signature")
  valid_608564 = validateParameter(valid_608564, JString, required = false,
                                 default = nil)
  if valid_608564 != nil:
    section.add "X-Amz-Signature", valid_608564
  var valid_608565 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608565 = validateParameter(valid_608565, JString, required = false,
                                 default = nil)
  if valid_608565 != nil:
    section.add "X-Amz-Content-Sha256", valid_608565
  var valid_608566 = header.getOrDefault("X-Amz-Date")
  valid_608566 = validateParameter(valid_608566, JString, required = false,
                                 default = nil)
  if valid_608566 != nil:
    section.add "X-Amz-Date", valid_608566
  var valid_608567 = header.getOrDefault("X-Amz-Credential")
  valid_608567 = validateParameter(valid_608567, JString, required = false,
                                 default = nil)
  if valid_608567 != nil:
    section.add "X-Amz-Credential", valid_608567
  var valid_608568 = header.getOrDefault("X-Amz-Security-Token")
  valid_608568 = validateParameter(valid_608568, JString, required = false,
                                 default = nil)
  if valid_608568 != nil:
    section.add "X-Amz-Security-Token", valid_608568
  var valid_608569 = header.getOrDefault("X-Amz-Algorithm")
  valid_608569 = validateParameter(valid_608569, JString, required = false,
                                 default = nil)
  if valid_608569 != nil:
    section.add "X-Amz-Algorithm", valid_608569
  var valid_608570 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608570 = validateParameter(valid_608570, JString, required = false,
                                 default = nil)
  if valid_608570 != nil:
    section.add "X-Amz-SignedHeaders", valid_608570
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608571: Call_GetModifyCertificates_608557; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_608571.validator(path, query, header, formData, body)
  let scheme = call_608571.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608571.url(scheme.get, call_608571.host, call_608571.base,
                         call_608571.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608571, url, valid)

proc call*(call_608572: Call_GetModifyCertificates_608557;
          RemoveCustomerOverride: bool = false;
          Action: string = "ModifyCertificates"; Version: string = "2014-10-31";
          CertificateIdentifier: string = ""): Recallable =
  ## getModifyCertificates
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   RemoveCustomerOverride: bool
  ##                         : A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CertificateIdentifier: string
  ##                        : <p>The new default certificate identifier to override the current one with.</p> <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI command or the <code>DescribeCertificates</code> API operation.</p>
  var query_608573 = newJObject()
  add(query_608573, "RemoveCustomerOverride", newJBool(RemoveCustomerOverride))
  add(query_608573, "Action", newJString(Action))
  add(query_608573, "Version", newJString(Version))
  add(query_608573, "CertificateIdentifier", newJString(CertificateIdentifier))
  result = call_608572.call(nil, query_608573, nil, nil, nil)

var getModifyCertificates* = Call_GetModifyCertificates_608557(
    name: "getModifyCertificates", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCertificates",
    validator: validate_GetModifyCertificates_608558, base: "/",
    url: url_GetModifyCertificates_608559, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCurrentDBClusterCapacity_608611 = ref object of OpenApiRestCall_604389
proc url_PostModifyCurrentDBClusterCapacity_608613(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyCurrentDBClusterCapacity_608612(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608614 = query.getOrDefault("Action")
  valid_608614 = validateParameter(valid_608614, JString, required = true, default = newJString(
      "ModifyCurrentDBClusterCapacity"))
  if valid_608614 != nil:
    section.add "Action", valid_608614
  var valid_608615 = query.getOrDefault("Version")
  valid_608615 = validateParameter(valid_608615, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608615 != nil:
    section.add "Version", valid_608615
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608616 = header.getOrDefault("X-Amz-Signature")
  valid_608616 = validateParameter(valid_608616, JString, required = false,
                                 default = nil)
  if valid_608616 != nil:
    section.add "X-Amz-Signature", valid_608616
  var valid_608617 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608617 = validateParameter(valid_608617, JString, required = false,
                                 default = nil)
  if valid_608617 != nil:
    section.add "X-Amz-Content-Sha256", valid_608617
  var valid_608618 = header.getOrDefault("X-Amz-Date")
  valid_608618 = validateParameter(valid_608618, JString, required = false,
                                 default = nil)
  if valid_608618 != nil:
    section.add "X-Amz-Date", valid_608618
  var valid_608619 = header.getOrDefault("X-Amz-Credential")
  valid_608619 = validateParameter(valid_608619, JString, required = false,
                                 default = nil)
  if valid_608619 != nil:
    section.add "X-Amz-Credential", valid_608619
  var valid_608620 = header.getOrDefault("X-Amz-Security-Token")
  valid_608620 = validateParameter(valid_608620, JString, required = false,
                                 default = nil)
  if valid_608620 != nil:
    section.add "X-Amz-Security-Token", valid_608620
  var valid_608621 = header.getOrDefault("X-Amz-Algorithm")
  valid_608621 = validateParameter(valid_608621, JString, required = false,
                                 default = nil)
  if valid_608621 != nil:
    section.add "X-Amz-Algorithm", valid_608621
  var valid_608622 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608622 = validateParameter(valid_608622, JString, required = false,
                                 default = nil)
  if valid_608622 != nil:
    section.add "X-Amz-SignedHeaders", valid_608622
  result.add "header", section
  ## parameters in `formData` object:
  ##   TimeoutAction: JString
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   SecondsBeforeTimeout: JInt
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Capacity: JInt
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  section = newJObject()
  var valid_608623 = formData.getOrDefault("TimeoutAction")
  valid_608623 = validateParameter(valid_608623, JString, required = false,
                                 default = nil)
  if valid_608623 != nil:
    section.add "TimeoutAction", valid_608623
  var valid_608624 = formData.getOrDefault("SecondsBeforeTimeout")
  valid_608624 = validateParameter(valid_608624, JInt, required = false, default = nil)
  if valid_608624 != nil:
    section.add "SecondsBeforeTimeout", valid_608624
  var valid_608625 = formData.getOrDefault("Capacity")
  valid_608625 = validateParameter(valid_608625, JInt, required = false, default = nil)
  if valid_608625 != nil:
    section.add "Capacity", valid_608625
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_608626 = formData.getOrDefault("DBClusterIdentifier")
  valid_608626 = validateParameter(valid_608626, JString, required = true,
                                 default = nil)
  if valid_608626 != nil:
    section.add "DBClusterIdentifier", valid_608626
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608627: Call_PostModifyCurrentDBClusterCapacity_608611;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608627.validator(path, query, header, formData, body)
  let scheme = call_608627.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608627.url(scheme.get, call_608627.host, call_608627.base,
                         call_608627.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608627, url, valid)

proc call*(call_608628: Call_PostModifyCurrentDBClusterCapacity_608611;
          DBClusterIdentifier: string; TimeoutAction: string = "";
          Action: string = "ModifyCurrentDBClusterCapacity";
          SecondsBeforeTimeout: int = 0; Version: string = "2014-10-31";
          Capacity: int = 0): Recallable =
  ## postModifyCurrentDBClusterCapacity
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TimeoutAction: string
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   Action: string (required)
  ##   SecondsBeforeTimeout: int
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Version: string (required)
  ##   Capacity: int
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  var query_608629 = newJObject()
  var formData_608630 = newJObject()
  add(formData_608630, "TimeoutAction", newJString(TimeoutAction))
  add(query_608629, "Action", newJString(Action))
  add(formData_608630, "SecondsBeforeTimeout", newJInt(SecondsBeforeTimeout))
  add(query_608629, "Version", newJString(Version))
  add(formData_608630, "Capacity", newJInt(Capacity))
  add(formData_608630, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_608628.call(nil, query_608629, nil, formData_608630, nil)

var postModifyCurrentDBClusterCapacity* = Call_PostModifyCurrentDBClusterCapacity_608611(
    name: "postModifyCurrentDBClusterCapacity", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCurrentDBClusterCapacity",
    validator: validate_PostModifyCurrentDBClusterCapacity_608612, base: "/",
    url: url_PostModifyCurrentDBClusterCapacity_608613,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCurrentDBClusterCapacity_608592 = ref object of OpenApiRestCall_604389
proc url_GetModifyCurrentDBClusterCapacity_608594(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyCurrentDBClusterCapacity_608593(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Capacity: JInt
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   TimeoutAction: JString
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   SecondsBeforeTimeout: JInt
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608595 = query.getOrDefault("Capacity")
  valid_608595 = validateParameter(valid_608595, JInt, required = false, default = nil)
  if valid_608595 != nil:
    section.add "Capacity", valid_608595
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_608596 = query.getOrDefault("DBClusterIdentifier")
  valid_608596 = validateParameter(valid_608596, JString, required = true,
                                 default = nil)
  if valid_608596 != nil:
    section.add "DBClusterIdentifier", valid_608596
  var valid_608597 = query.getOrDefault("TimeoutAction")
  valid_608597 = validateParameter(valid_608597, JString, required = false,
                                 default = nil)
  if valid_608597 != nil:
    section.add "TimeoutAction", valid_608597
  var valid_608598 = query.getOrDefault("SecondsBeforeTimeout")
  valid_608598 = validateParameter(valid_608598, JInt, required = false, default = nil)
  if valid_608598 != nil:
    section.add "SecondsBeforeTimeout", valid_608598
  var valid_608599 = query.getOrDefault("Action")
  valid_608599 = validateParameter(valid_608599, JString, required = true, default = newJString(
      "ModifyCurrentDBClusterCapacity"))
  if valid_608599 != nil:
    section.add "Action", valid_608599
  var valid_608600 = query.getOrDefault("Version")
  valid_608600 = validateParameter(valid_608600, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608600 != nil:
    section.add "Version", valid_608600
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608601 = header.getOrDefault("X-Amz-Signature")
  valid_608601 = validateParameter(valid_608601, JString, required = false,
                                 default = nil)
  if valid_608601 != nil:
    section.add "X-Amz-Signature", valid_608601
  var valid_608602 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608602 = validateParameter(valid_608602, JString, required = false,
                                 default = nil)
  if valid_608602 != nil:
    section.add "X-Amz-Content-Sha256", valid_608602
  var valid_608603 = header.getOrDefault("X-Amz-Date")
  valid_608603 = validateParameter(valid_608603, JString, required = false,
                                 default = nil)
  if valid_608603 != nil:
    section.add "X-Amz-Date", valid_608603
  var valid_608604 = header.getOrDefault("X-Amz-Credential")
  valid_608604 = validateParameter(valid_608604, JString, required = false,
                                 default = nil)
  if valid_608604 != nil:
    section.add "X-Amz-Credential", valid_608604
  var valid_608605 = header.getOrDefault("X-Amz-Security-Token")
  valid_608605 = validateParameter(valid_608605, JString, required = false,
                                 default = nil)
  if valid_608605 != nil:
    section.add "X-Amz-Security-Token", valid_608605
  var valid_608606 = header.getOrDefault("X-Amz-Algorithm")
  valid_608606 = validateParameter(valid_608606, JString, required = false,
                                 default = nil)
  if valid_608606 != nil:
    section.add "X-Amz-Algorithm", valid_608606
  var valid_608607 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608607 = validateParameter(valid_608607, JString, required = false,
                                 default = nil)
  if valid_608607 != nil:
    section.add "X-Amz-SignedHeaders", valid_608607
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608608: Call_GetModifyCurrentDBClusterCapacity_608592;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608608.validator(path, query, header, formData, body)
  let scheme = call_608608.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608608.url(scheme.get, call_608608.host, call_608608.base,
                         call_608608.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608608, url, valid)

proc call*(call_608609: Call_GetModifyCurrentDBClusterCapacity_608592;
          DBClusterIdentifier: string; Capacity: int = 0; TimeoutAction: string = "";
          SecondsBeforeTimeout: int = 0;
          Action: string = "ModifyCurrentDBClusterCapacity";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyCurrentDBClusterCapacity
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Capacity: int
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   TimeoutAction: string
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   SecondsBeforeTimeout: int
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608610 = newJObject()
  add(query_608610, "Capacity", newJInt(Capacity))
  add(query_608610, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_608610, "TimeoutAction", newJString(TimeoutAction))
  add(query_608610, "SecondsBeforeTimeout", newJInt(SecondsBeforeTimeout))
  add(query_608610, "Action", newJString(Action))
  add(query_608610, "Version", newJString(Version))
  result = call_608609.call(nil, query_608610, nil, nil, nil)

var getModifyCurrentDBClusterCapacity* = Call_GetModifyCurrentDBClusterCapacity_608592(
    name: "getModifyCurrentDBClusterCapacity", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCurrentDBClusterCapacity",
    validator: validate_GetModifyCurrentDBClusterCapacity_608593, base: "/",
    url: url_GetModifyCurrentDBClusterCapacity_608594,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBCluster_608672 = ref object of OpenApiRestCall_604389
proc url_PostModifyDBCluster_608674(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBCluster_608673(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608675 = query.getOrDefault("Action")
  valid_608675 = validateParameter(valid_608675, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_608675 != nil:
    section.add "Action", valid_608675
  var valid_608676 = query.getOrDefault("Version")
  valid_608676 = validateParameter(valid_608676, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608676 != nil:
    section.add "Version", valid_608676
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608677 = header.getOrDefault("X-Amz-Signature")
  valid_608677 = validateParameter(valid_608677, JString, required = false,
                                 default = nil)
  if valid_608677 != nil:
    section.add "X-Amz-Signature", valid_608677
  var valid_608678 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608678 = validateParameter(valid_608678, JString, required = false,
                                 default = nil)
  if valid_608678 != nil:
    section.add "X-Amz-Content-Sha256", valid_608678
  var valid_608679 = header.getOrDefault("X-Amz-Date")
  valid_608679 = validateParameter(valid_608679, JString, required = false,
                                 default = nil)
  if valid_608679 != nil:
    section.add "X-Amz-Date", valid_608679
  var valid_608680 = header.getOrDefault("X-Amz-Credential")
  valid_608680 = validateParameter(valid_608680, JString, required = false,
                                 default = nil)
  if valid_608680 != nil:
    section.add "X-Amz-Credential", valid_608680
  var valid_608681 = header.getOrDefault("X-Amz-Security-Token")
  valid_608681 = validateParameter(valid_608681, JString, required = false,
                                 default = nil)
  if valid_608681 != nil:
    section.add "X-Amz-Security-Token", valid_608681
  var valid_608682 = header.getOrDefault("X-Amz-Algorithm")
  valid_608682 = validateParameter(valid_608682, JString, required = false,
                                 default = nil)
  if valid_608682 != nil:
    section.add "X-Amz-Algorithm", valid_608682
  var valid_608683 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608683 = validateParameter(valid_608683, JString, required = false,
                                 default = nil)
  if valid_608683 != nil:
    section.add "X-Amz-SignedHeaders", valid_608683
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   DBInstanceParameterGroupName: JString
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_608684 = formData.getOrDefault("NewDBClusterIdentifier")
  valid_608684 = validateParameter(valid_608684, JString, required = false,
                                 default = nil)
  if valid_608684 != nil:
    section.add "NewDBClusterIdentifier", valid_608684
  var valid_608685 = formData.getOrDefault("Port")
  valid_608685 = validateParameter(valid_608685, JInt, required = false, default = nil)
  if valid_608685 != nil:
    section.add "Port", valid_608685
  var valid_608686 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_608686 = validateParameter(valid_608686, JString, required = false,
                                 default = nil)
  if valid_608686 != nil:
    section.add "PreferredMaintenanceWindow", valid_608686
  var valid_608687 = formData.getOrDefault("PreferredBackupWindow")
  valid_608687 = validateParameter(valid_608687, JString, required = false,
                                 default = nil)
  if valid_608687 != nil:
    section.add "PreferredBackupWindow", valid_608687
  var valid_608688 = formData.getOrDefault("MasterUserPassword")
  valid_608688 = validateParameter(valid_608688, JString, required = false,
                                 default = nil)
  if valid_608688 != nil:
    section.add "MasterUserPassword", valid_608688
  var valid_608689 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_608689 = validateParameter(valid_608689, JArray, required = false,
                                 default = nil)
  if valid_608689 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_608689
  var valid_608690 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_608690 = validateParameter(valid_608690, JString, required = false,
                                 default = nil)
  if valid_608690 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_608690
  var valid_608691 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_608691 = validateParameter(valid_608691, JArray, required = false,
                                 default = nil)
  if valid_608691 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_608691
  var valid_608692 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_608692 = validateParameter(valid_608692, JString, required = false,
                                 default = nil)
  if valid_608692 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_608692
  var valid_608693 = formData.getOrDefault("EngineVersion")
  valid_608693 = validateParameter(valid_608693, JString, required = false,
                                 default = nil)
  if valid_608693 != nil:
    section.add "EngineVersion", valid_608693
  var valid_608694 = formData.getOrDefault("BacktrackWindow")
  valid_608694 = validateParameter(valid_608694, JInt, required = false, default = nil)
  if valid_608694 != nil:
    section.add "BacktrackWindow", valid_608694
  var valid_608695 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_608695 = validateParameter(valid_608695, JArray, required = false,
                                 default = nil)
  if valid_608695 != nil:
    section.add "VpcSecurityGroupIds", valid_608695
  var valid_608696 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_608696 = validateParameter(valid_608696, JBool, required = false, default = nil)
  if valid_608696 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_608696
  var valid_608697 = formData.getOrDefault("BackupRetentionPeriod")
  valid_608697 = validateParameter(valid_608697, JInt, required = false, default = nil)
  if valid_608697 != nil:
    section.add "BackupRetentionPeriod", valid_608697
  var valid_608698 = formData.getOrDefault("ApplyImmediately")
  valid_608698 = validateParameter(valid_608698, JBool, required = false, default = nil)
  if valid_608698 != nil:
    section.add "ApplyImmediately", valid_608698
  var valid_608699 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_608699 = validateParameter(valid_608699, JString, required = false,
                                 default = nil)
  if valid_608699 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_608699
  var valid_608700 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_608700 = validateParameter(valid_608700, JBool, required = false, default = nil)
  if valid_608700 != nil:
    section.add "AllowMajorVersionUpgrade", valid_608700
  var valid_608701 = formData.getOrDefault("EnableHttpEndpoint")
  valid_608701 = validateParameter(valid_608701, JBool, required = false, default = nil)
  if valid_608701 != nil:
    section.add "EnableHttpEndpoint", valid_608701
  var valid_608702 = formData.getOrDefault("OptionGroupName")
  valid_608702 = validateParameter(valid_608702, JString, required = false,
                                 default = nil)
  if valid_608702 != nil:
    section.add "OptionGroupName", valid_608702
  var valid_608703 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_608703 = validateParameter(valid_608703, JString, required = false,
                                 default = nil)
  if valid_608703 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_608703
  var valid_608704 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_608704 = validateParameter(valid_608704, JString, required = false,
                                 default = nil)
  if valid_608704 != nil:
    section.add "DBClusterParameterGroupName", valid_608704
  var valid_608705 = formData.getOrDefault("DBInstanceParameterGroupName")
  valid_608705 = validateParameter(valid_608705, JString, required = false,
                                 default = nil)
  if valid_608705 != nil:
    section.add "DBInstanceParameterGroupName", valid_608705
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_608706 = formData.getOrDefault("DBClusterIdentifier")
  valid_608706 = validateParameter(valid_608706, JString, required = true,
                                 default = nil)
  if valid_608706 != nil:
    section.add "DBClusterIdentifier", valid_608706
  var valid_608707 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_608707 = validateParameter(valid_608707, JString, required = false,
                                 default = nil)
  if valid_608707 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_608707
  var valid_608708 = formData.getOrDefault("DeletionProtection")
  valid_608708 = validateParameter(valid_608708, JBool, required = false, default = nil)
  if valid_608708 != nil:
    section.add "DeletionProtection", valid_608708
  var valid_608709 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_608709 = validateParameter(valid_608709, JBool, required = false, default = nil)
  if valid_608709 != nil:
    section.add "CopyTagsToSnapshot", valid_608709
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608710: Call_PostModifyDBCluster_608672; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608710.validator(path, query, header, formData, body)
  let scheme = call_608710.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608710.url(scheme.get, call_608710.host, call_608710.base,
                         call_608710.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608710, url, valid)

proc call*(call_608711: Call_PostModifyDBCluster_608672;
          DBClusterIdentifier: string; NewDBClusterIdentifier: string = "";
          Port: int = 0; PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          EngineVersion: string = ""; BacktrackWindow: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; ApplyImmediately: bool = false;
          ScalingConfigurationMaxCapacity: string = "";
          Action: string = "ModifyDBCluster";
          AllowMajorVersionUpgrade: bool = false; EnableHttpEndpoint: bool = false;
          OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          DBClusterParameterGroupName: string = "";
          DBInstanceParameterGroupName: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationAutoPause: string = "";
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postModifyDBCluster
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Action: string (required)
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   DBInstanceParameterGroupName: string
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  var query_608712 = newJObject()
  var formData_608713 = newJObject()
  add(formData_608713, "NewDBClusterIdentifier",
      newJString(NewDBClusterIdentifier))
  add(formData_608713, "Port", newJInt(Port))
  add(formData_608713, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_608713, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_608713, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_608713.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_608713, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_608713.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_608713, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_608713, "EngineVersion", newJString(EngineVersion))
  add(formData_608713, "BacktrackWindow", newJInt(BacktrackWindow))
  if VpcSecurityGroupIds != nil:
    formData_608713.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_608713, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_608713, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_608713, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_608713, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_608712, "Action", newJString(Action))
  add(formData_608713, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_608713, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(formData_608713, "OptionGroupName", newJString(OptionGroupName))
  add(formData_608713, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_608713, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_608713, "DBInstanceParameterGroupName",
      newJString(DBInstanceParameterGroupName))
  add(query_608712, "Version", newJString(Version))
  add(formData_608713, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_608713, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_608713, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_608713, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_608711.call(nil, query_608712, nil, formData_608713, nil)

var postModifyDBCluster* = Call_PostModifyDBCluster_608672(
    name: "postModifyDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBCluster",
    validator: validate_PostModifyDBCluster_608673, base: "/",
    url: url_PostModifyDBCluster_608674, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBCluster_608631 = ref object of OpenApiRestCall_604389
proc url_GetModifyDBCluster_608633(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBCluster_608632(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   DBInstanceParameterGroupName: JString
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   Version: JString (required)
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  section = newJObject()
  var valid_608634 = query.getOrDefault("DeletionProtection")
  valid_608634 = validateParameter(valid_608634, JBool, required = false, default = nil)
  if valid_608634 != nil:
    section.add "DeletionProtection", valid_608634
  var valid_608635 = query.getOrDefault("CopyTagsToSnapshot")
  valid_608635 = validateParameter(valid_608635, JBool, required = false, default = nil)
  if valid_608635 != nil:
    section.add "CopyTagsToSnapshot", valid_608635
  var valid_608636 = query.getOrDefault("EnableHttpEndpoint")
  valid_608636 = validateParameter(valid_608636, JBool, required = false, default = nil)
  if valid_608636 != nil:
    section.add "EnableHttpEndpoint", valid_608636
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_608637 = query.getOrDefault("DBClusterIdentifier")
  valid_608637 = validateParameter(valid_608637, JString, required = true,
                                 default = nil)
  if valid_608637 != nil:
    section.add "DBClusterIdentifier", valid_608637
  var valid_608638 = query.getOrDefault("BacktrackWindow")
  valid_608638 = validateParameter(valid_608638, JInt, required = false, default = nil)
  if valid_608638 != nil:
    section.add "BacktrackWindow", valid_608638
  var valid_608639 = query.getOrDefault("DBClusterParameterGroupName")
  valid_608639 = validateParameter(valid_608639, JString, required = false,
                                 default = nil)
  if valid_608639 != nil:
    section.add "DBClusterParameterGroupName", valid_608639
  var valid_608640 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_608640 = validateParameter(valid_608640, JArray, required = false,
                                 default = nil)
  if valid_608640 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_608640
  var valid_608641 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_608641 = validateParameter(valid_608641, JArray, required = false,
                                 default = nil)
  if valid_608641 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_608641
  var valid_608642 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_608642 = validateParameter(valid_608642, JString, required = false,
                                 default = nil)
  if valid_608642 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_608642
  var valid_608643 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_608643 = validateParameter(valid_608643, JString, required = false,
                                 default = nil)
  if valid_608643 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_608643
  var valid_608644 = query.getOrDefault("BackupRetentionPeriod")
  valid_608644 = validateParameter(valid_608644, JInt, required = false, default = nil)
  if valid_608644 != nil:
    section.add "BackupRetentionPeriod", valid_608644
  var valid_608645 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_608645 = validateParameter(valid_608645, JString, required = false,
                                 default = nil)
  if valid_608645 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_608645
  var valid_608646 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_608646 = validateParameter(valid_608646, JBool, required = false, default = nil)
  if valid_608646 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_608646
  var valid_608647 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_608647 = validateParameter(valid_608647, JString, required = false,
                                 default = nil)
  if valid_608647 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_608647
  var valid_608648 = query.getOrDefault("EngineVersion")
  valid_608648 = validateParameter(valid_608648, JString, required = false,
                                 default = nil)
  if valid_608648 != nil:
    section.add "EngineVersion", valid_608648
  var valid_608649 = query.getOrDefault("DBInstanceParameterGroupName")
  valid_608649 = validateParameter(valid_608649, JString, required = false,
                                 default = nil)
  if valid_608649 != nil:
    section.add "DBInstanceParameterGroupName", valid_608649
  var valid_608650 = query.getOrDefault("Action")
  valid_608650 = validateParameter(valid_608650, JString, required = true,
                                 default = newJString("ModifyDBCluster"))
  if valid_608650 != nil:
    section.add "Action", valid_608650
  var valid_608651 = query.getOrDefault("ApplyImmediately")
  valid_608651 = validateParameter(valid_608651, JBool, required = false, default = nil)
  if valid_608651 != nil:
    section.add "ApplyImmediately", valid_608651
  var valid_608652 = query.getOrDefault("NewDBClusterIdentifier")
  valid_608652 = validateParameter(valid_608652, JString, required = false,
                                 default = nil)
  if valid_608652 != nil:
    section.add "NewDBClusterIdentifier", valid_608652
  var valid_608653 = query.getOrDefault("Port")
  valid_608653 = validateParameter(valid_608653, JInt, required = false, default = nil)
  if valid_608653 != nil:
    section.add "Port", valid_608653
  var valid_608654 = query.getOrDefault("VpcSecurityGroupIds")
  valid_608654 = validateParameter(valid_608654, JArray, required = false,
                                 default = nil)
  if valid_608654 != nil:
    section.add "VpcSecurityGroupIds", valid_608654
  var valid_608655 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_608655 = validateParameter(valid_608655, JBool, required = false, default = nil)
  if valid_608655 != nil:
    section.add "AllowMajorVersionUpgrade", valid_608655
  var valid_608656 = query.getOrDefault("MasterUserPassword")
  valid_608656 = validateParameter(valid_608656, JString, required = false,
                                 default = nil)
  if valid_608656 != nil:
    section.add "MasterUserPassword", valid_608656
  var valid_608657 = query.getOrDefault("OptionGroupName")
  valid_608657 = validateParameter(valid_608657, JString, required = false,
                                 default = nil)
  if valid_608657 != nil:
    section.add "OptionGroupName", valid_608657
  var valid_608658 = query.getOrDefault("Version")
  valid_608658 = validateParameter(valid_608658, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608658 != nil:
    section.add "Version", valid_608658
  var valid_608659 = query.getOrDefault("PreferredBackupWindow")
  valid_608659 = validateParameter(valid_608659, JString, required = false,
                                 default = nil)
  if valid_608659 != nil:
    section.add "PreferredBackupWindow", valid_608659
  var valid_608660 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_608660 = validateParameter(valid_608660, JString, required = false,
                                 default = nil)
  if valid_608660 != nil:
    section.add "PreferredMaintenanceWindow", valid_608660
  var valid_608661 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_608661 = validateParameter(valid_608661, JString, required = false,
                                 default = nil)
  if valid_608661 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_608661
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608662 = header.getOrDefault("X-Amz-Signature")
  valid_608662 = validateParameter(valid_608662, JString, required = false,
                                 default = nil)
  if valid_608662 != nil:
    section.add "X-Amz-Signature", valid_608662
  var valid_608663 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608663 = validateParameter(valid_608663, JString, required = false,
                                 default = nil)
  if valid_608663 != nil:
    section.add "X-Amz-Content-Sha256", valid_608663
  var valid_608664 = header.getOrDefault("X-Amz-Date")
  valid_608664 = validateParameter(valid_608664, JString, required = false,
                                 default = nil)
  if valid_608664 != nil:
    section.add "X-Amz-Date", valid_608664
  var valid_608665 = header.getOrDefault("X-Amz-Credential")
  valid_608665 = validateParameter(valid_608665, JString, required = false,
                                 default = nil)
  if valid_608665 != nil:
    section.add "X-Amz-Credential", valid_608665
  var valid_608666 = header.getOrDefault("X-Amz-Security-Token")
  valid_608666 = validateParameter(valid_608666, JString, required = false,
                                 default = nil)
  if valid_608666 != nil:
    section.add "X-Amz-Security-Token", valid_608666
  var valid_608667 = header.getOrDefault("X-Amz-Algorithm")
  valid_608667 = validateParameter(valid_608667, JString, required = false,
                                 default = nil)
  if valid_608667 != nil:
    section.add "X-Amz-Algorithm", valid_608667
  var valid_608668 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608668 = validateParameter(valid_608668, JString, required = false,
                                 default = nil)
  if valid_608668 != nil:
    section.add "X-Amz-SignedHeaders", valid_608668
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608669: Call_GetModifyDBCluster_608631; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608669.validator(path, query, header, formData, body)
  let scheme = call_608669.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608669.url(scheme.get, call_608669.host, call_608669.base,
                         call_608669.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608669, url, valid)

proc call*(call_608670: Call_GetModifyDBCluster_608631;
          DBClusterIdentifier: string; DeletionProtection: bool = false;
          CopyTagsToSnapshot: bool = false; EnableHttpEndpoint: bool = false;
          BacktrackWindow: int = 0; DBClusterParameterGroupName: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          BackupRetentionPeriod: int = 0;
          ScalingConfigurationMinCapacity: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          EngineVersion: string = ""; DBInstanceParameterGroupName: string = "";
          Action: string = "ModifyDBCluster"; ApplyImmediately: bool = false;
          NewDBClusterIdentifier: string = ""; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          AllowMajorVersionUpgrade: bool = false; MasterUserPassword: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = "";
          ScalingConfigurationMaxCapacity: string = ""): Recallable =
  ## getModifyDBCluster
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   DBInstanceParameterGroupName: string
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   Version: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  var query_608671 = newJObject()
  add(query_608671, "DeletionProtection", newJBool(DeletionProtection))
  add(query_608671, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_608671, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(query_608671, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_608671, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_608671, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_608671.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_608671.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_608671, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_608671, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_608671, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_608671, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_608671, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_608671, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_608671, "EngineVersion", newJString(EngineVersion))
  add(query_608671, "DBInstanceParameterGroupName",
      newJString(DBInstanceParameterGroupName))
  add(query_608671, "Action", newJString(Action))
  add(query_608671, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_608671, "NewDBClusterIdentifier", newJString(NewDBClusterIdentifier))
  add(query_608671, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_608671.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_608671, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_608671, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_608671, "OptionGroupName", newJString(OptionGroupName))
  add(query_608671, "Version", newJString(Version))
  add(query_608671, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_608671, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_608671, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  result = call_608670.call(nil, query_608671, nil, nil, nil)

var getModifyDBCluster* = Call_GetModifyDBCluster_608631(
    name: "getModifyDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBCluster", validator: validate_GetModifyDBCluster_608632,
    base: "/", url: url_GetModifyDBCluster_608633,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterEndpoint_608733 = ref object of OpenApiRestCall_604389
proc url_PostModifyDBClusterEndpoint_608735(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterEndpoint_608734(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608736 = query.getOrDefault("Action")
  valid_608736 = validateParameter(valid_608736, JString, required = true, default = newJString(
      "ModifyDBClusterEndpoint"))
  if valid_608736 != nil:
    section.add "Action", valid_608736
  var valid_608737 = query.getOrDefault("Version")
  valid_608737 = validateParameter(valid_608737, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608737 != nil:
    section.add "Version", valid_608737
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608738 = header.getOrDefault("X-Amz-Signature")
  valid_608738 = validateParameter(valid_608738, JString, required = false,
                                 default = nil)
  if valid_608738 != nil:
    section.add "X-Amz-Signature", valid_608738
  var valid_608739 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608739 = validateParameter(valid_608739, JString, required = false,
                                 default = nil)
  if valid_608739 != nil:
    section.add "X-Amz-Content-Sha256", valid_608739
  var valid_608740 = header.getOrDefault("X-Amz-Date")
  valid_608740 = validateParameter(valid_608740, JString, required = false,
                                 default = nil)
  if valid_608740 != nil:
    section.add "X-Amz-Date", valid_608740
  var valid_608741 = header.getOrDefault("X-Amz-Credential")
  valid_608741 = validateParameter(valid_608741, JString, required = false,
                                 default = nil)
  if valid_608741 != nil:
    section.add "X-Amz-Credential", valid_608741
  var valid_608742 = header.getOrDefault("X-Amz-Security-Token")
  valid_608742 = validateParameter(valid_608742, JString, required = false,
                                 default = nil)
  if valid_608742 != nil:
    section.add "X-Amz-Security-Token", valid_608742
  var valid_608743 = header.getOrDefault("X-Amz-Algorithm")
  valid_608743 = validateParameter(valid_608743, JString, required = false,
                                 default = nil)
  if valid_608743 != nil:
    section.add "X-Amz-Algorithm", valid_608743
  var valid_608744 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608744 = validateParameter(valid_608744, JString, required = false,
                                 default = nil)
  if valid_608744 != nil:
    section.add "X-Amz-SignedHeaders", valid_608744
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_608745 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_608745 = validateParameter(valid_608745, JString, required = true,
                                 default = nil)
  if valid_608745 != nil:
    section.add "DBClusterEndpointIdentifier", valid_608745
  var valid_608746 = formData.getOrDefault("StaticMembers")
  valid_608746 = validateParameter(valid_608746, JArray, required = false,
                                 default = nil)
  if valid_608746 != nil:
    section.add "StaticMembers", valid_608746
  var valid_608747 = formData.getOrDefault("EndpointType")
  valid_608747 = validateParameter(valid_608747, JString, required = false,
                                 default = nil)
  if valid_608747 != nil:
    section.add "EndpointType", valid_608747
  var valid_608748 = formData.getOrDefault("ExcludedMembers")
  valid_608748 = validateParameter(valid_608748, JArray, required = false,
                                 default = nil)
  if valid_608748 != nil:
    section.add "ExcludedMembers", valid_608748
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608749: Call_PostModifyDBClusterEndpoint_608733; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608749.validator(path, query, header, formData, body)
  let scheme = call_608749.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608749.url(scheme.get, call_608749.host, call_608749.base,
                         call_608749.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608749, url, valid)

proc call*(call_608750: Call_PostModifyDBClusterEndpoint_608733;
          DBClusterEndpointIdentifier: string; StaticMembers: JsonNode = nil;
          Action: string = "ModifyDBClusterEndpoint"; EndpointType: string = "";
          ExcludedMembers: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterEndpoint
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: string (required)
  ##   EndpointType: string
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Version: string (required)
  var query_608751 = newJObject()
  var formData_608752 = newJObject()
  add(formData_608752, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    formData_608752.add "StaticMembers", StaticMembers
  add(query_608751, "Action", newJString(Action))
  add(formData_608752, "EndpointType", newJString(EndpointType))
  if ExcludedMembers != nil:
    formData_608752.add "ExcludedMembers", ExcludedMembers
  add(query_608751, "Version", newJString(Version))
  result = call_608750.call(nil, query_608751, nil, formData_608752, nil)

var postModifyDBClusterEndpoint* = Call_PostModifyDBClusterEndpoint_608733(
    name: "postModifyDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterEndpoint",
    validator: validate_PostModifyDBClusterEndpoint_608734, base: "/",
    url: url_PostModifyDBClusterEndpoint_608735,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterEndpoint_608714 = ref object of OpenApiRestCall_604389
proc url_GetModifyDBClusterEndpoint_608716(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterEndpoint_608715(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: JString
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_608717 = query.getOrDefault("ExcludedMembers")
  valid_608717 = validateParameter(valid_608717, JArray, required = false,
                                 default = nil)
  if valid_608717 != nil:
    section.add "ExcludedMembers", valid_608717
  assert query != nil, "query argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_608718 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_608718 = validateParameter(valid_608718, JString, required = true,
                                 default = nil)
  if valid_608718 != nil:
    section.add "DBClusterEndpointIdentifier", valid_608718
  var valid_608719 = query.getOrDefault("StaticMembers")
  valid_608719 = validateParameter(valid_608719, JArray, required = false,
                                 default = nil)
  if valid_608719 != nil:
    section.add "StaticMembers", valid_608719
  var valid_608720 = query.getOrDefault("EndpointType")
  valid_608720 = validateParameter(valid_608720, JString, required = false,
                                 default = nil)
  if valid_608720 != nil:
    section.add "EndpointType", valid_608720
  var valid_608721 = query.getOrDefault("Action")
  valid_608721 = validateParameter(valid_608721, JString, required = true, default = newJString(
      "ModifyDBClusterEndpoint"))
  if valid_608721 != nil:
    section.add "Action", valid_608721
  var valid_608722 = query.getOrDefault("Version")
  valid_608722 = validateParameter(valid_608722, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608722 != nil:
    section.add "Version", valid_608722
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608723 = header.getOrDefault("X-Amz-Signature")
  valid_608723 = validateParameter(valid_608723, JString, required = false,
                                 default = nil)
  if valid_608723 != nil:
    section.add "X-Amz-Signature", valid_608723
  var valid_608724 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608724 = validateParameter(valid_608724, JString, required = false,
                                 default = nil)
  if valid_608724 != nil:
    section.add "X-Amz-Content-Sha256", valid_608724
  var valid_608725 = header.getOrDefault("X-Amz-Date")
  valid_608725 = validateParameter(valid_608725, JString, required = false,
                                 default = nil)
  if valid_608725 != nil:
    section.add "X-Amz-Date", valid_608725
  var valid_608726 = header.getOrDefault("X-Amz-Credential")
  valid_608726 = validateParameter(valid_608726, JString, required = false,
                                 default = nil)
  if valid_608726 != nil:
    section.add "X-Amz-Credential", valid_608726
  var valid_608727 = header.getOrDefault("X-Amz-Security-Token")
  valid_608727 = validateParameter(valid_608727, JString, required = false,
                                 default = nil)
  if valid_608727 != nil:
    section.add "X-Amz-Security-Token", valid_608727
  var valid_608728 = header.getOrDefault("X-Amz-Algorithm")
  valid_608728 = validateParameter(valid_608728, JString, required = false,
                                 default = nil)
  if valid_608728 != nil:
    section.add "X-Amz-Algorithm", valid_608728
  var valid_608729 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608729 = validateParameter(valid_608729, JString, required = false,
                                 default = nil)
  if valid_608729 != nil:
    section.add "X-Amz-SignedHeaders", valid_608729
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608730: Call_GetModifyDBClusterEndpoint_608714; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608730.validator(path, query, header, formData, body)
  let scheme = call_608730.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608730.url(scheme.get, call_608730.host, call_608730.base,
                         call_608730.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608730, url, valid)

proc call*(call_608731: Call_GetModifyDBClusterEndpoint_608714;
          DBClusterEndpointIdentifier: string; ExcludedMembers: JsonNode = nil;
          StaticMembers: JsonNode = nil; EndpointType: string = "";
          Action: string = "ModifyDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterEndpoint
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   EndpointType: string
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608732 = newJObject()
  if ExcludedMembers != nil:
    query_608732.add "ExcludedMembers", ExcludedMembers
  add(query_608732, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    query_608732.add "StaticMembers", StaticMembers
  add(query_608732, "EndpointType", newJString(EndpointType))
  add(query_608732, "Action", newJString(Action))
  add(query_608732, "Version", newJString(Version))
  result = call_608731.call(nil, query_608732, nil, nil, nil)

var getModifyDBClusterEndpoint* = Call_GetModifyDBClusterEndpoint_608714(
    name: "getModifyDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterEndpoint",
    validator: validate_GetModifyDBClusterEndpoint_608715, base: "/",
    url: url_GetModifyDBClusterEndpoint_608716,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterParameterGroup_608770 = ref object of OpenApiRestCall_604389
proc url_PostModifyDBClusterParameterGroup_608772(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterParameterGroup_608771(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608773 = query.getOrDefault("Action")
  valid_608773 = validateParameter(valid_608773, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_608773 != nil:
    section.add "Action", valid_608773
  var valid_608774 = query.getOrDefault("Version")
  valid_608774 = validateParameter(valid_608774, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608774 != nil:
    section.add "Version", valid_608774
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608775 = header.getOrDefault("X-Amz-Signature")
  valid_608775 = validateParameter(valid_608775, JString, required = false,
                                 default = nil)
  if valid_608775 != nil:
    section.add "X-Amz-Signature", valid_608775
  var valid_608776 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608776 = validateParameter(valid_608776, JString, required = false,
                                 default = nil)
  if valid_608776 != nil:
    section.add "X-Amz-Content-Sha256", valid_608776
  var valid_608777 = header.getOrDefault("X-Amz-Date")
  valid_608777 = validateParameter(valid_608777, JString, required = false,
                                 default = nil)
  if valid_608777 != nil:
    section.add "X-Amz-Date", valid_608777
  var valid_608778 = header.getOrDefault("X-Amz-Credential")
  valid_608778 = validateParameter(valid_608778, JString, required = false,
                                 default = nil)
  if valid_608778 != nil:
    section.add "X-Amz-Credential", valid_608778
  var valid_608779 = header.getOrDefault("X-Amz-Security-Token")
  valid_608779 = validateParameter(valid_608779, JString, required = false,
                                 default = nil)
  if valid_608779 != nil:
    section.add "X-Amz-Security-Token", valid_608779
  var valid_608780 = header.getOrDefault("X-Amz-Algorithm")
  valid_608780 = validateParameter(valid_608780, JString, required = false,
                                 default = nil)
  if valid_608780 != nil:
    section.add "X-Amz-Algorithm", valid_608780
  var valid_608781 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608781 = validateParameter(valid_608781, JString, required = false,
                                 default = nil)
  if valid_608781 != nil:
    section.add "X-Amz-SignedHeaders", valid_608781
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Parameters` field"
  var valid_608782 = formData.getOrDefault("Parameters")
  valid_608782 = validateParameter(valid_608782, JArray, required = true, default = nil)
  if valid_608782 != nil:
    section.add "Parameters", valid_608782
  var valid_608783 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_608783 = validateParameter(valid_608783, JString, required = true,
                                 default = nil)
  if valid_608783 != nil:
    section.add "DBClusterParameterGroupName", valid_608783
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608784: Call_PostModifyDBClusterParameterGroup_608770;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608784.validator(path, query, header, formData, body)
  let scheme = call_608784.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608784.url(scheme.get, call_608784.host, call_608784.base,
                         call_608784.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608784, url, valid)

proc call*(call_608785: Call_PostModifyDBClusterParameterGroup_608770;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Version: string (required)
  var query_608786 = newJObject()
  var formData_608787 = newJObject()
  add(query_608786, "Action", newJString(Action))
  if Parameters != nil:
    formData_608787.add "Parameters", Parameters
  add(formData_608787, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_608786, "Version", newJString(Version))
  result = call_608785.call(nil, query_608786, nil, formData_608787, nil)

var postModifyDBClusterParameterGroup* = Call_PostModifyDBClusterParameterGroup_608770(
    name: "postModifyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_PostModifyDBClusterParameterGroup_608771, base: "/",
    url: url_PostModifyDBClusterParameterGroup_608772,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterParameterGroup_608753 = ref object of OpenApiRestCall_604389
proc url_GetModifyDBClusterParameterGroup_608755(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterParameterGroup_608754(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Parameters` field"
  var valid_608756 = query.getOrDefault("Parameters")
  valid_608756 = validateParameter(valid_608756, JArray, required = true, default = nil)
  if valid_608756 != nil:
    section.add "Parameters", valid_608756
  var valid_608757 = query.getOrDefault("DBClusterParameterGroupName")
  valid_608757 = validateParameter(valid_608757, JString, required = true,
                                 default = nil)
  if valid_608757 != nil:
    section.add "DBClusterParameterGroupName", valid_608757
  var valid_608758 = query.getOrDefault("Action")
  valid_608758 = validateParameter(valid_608758, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_608758 != nil:
    section.add "Action", valid_608758
  var valid_608759 = query.getOrDefault("Version")
  valid_608759 = validateParameter(valid_608759, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608759 != nil:
    section.add "Version", valid_608759
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608760 = header.getOrDefault("X-Amz-Signature")
  valid_608760 = validateParameter(valid_608760, JString, required = false,
                                 default = nil)
  if valid_608760 != nil:
    section.add "X-Amz-Signature", valid_608760
  var valid_608761 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608761 = validateParameter(valid_608761, JString, required = false,
                                 default = nil)
  if valid_608761 != nil:
    section.add "X-Amz-Content-Sha256", valid_608761
  var valid_608762 = header.getOrDefault("X-Amz-Date")
  valid_608762 = validateParameter(valid_608762, JString, required = false,
                                 default = nil)
  if valid_608762 != nil:
    section.add "X-Amz-Date", valid_608762
  var valid_608763 = header.getOrDefault("X-Amz-Credential")
  valid_608763 = validateParameter(valid_608763, JString, required = false,
                                 default = nil)
  if valid_608763 != nil:
    section.add "X-Amz-Credential", valid_608763
  var valid_608764 = header.getOrDefault("X-Amz-Security-Token")
  valid_608764 = validateParameter(valid_608764, JString, required = false,
                                 default = nil)
  if valid_608764 != nil:
    section.add "X-Amz-Security-Token", valid_608764
  var valid_608765 = header.getOrDefault("X-Amz-Algorithm")
  valid_608765 = validateParameter(valid_608765, JString, required = false,
                                 default = nil)
  if valid_608765 != nil:
    section.add "X-Amz-Algorithm", valid_608765
  var valid_608766 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608766 = validateParameter(valid_608766, JString, required = false,
                                 default = nil)
  if valid_608766 != nil:
    section.add "X-Amz-SignedHeaders", valid_608766
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608767: Call_GetModifyDBClusterParameterGroup_608753;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608767.validator(path, query, header, formData, body)
  let scheme = call_608767.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608767.url(scheme.get, call_608767.host, call_608767.base,
                         call_608767.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608767, url, valid)

proc call*(call_608768: Call_GetModifyDBClusterParameterGroup_608753;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608769 = newJObject()
  if Parameters != nil:
    query_608769.add "Parameters", Parameters
  add(query_608769, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_608769, "Action", newJString(Action))
  add(query_608769, "Version", newJString(Version))
  result = call_608768.call(nil, query_608769, nil, nil, nil)

var getModifyDBClusterParameterGroup* = Call_GetModifyDBClusterParameterGroup_608753(
    name: "getModifyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_GetModifyDBClusterParameterGroup_608754, base: "/",
    url: url_GetModifyDBClusterParameterGroup_608755,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterSnapshotAttribute_608807 = ref object of OpenApiRestCall_604389
proc url_PostModifyDBClusterSnapshotAttribute_608809(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterSnapshotAttribute_608808(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608810 = query.getOrDefault("Action")
  valid_608810 = validateParameter(valid_608810, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_608810 != nil:
    section.add "Action", valid_608810
  var valid_608811 = query.getOrDefault("Version")
  valid_608811 = validateParameter(valid_608811, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608811 != nil:
    section.add "Version", valid_608811
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608812 = header.getOrDefault("X-Amz-Signature")
  valid_608812 = validateParameter(valid_608812, JString, required = false,
                                 default = nil)
  if valid_608812 != nil:
    section.add "X-Amz-Signature", valid_608812
  var valid_608813 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608813 = validateParameter(valid_608813, JString, required = false,
                                 default = nil)
  if valid_608813 != nil:
    section.add "X-Amz-Content-Sha256", valid_608813
  var valid_608814 = header.getOrDefault("X-Amz-Date")
  valid_608814 = validateParameter(valid_608814, JString, required = false,
                                 default = nil)
  if valid_608814 != nil:
    section.add "X-Amz-Date", valid_608814
  var valid_608815 = header.getOrDefault("X-Amz-Credential")
  valid_608815 = validateParameter(valid_608815, JString, required = false,
                                 default = nil)
  if valid_608815 != nil:
    section.add "X-Amz-Credential", valid_608815
  var valid_608816 = header.getOrDefault("X-Amz-Security-Token")
  valid_608816 = validateParameter(valid_608816, JString, required = false,
                                 default = nil)
  if valid_608816 != nil:
    section.add "X-Amz-Security-Token", valid_608816
  var valid_608817 = header.getOrDefault("X-Amz-Algorithm")
  valid_608817 = validateParameter(valid_608817, JString, required = false,
                                 default = nil)
  if valid_608817 != nil:
    section.add "X-Amz-Algorithm", valid_608817
  var valid_608818 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608818 = validateParameter(valid_608818, JString, required = false,
                                 default = nil)
  if valid_608818 != nil:
    section.add "X-Amz-SignedHeaders", valid_608818
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_608819 = formData.getOrDefault("AttributeName")
  valid_608819 = validateParameter(valid_608819, JString, required = true,
                                 default = nil)
  if valid_608819 != nil:
    section.add "AttributeName", valid_608819
  var valid_608820 = formData.getOrDefault("ValuesToAdd")
  valid_608820 = validateParameter(valid_608820, JArray, required = false,
                                 default = nil)
  if valid_608820 != nil:
    section.add "ValuesToAdd", valid_608820
  var valid_608821 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_608821 = validateParameter(valid_608821, JString, required = true,
                                 default = nil)
  if valid_608821 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_608821
  var valid_608822 = formData.getOrDefault("ValuesToRemove")
  valid_608822 = validateParameter(valid_608822, JArray, required = false,
                                 default = nil)
  if valid_608822 != nil:
    section.add "ValuesToRemove", valid_608822
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608823: Call_PostModifyDBClusterSnapshotAttribute_608807;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608823.validator(path, query, header, formData, body)
  let scheme = call_608823.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608823.url(scheme.get, call_608823.host, call_608823.base,
                         call_608823.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608823, url, valid)

proc call*(call_608824: Call_PostModifyDBClusterSnapshotAttribute_608807;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: string (required)
  var query_608825 = newJObject()
  var formData_608826 = newJObject()
  add(formData_608826, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    formData_608826.add "ValuesToAdd", ValuesToAdd
  add(formData_608826, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_608825, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_608826.add "ValuesToRemove", ValuesToRemove
  add(query_608825, "Version", newJString(Version))
  result = call_608824.call(nil, query_608825, nil, formData_608826, nil)

var postModifyDBClusterSnapshotAttribute* = Call_PostModifyDBClusterSnapshotAttribute_608807(
    name: "postModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_PostModifyDBClusterSnapshotAttribute_608808, base: "/",
    url: url_PostModifyDBClusterSnapshotAttribute_608809,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterSnapshotAttribute_608788 = ref object of OpenApiRestCall_604389
proc url_GetModifyDBClusterSnapshotAttribute_608790(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterSnapshotAttribute_608789(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: JString (required)
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_608791 = query.getOrDefault("ValuesToRemove")
  valid_608791 = validateParameter(valid_608791, JArray, required = false,
                                 default = nil)
  if valid_608791 != nil:
    section.add "ValuesToRemove", valid_608791
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_608792 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_608792 = validateParameter(valid_608792, JString, required = true,
                                 default = nil)
  if valid_608792 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_608792
  var valid_608793 = query.getOrDefault("Action")
  valid_608793 = validateParameter(valid_608793, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_608793 != nil:
    section.add "Action", valid_608793
  var valid_608794 = query.getOrDefault("AttributeName")
  valid_608794 = validateParameter(valid_608794, JString, required = true,
                                 default = nil)
  if valid_608794 != nil:
    section.add "AttributeName", valid_608794
  var valid_608795 = query.getOrDefault("ValuesToAdd")
  valid_608795 = validateParameter(valid_608795, JArray, required = false,
                                 default = nil)
  if valid_608795 != nil:
    section.add "ValuesToAdd", valid_608795
  var valid_608796 = query.getOrDefault("Version")
  valid_608796 = validateParameter(valid_608796, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608796 != nil:
    section.add "Version", valid_608796
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608797 = header.getOrDefault("X-Amz-Signature")
  valid_608797 = validateParameter(valid_608797, JString, required = false,
                                 default = nil)
  if valid_608797 != nil:
    section.add "X-Amz-Signature", valid_608797
  var valid_608798 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608798 = validateParameter(valid_608798, JString, required = false,
                                 default = nil)
  if valid_608798 != nil:
    section.add "X-Amz-Content-Sha256", valid_608798
  var valid_608799 = header.getOrDefault("X-Amz-Date")
  valid_608799 = validateParameter(valid_608799, JString, required = false,
                                 default = nil)
  if valid_608799 != nil:
    section.add "X-Amz-Date", valid_608799
  var valid_608800 = header.getOrDefault("X-Amz-Credential")
  valid_608800 = validateParameter(valid_608800, JString, required = false,
                                 default = nil)
  if valid_608800 != nil:
    section.add "X-Amz-Credential", valid_608800
  var valid_608801 = header.getOrDefault("X-Amz-Security-Token")
  valid_608801 = validateParameter(valid_608801, JString, required = false,
                                 default = nil)
  if valid_608801 != nil:
    section.add "X-Amz-Security-Token", valid_608801
  var valid_608802 = header.getOrDefault("X-Amz-Algorithm")
  valid_608802 = validateParameter(valid_608802, JString, required = false,
                                 default = nil)
  if valid_608802 != nil:
    section.add "X-Amz-Algorithm", valid_608802
  var valid_608803 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608803 = validateParameter(valid_608803, JString, required = false,
                                 default = nil)
  if valid_608803 != nil:
    section.add "X-Amz-SignedHeaders", valid_608803
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608804: Call_GetModifyDBClusterSnapshotAttribute_608788;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_608804.validator(path, query, header, formData, body)
  let scheme = call_608804.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608804.url(scheme.get, call_608804.host, call_608804.base,
                         call_608804.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608804, url, valid)

proc call*(call_608805: Call_GetModifyDBClusterSnapshotAttribute_608788;
          DBClusterSnapshotIdentifier: string; AttributeName: string;
          ValuesToRemove: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToAdd: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_608806 = newJObject()
  if ValuesToRemove != nil:
    query_608806.add "ValuesToRemove", ValuesToRemove
  add(query_608806, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_608806, "Action", newJString(Action))
  add(query_608806, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    query_608806.add "ValuesToAdd", ValuesToAdd
  add(query_608806, "Version", newJString(Version))
  result = call_608805.call(nil, query_608806, nil, nil, nil)

var getModifyDBClusterSnapshotAttribute* = Call_GetModifyDBClusterSnapshotAttribute_608788(
    name: "getModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_GetModifyDBClusterSnapshotAttribute_608789, base: "/",
    url: url_GetModifyDBClusterSnapshotAttribute_608790,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBInstance_608885 = ref object of OpenApiRestCall_604389
proc url_PostModifyDBInstance_608887(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBInstance_608886(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608888 = query.getOrDefault("Action")
  valid_608888 = validateParameter(valid_608888, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_608888 != nil:
    section.add "Action", valid_608888
  var valid_608889 = query.getOrDefault("Version")
  valid_608889 = validateParameter(valid_608889, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608889 != nil:
    section.add "Version", valid_608889
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_608890 = header.getOrDefault("X-Amz-Security-Token")
  valid_608890 = validateParameter(valid_608890, JString, required = false,
                                 default = nil)
  if valid_608890 != nil:
    section.add "X-Amz-Security-Token", valid_608890
  var valid_608891 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608891 = validateParameter(valid_608891, JString, required = false,
                                 default = nil)
  if valid_608891 != nil:
    section.add "X-Amz-SignedHeaders", valid_608891
  var valid_608892 = header.getOrDefault("X-Amz-Signature")
  valid_608892 = validateParameter(valid_608892, JString, required = false,
                                 default = nil)
  if valid_608892 != nil:
    section.add "X-Amz-Signature", valid_608892
  var valid_608893 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608893 = validateParameter(valid_608893, JString, required = false,
                                 default = nil)
  if valid_608893 != nil:
    section.add "X-Amz-Content-Sha256", valid_608893
  var valid_608894 = header.getOrDefault("X-Amz-Date")
  valid_608894 = validateParameter(valid_608894, JString, required = false,
                                 default = nil)
  if valid_608894 != nil:
    section.add "X-Amz-Date", valid_608894
  var valid_608895 = header.getOrDefault("X-Amz-Credential")
  valid_608895 = validateParameter(valid_608895, JString, required = false,
                                 default = nil)
  if valid_608895 != nil:
    section.add "X-Amz-Credential", valid_608895
  var valid_608896 = header.getOrDefault("X-Amz-Algorithm")
  valid_608896 = validateParameter(valid_608896, JString, required = false,
                                 default = nil)
  if valid_608896 != nil:
    section.add "X-Amz-Algorithm", valid_608896
  result.add "header", section
  ## parameters in `formData` object:
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   CertificateRotationRestart: JBool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: JString
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  section = newJObject()
  var valid_608897 = formData.getOrDefault("PromotionTier")
  valid_608897 = validateParameter(valid_608897, JInt, required = false, default = nil)
  if valid_608897 != nil:
    section.add "PromotionTier", valid_608897
  var valid_608898 = formData.getOrDefault("MultiAZ")
  valid_608898 = validateParameter(valid_608898, JBool, required = false, default = nil)
  if valid_608898 != nil:
    section.add "MultiAZ", valid_608898
  var valid_608899 = formData.getOrDefault("MonitoringRoleArn")
  valid_608899 = validateParameter(valid_608899, JString, required = false,
                                 default = nil)
  if valid_608899 != nil:
    section.add "MonitoringRoleArn", valid_608899
  var valid_608900 = formData.getOrDefault("CACertificateIdentifier")
  valid_608900 = validateParameter(valid_608900, JString, required = false,
                                 default = nil)
  if valid_608900 != nil:
    section.add "CACertificateIdentifier", valid_608900
  var valid_608901 = formData.getOrDefault("MonitoringInterval")
  valid_608901 = validateParameter(valid_608901, JInt, required = false, default = nil)
  if valid_608901 != nil:
    section.add "MonitoringInterval", valid_608901
  var valid_608902 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_608902 = validateParameter(valid_608902, JArray, required = false,
                                 default = nil)
  if valid_608902 != nil:
    section.add "VpcSecurityGroupIds", valid_608902
  var valid_608903 = formData.getOrDefault("EnablePerformanceInsights")
  valid_608903 = validateParameter(valid_608903, JBool, required = false, default = nil)
  if valid_608903 != nil:
    section.add "EnablePerformanceInsights", valid_608903
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_608904 = formData.getOrDefault("DBInstanceIdentifier")
  valid_608904 = validateParameter(valid_608904, JString, required = true,
                                 default = nil)
  if valid_608904 != nil:
    section.add "DBInstanceIdentifier", valid_608904
  var valid_608905 = formData.getOrDefault("TdeCredentialArn")
  valid_608905 = validateParameter(valid_608905, JString, required = false,
                                 default = nil)
  if valid_608905 != nil:
    section.add "TdeCredentialArn", valid_608905
  var valid_608906 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_608906 = validateParameter(valid_608906, JInt, required = false, default = nil)
  if valid_608906 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_608906
  var valid_608907 = formData.getOrDefault("DBSubnetGroupName")
  valid_608907 = validateParameter(valid_608907, JString, required = false,
                                 default = nil)
  if valid_608907 != nil:
    section.add "DBSubnetGroupName", valid_608907
  var valid_608908 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_608908 = validateParameter(valid_608908, JBool, required = false, default = nil)
  if valid_608908 != nil:
    section.add "AllowMajorVersionUpgrade", valid_608908
  var valid_608909 = formData.getOrDefault("CertificateRotationRestart")
  valid_608909 = validateParameter(valid_608909, JBool, required = false, default = nil)
  if valid_608909 != nil:
    section.add "CertificateRotationRestart", valid_608909
  var valid_608910 = formData.getOrDefault("StorageType")
  valid_608910 = validateParameter(valid_608910, JString, required = false,
                                 default = nil)
  if valid_608910 != nil:
    section.add "StorageType", valid_608910
  var valid_608911 = formData.getOrDefault("MaxAllocatedStorage")
  valid_608911 = validateParameter(valid_608911, JInt, required = false, default = nil)
  if valid_608911 != nil:
    section.add "MaxAllocatedStorage", valid_608911
  var valid_608912 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_608912 = validateParameter(valid_608912, JBool, required = false, default = nil)
  if valid_608912 != nil:
    section.add "CopyTagsToSnapshot", valid_608912
  var valid_608913 = formData.getOrDefault("DeletionProtection")
  valid_608913 = validateParameter(valid_608913, JBool, required = false, default = nil)
  if valid_608913 != nil:
    section.add "DeletionProtection", valid_608913
  var valid_608914 = formData.getOrDefault("ProcessorFeatures")
  valid_608914 = validateParameter(valid_608914, JArray, required = false,
                                 default = nil)
  if valid_608914 != nil:
    section.add "ProcessorFeatures", valid_608914
  var valid_608915 = formData.getOrDefault("AllocatedStorage")
  valid_608915 = validateParameter(valid_608915, JInt, required = false, default = nil)
  if valid_608915 != nil:
    section.add "AllocatedStorage", valid_608915
  var valid_608916 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_608916 = validateParameter(valid_608916, JString, required = false,
                                 default = nil)
  if valid_608916 != nil:
    section.add "PreferredMaintenanceWindow", valid_608916
  var valid_608917 = formData.getOrDefault("DBInstanceClass")
  valid_608917 = validateParameter(valid_608917, JString, required = false,
                                 default = nil)
  if valid_608917 != nil:
    section.add "DBInstanceClass", valid_608917
  var valid_608918 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_608918 = validateParameter(valid_608918, JBool, required = false, default = nil)
  if valid_608918 != nil:
    section.add "UseDefaultProcessorFeatures", valid_608918
  var valid_608919 = formData.getOrDefault("PreferredBackupWindow")
  valid_608919 = validateParameter(valid_608919, JString, required = false,
                                 default = nil)
  if valid_608919 != nil:
    section.add "PreferredBackupWindow", valid_608919
  var valid_608920 = formData.getOrDefault("MasterUserPassword")
  valid_608920 = validateParameter(valid_608920, JString, required = false,
                                 default = nil)
  if valid_608920 != nil:
    section.add "MasterUserPassword", valid_608920
  var valid_608921 = formData.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_608921 = validateParameter(valid_608921, JArray, required = false,
                                 default = nil)
  if valid_608921 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_608921
  var valid_608922 = formData.getOrDefault("Domain")
  valid_608922 = validateParameter(valid_608922, JString, required = false,
                                 default = nil)
  if valid_608922 != nil:
    section.add "Domain", valid_608922
  var valid_608923 = formData.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_608923 = validateParameter(valid_608923, JArray, required = false,
                                 default = nil)
  if valid_608923 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_608923
  var valid_608924 = formData.getOrDefault("DBParameterGroupName")
  valid_608924 = validateParameter(valid_608924, JString, required = false,
                                 default = nil)
  if valid_608924 != nil:
    section.add "DBParameterGroupName", valid_608924
  var valid_608925 = formData.getOrDefault("EngineVersion")
  valid_608925 = validateParameter(valid_608925, JString, required = false,
                                 default = nil)
  if valid_608925 != nil:
    section.add "EngineVersion", valid_608925
  var valid_608926 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_608926 = validateParameter(valid_608926, JBool, required = false, default = nil)
  if valid_608926 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_608926
  var valid_608927 = formData.getOrDefault("BackupRetentionPeriod")
  valid_608927 = validateParameter(valid_608927, JInt, required = false, default = nil)
  if valid_608927 != nil:
    section.add "BackupRetentionPeriod", valid_608927
  var valid_608928 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_608928 = validateParameter(valid_608928, JBool, required = false, default = nil)
  if valid_608928 != nil:
    section.add "AutoMinorVersionUpgrade", valid_608928
  var valid_608929 = formData.getOrDefault("TdeCredentialPassword")
  valid_608929 = validateParameter(valid_608929, JString, required = false,
                                 default = nil)
  if valid_608929 != nil:
    section.add "TdeCredentialPassword", valid_608929
  var valid_608930 = formData.getOrDefault("ApplyImmediately")
  valid_608930 = validateParameter(valid_608930, JBool, required = false, default = nil)
  if valid_608930 != nil:
    section.add "ApplyImmediately", valid_608930
  var valid_608931 = formData.getOrDefault("Iops")
  valid_608931 = validateParameter(valid_608931, JInt, required = false, default = nil)
  if valid_608931 != nil:
    section.add "Iops", valid_608931
  var valid_608932 = formData.getOrDefault("PubliclyAccessible")
  valid_608932 = validateParameter(valid_608932, JBool, required = false, default = nil)
  if valid_608932 != nil:
    section.add "PubliclyAccessible", valid_608932
  var valid_608933 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_608933 = validateParameter(valid_608933, JString, required = false,
                                 default = nil)
  if valid_608933 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_608933
  var valid_608934 = formData.getOrDefault("LicenseModel")
  valid_608934 = validateParameter(valid_608934, JString, required = false,
                                 default = nil)
  if valid_608934 != nil:
    section.add "LicenseModel", valid_608934
  var valid_608935 = formData.getOrDefault("DomainIAMRoleName")
  valid_608935 = validateParameter(valid_608935, JString, required = false,
                                 default = nil)
  if valid_608935 != nil:
    section.add "DomainIAMRoleName", valid_608935
  var valid_608936 = formData.getOrDefault("OptionGroupName")
  valid_608936 = validateParameter(valid_608936, JString, required = false,
                                 default = nil)
  if valid_608936 != nil:
    section.add "OptionGroupName", valid_608936
  var valid_608937 = formData.getOrDefault("NewDBInstanceIdentifier")
  valid_608937 = validateParameter(valid_608937, JString, required = false,
                                 default = nil)
  if valid_608937 != nil:
    section.add "NewDBInstanceIdentifier", valid_608937
  var valid_608938 = formData.getOrDefault("DBSecurityGroups")
  valid_608938 = validateParameter(valid_608938, JArray, required = false,
                                 default = nil)
  if valid_608938 != nil:
    section.add "DBSecurityGroups", valid_608938
  var valid_608939 = formData.getOrDefault("DBPortNumber")
  valid_608939 = validateParameter(valid_608939, JInt, required = false, default = nil)
  if valid_608939 != nil:
    section.add "DBPortNumber", valid_608939
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608940: Call_PostModifyDBInstance_608885; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_608940.validator(path, query, header, formData, body)
  let scheme = call_608940.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608940.url(scheme.get, call_608940.host, call_608940.base,
                         call_608940.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608940, url, valid)

proc call*(call_608941: Call_PostModifyDBInstance_608885;
          DBInstanceIdentifier: string; PromotionTier: int = 0; MultiAZ: bool = false;
          MonitoringRoleArn: string = ""; CACertificateIdentifier: string = "";
          MonitoringInterval: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          EnablePerformanceInsights: bool = false; TdeCredentialArn: string = "";
          Action: string = "ModifyDBInstance";
          PerformanceInsightsRetentionPeriod: int = 0;
          DBSubnetGroupName: string = ""; AllowMajorVersionUpgrade: bool = false;
          CertificateRotationRestart: bool = false; StorageType: string = "";
          MaxAllocatedStorage: int = 0; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil;
          AllocatedStorage: int = 0; PreferredMaintenanceWindow: string = "";
          DBInstanceClass: string = ""; UseDefaultProcessorFeatures: bool = false;
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          Domain: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          DBParameterGroupName: string = ""; EngineVersion: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; AutoMinorVersionUpgrade: bool = false;
          TdeCredentialPassword: string = ""; ApplyImmediately: bool = false;
          Iops: int = 0; PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          DomainIAMRoleName: string = ""; OptionGroupName: string = "";
          NewDBInstanceIdentifier: string = ""; Version: string = "2014-10-31";
          DBSecurityGroups: JsonNode = nil; DBPortNumber: int = 0): Recallable =
  ## postModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   Action: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   CertificateRotationRestart: bool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: string
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  var query_608942 = newJObject()
  var formData_608943 = newJObject()
  add(formData_608943, "PromotionTier", newJInt(PromotionTier))
  add(formData_608943, "MultiAZ", newJBool(MultiAZ))
  add(formData_608943, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_608943, "CACertificateIdentifier",
      newJString(CACertificateIdentifier))
  add(formData_608943, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_608943.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_608943, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_608943, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_608943, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_608942, "Action", newJString(Action))
  add(formData_608943, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_608943, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_608943, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_608943, "CertificateRotationRestart",
      newJBool(CertificateRotationRestart))
  add(formData_608943, "StorageType", newJString(StorageType))
  add(formData_608943, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(formData_608943, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_608943, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_608943.add "ProcessorFeatures", ProcessorFeatures
  add(formData_608943, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_608943, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_608943, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_608943, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_608943, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_608943, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_608943.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                       CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_608943, "Domain", newJString(Domain))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_608943.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                       CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_608943, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_608943, "EngineVersion", newJString(EngineVersion))
  add(formData_608943, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_608943, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_608943, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_608943, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_608943, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_608943, "Iops", newJInt(Iops))
  add(formData_608943, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_608943, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_608943, "LicenseModel", newJString(LicenseModel))
  add(formData_608943, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_608943, "OptionGroupName", newJString(OptionGroupName))
  add(formData_608943, "NewDBInstanceIdentifier",
      newJString(NewDBInstanceIdentifier))
  add(query_608942, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_608943.add "DBSecurityGroups", DBSecurityGroups
  add(formData_608943, "DBPortNumber", newJInt(DBPortNumber))
  result = call_608941.call(nil, query_608942, nil, formData_608943, nil)

var postModifyDBInstance* = Call_PostModifyDBInstance_608885(
    name: "postModifyDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_PostModifyDBInstance_608886, base: "/",
    url: url_PostModifyDBInstance_608887, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBInstance_608827 = ref object of OpenApiRestCall_604389
proc url_GetModifyDBInstance_608829(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBInstance_608828(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   Action: JString (required)
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CertificateRotationRestart: JBool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   LicenseModel: JString
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   Version: JString (required)
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   DomainIAMRoleName: JString
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  section = newJObject()
  var valid_608830 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_608830 = validateParameter(valid_608830, JBool, required = false, default = nil)
  if valid_608830 != nil:
    section.add "UseDefaultProcessorFeatures", valid_608830
  var valid_608831 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_608831 = validateParameter(valid_608831, JInt, required = false, default = nil)
  if valid_608831 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_608831
  var valid_608832 = query.getOrDefault("CopyTagsToSnapshot")
  valid_608832 = validateParameter(valid_608832, JBool, required = false, default = nil)
  if valid_608832 != nil:
    section.add "CopyTagsToSnapshot", valid_608832
  var valid_608833 = query.getOrDefault("MonitoringInterval")
  valid_608833 = validateParameter(valid_608833, JInt, required = false, default = nil)
  if valid_608833 != nil:
    section.add "MonitoringInterval", valid_608833
  var valid_608834 = query.getOrDefault("MonitoringRoleArn")
  valid_608834 = validateParameter(valid_608834, JString, required = false,
                                 default = nil)
  if valid_608834 != nil:
    section.add "MonitoringRoleArn", valid_608834
  var valid_608835 = query.getOrDefault("DBPortNumber")
  valid_608835 = validateParameter(valid_608835, JInt, required = false, default = nil)
  if valid_608835 != nil:
    section.add "DBPortNumber", valid_608835
  var valid_608836 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_608836 = validateParameter(valid_608836, JArray, required = false,
                                 default = nil)
  if valid_608836 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_608836
  var valid_608837 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_608837 = validateParameter(valid_608837, JArray, required = false,
                                 default = nil)
  if valid_608837 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_608837
  var valid_608838 = query.getOrDefault("ProcessorFeatures")
  valid_608838 = validateParameter(valid_608838, JArray, required = false,
                                 default = nil)
  if valid_608838 != nil:
    section.add "ProcessorFeatures", valid_608838
  var valid_608839 = query.getOrDefault("BackupRetentionPeriod")
  valid_608839 = validateParameter(valid_608839, JInt, required = false, default = nil)
  if valid_608839 != nil:
    section.add "BackupRetentionPeriod", valid_608839
  var valid_608840 = query.getOrDefault("EngineVersion")
  valid_608840 = validateParameter(valid_608840, JString, required = false,
                                 default = nil)
  if valid_608840 != nil:
    section.add "EngineVersion", valid_608840
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608841 = query.getOrDefault("Action")
  valid_608841 = validateParameter(valid_608841, JString, required = true,
                                 default = newJString("ModifyDBInstance"))
  if valid_608841 != nil:
    section.add "Action", valid_608841
  var valid_608842 = query.getOrDefault("Domain")
  valid_608842 = validateParameter(valid_608842, JString, required = false,
                                 default = nil)
  if valid_608842 != nil:
    section.add "Domain", valid_608842
  var valid_608843 = query.getOrDefault("VpcSecurityGroupIds")
  valid_608843 = validateParameter(valid_608843, JArray, required = false,
                                 default = nil)
  if valid_608843 != nil:
    section.add "VpcSecurityGroupIds", valid_608843
  var valid_608844 = query.getOrDefault("AllocatedStorage")
  valid_608844 = validateParameter(valid_608844, JInt, required = false, default = nil)
  if valid_608844 != nil:
    section.add "AllocatedStorage", valid_608844
  var valid_608845 = query.getOrDefault("EnablePerformanceInsights")
  valid_608845 = validateParameter(valid_608845, JBool, required = false, default = nil)
  if valid_608845 != nil:
    section.add "EnablePerformanceInsights", valid_608845
  var valid_608846 = query.getOrDefault("PubliclyAccessible")
  valid_608846 = validateParameter(valid_608846, JBool, required = false, default = nil)
  if valid_608846 != nil:
    section.add "PubliclyAccessible", valid_608846
  var valid_608847 = query.getOrDefault("NewDBInstanceIdentifier")
  valid_608847 = validateParameter(valid_608847, JString, required = false,
                                 default = nil)
  if valid_608847 != nil:
    section.add "NewDBInstanceIdentifier", valid_608847
  var valid_608848 = query.getOrDefault("TdeCredentialPassword")
  valid_608848 = validateParameter(valid_608848, JString, required = false,
                                 default = nil)
  if valid_608848 != nil:
    section.add "TdeCredentialPassword", valid_608848
  var valid_608849 = query.getOrDefault("DeletionProtection")
  valid_608849 = validateParameter(valid_608849, JBool, required = false, default = nil)
  if valid_608849 != nil:
    section.add "DeletionProtection", valid_608849
  var valid_608850 = query.getOrDefault("DBParameterGroupName")
  valid_608850 = validateParameter(valid_608850, JString, required = false,
                                 default = nil)
  if valid_608850 != nil:
    section.add "DBParameterGroupName", valid_608850
  var valid_608851 = query.getOrDefault("MaxAllocatedStorage")
  valid_608851 = validateParameter(valid_608851, JInt, required = false, default = nil)
  if valid_608851 != nil:
    section.add "MaxAllocatedStorage", valid_608851
  var valid_608852 = query.getOrDefault("CertificateRotationRestart")
  valid_608852 = validateParameter(valid_608852, JBool, required = false, default = nil)
  if valid_608852 != nil:
    section.add "CertificateRotationRestart", valid_608852
  var valid_608853 = query.getOrDefault("LicenseModel")
  valid_608853 = validateParameter(valid_608853, JString, required = false,
                                 default = nil)
  if valid_608853 != nil:
    section.add "LicenseModel", valid_608853
  var valid_608854 = query.getOrDefault("DBInstanceIdentifier")
  valid_608854 = validateParameter(valid_608854, JString, required = true,
                                 default = nil)
  if valid_608854 != nil:
    section.add "DBInstanceIdentifier", valid_608854
  var valid_608855 = query.getOrDefault("TdeCredentialArn")
  valid_608855 = validateParameter(valid_608855, JString, required = false,
                                 default = nil)
  if valid_608855 != nil:
    section.add "TdeCredentialArn", valid_608855
  var valid_608856 = query.getOrDefault("PromotionTier")
  valid_608856 = validateParameter(valid_608856, JInt, required = false, default = nil)
  if valid_608856 != nil:
    section.add "PromotionTier", valid_608856
  var valid_608857 = query.getOrDefault("CACertificateIdentifier")
  valid_608857 = validateParameter(valid_608857, JString, required = false,
                                 default = nil)
  if valid_608857 != nil:
    section.add "CACertificateIdentifier", valid_608857
  var valid_608858 = query.getOrDefault("StorageType")
  valid_608858 = validateParameter(valid_608858, JString, required = false,
                                 default = nil)
  if valid_608858 != nil:
    section.add "StorageType", valid_608858
  var valid_608859 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_608859 = validateParameter(valid_608859, JBool, required = false, default = nil)
  if valid_608859 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_608859
  var valid_608860 = query.getOrDefault("MultiAZ")
  valid_608860 = validateParameter(valid_608860, JBool, required = false, default = nil)
  if valid_608860 != nil:
    section.add "MultiAZ", valid_608860
  var valid_608861 = query.getOrDefault("DBSecurityGroups")
  valid_608861 = validateParameter(valid_608861, JArray, required = false,
                                 default = nil)
  if valid_608861 != nil:
    section.add "DBSecurityGroups", valid_608861
  var valid_608862 = query.getOrDefault("ApplyImmediately")
  valid_608862 = validateParameter(valid_608862, JBool, required = false, default = nil)
  if valid_608862 != nil:
    section.add "ApplyImmediately", valid_608862
  var valid_608863 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_608863 = validateParameter(valid_608863, JBool, required = false, default = nil)
  if valid_608863 != nil:
    section.add "AllowMajorVersionUpgrade", valid_608863
  var valid_608864 = query.getOrDefault("MasterUserPassword")
  valid_608864 = validateParameter(valid_608864, JString, required = false,
                                 default = nil)
  if valid_608864 != nil:
    section.add "MasterUserPassword", valid_608864
  var valid_608865 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_608865 = validateParameter(valid_608865, JString, required = false,
                                 default = nil)
  if valid_608865 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_608865
  var valid_608866 = query.getOrDefault("OptionGroupName")
  valid_608866 = validateParameter(valid_608866, JString, required = false,
                                 default = nil)
  if valid_608866 != nil:
    section.add "OptionGroupName", valid_608866
  var valid_608867 = query.getOrDefault("DBSubnetGroupName")
  valid_608867 = validateParameter(valid_608867, JString, required = false,
                                 default = nil)
  if valid_608867 != nil:
    section.add "DBSubnetGroupName", valid_608867
  var valid_608868 = query.getOrDefault("PreferredBackupWindow")
  valid_608868 = validateParameter(valid_608868, JString, required = false,
                                 default = nil)
  if valid_608868 != nil:
    section.add "PreferredBackupWindow", valid_608868
  var valid_608869 = query.getOrDefault("DBInstanceClass")
  valid_608869 = validateParameter(valid_608869, JString, required = false,
                                 default = nil)
  if valid_608869 != nil:
    section.add "DBInstanceClass", valid_608869
  var valid_608870 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_608870 = validateParameter(valid_608870, JString, required = false,
                                 default = nil)
  if valid_608870 != nil:
    section.add "PreferredMaintenanceWindow", valid_608870
  var valid_608871 = query.getOrDefault("Version")
  valid_608871 = validateParameter(valid_608871, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608871 != nil:
    section.add "Version", valid_608871
  var valid_608872 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_608872 = validateParameter(valid_608872, JBool, required = false, default = nil)
  if valid_608872 != nil:
    section.add "AutoMinorVersionUpgrade", valid_608872
  var valid_608873 = query.getOrDefault("Iops")
  valid_608873 = validateParameter(valid_608873, JInt, required = false, default = nil)
  if valid_608873 != nil:
    section.add "Iops", valid_608873
  var valid_608874 = query.getOrDefault("DomainIAMRoleName")
  valid_608874 = validateParameter(valid_608874, JString, required = false,
                                 default = nil)
  if valid_608874 != nil:
    section.add "DomainIAMRoleName", valid_608874
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_608875 = header.getOrDefault("X-Amz-Security-Token")
  valid_608875 = validateParameter(valid_608875, JString, required = false,
                                 default = nil)
  if valid_608875 != nil:
    section.add "X-Amz-Security-Token", valid_608875
  var valid_608876 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608876 = validateParameter(valid_608876, JString, required = false,
                                 default = nil)
  if valid_608876 != nil:
    section.add "X-Amz-SignedHeaders", valid_608876
  var valid_608877 = header.getOrDefault("X-Amz-Signature")
  valid_608877 = validateParameter(valid_608877, JString, required = false,
                                 default = nil)
  if valid_608877 != nil:
    section.add "X-Amz-Signature", valid_608877
  var valid_608878 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608878 = validateParameter(valid_608878, JString, required = false,
                                 default = nil)
  if valid_608878 != nil:
    section.add "X-Amz-Content-Sha256", valid_608878
  var valid_608879 = header.getOrDefault("X-Amz-Date")
  valid_608879 = validateParameter(valid_608879, JString, required = false,
                                 default = nil)
  if valid_608879 != nil:
    section.add "X-Amz-Date", valid_608879
  var valid_608880 = header.getOrDefault("X-Amz-Credential")
  valid_608880 = validateParameter(valid_608880, JString, required = false,
                                 default = nil)
  if valid_608880 != nil:
    section.add "X-Amz-Credential", valid_608880
  var valid_608881 = header.getOrDefault("X-Amz-Algorithm")
  valid_608881 = validateParameter(valid_608881, JString, required = false,
                                 default = nil)
  if valid_608881 != nil:
    section.add "X-Amz-Algorithm", valid_608881
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608882: Call_GetModifyDBInstance_608827; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_608882.validator(path, query, header, formData, body)
  let scheme = call_608882.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608882.url(scheme.get, call_608882.host, call_608882.base,
                         call_608882.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608882, url, valid)

proc call*(call_608883: Call_GetModifyDBInstance_608827;
          DBInstanceIdentifier: string; UseDefaultProcessorFeatures: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0;
          CopyTagsToSnapshot: bool = false; MonitoringInterval: int = 0;
          MonitoringRoleArn: string = ""; DBPortNumber: int = 0;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          ProcessorFeatures: JsonNode = nil; BackupRetentionPeriod: int = 0;
          EngineVersion: string = ""; Action: string = "ModifyDBInstance";
          Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AllocatedStorage: int = 0; EnablePerformanceInsights: bool = false;
          PubliclyAccessible: bool = false; NewDBInstanceIdentifier: string = "";
          TdeCredentialPassword: string = ""; DeletionProtection: bool = false;
          DBParameterGroupName: string = ""; MaxAllocatedStorage: int = 0;
          CertificateRotationRestart: bool = false; LicenseModel: string = "";
          TdeCredentialArn: string = ""; PromotionTier: int = 0;
          CACertificateIdentifier: string = ""; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false; MultiAZ: bool = false;
          DBSecurityGroups: JsonNode = nil; ApplyImmediately: bool = false;
          AllowMajorVersionUpgrade: bool = false; MasterUserPassword: string = "";
          PerformanceInsightsKMSKeyId: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          DBInstanceClass: string = ""; PreferredMaintenanceWindow: string = "";
          Version: string = "2014-10-31"; AutoMinorVersionUpgrade: bool = false;
          Iops: int = 0; DomainIAMRoleName: string = ""): Recallable =
  ## getModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   Action: string (required)
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   CertificateRotationRestart: bool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   LicenseModel: string
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   Version: string (required)
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   DomainIAMRoleName: string
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  var query_608884 = newJObject()
  add(query_608884, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_608884, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_608884, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_608884, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_608884, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_608884, "DBPortNumber", newJInt(DBPortNumber))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_608884.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                    CloudwatchLogsExportConfigurationEnableLogTypes
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_608884.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                    CloudwatchLogsExportConfigurationDisableLogTypes
  if ProcessorFeatures != nil:
    query_608884.add "ProcessorFeatures", ProcessorFeatures
  add(query_608884, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_608884, "EngineVersion", newJString(EngineVersion))
  add(query_608884, "Action", newJString(Action))
  add(query_608884, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_608884.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_608884, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_608884, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_608884, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_608884, "NewDBInstanceIdentifier", newJString(NewDBInstanceIdentifier))
  add(query_608884, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_608884, "DeletionProtection", newJBool(DeletionProtection))
  add(query_608884, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_608884, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(query_608884, "CertificateRotationRestart",
      newJBool(CertificateRotationRestart))
  add(query_608884, "LicenseModel", newJString(LicenseModel))
  add(query_608884, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_608884, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_608884, "PromotionTier", newJInt(PromotionTier))
  add(query_608884, "CACertificateIdentifier", newJString(CACertificateIdentifier))
  add(query_608884, "StorageType", newJString(StorageType))
  add(query_608884, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_608884, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_608884.add "DBSecurityGroups", DBSecurityGroups
  add(query_608884, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_608884, "AllowMajorVersionUpgrade", newJBool(AllowMajorVersionUpgrade))
  add(query_608884, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_608884, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_608884, "OptionGroupName", newJString(OptionGroupName))
  add(query_608884, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_608884, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_608884, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_608884, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_608884, "Version", newJString(Version))
  add(query_608884, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_608884, "Iops", newJInt(Iops))
  add(query_608884, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_608883.call(nil, query_608884, nil, nil, nil)

var getModifyDBInstance* = Call_GetModifyDBInstance_608827(
    name: "getModifyDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_GetModifyDBInstance_608828, base: "/",
    url: url_GetModifyDBInstance_608829, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBParameterGroup_608961 = ref object of OpenApiRestCall_604389
proc url_PostModifyDBParameterGroup_608963(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBParameterGroup_608962(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608964 = query.getOrDefault("Action")
  valid_608964 = validateParameter(valid_608964, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_608964 != nil:
    section.add "Action", valid_608964
  var valid_608965 = query.getOrDefault("Version")
  valid_608965 = validateParameter(valid_608965, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608965 != nil:
    section.add "Version", valid_608965
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608966 = header.getOrDefault("X-Amz-Signature")
  valid_608966 = validateParameter(valid_608966, JString, required = false,
                                 default = nil)
  if valid_608966 != nil:
    section.add "X-Amz-Signature", valid_608966
  var valid_608967 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608967 = validateParameter(valid_608967, JString, required = false,
                                 default = nil)
  if valid_608967 != nil:
    section.add "X-Amz-Content-Sha256", valid_608967
  var valid_608968 = header.getOrDefault("X-Amz-Date")
  valid_608968 = validateParameter(valid_608968, JString, required = false,
                                 default = nil)
  if valid_608968 != nil:
    section.add "X-Amz-Date", valid_608968
  var valid_608969 = header.getOrDefault("X-Amz-Credential")
  valid_608969 = validateParameter(valid_608969, JString, required = false,
                                 default = nil)
  if valid_608969 != nil:
    section.add "X-Amz-Credential", valid_608969
  var valid_608970 = header.getOrDefault("X-Amz-Security-Token")
  valid_608970 = validateParameter(valid_608970, JString, required = false,
                                 default = nil)
  if valid_608970 != nil:
    section.add "X-Amz-Security-Token", valid_608970
  var valid_608971 = header.getOrDefault("X-Amz-Algorithm")
  valid_608971 = validateParameter(valid_608971, JString, required = false,
                                 default = nil)
  if valid_608971 != nil:
    section.add "X-Amz-Algorithm", valid_608971
  var valid_608972 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608972 = validateParameter(valid_608972, JString, required = false,
                                 default = nil)
  if valid_608972 != nil:
    section.add "X-Amz-SignedHeaders", valid_608972
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_608973 = formData.getOrDefault("DBParameterGroupName")
  valid_608973 = validateParameter(valid_608973, JString, required = true,
                                 default = nil)
  if valid_608973 != nil:
    section.add "DBParameterGroupName", valid_608973
  var valid_608974 = formData.getOrDefault("Parameters")
  valid_608974 = validateParameter(valid_608974, JArray, required = true, default = nil)
  if valid_608974 != nil:
    section.add "Parameters", valid_608974
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608975: Call_PostModifyDBParameterGroup_608961; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_608975.validator(path, query, header, formData, body)
  let scheme = call_608975.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608975.url(scheme.get, call_608975.host, call_608975.base,
                         call_608975.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608975, url, valid)

proc call*(call_608976: Call_PostModifyDBParameterGroup_608961;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBParameterGroup
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Version: string (required)
  var query_608977 = newJObject()
  var formData_608978 = newJObject()
  add(formData_608978, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_608977, "Action", newJString(Action))
  if Parameters != nil:
    formData_608978.add "Parameters", Parameters
  add(query_608977, "Version", newJString(Version))
  result = call_608976.call(nil, query_608977, nil, formData_608978, nil)

var postModifyDBParameterGroup* = Call_PostModifyDBParameterGroup_608961(
    name: "postModifyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_PostModifyDBParameterGroup_608962, base: "/",
    url: url_PostModifyDBParameterGroup_608963,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBParameterGroup_608944 = ref object of OpenApiRestCall_604389
proc url_GetModifyDBParameterGroup_608946(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBParameterGroup_608945(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_608947 = query.getOrDefault("DBParameterGroupName")
  valid_608947 = validateParameter(valid_608947, JString, required = true,
                                 default = nil)
  if valid_608947 != nil:
    section.add "DBParameterGroupName", valid_608947
  var valid_608948 = query.getOrDefault("Parameters")
  valid_608948 = validateParameter(valid_608948, JArray, required = true, default = nil)
  if valid_608948 != nil:
    section.add "Parameters", valid_608948
  var valid_608949 = query.getOrDefault("Action")
  valid_608949 = validateParameter(valid_608949, JString, required = true,
                                 default = newJString("ModifyDBParameterGroup"))
  if valid_608949 != nil:
    section.add "Action", valid_608949
  var valid_608950 = query.getOrDefault("Version")
  valid_608950 = validateParameter(valid_608950, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608950 != nil:
    section.add "Version", valid_608950
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608951 = header.getOrDefault("X-Amz-Signature")
  valid_608951 = validateParameter(valid_608951, JString, required = false,
                                 default = nil)
  if valid_608951 != nil:
    section.add "X-Amz-Signature", valid_608951
  var valid_608952 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608952 = validateParameter(valid_608952, JString, required = false,
                                 default = nil)
  if valid_608952 != nil:
    section.add "X-Amz-Content-Sha256", valid_608952
  var valid_608953 = header.getOrDefault("X-Amz-Date")
  valid_608953 = validateParameter(valid_608953, JString, required = false,
                                 default = nil)
  if valid_608953 != nil:
    section.add "X-Amz-Date", valid_608953
  var valid_608954 = header.getOrDefault("X-Amz-Credential")
  valid_608954 = validateParameter(valid_608954, JString, required = false,
                                 default = nil)
  if valid_608954 != nil:
    section.add "X-Amz-Credential", valid_608954
  var valid_608955 = header.getOrDefault("X-Amz-Security-Token")
  valid_608955 = validateParameter(valid_608955, JString, required = false,
                                 default = nil)
  if valid_608955 != nil:
    section.add "X-Amz-Security-Token", valid_608955
  var valid_608956 = header.getOrDefault("X-Amz-Algorithm")
  valid_608956 = validateParameter(valid_608956, JString, required = false,
                                 default = nil)
  if valid_608956 != nil:
    section.add "X-Amz-Algorithm", valid_608956
  var valid_608957 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608957 = validateParameter(valid_608957, JString, required = false,
                                 default = nil)
  if valid_608957 != nil:
    section.add "X-Amz-SignedHeaders", valid_608957
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608958: Call_GetModifyDBParameterGroup_608944; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_608958.validator(path, query, header, formData, body)
  let scheme = call_608958.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608958.url(scheme.get, call_608958.host, call_608958.base,
                         call_608958.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608958, url, valid)

proc call*(call_608959: Call_GetModifyDBParameterGroup_608944;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBParameterGroup
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_608960 = newJObject()
  add(query_608960, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_608960.add "Parameters", Parameters
  add(query_608960, "Action", newJString(Action))
  add(query_608960, "Version", newJString(Version))
  result = call_608959.call(nil, query_608960, nil, nil, nil)

var getModifyDBParameterGroup* = Call_GetModifyDBParameterGroup_608944(
    name: "getModifyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_GetModifyDBParameterGroup_608945, base: "/",
    url: url_GetModifyDBParameterGroup_608946,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBProxy_609002 = ref object of OpenApiRestCall_604389
proc url_PostModifyDBProxy_609004(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBProxy_609003(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609005 = query.getOrDefault("Action")
  valid_609005 = validateParameter(valid_609005, JString, required = true,
                                 default = newJString("ModifyDBProxy"))
  if valid_609005 != nil:
    section.add "Action", valid_609005
  var valid_609006 = query.getOrDefault("Version")
  valid_609006 = validateParameter(valid_609006, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609006 != nil:
    section.add "Version", valid_609006
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609007 = header.getOrDefault("X-Amz-Signature")
  valid_609007 = validateParameter(valid_609007, JString, required = false,
                                 default = nil)
  if valid_609007 != nil:
    section.add "X-Amz-Signature", valid_609007
  var valid_609008 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609008 = validateParameter(valid_609008, JString, required = false,
                                 default = nil)
  if valid_609008 != nil:
    section.add "X-Amz-Content-Sha256", valid_609008
  var valid_609009 = header.getOrDefault("X-Amz-Date")
  valid_609009 = validateParameter(valid_609009, JString, required = false,
                                 default = nil)
  if valid_609009 != nil:
    section.add "X-Amz-Date", valid_609009
  var valid_609010 = header.getOrDefault("X-Amz-Credential")
  valid_609010 = validateParameter(valid_609010, JString, required = false,
                                 default = nil)
  if valid_609010 != nil:
    section.add "X-Amz-Credential", valid_609010
  var valid_609011 = header.getOrDefault("X-Amz-Security-Token")
  valid_609011 = validateParameter(valid_609011, JString, required = false,
                                 default = nil)
  if valid_609011 != nil:
    section.add "X-Amz-Security-Token", valid_609011
  var valid_609012 = header.getOrDefault("X-Amz-Algorithm")
  valid_609012 = validateParameter(valid_609012, JString, required = false,
                                 default = nil)
  if valid_609012 != nil:
    section.add "X-Amz-Algorithm", valid_609012
  var valid_609013 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609013 = validateParameter(valid_609013, JString, required = false,
                                 default = nil)
  if valid_609013 != nil:
    section.add "X-Amz-SignedHeaders", valid_609013
  result.add "header", section
  ## parameters in `formData` object:
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RequireTLS: JBool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RoleArn: JString
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  ##   NewDBProxyName: JString
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  section = newJObject()
  var valid_609014 = formData.getOrDefault("IdleClientTimeout")
  valid_609014 = validateParameter(valid_609014, JInt, required = false, default = nil)
  if valid_609014 != nil:
    section.add "IdleClientTimeout", valid_609014
  var valid_609015 = formData.getOrDefault("RequireTLS")
  valid_609015 = validateParameter(valid_609015, JBool, required = false, default = nil)
  if valid_609015 != nil:
    section.add "RequireTLS", valid_609015
  var valid_609016 = formData.getOrDefault("DebugLogging")
  valid_609016 = validateParameter(valid_609016, JBool, required = false, default = nil)
  if valid_609016 != nil:
    section.add "DebugLogging", valid_609016
  var valid_609017 = formData.getOrDefault("RoleArn")
  valid_609017 = validateParameter(valid_609017, JString, required = false,
                                 default = nil)
  if valid_609017 != nil:
    section.add "RoleArn", valid_609017
  var valid_609018 = formData.getOrDefault("SecurityGroups")
  valid_609018 = validateParameter(valid_609018, JArray, required = false,
                                 default = nil)
  if valid_609018 != nil:
    section.add "SecurityGroups", valid_609018
  var valid_609019 = formData.getOrDefault("Auth")
  valid_609019 = validateParameter(valid_609019, JArray, required = false,
                                 default = nil)
  if valid_609019 != nil:
    section.add "Auth", valid_609019
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_609020 = formData.getOrDefault("DBProxyName")
  valid_609020 = validateParameter(valid_609020, JString, required = true,
                                 default = nil)
  if valid_609020 != nil:
    section.add "DBProxyName", valid_609020
  var valid_609021 = formData.getOrDefault("NewDBProxyName")
  valid_609021 = validateParameter(valid_609021, JString, required = false,
                                 default = nil)
  if valid_609021 != nil:
    section.add "NewDBProxyName", valid_609021
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609022: Call_PostModifyDBProxy_609002; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  let valid = call_609022.validator(path, query, header, formData, body)
  let scheme = call_609022.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609022.url(scheme.get, call_609022.host, call_609022.base,
                         call_609022.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609022, url, valid)

proc call*(call_609023: Call_PostModifyDBProxy_609002; DBProxyName: string;
          IdleClientTimeout: int = 0; RequireTLS: bool = false;
          DebugLogging: bool = false; RoleArn: string = "";
          SecurityGroups: JsonNode = nil; Auth: JsonNode = nil;
          NewDBProxyName: string = ""; Action: string = "ModifyDBProxy";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RequireTLS: bool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RoleArn: string
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   DBProxyName: string (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  ##   NewDBProxyName: string
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609024 = newJObject()
  var formData_609025 = newJObject()
  add(formData_609025, "IdleClientTimeout", newJInt(IdleClientTimeout))
  add(formData_609025, "RequireTLS", newJBool(RequireTLS))
  add(formData_609025, "DebugLogging", newJBool(DebugLogging))
  add(formData_609025, "RoleArn", newJString(RoleArn))
  if SecurityGroups != nil:
    formData_609025.add "SecurityGroups", SecurityGroups
  if Auth != nil:
    formData_609025.add "Auth", Auth
  add(formData_609025, "DBProxyName", newJString(DBProxyName))
  add(formData_609025, "NewDBProxyName", newJString(NewDBProxyName))
  add(query_609024, "Action", newJString(Action))
  add(query_609024, "Version", newJString(Version))
  result = call_609023.call(nil, query_609024, nil, formData_609025, nil)

var postModifyDBProxy* = Call_PostModifyDBProxy_609002(name: "postModifyDBProxy",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBProxy", validator: validate_PostModifyDBProxy_609003,
    base: "/", url: url_PostModifyDBProxy_609004,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBProxy_608979 = ref object of OpenApiRestCall_604389
proc url_GetModifyDBProxy_608981(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBProxy_608980(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RoleArn: JString
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   RequireTLS: JBool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   NewDBProxyName: JString
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  section = newJObject()
  var valid_608982 = query.getOrDefault("IdleClientTimeout")
  valid_608982 = validateParameter(valid_608982, JInt, required = false, default = nil)
  if valid_608982 != nil:
    section.add "IdleClientTimeout", valid_608982
  var valid_608983 = query.getOrDefault("RoleArn")
  valid_608983 = validateParameter(valid_608983, JString, required = false,
                                 default = nil)
  if valid_608983 != nil:
    section.add "RoleArn", valid_608983
  var valid_608984 = query.getOrDefault("Auth")
  valid_608984 = validateParameter(valid_608984, JArray, required = false,
                                 default = nil)
  if valid_608984 != nil:
    section.add "Auth", valid_608984
  var valid_608985 = query.getOrDefault("RequireTLS")
  valid_608985 = validateParameter(valid_608985, JBool, required = false, default = nil)
  if valid_608985 != nil:
    section.add "RequireTLS", valid_608985
  var valid_608986 = query.getOrDefault("NewDBProxyName")
  valid_608986 = validateParameter(valid_608986, JString, required = false,
                                 default = nil)
  if valid_608986 != nil:
    section.add "NewDBProxyName", valid_608986
  var valid_608987 = query.getOrDefault("SecurityGroups")
  valid_608987 = validateParameter(valid_608987, JArray, required = false,
                                 default = nil)
  if valid_608987 != nil:
    section.add "SecurityGroups", valid_608987
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_608988 = query.getOrDefault("Action")
  valid_608988 = validateParameter(valid_608988, JString, required = true,
                                 default = newJString("ModifyDBProxy"))
  if valid_608988 != nil:
    section.add "Action", valid_608988
  var valid_608989 = query.getOrDefault("Version")
  valid_608989 = validateParameter(valid_608989, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_608989 != nil:
    section.add "Version", valid_608989
  var valid_608990 = query.getOrDefault("DebugLogging")
  valid_608990 = validateParameter(valid_608990, JBool, required = false, default = nil)
  if valid_608990 != nil:
    section.add "DebugLogging", valid_608990
  var valid_608991 = query.getOrDefault("DBProxyName")
  valid_608991 = validateParameter(valid_608991, JString, required = true,
                                 default = nil)
  if valid_608991 != nil:
    section.add "DBProxyName", valid_608991
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_608992 = header.getOrDefault("X-Amz-Signature")
  valid_608992 = validateParameter(valid_608992, JString, required = false,
                                 default = nil)
  if valid_608992 != nil:
    section.add "X-Amz-Signature", valid_608992
  var valid_608993 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_608993 = validateParameter(valid_608993, JString, required = false,
                                 default = nil)
  if valid_608993 != nil:
    section.add "X-Amz-Content-Sha256", valid_608993
  var valid_608994 = header.getOrDefault("X-Amz-Date")
  valid_608994 = validateParameter(valid_608994, JString, required = false,
                                 default = nil)
  if valid_608994 != nil:
    section.add "X-Amz-Date", valid_608994
  var valid_608995 = header.getOrDefault("X-Amz-Credential")
  valid_608995 = validateParameter(valid_608995, JString, required = false,
                                 default = nil)
  if valid_608995 != nil:
    section.add "X-Amz-Credential", valid_608995
  var valid_608996 = header.getOrDefault("X-Amz-Security-Token")
  valid_608996 = validateParameter(valid_608996, JString, required = false,
                                 default = nil)
  if valid_608996 != nil:
    section.add "X-Amz-Security-Token", valid_608996
  var valid_608997 = header.getOrDefault("X-Amz-Algorithm")
  valid_608997 = validateParameter(valid_608997, JString, required = false,
                                 default = nil)
  if valid_608997 != nil:
    section.add "X-Amz-Algorithm", valid_608997
  var valid_608998 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_608998 = validateParameter(valid_608998, JString, required = false,
                                 default = nil)
  if valid_608998 != nil:
    section.add "X-Amz-SignedHeaders", valid_608998
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_608999: Call_GetModifyDBProxy_608979; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  let valid = call_608999.validator(path, query, header, formData, body)
  let scheme = call_608999.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_608999.url(scheme.get, call_608999.host, call_608999.base,
                         call_608999.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_608999, url, valid)

proc call*(call_609000: Call_GetModifyDBProxy_608979; DBProxyName: string;
          IdleClientTimeout: int = 0; RoleArn: string = ""; Auth: JsonNode = nil;
          RequireTLS: bool = false; NewDBProxyName: string = "";
          SecurityGroups: JsonNode = nil; Action: string = "ModifyDBProxy";
          Version: string = "2014-10-31"; DebugLogging: bool = false): Recallable =
  ## getModifyDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   RoleArn: string
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   RequireTLS: bool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   NewDBProxyName: string
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: string (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  var query_609001 = newJObject()
  add(query_609001, "IdleClientTimeout", newJInt(IdleClientTimeout))
  add(query_609001, "RoleArn", newJString(RoleArn))
  if Auth != nil:
    query_609001.add "Auth", Auth
  add(query_609001, "RequireTLS", newJBool(RequireTLS))
  add(query_609001, "NewDBProxyName", newJString(NewDBProxyName))
  if SecurityGroups != nil:
    query_609001.add "SecurityGroups", SecurityGroups
  add(query_609001, "Action", newJString(Action))
  add(query_609001, "Version", newJString(Version))
  add(query_609001, "DebugLogging", newJBool(DebugLogging))
  add(query_609001, "DBProxyName", newJString(DBProxyName))
  result = call_609000.call(nil, query_609001, nil, nil, nil)

var getModifyDBProxy* = Call_GetModifyDBProxy_608979(name: "getModifyDBProxy",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBProxy", validator: validate_GetModifyDBProxy_608980,
    base: "/", url: url_GetModifyDBProxy_608981,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBProxyTargetGroup_609049 = ref object of OpenApiRestCall_604389
proc url_PostModifyDBProxyTargetGroup_609051(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBProxyTargetGroup_609050(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609052 = query.getOrDefault("Action")
  valid_609052 = validateParameter(valid_609052, JString, required = true, default = newJString(
      "ModifyDBProxyTargetGroup"))
  if valid_609052 != nil:
    section.add "Action", valid_609052
  var valid_609053 = query.getOrDefault("Version")
  valid_609053 = validateParameter(valid_609053, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609053 != nil:
    section.add "Version", valid_609053
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609054 = header.getOrDefault("X-Amz-Signature")
  valid_609054 = validateParameter(valid_609054, JString, required = false,
                                 default = nil)
  if valid_609054 != nil:
    section.add "X-Amz-Signature", valid_609054
  var valid_609055 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609055 = validateParameter(valid_609055, JString, required = false,
                                 default = nil)
  if valid_609055 != nil:
    section.add "X-Amz-Content-Sha256", valid_609055
  var valid_609056 = header.getOrDefault("X-Amz-Date")
  valid_609056 = validateParameter(valid_609056, JString, required = false,
                                 default = nil)
  if valid_609056 != nil:
    section.add "X-Amz-Date", valid_609056
  var valid_609057 = header.getOrDefault("X-Amz-Credential")
  valid_609057 = validateParameter(valid_609057, JString, required = false,
                                 default = nil)
  if valid_609057 != nil:
    section.add "X-Amz-Credential", valid_609057
  var valid_609058 = header.getOrDefault("X-Amz-Security-Token")
  valid_609058 = validateParameter(valid_609058, JString, required = false,
                                 default = nil)
  if valid_609058 != nil:
    section.add "X-Amz-Security-Token", valid_609058
  var valid_609059 = header.getOrDefault("X-Amz-Algorithm")
  valid_609059 = validateParameter(valid_609059, JString, required = false,
                                 default = nil)
  if valid_609059 != nil:
    section.add "X-Amz-Algorithm", valid_609059
  var valid_609060 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609060 = validateParameter(valid_609060, JString, required = false,
                                 default = nil)
  if valid_609060 != nil:
    section.add "X-Amz-SignedHeaders", valid_609060
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConnectionPoolConfig.MaxConnectionsPercent: JString
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   TargetGroupName: JString (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   NewName: JString
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfig.MaxIdleConnectionsPercent: JString
  ##                                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   ConnectionPoolConfig.InitQuery: JString
  ##                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   DBProxyName: JString (required)
  ##              : The name of the new proxy to which to assign the target group.
  ##   ConnectionPoolConfig.ConnectionBorrowTimeout: JString
  ##                                               : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   ConnectionPoolConfig.SessionPinningFilters: JArray
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  section = newJObject()
  var valid_609061 = formData.getOrDefault("ConnectionPoolConfig.MaxConnectionsPercent")
  valid_609061 = validateParameter(valid_609061, JString, required = false,
                                 default = nil)
  if valid_609061 != nil:
    section.add "ConnectionPoolConfig.MaxConnectionsPercent", valid_609061
  assert formData != nil, "formData argument is necessary due to required `TargetGroupName` field"
  var valid_609062 = formData.getOrDefault("TargetGroupName")
  valid_609062 = validateParameter(valid_609062, JString, required = true,
                                 default = nil)
  if valid_609062 != nil:
    section.add "TargetGroupName", valid_609062
  var valid_609063 = formData.getOrDefault("NewName")
  valid_609063 = validateParameter(valid_609063, JString, required = false,
                                 default = nil)
  if valid_609063 != nil:
    section.add "NewName", valid_609063
  var valid_609064 = formData.getOrDefault("ConnectionPoolConfig.MaxIdleConnectionsPercent")
  valid_609064 = validateParameter(valid_609064, JString, required = false,
                                 default = nil)
  if valid_609064 != nil:
    section.add "ConnectionPoolConfig.MaxIdleConnectionsPercent", valid_609064
  var valid_609065 = formData.getOrDefault("ConnectionPoolConfig.InitQuery")
  valid_609065 = validateParameter(valid_609065, JString, required = false,
                                 default = nil)
  if valid_609065 != nil:
    section.add "ConnectionPoolConfig.InitQuery", valid_609065
  var valid_609066 = formData.getOrDefault("DBProxyName")
  valid_609066 = validateParameter(valid_609066, JString, required = true,
                                 default = nil)
  if valid_609066 != nil:
    section.add "DBProxyName", valid_609066
  var valid_609067 = formData.getOrDefault("ConnectionPoolConfig.ConnectionBorrowTimeout")
  valid_609067 = validateParameter(valid_609067, JString, required = false,
                                 default = nil)
  if valid_609067 != nil:
    section.add "ConnectionPoolConfig.ConnectionBorrowTimeout", valid_609067
  var valid_609068 = formData.getOrDefault("ConnectionPoolConfig.SessionPinningFilters")
  valid_609068 = validateParameter(valid_609068, JArray, required = false,
                                 default = nil)
  if valid_609068 != nil:
    section.add "ConnectionPoolConfig.SessionPinningFilters", valid_609068
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609069: Call_PostModifyDBProxyTargetGroup_609049; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_609069.validator(path, query, header, formData, body)
  let scheme = call_609069.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609069.url(scheme.get, call_609069.host, call_609069.base,
                         call_609069.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609069, url, valid)

proc call*(call_609070: Call_PostModifyDBProxyTargetGroup_609049;
          TargetGroupName: string; DBProxyName: string;
          ConnectionPoolConfigMaxConnectionsPercent: string = "";
          NewName: string = "";
          ConnectionPoolConfigMaxIdleConnectionsPercent: string = "";
          ConnectionPoolConfigInitQuery: string = "";
          Action: string = "ModifyDBProxyTargetGroup";
          ConnectionPoolConfigConnectionBorrowTimeout: string = "";
          Version: string = "2014-10-31";
          ConnectionPoolConfigSessionPinningFilters: JsonNode = nil): Recallable =
  ## postModifyDBProxyTargetGroup
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ##   ConnectionPoolConfigMaxConnectionsPercent: string
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   TargetGroupName: string (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   NewName: string
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfigMaxIdleConnectionsPercent: string
  ##                                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   ConnectionPoolConfigInitQuery: string
  ##                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   DBProxyName: string (required)
  ##              : The name of the new proxy to which to assign the target group.
  ##   Action: string (required)
  ##   ConnectionPoolConfigConnectionBorrowTimeout: string
  ##                                              : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   Version: string (required)
  ##   ConnectionPoolConfigSessionPinningFilters: JArray
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  var query_609071 = newJObject()
  var formData_609072 = newJObject()
  add(formData_609072, "ConnectionPoolConfig.MaxConnectionsPercent",
      newJString(ConnectionPoolConfigMaxConnectionsPercent))
  add(formData_609072, "TargetGroupName", newJString(TargetGroupName))
  add(formData_609072, "NewName", newJString(NewName))
  add(formData_609072, "ConnectionPoolConfig.MaxIdleConnectionsPercent",
      newJString(ConnectionPoolConfigMaxIdleConnectionsPercent))
  add(formData_609072, "ConnectionPoolConfig.InitQuery",
      newJString(ConnectionPoolConfigInitQuery))
  add(formData_609072, "DBProxyName", newJString(DBProxyName))
  add(query_609071, "Action", newJString(Action))
  add(formData_609072, "ConnectionPoolConfig.ConnectionBorrowTimeout",
      newJString(ConnectionPoolConfigConnectionBorrowTimeout))
  add(query_609071, "Version", newJString(Version))
  if ConnectionPoolConfigSessionPinningFilters != nil:
    formData_609072.add "ConnectionPoolConfig.SessionPinningFilters",
                       ConnectionPoolConfigSessionPinningFilters
  result = call_609070.call(nil, query_609071, nil, formData_609072, nil)

var postModifyDBProxyTargetGroup* = Call_PostModifyDBProxyTargetGroup_609049(
    name: "postModifyDBProxyTargetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBProxyTargetGroup",
    validator: validate_PostModifyDBProxyTargetGroup_609050, base: "/",
    url: url_PostModifyDBProxyTargetGroup_609051,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBProxyTargetGroup_609026 = ref object of OpenApiRestCall_604389
proc url_GetModifyDBProxyTargetGroup_609028(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBProxyTargetGroup_609027(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConnectionPoolConfig.SessionPinningFilters: JArray
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  ##   NewName: JString
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfig.MaxIdleConnectionsPercent: JString
  ##                                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   ConnectionPoolConfig.InitQuery: JString
  ##                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   TargetGroupName: JString (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   Action: JString (required)
  ##   ConnectionPoolConfig.MaxConnectionsPercent: JString
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   ConnectionPoolConfig.ConnectionBorrowTimeout: JString
  ##                                               : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The name of the new proxy to which to assign the target group.
  section = newJObject()
  var valid_609029 = query.getOrDefault("ConnectionPoolConfig.SessionPinningFilters")
  valid_609029 = validateParameter(valid_609029, JArray, required = false,
                                 default = nil)
  if valid_609029 != nil:
    section.add "ConnectionPoolConfig.SessionPinningFilters", valid_609029
  var valid_609030 = query.getOrDefault("NewName")
  valid_609030 = validateParameter(valid_609030, JString, required = false,
                                 default = nil)
  if valid_609030 != nil:
    section.add "NewName", valid_609030
  var valid_609031 = query.getOrDefault("ConnectionPoolConfig.MaxIdleConnectionsPercent")
  valid_609031 = validateParameter(valid_609031, JString, required = false,
                                 default = nil)
  if valid_609031 != nil:
    section.add "ConnectionPoolConfig.MaxIdleConnectionsPercent", valid_609031
  var valid_609032 = query.getOrDefault("ConnectionPoolConfig.InitQuery")
  valid_609032 = validateParameter(valid_609032, JString, required = false,
                                 default = nil)
  if valid_609032 != nil:
    section.add "ConnectionPoolConfig.InitQuery", valid_609032
  assert query != nil,
        "query argument is necessary due to required `TargetGroupName` field"
  var valid_609033 = query.getOrDefault("TargetGroupName")
  valid_609033 = validateParameter(valid_609033, JString, required = true,
                                 default = nil)
  if valid_609033 != nil:
    section.add "TargetGroupName", valid_609033
  var valid_609034 = query.getOrDefault("Action")
  valid_609034 = validateParameter(valid_609034, JString, required = true, default = newJString(
      "ModifyDBProxyTargetGroup"))
  if valid_609034 != nil:
    section.add "Action", valid_609034
  var valid_609035 = query.getOrDefault("ConnectionPoolConfig.MaxConnectionsPercent")
  valid_609035 = validateParameter(valid_609035, JString, required = false,
                                 default = nil)
  if valid_609035 != nil:
    section.add "ConnectionPoolConfig.MaxConnectionsPercent", valid_609035
  var valid_609036 = query.getOrDefault("ConnectionPoolConfig.ConnectionBorrowTimeout")
  valid_609036 = validateParameter(valid_609036, JString, required = false,
                                 default = nil)
  if valid_609036 != nil:
    section.add "ConnectionPoolConfig.ConnectionBorrowTimeout", valid_609036
  var valid_609037 = query.getOrDefault("Version")
  valid_609037 = validateParameter(valid_609037, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609037 != nil:
    section.add "Version", valid_609037
  var valid_609038 = query.getOrDefault("DBProxyName")
  valid_609038 = validateParameter(valid_609038, JString, required = true,
                                 default = nil)
  if valid_609038 != nil:
    section.add "DBProxyName", valid_609038
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609039 = header.getOrDefault("X-Amz-Signature")
  valid_609039 = validateParameter(valid_609039, JString, required = false,
                                 default = nil)
  if valid_609039 != nil:
    section.add "X-Amz-Signature", valid_609039
  var valid_609040 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609040 = validateParameter(valid_609040, JString, required = false,
                                 default = nil)
  if valid_609040 != nil:
    section.add "X-Amz-Content-Sha256", valid_609040
  var valid_609041 = header.getOrDefault("X-Amz-Date")
  valid_609041 = validateParameter(valid_609041, JString, required = false,
                                 default = nil)
  if valid_609041 != nil:
    section.add "X-Amz-Date", valid_609041
  var valid_609042 = header.getOrDefault("X-Amz-Credential")
  valid_609042 = validateParameter(valid_609042, JString, required = false,
                                 default = nil)
  if valid_609042 != nil:
    section.add "X-Amz-Credential", valid_609042
  var valid_609043 = header.getOrDefault("X-Amz-Security-Token")
  valid_609043 = validateParameter(valid_609043, JString, required = false,
                                 default = nil)
  if valid_609043 != nil:
    section.add "X-Amz-Security-Token", valid_609043
  var valid_609044 = header.getOrDefault("X-Amz-Algorithm")
  valid_609044 = validateParameter(valid_609044, JString, required = false,
                                 default = nil)
  if valid_609044 != nil:
    section.add "X-Amz-Algorithm", valid_609044
  var valid_609045 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609045 = validateParameter(valid_609045, JString, required = false,
                                 default = nil)
  if valid_609045 != nil:
    section.add "X-Amz-SignedHeaders", valid_609045
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609046: Call_GetModifyDBProxyTargetGroup_609026; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_609046.validator(path, query, header, formData, body)
  let scheme = call_609046.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609046.url(scheme.get, call_609046.host, call_609046.base,
                         call_609046.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609046, url, valid)

proc call*(call_609047: Call_GetModifyDBProxyTargetGroup_609026;
          TargetGroupName: string; DBProxyName: string;
          ConnectionPoolConfigSessionPinningFilters: JsonNode = nil;
          NewName: string = "";
          ConnectionPoolConfigMaxIdleConnectionsPercent: string = "";
          ConnectionPoolConfigInitQuery: string = "";
          Action: string = "ModifyDBProxyTargetGroup";
          ConnectionPoolConfigMaxConnectionsPercent: string = "";
          ConnectionPoolConfigConnectionBorrowTimeout: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBProxyTargetGroup
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ##   ConnectionPoolConfigSessionPinningFilters: JArray
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  ##   NewName: string
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfigMaxIdleConnectionsPercent: string
  ##                                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   ConnectionPoolConfigInitQuery: string
  ##                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   TargetGroupName: string (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   Action: string (required)
  ##   ConnectionPoolConfigMaxConnectionsPercent: string
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   ConnectionPoolConfigConnectionBorrowTimeout: string
  ##                                              : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The name of the new proxy to which to assign the target group.
  var query_609048 = newJObject()
  if ConnectionPoolConfigSessionPinningFilters != nil:
    query_609048.add "ConnectionPoolConfig.SessionPinningFilters",
                    ConnectionPoolConfigSessionPinningFilters
  add(query_609048, "NewName", newJString(NewName))
  add(query_609048, "ConnectionPoolConfig.MaxIdleConnectionsPercent",
      newJString(ConnectionPoolConfigMaxIdleConnectionsPercent))
  add(query_609048, "ConnectionPoolConfig.InitQuery",
      newJString(ConnectionPoolConfigInitQuery))
  add(query_609048, "TargetGroupName", newJString(TargetGroupName))
  add(query_609048, "Action", newJString(Action))
  add(query_609048, "ConnectionPoolConfig.MaxConnectionsPercent",
      newJString(ConnectionPoolConfigMaxConnectionsPercent))
  add(query_609048, "ConnectionPoolConfig.ConnectionBorrowTimeout",
      newJString(ConnectionPoolConfigConnectionBorrowTimeout))
  add(query_609048, "Version", newJString(Version))
  add(query_609048, "DBProxyName", newJString(DBProxyName))
  result = call_609047.call(nil, query_609048, nil, nil, nil)

var getModifyDBProxyTargetGroup* = Call_GetModifyDBProxyTargetGroup_609026(
    name: "getModifyDBProxyTargetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBProxyTargetGroup",
    validator: validate_GetModifyDBProxyTargetGroup_609027, base: "/",
    url: url_GetModifyDBProxyTargetGroup_609028,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSnapshot_609091 = ref object of OpenApiRestCall_604389
proc url_PostModifyDBSnapshot_609093(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSnapshot_609092(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609094 = query.getOrDefault("Action")
  valid_609094 = validateParameter(valid_609094, JString, required = true,
                                 default = newJString("ModifyDBSnapshot"))
  if valid_609094 != nil:
    section.add "Action", valid_609094
  var valid_609095 = query.getOrDefault("Version")
  valid_609095 = validateParameter(valid_609095, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609095 != nil:
    section.add "Version", valid_609095
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609096 = header.getOrDefault("X-Amz-Signature")
  valid_609096 = validateParameter(valid_609096, JString, required = false,
                                 default = nil)
  if valid_609096 != nil:
    section.add "X-Amz-Signature", valid_609096
  var valid_609097 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609097 = validateParameter(valid_609097, JString, required = false,
                                 default = nil)
  if valid_609097 != nil:
    section.add "X-Amz-Content-Sha256", valid_609097
  var valid_609098 = header.getOrDefault("X-Amz-Date")
  valid_609098 = validateParameter(valid_609098, JString, required = false,
                                 default = nil)
  if valid_609098 != nil:
    section.add "X-Amz-Date", valid_609098
  var valid_609099 = header.getOrDefault("X-Amz-Credential")
  valid_609099 = validateParameter(valid_609099, JString, required = false,
                                 default = nil)
  if valid_609099 != nil:
    section.add "X-Amz-Credential", valid_609099
  var valid_609100 = header.getOrDefault("X-Amz-Security-Token")
  valid_609100 = validateParameter(valid_609100, JString, required = false,
                                 default = nil)
  if valid_609100 != nil:
    section.add "X-Amz-Security-Token", valid_609100
  var valid_609101 = header.getOrDefault("X-Amz-Algorithm")
  valid_609101 = validateParameter(valid_609101, JString, required = false,
                                 default = nil)
  if valid_609101 != nil:
    section.add "X-Amz-Algorithm", valid_609101
  var valid_609102 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609102 = validateParameter(valid_609102, JString, required = false,
                                 default = nil)
  if valid_609102 != nil:
    section.add "X-Amz-SignedHeaders", valid_609102
  result.add "header", section
  ## parameters in `formData` object:
  ##   EngineVersion: JString
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   OptionGroupName: JString
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  section = newJObject()
  var valid_609103 = formData.getOrDefault("EngineVersion")
  valid_609103 = validateParameter(valid_609103, JString, required = false,
                                 default = nil)
  if valid_609103 != nil:
    section.add "EngineVersion", valid_609103
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_609104 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_609104 = validateParameter(valid_609104, JString, required = true,
                                 default = nil)
  if valid_609104 != nil:
    section.add "DBSnapshotIdentifier", valid_609104
  var valid_609105 = formData.getOrDefault("OptionGroupName")
  valid_609105 = validateParameter(valid_609105, JString, required = false,
                                 default = nil)
  if valid_609105 != nil:
    section.add "OptionGroupName", valid_609105
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609106: Call_PostModifyDBSnapshot_609091; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  let valid = call_609106.validator(path, query, header, formData, body)
  let scheme = call_609106.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609106.url(scheme.get, call_609106.host, call_609106.base,
                         call_609106.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609106, url, valid)

proc call*(call_609107: Call_PostModifyDBSnapshot_609091;
          DBSnapshotIdentifier: string; EngineVersion: string = "";
          Action: string = "ModifyDBSnapshot"; OptionGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSnapshot
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ##   EngineVersion: string
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_609108 = newJObject()
  var formData_609109 = newJObject()
  add(formData_609109, "EngineVersion", newJString(EngineVersion))
  add(formData_609109, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_609108, "Action", newJString(Action))
  add(formData_609109, "OptionGroupName", newJString(OptionGroupName))
  add(query_609108, "Version", newJString(Version))
  result = call_609107.call(nil, query_609108, nil, formData_609109, nil)

var postModifyDBSnapshot* = Call_PostModifyDBSnapshot_609091(
    name: "postModifyDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshot",
    validator: validate_PostModifyDBSnapshot_609092, base: "/",
    url: url_PostModifyDBSnapshot_609093, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSnapshot_609073 = ref object of OpenApiRestCall_604389
proc url_GetModifyDBSnapshot_609075(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSnapshot_609074(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   EngineVersion: JString
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   Action: JString (required)
  ##   OptionGroupName: JString
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_609076 = query.getOrDefault("DBSnapshotIdentifier")
  valid_609076 = validateParameter(valid_609076, JString, required = true,
                                 default = nil)
  if valid_609076 != nil:
    section.add "DBSnapshotIdentifier", valid_609076
  var valid_609077 = query.getOrDefault("EngineVersion")
  valid_609077 = validateParameter(valid_609077, JString, required = false,
                                 default = nil)
  if valid_609077 != nil:
    section.add "EngineVersion", valid_609077
  var valid_609078 = query.getOrDefault("Action")
  valid_609078 = validateParameter(valid_609078, JString, required = true,
                                 default = newJString("ModifyDBSnapshot"))
  if valid_609078 != nil:
    section.add "Action", valid_609078
  var valid_609079 = query.getOrDefault("OptionGroupName")
  valid_609079 = validateParameter(valid_609079, JString, required = false,
                                 default = nil)
  if valid_609079 != nil:
    section.add "OptionGroupName", valid_609079
  var valid_609080 = query.getOrDefault("Version")
  valid_609080 = validateParameter(valid_609080, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609080 != nil:
    section.add "Version", valid_609080
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609081 = header.getOrDefault("X-Amz-Signature")
  valid_609081 = validateParameter(valid_609081, JString, required = false,
                                 default = nil)
  if valid_609081 != nil:
    section.add "X-Amz-Signature", valid_609081
  var valid_609082 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609082 = validateParameter(valid_609082, JString, required = false,
                                 default = nil)
  if valid_609082 != nil:
    section.add "X-Amz-Content-Sha256", valid_609082
  var valid_609083 = header.getOrDefault("X-Amz-Date")
  valid_609083 = validateParameter(valid_609083, JString, required = false,
                                 default = nil)
  if valid_609083 != nil:
    section.add "X-Amz-Date", valid_609083
  var valid_609084 = header.getOrDefault("X-Amz-Credential")
  valid_609084 = validateParameter(valid_609084, JString, required = false,
                                 default = nil)
  if valid_609084 != nil:
    section.add "X-Amz-Credential", valid_609084
  var valid_609085 = header.getOrDefault("X-Amz-Security-Token")
  valid_609085 = validateParameter(valid_609085, JString, required = false,
                                 default = nil)
  if valid_609085 != nil:
    section.add "X-Amz-Security-Token", valid_609085
  var valid_609086 = header.getOrDefault("X-Amz-Algorithm")
  valid_609086 = validateParameter(valid_609086, JString, required = false,
                                 default = nil)
  if valid_609086 != nil:
    section.add "X-Amz-Algorithm", valid_609086
  var valid_609087 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609087 = validateParameter(valid_609087, JString, required = false,
                                 default = nil)
  if valid_609087 != nil:
    section.add "X-Amz-SignedHeaders", valid_609087
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609088: Call_GetModifyDBSnapshot_609073; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  let valid = call_609088.validator(path, query, header, formData, body)
  let scheme = call_609088.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609088.url(scheme.get, call_609088.host, call_609088.base,
                         call_609088.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609088, url, valid)

proc call*(call_609089: Call_GetModifyDBSnapshot_609073;
          DBSnapshotIdentifier: string; EngineVersion: string = "";
          Action: string = "ModifyDBSnapshot"; OptionGroupName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSnapshot
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   EngineVersion: string
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   Action: string (required)
  ##   OptionGroupName: string
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_609090 = newJObject()
  add(query_609090, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_609090, "EngineVersion", newJString(EngineVersion))
  add(query_609090, "Action", newJString(Action))
  add(query_609090, "OptionGroupName", newJString(OptionGroupName))
  add(query_609090, "Version", newJString(Version))
  result = call_609089.call(nil, query_609090, nil, nil, nil)

var getModifyDBSnapshot* = Call_GetModifyDBSnapshot_609073(
    name: "getModifyDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshot",
    validator: validate_GetModifyDBSnapshot_609074, base: "/",
    url: url_GetModifyDBSnapshot_609075, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSnapshotAttribute_609129 = ref object of OpenApiRestCall_604389
proc url_PostModifyDBSnapshotAttribute_609131(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSnapshotAttribute_609130(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609132 = query.getOrDefault("Action")
  valid_609132 = validateParameter(valid_609132, JString, required = true, default = newJString(
      "ModifyDBSnapshotAttribute"))
  if valid_609132 != nil:
    section.add "Action", valid_609132
  var valid_609133 = query.getOrDefault("Version")
  valid_609133 = validateParameter(valid_609133, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609133 != nil:
    section.add "Version", valid_609133
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609134 = header.getOrDefault("X-Amz-Signature")
  valid_609134 = validateParameter(valid_609134, JString, required = false,
                                 default = nil)
  if valid_609134 != nil:
    section.add "X-Amz-Signature", valid_609134
  var valid_609135 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609135 = validateParameter(valid_609135, JString, required = false,
                                 default = nil)
  if valid_609135 != nil:
    section.add "X-Amz-Content-Sha256", valid_609135
  var valid_609136 = header.getOrDefault("X-Amz-Date")
  valid_609136 = validateParameter(valid_609136, JString, required = false,
                                 default = nil)
  if valid_609136 != nil:
    section.add "X-Amz-Date", valid_609136
  var valid_609137 = header.getOrDefault("X-Amz-Credential")
  valid_609137 = validateParameter(valid_609137, JString, required = false,
                                 default = nil)
  if valid_609137 != nil:
    section.add "X-Amz-Credential", valid_609137
  var valid_609138 = header.getOrDefault("X-Amz-Security-Token")
  valid_609138 = validateParameter(valid_609138, JString, required = false,
                                 default = nil)
  if valid_609138 != nil:
    section.add "X-Amz-Security-Token", valid_609138
  var valid_609139 = header.getOrDefault("X-Amz-Algorithm")
  valid_609139 = validateParameter(valid_609139, JString, required = false,
                                 default = nil)
  if valid_609139 != nil:
    section.add "X-Amz-Algorithm", valid_609139
  var valid_609140 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609140 = validateParameter(valid_609140, JString, required = false,
                                 default = nil)
  if valid_609140 != nil:
    section.add "X-Amz-SignedHeaders", valid_609140
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_609141 = formData.getOrDefault("AttributeName")
  valid_609141 = validateParameter(valid_609141, JString, required = true,
                                 default = nil)
  if valid_609141 != nil:
    section.add "AttributeName", valid_609141
  var valid_609142 = formData.getOrDefault("ValuesToAdd")
  valid_609142 = validateParameter(valid_609142, JArray, required = false,
                                 default = nil)
  if valid_609142 != nil:
    section.add "ValuesToAdd", valid_609142
  var valid_609143 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_609143 = validateParameter(valid_609143, JString, required = true,
                                 default = nil)
  if valid_609143 != nil:
    section.add "DBSnapshotIdentifier", valid_609143
  var valid_609144 = formData.getOrDefault("ValuesToRemove")
  valid_609144 = validateParameter(valid_609144, JArray, required = false,
                                 default = nil)
  if valid_609144 != nil:
    section.add "ValuesToRemove", valid_609144
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609145: Call_PostModifyDBSnapshotAttribute_609129; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  let valid = call_609145.validator(path, query, header, formData, body)
  let scheme = call_609145.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609145.url(scheme.get, call_609145.host, call_609145.base,
                         call_609145.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609145, url, valid)

proc call*(call_609146: Call_PostModifyDBSnapshotAttribute_609129;
          AttributeName: string; DBSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil; Action: string = "ModifyDBSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   Version: string (required)
  var query_609147 = newJObject()
  var formData_609148 = newJObject()
  add(formData_609148, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    formData_609148.add "ValuesToAdd", ValuesToAdd
  add(formData_609148, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_609147, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_609148.add "ValuesToRemove", ValuesToRemove
  add(query_609147, "Version", newJString(Version))
  result = call_609146.call(nil, query_609147, nil, formData_609148, nil)

var postModifyDBSnapshotAttribute* = Call_PostModifyDBSnapshotAttribute_609129(
    name: "postModifyDBSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshotAttribute",
    validator: validate_PostModifyDBSnapshotAttribute_609130, base: "/",
    url: url_PostModifyDBSnapshotAttribute_609131,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSnapshotAttribute_609110 = ref object of OpenApiRestCall_604389
proc url_GetModifyDBSnapshotAttribute_609112(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSnapshotAttribute_609111(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: JString (required)
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_609113 = query.getOrDefault("ValuesToRemove")
  valid_609113 = validateParameter(valid_609113, JArray, required = false,
                                 default = nil)
  if valid_609113 != nil:
    section.add "ValuesToRemove", valid_609113
  assert query != nil, "query argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_609114 = query.getOrDefault("DBSnapshotIdentifier")
  valid_609114 = validateParameter(valid_609114, JString, required = true,
                                 default = nil)
  if valid_609114 != nil:
    section.add "DBSnapshotIdentifier", valid_609114
  var valid_609115 = query.getOrDefault("Action")
  valid_609115 = validateParameter(valid_609115, JString, required = true, default = newJString(
      "ModifyDBSnapshotAttribute"))
  if valid_609115 != nil:
    section.add "Action", valid_609115
  var valid_609116 = query.getOrDefault("AttributeName")
  valid_609116 = validateParameter(valid_609116, JString, required = true,
                                 default = nil)
  if valid_609116 != nil:
    section.add "AttributeName", valid_609116
  var valid_609117 = query.getOrDefault("ValuesToAdd")
  valid_609117 = validateParameter(valid_609117, JArray, required = false,
                                 default = nil)
  if valid_609117 != nil:
    section.add "ValuesToAdd", valid_609117
  var valid_609118 = query.getOrDefault("Version")
  valid_609118 = validateParameter(valid_609118, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609118 != nil:
    section.add "Version", valid_609118
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609119 = header.getOrDefault("X-Amz-Signature")
  valid_609119 = validateParameter(valid_609119, JString, required = false,
                                 default = nil)
  if valid_609119 != nil:
    section.add "X-Amz-Signature", valid_609119
  var valid_609120 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609120 = validateParameter(valid_609120, JString, required = false,
                                 default = nil)
  if valid_609120 != nil:
    section.add "X-Amz-Content-Sha256", valid_609120
  var valid_609121 = header.getOrDefault("X-Amz-Date")
  valid_609121 = validateParameter(valid_609121, JString, required = false,
                                 default = nil)
  if valid_609121 != nil:
    section.add "X-Amz-Date", valid_609121
  var valid_609122 = header.getOrDefault("X-Amz-Credential")
  valid_609122 = validateParameter(valid_609122, JString, required = false,
                                 default = nil)
  if valid_609122 != nil:
    section.add "X-Amz-Credential", valid_609122
  var valid_609123 = header.getOrDefault("X-Amz-Security-Token")
  valid_609123 = validateParameter(valid_609123, JString, required = false,
                                 default = nil)
  if valid_609123 != nil:
    section.add "X-Amz-Security-Token", valid_609123
  var valid_609124 = header.getOrDefault("X-Amz-Algorithm")
  valid_609124 = validateParameter(valid_609124, JString, required = false,
                                 default = nil)
  if valid_609124 != nil:
    section.add "X-Amz-Algorithm", valid_609124
  var valid_609125 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609125 = validateParameter(valid_609125, JString, required = false,
                                 default = nil)
  if valid_609125 != nil:
    section.add "X-Amz-SignedHeaders", valid_609125
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609126: Call_GetModifyDBSnapshotAttribute_609110; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  let valid = call_609126.validator(path, query, header, formData, body)
  let scheme = call_609126.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609126.url(scheme.get, call_609126.host, call_609126.base,
                         call_609126.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609126, url, valid)

proc call*(call_609127: Call_GetModifyDBSnapshotAttribute_609110;
          DBSnapshotIdentifier: string; AttributeName: string;
          ValuesToRemove: JsonNode = nil;
          Action: string = "ModifyDBSnapshotAttribute"; ValuesToAdd: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_609128 = newJObject()
  if ValuesToRemove != nil:
    query_609128.add "ValuesToRemove", ValuesToRemove
  add(query_609128, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_609128, "Action", newJString(Action))
  add(query_609128, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    query_609128.add "ValuesToAdd", ValuesToAdd
  add(query_609128, "Version", newJString(Version))
  result = call_609127.call(nil, query_609128, nil, nil, nil)

var getModifyDBSnapshotAttribute* = Call_GetModifyDBSnapshotAttribute_609110(
    name: "getModifyDBSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshotAttribute",
    validator: validate_GetModifyDBSnapshotAttribute_609111, base: "/",
    url: url_GetModifyDBSnapshotAttribute_609112,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSubnetGroup_609167 = ref object of OpenApiRestCall_604389
proc url_PostModifyDBSubnetGroup_609169(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSubnetGroup_609168(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609170 = query.getOrDefault("Action")
  valid_609170 = validateParameter(valid_609170, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_609170 != nil:
    section.add "Action", valid_609170
  var valid_609171 = query.getOrDefault("Version")
  valid_609171 = validateParameter(valid_609171, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609171 != nil:
    section.add "Version", valid_609171
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609172 = header.getOrDefault("X-Amz-Signature")
  valid_609172 = validateParameter(valid_609172, JString, required = false,
                                 default = nil)
  if valid_609172 != nil:
    section.add "X-Amz-Signature", valid_609172
  var valid_609173 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609173 = validateParameter(valid_609173, JString, required = false,
                                 default = nil)
  if valid_609173 != nil:
    section.add "X-Amz-Content-Sha256", valid_609173
  var valid_609174 = header.getOrDefault("X-Amz-Date")
  valid_609174 = validateParameter(valid_609174, JString, required = false,
                                 default = nil)
  if valid_609174 != nil:
    section.add "X-Amz-Date", valid_609174
  var valid_609175 = header.getOrDefault("X-Amz-Credential")
  valid_609175 = validateParameter(valid_609175, JString, required = false,
                                 default = nil)
  if valid_609175 != nil:
    section.add "X-Amz-Credential", valid_609175
  var valid_609176 = header.getOrDefault("X-Amz-Security-Token")
  valid_609176 = validateParameter(valid_609176, JString, required = false,
                                 default = nil)
  if valid_609176 != nil:
    section.add "X-Amz-Security-Token", valid_609176
  var valid_609177 = header.getOrDefault("X-Amz-Algorithm")
  valid_609177 = validateParameter(valid_609177, JString, required = false,
                                 default = nil)
  if valid_609177 != nil:
    section.add "X-Amz-Algorithm", valid_609177
  var valid_609178 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609178 = validateParameter(valid_609178, JString, required = false,
                                 default = nil)
  if valid_609178 != nil:
    section.add "X-Amz-SignedHeaders", valid_609178
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  section = newJObject()
  var valid_609179 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_609179 = validateParameter(valid_609179, JString, required = false,
                                 default = nil)
  if valid_609179 != nil:
    section.add "DBSubnetGroupDescription", valid_609179
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_609180 = formData.getOrDefault("DBSubnetGroupName")
  valid_609180 = validateParameter(valid_609180, JString, required = true,
                                 default = nil)
  if valid_609180 != nil:
    section.add "DBSubnetGroupName", valid_609180
  var valid_609181 = formData.getOrDefault("SubnetIds")
  valid_609181 = validateParameter(valid_609181, JArray, required = true, default = nil)
  if valid_609181 != nil:
    section.add "SubnetIds", valid_609181
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609182: Call_PostModifyDBSubnetGroup_609167; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_609182.validator(path, query, header, formData, body)
  let scheme = call_609182.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609182.url(scheme.get, call_609182.host, call_609182.base,
                         call_609182.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609182, url, valid)

proc call*(call_609183: Call_PostModifyDBSubnetGroup_609167;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string = "";
          Action: string = "ModifyDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  var query_609184 = newJObject()
  var formData_609185 = newJObject()
  add(formData_609185, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_609184, "Action", newJString(Action))
  add(formData_609185, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_609184, "Version", newJString(Version))
  if SubnetIds != nil:
    formData_609185.add "SubnetIds", SubnetIds
  result = call_609183.call(nil, query_609184, nil, formData_609185, nil)

var postModifyDBSubnetGroup* = Call_PostModifyDBSubnetGroup_609167(
    name: "postModifyDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_PostModifyDBSubnetGroup_609168, base: "/",
    url: url_PostModifyDBSubnetGroup_609169, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSubnetGroup_609149 = ref object of OpenApiRestCall_604389
proc url_GetModifyDBSubnetGroup_609151(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSubnetGroup_609150(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: JString (required)
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SubnetIds` field"
  var valid_609152 = query.getOrDefault("SubnetIds")
  valid_609152 = validateParameter(valid_609152, JArray, required = true, default = nil)
  if valid_609152 != nil:
    section.add "SubnetIds", valid_609152
  var valid_609153 = query.getOrDefault("Action")
  valid_609153 = validateParameter(valid_609153, JString, required = true,
                                 default = newJString("ModifyDBSubnetGroup"))
  if valid_609153 != nil:
    section.add "Action", valid_609153
  var valid_609154 = query.getOrDefault("DBSubnetGroupDescription")
  valid_609154 = validateParameter(valid_609154, JString, required = false,
                                 default = nil)
  if valid_609154 != nil:
    section.add "DBSubnetGroupDescription", valid_609154
  var valid_609155 = query.getOrDefault("DBSubnetGroupName")
  valid_609155 = validateParameter(valid_609155, JString, required = true,
                                 default = nil)
  if valid_609155 != nil:
    section.add "DBSubnetGroupName", valid_609155
  var valid_609156 = query.getOrDefault("Version")
  valid_609156 = validateParameter(valid_609156, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609156 != nil:
    section.add "Version", valid_609156
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609157 = header.getOrDefault("X-Amz-Signature")
  valid_609157 = validateParameter(valid_609157, JString, required = false,
                                 default = nil)
  if valid_609157 != nil:
    section.add "X-Amz-Signature", valid_609157
  var valid_609158 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609158 = validateParameter(valid_609158, JString, required = false,
                                 default = nil)
  if valid_609158 != nil:
    section.add "X-Amz-Content-Sha256", valid_609158
  var valid_609159 = header.getOrDefault("X-Amz-Date")
  valid_609159 = validateParameter(valid_609159, JString, required = false,
                                 default = nil)
  if valid_609159 != nil:
    section.add "X-Amz-Date", valid_609159
  var valid_609160 = header.getOrDefault("X-Amz-Credential")
  valid_609160 = validateParameter(valid_609160, JString, required = false,
                                 default = nil)
  if valid_609160 != nil:
    section.add "X-Amz-Credential", valid_609160
  var valid_609161 = header.getOrDefault("X-Amz-Security-Token")
  valid_609161 = validateParameter(valid_609161, JString, required = false,
                                 default = nil)
  if valid_609161 != nil:
    section.add "X-Amz-Security-Token", valid_609161
  var valid_609162 = header.getOrDefault("X-Amz-Algorithm")
  valid_609162 = validateParameter(valid_609162, JString, required = false,
                                 default = nil)
  if valid_609162 != nil:
    section.add "X-Amz-Algorithm", valid_609162
  var valid_609163 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609163 = validateParameter(valid_609163, JString, required = false,
                                 default = nil)
  if valid_609163 != nil:
    section.add "X-Amz-SignedHeaders", valid_609163
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609164: Call_GetModifyDBSubnetGroup_609149; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_609164.validator(path, query, header, formData, body)
  let scheme = call_609164.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609164.url(scheme.get, call_609164.host, call_609164.base,
                         call_609164.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609164, url, valid)

proc call*(call_609165: Call_GetModifyDBSubnetGroup_609149; SubnetIds: JsonNode;
          DBSubnetGroupName: string; Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_609166 = newJObject()
  if SubnetIds != nil:
    query_609166.add "SubnetIds", SubnetIds
  add(query_609166, "Action", newJString(Action))
  add(query_609166, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_609166, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_609166, "Version", newJString(Version))
  result = call_609165.call(nil, query_609166, nil, nil, nil)

var getModifyDBSubnetGroup* = Call_GetModifyDBSubnetGroup_609149(
    name: "getModifyDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_GetModifyDBSubnetGroup_609150, base: "/",
    url: url_GetModifyDBSubnetGroup_609151, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyEventSubscription_609206 = ref object of OpenApiRestCall_604389
proc url_PostModifyEventSubscription_609208(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyEventSubscription_609207(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609209 = query.getOrDefault("Action")
  valid_609209 = validateParameter(valid_609209, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_609209 != nil:
    section.add "Action", valid_609209
  var valid_609210 = query.getOrDefault("Version")
  valid_609210 = validateParameter(valid_609210, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609210 != nil:
    section.add "Version", valid_609210
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609211 = header.getOrDefault("X-Amz-Signature")
  valid_609211 = validateParameter(valid_609211, JString, required = false,
                                 default = nil)
  if valid_609211 != nil:
    section.add "X-Amz-Signature", valid_609211
  var valid_609212 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609212 = validateParameter(valid_609212, JString, required = false,
                                 default = nil)
  if valid_609212 != nil:
    section.add "X-Amz-Content-Sha256", valid_609212
  var valid_609213 = header.getOrDefault("X-Amz-Date")
  valid_609213 = validateParameter(valid_609213, JString, required = false,
                                 default = nil)
  if valid_609213 != nil:
    section.add "X-Amz-Date", valid_609213
  var valid_609214 = header.getOrDefault("X-Amz-Credential")
  valid_609214 = validateParameter(valid_609214, JString, required = false,
                                 default = nil)
  if valid_609214 != nil:
    section.add "X-Amz-Credential", valid_609214
  var valid_609215 = header.getOrDefault("X-Amz-Security-Token")
  valid_609215 = validateParameter(valid_609215, JString, required = false,
                                 default = nil)
  if valid_609215 != nil:
    section.add "X-Amz-Security-Token", valid_609215
  var valid_609216 = header.getOrDefault("X-Amz-Algorithm")
  valid_609216 = validateParameter(valid_609216, JString, required = false,
                                 default = nil)
  if valid_609216 != nil:
    section.add "X-Amz-Algorithm", valid_609216
  var valid_609217 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609217 = validateParameter(valid_609217, JString, required = false,
                                 default = nil)
  if valid_609217 != nil:
    section.add "X-Amz-SignedHeaders", valid_609217
  result.add "header", section
  ## parameters in `formData` object:
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  section = newJObject()
  var valid_609218 = formData.getOrDefault("SnsTopicArn")
  valid_609218 = validateParameter(valid_609218, JString, required = false,
                                 default = nil)
  if valid_609218 != nil:
    section.add "SnsTopicArn", valid_609218
  var valid_609219 = formData.getOrDefault("Enabled")
  valid_609219 = validateParameter(valid_609219, JBool, required = false, default = nil)
  if valid_609219 != nil:
    section.add "Enabled", valid_609219
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_609220 = formData.getOrDefault("SubscriptionName")
  valid_609220 = validateParameter(valid_609220, JString, required = true,
                                 default = nil)
  if valid_609220 != nil:
    section.add "SubscriptionName", valid_609220
  var valid_609221 = formData.getOrDefault("SourceType")
  valid_609221 = validateParameter(valid_609221, JString, required = false,
                                 default = nil)
  if valid_609221 != nil:
    section.add "SourceType", valid_609221
  var valid_609222 = formData.getOrDefault("EventCategories")
  valid_609222 = validateParameter(valid_609222, JArray, required = false,
                                 default = nil)
  if valid_609222 != nil:
    section.add "EventCategories", valid_609222
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609223: Call_PostModifyEventSubscription_609206; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_609223.validator(path, query, header, formData, body)
  let scheme = call_609223.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609223.url(scheme.get, call_609223.host, call_609223.base,
                         call_609223.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609223, url, valid)

proc call*(call_609224: Call_PostModifyEventSubscription_609206;
          SubscriptionName: string; SnsTopicArn: string = ""; Enabled: bool = false;
          SourceType: string = ""; EventCategories: JsonNode = nil;
          Action: string = "ModifyEventSubscription"; Version: string = "2014-10-31"): Recallable =
  ## postModifyEventSubscription
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription.
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609225 = newJObject()
  var formData_609226 = newJObject()
  add(formData_609226, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_609226, "Enabled", newJBool(Enabled))
  add(formData_609226, "SubscriptionName", newJString(SubscriptionName))
  add(formData_609226, "SourceType", newJString(SourceType))
  if EventCategories != nil:
    formData_609226.add "EventCategories", EventCategories
  add(query_609225, "Action", newJString(Action))
  add(query_609225, "Version", newJString(Version))
  result = call_609224.call(nil, query_609225, nil, formData_609226, nil)

var postModifyEventSubscription* = Call_PostModifyEventSubscription_609206(
    name: "postModifyEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_PostModifyEventSubscription_609207, base: "/",
    url: url_PostModifyEventSubscription_609208,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyEventSubscription_609186 = ref object of OpenApiRestCall_604389
proc url_GetModifyEventSubscription_609188(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyEventSubscription_609187(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: JString (required)
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: JString (required)
  section = newJObject()
  var valid_609189 = query.getOrDefault("SourceType")
  valid_609189 = validateParameter(valid_609189, JString, required = false,
                                 default = nil)
  if valid_609189 != nil:
    section.add "SourceType", valid_609189
  var valid_609190 = query.getOrDefault("Enabled")
  valid_609190 = validateParameter(valid_609190, JBool, required = false, default = nil)
  if valid_609190 != nil:
    section.add "Enabled", valid_609190
  assert query != nil,
        "query argument is necessary due to required `SubscriptionName` field"
  var valid_609191 = query.getOrDefault("SubscriptionName")
  valid_609191 = validateParameter(valid_609191, JString, required = true,
                                 default = nil)
  if valid_609191 != nil:
    section.add "SubscriptionName", valid_609191
  var valid_609192 = query.getOrDefault("EventCategories")
  valid_609192 = validateParameter(valid_609192, JArray, required = false,
                                 default = nil)
  if valid_609192 != nil:
    section.add "EventCategories", valid_609192
  var valid_609193 = query.getOrDefault("Action")
  valid_609193 = validateParameter(valid_609193, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_609193 != nil:
    section.add "Action", valid_609193
  var valid_609194 = query.getOrDefault("SnsTopicArn")
  valid_609194 = validateParameter(valid_609194, JString, required = false,
                                 default = nil)
  if valid_609194 != nil:
    section.add "SnsTopicArn", valid_609194
  var valid_609195 = query.getOrDefault("Version")
  valid_609195 = validateParameter(valid_609195, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609195 != nil:
    section.add "Version", valid_609195
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609196 = header.getOrDefault("X-Amz-Signature")
  valid_609196 = validateParameter(valid_609196, JString, required = false,
                                 default = nil)
  if valid_609196 != nil:
    section.add "X-Amz-Signature", valid_609196
  var valid_609197 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609197 = validateParameter(valid_609197, JString, required = false,
                                 default = nil)
  if valid_609197 != nil:
    section.add "X-Amz-Content-Sha256", valid_609197
  var valid_609198 = header.getOrDefault("X-Amz-Date")
  valid_609198 = validateParameter(valid_609198, JString, required = false,
                                 default = nil)
  if valid_609198 != nil:
    section.add "X-Amz-Date", valid_609198
  var valid_609199 = header.getOrDefault("X-Amz-Credential")
  valid_609199 = validateParameter(valid_609199, JString, required = false,
                                 default = nil)
  if valid_609199 != nil:
    section.add "X-Amz-Credential", valid_609199
  var valid_609200 = header.getOrDefault("X-Amz-Security-Token")
  valid_609200 = validateParameter(valid_609200, JString, required = false,
                                 default = nil)
  if valid_609200 != nil:
    section.add "X-Amz-Security-Token", valid_609200
  var valid_609201 = header.getOrDefault("X-Amz-Algorithm")
  valid_609201 = validateParameter(valid_609201, JString, required = false,
                                 default = nil)
  if valid_609201 != nil:
    section.add "X-Amz-Algorithm", valid_609201
  var valid_609202 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609202 = validateParameter(valid_609202, JString, required = false,
                                 default = nil)
  if valid_609202 != nil:
    section.add "X-Amz-SignedHeaders", valid_609202
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609203: Call_GetModifyEventSubscription_609186; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_609203.validator(path, query, header, formData, body)
  let scheme = call_609203.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609203.url(scheme.get, call_609203.host, call_609203.base,
                         call_609203.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609203, url, valid)

proc call*(call_609204: Call_GetModifyEventSubscription_609186;
          SubscriptionName: string; SourceType: string = ""; Enabled: bool = false;
          EventCategories: JsonNode = nil;
          Action: string = "ModifyEventSubscription"; SnsTopicArn: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyEventSubscription
  ## <p>Modifies an existing RDS event notification subscription. Note that you can't modify the source identifiers using this call; to change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   Action: string (required)
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   Version: string (required)
  var query_609205 = newJObject()
  add(query_609205, "SourceType", newJString(SourceType))
  add(query_609205, "Enabled", newJBool(Enabled))
  add(query_609205, "SubscriptionName", newJString(SubscriptionName))
  if EventCategories != nil:
    query_609205.add "EventCategories", EventCategories
  add(query_609205, "Action", newJString(Action))
  add(query_609205, "SnsTopicArn", newJString(SnsTopicArn))
  add(query_609205, "Version", newJString(Version))
  result = call_609204.call(nil, query_609205, nil, nil, nil)

var getModifyEventSubscription* = Call_GetModifyEventSubscription_609186(
    name: "getModifyEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_GetModifyEventSubscription_609187, base: "/",
    url: url_GetModifyEventSubscription_609188,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyGlobalCluster_609245 = ref object of OpenApiRestCall_604389
proc url_PostModifyGlobalCluster_609247(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyGlobalCluster_609246(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609248 = query.getOrDefault("Action")
  valid_609248 = validateParameter(valid_609248, JString, required = true,
                                 default = newJString("ModifyGlobalCluster"))
  if valid_609248 != nil:
    section.add "Action", valid_609248
  var valid_609249 = query.getOrDefault("Version")
  valid_609249 = validateParameter(valid_609249, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609249 != nil:
    section.add "Version", valid_609249
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609250 = header.getOrDefault("X-Amz-Signature")
  valid_609250 = validateParameter(valid_609250, JString, required = false,
                                 default = nil)
  if valid_609250 != nil:
    section.add "X-Amz-Signature", valid_609250
  var valid_609251 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609251 = validateParameter(valid_609251, JString, required = false,
                                 default = nil)
  if valid_609251 != nil:
    section.add "X-Amz-Content-Sha256", valid_609251
  var valid_609252 = header.getOrDefault("X-Amz-Date")
  valid_609252 = validateParameter(valid_609252, JString, required = false,
                                 default = nil)
  if valid_609252 != nil:
    section.add "X-Amz-Date", valid_609252
  var valid_609253 = header.getOrDefault("X-Amz-Credential")
  valid_609253 = validateParameter(valid_609253, JString, required = false,
                                 default = nil)
  if valid_609253 != nil:
    section.add "X-Amz-Credential", valid_609253
  var valid_609254 = header.getOrDefault("X-Amz-Security-Token")
  valid_609254 = validateParameter(valid_609254, JString, required = false,
                                 default = nil)
  if valid_609254 != nil:
    section.add "X-Amz-Security-Token", valid_609254
  var valid_609255 = header.getOrDefault("X-Amz-Algorithm")
  valid_609255 = validateParameter(valid_609255, JString, required = false,
                                 default = nil)
  if valid_609255 != nil:
    section.add "X-Amz-Algorithm", valid_609255
  var valid_609256 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609256 = validateParameter(valid_609256, JString, required = false,
                                 default = nil)
  if valid_609256 != nil:
    section.add "X-Amz-SignedHeaders", valid_609256
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   NewGlobalClusterIdentifier: JString
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  section = newJObject()
  var valid_609257 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_609257 = validateParameter(valid_609257, JString, required = false,
                                 default = nil)
  if valid_609257 != nil:
    section.add "GlobalClusterIdentifier", valid_609257
  var valid_609258 = formData.getOrDefault("DeletionProtection")
  valid_609258 = validateParameter(valid_609258, JBool, required = false, default = nil)
  if valid_609258 != nil:
    section.add "DeletionProtection", valid_609258
  var valid_609259 = formData.getOrDefault("NewGlobalClusterIdentifier")
  valid_609259 = validateParameter(valid_609259, JString, required = false,
                                 default = nil)
  if valid_609259 != nil:
    section.add "NewGlobalClusterIdentifier", valid_609259
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609260: Call_PostModifyGlobalCluster_609245; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609260.validator(path, query, header, formData, body)
  let scheme = call_609260.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609260.url(scheme.get, call_609260.host, call_609260.base,
                         call_609260.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609260, url, valid)

proc call*(call_609261: Call_PostModifyGlobalCluster_609245;
          GlobalClusterIdentifier: string = "";
          Action: string = "ModifyGlobalCluster"; Version: string = "2014-10-31";
          DeletionProtection: bool = false; NewGlobalClusterIdentifier: string = ""): Recallable =
  ## postModifyGlobalCluster
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DeletionProtection: bool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   NewGlobalClusterIdentifier: string
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  var query_609262 = newJObject()
  var formData_609263 = newJObject()
  add(formData_609263, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_609262, "Action", newJString(Action))
  add(query_609262, "Version", newJString(Version))
  add(formData_609263, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_609263, "NewGlobalClusterIdentifier",
      newJString(NewGlobalClusterIdentifier))
  result = call_609261.call(nil, query_609262, nil, formData_609263, nil)

var postModifyGlobalCluster* = Call_PostModifyGlobalCluster_609245(
    name: "postModifyGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyGlobalCluster",
    validator: validate_PostModifyGlobalCluster_609246, base: "/",
    url: url_PostModifyGlobalCluster_609247, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyGlobalCluster_609227 = ref object of OpenApiRestCall_604389
proc url_GetModifyGlobalCluster_609229(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyGlobalCluster_609228(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewGlobalClusterIdentifier: JString
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609230 = query.getOrDefault("NewGlobalClusterIdentifier")
  valid_609230 = validateParameter(valid_609230, JString, required = false,
                                 default = nil)
  if valid_609230 != nil:
    section.add "NewGlobalClusterIdentifier", valid_609230
  var valid_609231 = query.getOrDefault("GlobalClusterIdentifier")
  valid_609231 = validateParameter(valid_609231, JString, required = false,
                                 default = nil)
  if valid_609231 != nil:
    section.add "GlobalClusterIdentifier", valid_609231
  var valid_609232 = query.getOrDefault("DeletionProtection")
  valid_609232 = validateParameter(valid_609232, JBool, required = false, default = nil)
  if valid_609232 != nil:
    section.add "DeletionProtection", valid_609232
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609233 = query.getOrDefault("Action")
  valid_609233 = validateParameter(valid_609233, JString, required = true,
                                 default = newJString("ModifyGlobalCluster"))
  if valid_609233 != nil:
    section.add "Action", valid_609233
  var valid_609234 = query.getOrDefault("Version")
  valid_609234 = validateParameter(valid_609234, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609234 != nil:
    section.add "Version", valid_609234
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609235 = header.getOrDefault("X-Amz-Signature")
  valid_609235 = validateParameter(valid_609235, JString, required = false,
                                 default = nil)
  if valid_609235 != nil:
    section.add "X-Amz-Signature", valid_609235
  var valid_609236 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609236 = validateParameter(valid_609236, JString, required = false,
                                 default = nil)
  if valid_609236 != nil:
    section.add "X-Amz-Content-Sha256", valid_609236
  var valid_609237 = header.getOrDefault("X-Amz-Date")
  valid_609237 = validateParameter(valid_609237, JString, required = false,
                                 default = nil)
  if valid_609237 != nil:
    section.add "X-Amz-Date", valid_609237
  var valid_609238 = header.getOrDefault("X-Amz-Credential")
  valid_609238 = validateParameter(valid_609238, JString, required = false,
                                 default = nil)
  if valid_609238 != nil:
    section.add "X-Amz-Credential", valid_609238
  var valid_609239 = header.getOrDefault("X-Amz-Security-Token")
  valid_609239 = validateParameter(valid_609239, JString, required = false,
                                 default = nil)
  if valid_609239 != nil:
    section.add "X-Amz-Security-Token", valid_609239
  var valid_609240 = header.getOrDefault("X-Amz-Algorithm")
  valid_609240 = validateParameter(valid_609240, JString, required = false,
                                 default = nil)
  if valid_609240 != nil:
    section.add "X-Amz-Algorithm", valid_609240
  var valid_609241 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609241 = validateParameter(valid_609241, JString, required = false,
                                 default = nil)
  if valid_609241 != nil:
    section.add "X-Amz-SignedHeaders", valid_609241
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609242: Call_GetModifyGlobalCluster_609227; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609242.validator(path, query, header, formData, body)
  let scheme = call_609242.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609242.url(scheme.get, call_609242.host, call_609242.base,
                         call_609242.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609242, url, valid)

proc call*(call_609243: Call_GetModifyGlobalCluster_609227;
          NewGlobalClusterIdentifier: string = "";
          GlobalClusterIdentifier: string = ""; DeletionProtection: bool = false;
          Action: string = "ModifyGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## getModifyGlobalCluster
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   NewGlobalClusterIdentifier: string
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609244 = newJObject()
  add(query_609244, "NewGlobalClusterIdentifier",
      newJString(NewGlobalClusterIdentifier))
  add(query_609244, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_609244, "DeletionProtection", newJBool(DeletionProtection))
  add(query_609244, "Action", newJString(Action))
  add(query_609244, "Version", newJString(Version))
  result = call_609243.call(nil, query_609244, nil, nil, nil)

var getModifyGlobalCluster* = Call_GetModifyGlobalCluster_609227(
    name: "getModifyGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyGlobalCluster",
    validator: validate_GetModifyGlobalCluster_609228, base: "/",
    url: url_GetModifyGlobalCluster_609229, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyOptionGroup_609283 = ref object of OpenApiRestCall_604389
proc url_PostModifyOptionGroup_609285(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyOptionGroup_609284(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609286 = query.getOrDefault("Action")
  valid_609286 = validateParameter(valid_609286, JString, required = true,
                                 default = newJString("ModifyOptionGroup"))
  if valid_609286 != nil:
    section.add "Action", valid_609286
  var valid_609287 = query.getOrDefault("Version")
  valid_609287 = validateParameter(valid_609287, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609287 != nil:
    section.add "Version", valid_609287
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609288 = header.getOrDefault("X-Amz-Signature")
  valid_609288 = validateParameter(valid_609288, JString, required = false,
                                 default = nil)
  if valid_609288 != nil:
    section.add "X-Amz-Signature", valid_609288
  var valid_609289 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609289 = validateParameter(valid_609289, JString, required = false,
                                 default = nil)
  if valid_609289 != nil:
    section.add "X-Amz-Content-Sha256", valid_609289
  var valid_609290 = header.getOrDefault("X-Amz-Date")
  valid_609290 = validateParameter(valid_609290, JString, required = false,
                                 default = nil)
  if valid_609290 != nil:
    section.add "X-Amz-Date", valid_609290
  var valid_609291 = header.getOrDefault("X-Amz-Credential")
  valid_609291 = validateParameter(valid_609291, JString, required = false,
                                 default = nil)
  if valid_609291 != nil:
    section.add "X-Amz-Credential", valid_609291
  var valid_609292 = header.getOrDefault("X-Amz-Security-Token")
  valid_609292 = validateParameter(valid_609292, JString, required = false,
                                 default = nil)
  if valid_609292 != nil:
    section.add "X-Amz-Security-Token", valid_609292
  var valid_609293 = header.getOrDefault("X-Amz-Algorithm")
  valid_609293 = validateParameter(valid_609293, JString, required = false,
                                 default = nil)
  if valid_609293 != nil:
    section.add "X-Amz-Algorithm", valid_609293
  var valid_609294 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609294 = validateParameter(valid_609294, JString, required = false,
                                 default = nil)
  if valid_609294 != nil:
    section.add "X-Amz-SignedHeaders", valid_609294
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   ApplyImmediately: JBool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  section = newJObject()
  var valid_609295 = formData.getOrDefault("OptionsToRemove")
  valid_609295 = validateParameter(valid_609295, JArray, required = false,
                                 default = nil)
  if valid_609295 != nil:
    section.add "OptionsToRemove", valid_609295
  var valid_609296 = formData.getOrDefault("ApplyImmediately")
  valid_609296 = validateParameter(valid_609296, JBool, required = false, default = nil)
  if valid_609296 != nil:
    section.add "ApplyImmediately", valid_609296
  var valid_609297 = formData.getOrDefault("OptionsToInclude")
  valid_609297 = validateParameter(valid_609297, JArray, required = false,
                                 default = nil)
  if valid_609297 != nil:
    section.add "OptionsToInclude", valid_609297
  assert formData != nil, "formData argument is necessary due to required `OptionGroupName` field"
  var valid_609298 = formData.getOrDefault("OptionGroupName")
  valid_609298 = validateParameter(valid_609298, JString, required = true,
                                 default = nil)
  if valid_609298 != nil:
    section.add "OptionGroupName", valid_609298
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609299: Call_PostModifyOptionGroup_609283; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing option group.
  ## 
  let valid = call_609299.validator(path, query, header, formData, body)
  let scheme = call_609299.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609299.url(scheme.get, call_609299.host, call_609299.base,
                         call_609299.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609299, url, valid)

proc call*(call_609300: Call_PostModifyOptionGroup_609283; OptionGroupName: string;
          OptionsToRemove: JsonNode = nil; ApplyImmediately: bool = false;
          OptionsToInclude: JsonNode = nil; Action: string = "ModifyOptionGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyOptionGroup
  ## Modifies an existing option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   ApplyImmediately: bool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   Action: string (required)
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  var query_609301 = newJObject()
  var formData_609302 = newJObject()
  if OptionsToRemove != nil:
    formData_609302.add "OptionsToRemove", OptionsToRemove
  add(formData_609302, "ApplyImmediately", newJBool(ApplyImmediately))
  if OptionsToInclude != nil:
    formData_609302.add "OptionsToInclude", OptionsToInclude
  add(query_609301, "Action", newJString(Action))
  add(formData_609302, "OptionGroupName", newJString(OptionGroupName))
  add(query_609301, "Version", newJString(Version))
  result = call_609300.call(nil, query_609301, nil, formData_609302, nil)

var postModifyOptionGroup* = Call_PostModifyOptionGroup_609283(
    name: "postModifyOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyOptionGroup",
    validator: validate_PostModifyOptionGroup_609284, base: "/",
    url: url_PostModifyOptionGroup_609285, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyOptionGroup_609264 = ref object of OpenApiRestCall_604389
proc url_GetModifyOptionGroup_609266(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyOptionGroup_609265(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609267 = query.getOrDefault("Action")
  valid_609267 = validateParameter(valid_609267, JString, required = true,
                                 default = newJString("ModifyOptionGroup"))
  if valid_609267 != nil:
    section.add "Action", valid_609267
  var valid_609268 = query.getOrDefault("ApplyImmediately")
  valid_609268 = validateParameter(valid_609268, JBool, required = false, default = nil)
  if valid_609268 != nil:
    section.add "ApplyImmediately", valid_609268
  var valid_609269 = query.getOrDefault("OptionsToRemove")
  valid_609269 = validateParameter(valid_609269, JArray, required = false,
                                 default = nil)
  if valid_609269 != nil:
    section.add "OptionsToRemove", valid_609269
  var valid_609270 = query.getOrDefault("OptionsToInclude")
  valid_609270 = validateParameter(valid_609270, JArray, required = false,
                                 default = nil)
  if valid_609270 != nil:
    section.add "OptionsToInclude", valid_609270
  var valid_609271 = query.getOrDefault("OptionGroupName")
  valid_609271 = validateParameter(valid_609271, JString, required = true,
                                 default = nil)
  if valid_609271 != nil:
    section.add "OptionGroupName", valid_609271
  var valid_609272 = query.getOrDefault("Version")
  valid_609272 = validateParameter(valid_609272, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609272 != nil:
    section.add "Version", valid_609272
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609273 = header.getOrDefault("X-Amz-Signature")
  valid_609273 = validateParameter(valid_609273, JString, required = false,
                                 default = nil)
  if valid_609273 != nil:
    section.add "X-Amz-Signature", valid_609273
  var valid_609274 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609274 = validateParameter(valid_609274, JString, required = false,
                                 default = nil)
  if valid_609274 != nil:
    section.add "X-Amz-Content-Sha256", valid_609274
  var valid_609275 = header.getOrDefault("X-Amz-Date")
  valid_609275 = validateParameter(valid_609275, JString, required = false,
                                 default = nil)
  if valid_609275 != nil:
    section.add "X-Amz-Date", valid_609275
  var valid_609276 = header.getOrDefault("X-Amz-Credential")
  valid_609276 = validateParameter(valid_609276, JString, required = false,
                                 default = nil)
  if valid_609276 != nil:
    section.add "X-Amz-Credential", valid_609276
  var valid_609277 = header.getOrDefault("X-Amz-Security-Token")
  valid_609277 = validateParameter(valid_609277, JString, required = false,
                                 default = nil)
  if valid_609277 != nil:
    section.add "X-Amz-Security-Token", valid_609277
  var valid_609278 = header.getOrDefault("X-Amz-Algorithm")
  valid_609278 = validateParameter(valid_609278, JString, required = false,
                                 default = nil)
  if valid_609278 != nil:
    section.add "X-Amz-Algorithm", valid_609278
  var valid_609279 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609279 = validateParameter(valid_609279, JString, required = false,
                                 default = nil)
  if valid_609279 != nil:
    section.add "X-Amz-SignedHeaders", valid_609279
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609280: Call_GetModifyOptionGroup_609264; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies an existing option group.
  ## 
  let valid = call_609280.validator(path, query, header, formData, body)
  let scheme = call_609280.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609280.url(scheme.get, call_609280.host, call_609280.base,
                         call_609280.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609280, url, valid)

proc call*(call_609281: Call_GetModifyOptionGroup_609264; OptionGroupName: string;
          Action: string = "ModifyOptionGroup"; ApplyImmediately: bool = false;
          OptionsToRemove: JsonNode = nil; OptionsToInclude: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## getModifyOptionGroup
  ## Modifies an existing option group.
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  var query_609282 = newJObject()
  add(query_609282, "Action", newJString(Action))
  add(query_609282, "ApplyImmediately", newJBool(ApplyImmediately))
  if OptionsToRemove != nil:
    query_609282.add "OptionsToRemove", OptionsToRemove
  if OptionsToInclude != nil:
    query_609282.add "OptionsToInclude", OptionsToInclude
  add(query_609282, "OptionGroupName", newJString(OptionGroupName))
  add(query_609282, "Version", newJString(Version))
  result = call_609281.call(nil, query_609282, nil, nil, nil)

var getModifyOptionGroup* = Call_GetModifyOptionGroup_609264(
    name: "getModifyOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyOptionGroup",
    validator: validate_GetModifyOptionGroup_609265, base: "/",
    url: url_GetModifyOptionGroup_609266, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplica_609321 = ref object of OpenApiRestCall_604389
proc url_PostPromoteReadReplica_609323(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPromoteReadReplica_609322(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609324 = query.getOrDefault("Action")
  valid_609324 = validateParameter(valid_609324, JString, required = true,
                                 default = newJString("PromoteReadReplica"))
  if valid_609324 != nil:
    section.add "Action", valid_609324
  var valid_609325 = query.getOrDefault("Version")
  valid_609325 = validateParameter(valid_609325, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609325 != nil:
    section.add "Version", valid_609325
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609326 = header.getOrDefault("X-Amz-Signature")
  valid_609326 = validateParameter(valid_609326, JString, required = false,
                                 default = nil)
  if valid_609326 != nil:
    section.add "X-Amz-Signature", valid_609326
  var valid_609327 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609327 = validateParameter(valid_609327, JString, required = false,
                                 default = nil)
  if valid_609327 != nil:
    section.add "X-Amz-Content-Sha256", valid_609327
  var valid_609328 = header.getOrDefault("X-Amz-Date")
  valid_609328 = validateParameter(valid_609328, JString, required = false,
                                 default = nil)
  if valid_609328 != nil:
    section.add "X-Amz-Date", valid_609328
  var valid_609329 = header.getOrDefault("X-Amz-Credential")
  valid_609329 = validateParameter(valid_609329, JString, required = false,
                                 default = nil)
  if valid_609329 != nil:
    section.add "X-Amz-Credential", valid_609329
  var valid_609330 = header.getOrDefault("X-Amz-Security-Token")
  valid_609330 = validateParameter(valid_609330, JString, required = false,
                                 default = nil)
  if valid_609330 != nil:
    section.add "X-Amz-Security-Token", valid_609330
  var valid_609331 = header.getOrDefault("X-Amz-Algorithm")
  valid_609331 = validateParameter(valid_609331, JString, required = false,
                                 default = nil)
  if valid_609331 != nil:
    section.add "X-Amz-Algorithm", valid_609331
  var valid_609332 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609332 = validateParameter(valid_609332, JString, required = false,
                                 default = nil)
  if valid_609332 != nil:
    section.add "X-Amz-SignedHeaders", valid_609332
  result.add "header", section
  ## parameters in `formData` object:
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  section = newJObject()
  var valid_609333 = formData.getOrDefault("PreferredBackupWindow")
  valid_609333 = validateParameter(valid_609333, JString, required = false,
                                 default = nil)
  if valid_609333 != nil:
    section.add "PreferredBackupWindow", valid_609333
  var valid_609334 = formData.getOrDefault("BackupRetentionPeriod")
  valid_609334 = validateParameter(valid_609334, JInt, required = false, default = nil)
  if valid_609334 != nil:
    section.add "BackupRetentionPeriod", valid_609334
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_609335 = formData.getOrDefault("DBInstanceIdentifier")
  valid_609335 = validateParameter(valid_609335, JString, required = true,
                                 default = nil)
  if valid_609335 != nil:
    section.add "DBInstanceIdentifier", valid_609335
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609336: Call_PostPromoteReadReplica_609321; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  let valid = call_609336.validator(path, query, header, formData, body)
  let scheme = call_609336.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609336.url(scheme.get, call_609336.host, call_609336.base,
                         call_609336.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609336, url, valid)

proc call*(call_609337: Call_PostPromoteReadReplica_609321;
          DBInstanceIdentifier: string; PreferredBackupWindow: string = "";
          BackupRetentionPeriod: int = 0; Action: string = "PromoteReadReplica";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplica
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609338 = newJObject()
  var formData_609339 = newJObject()
  add(formData_609339, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_609339, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_609339, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_609338, "Action", newJString(Action))
  add(query_609338, "Version", newJString(Version))
  result = call_609337.call(nil, query_609338, nil, formData_609339, nil)

var postPromoteReadReplica* = Call_PostPromoteReadReplica_609321(
    name: "postPromoteReadReplica", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplica",
    validator: validate_PostPromoteReadReplica_609322, base: "/",
    url: url_PostPromoteReadReplica_609323, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplica_609303 = ref object of OpenApiRestCall_604389
proc url_GetPromoteReadReplica_609305(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPromoteReadReplica_609304(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_609306 = query.getOrDefault("DBInstanceIdentifier")
  valid_609306 = validateParameter(valid_609306, JString, required = true,
                                 default = nil)
  if valid_609306 != nil:
    section.add "DBInstanceIdentifier", valid_609306
  var valid_609307 = query.getOrDefault("BackupRetentionPeriod")
  valid_609307 = validateParameter(valid_609307, JInt, required = false, default = nil)
  if valid_609307 != nil:
    section.add "BackupRetentionPeriod", valid_609307
  var valid_609308 = query.getOrDefault("Action")
  valid_609308 = validateParameter(valid_609308, JString, required = true,
                                 default = newJString("PromoteReadReplica"))
  if valid_609308 != nil:
    section.add "Action", valid_609308
  var valid_609309 = query.getOrDefault("Version")
  valid_609309 = validateParameter(valid_609309, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609309 != nil:
    section.add "Version", valid_609309
  var valid_609310 = query.getOrDefault("PreferredBackupWindow")
  valid_609310 = validateParameter(valid_609310, JString, required = false,
                                 default = nil)
  if valid_609310 != nil:
    section.add "PreferredBackupWindow", valid_609310
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609311 = header.getOrDefault("X-Amz-Signature")
  valid_609311 = validateParameter(valid_609311, JString, required = false,
                                 default = nil)
  if valid_609311 != nil:
    section.add "X-Amz-Signature", valid_609311
  var valid_609312 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609312 = validateParameter(valid_609312, JString, required = false,
                                 default = nil)
  if valid_609312 != nil:
    section.add "X-Amz-Content-Sha256", valid_609312
  var valid_609313 = header.getOrDefault("X-Amz-Date")
  valid_609313 = validateParameter(valid_609313, JString, required = false,
                                 default = nil)
  if valid_609313 != nil:
    section.add "X-Amz-Date", valid_609313
  var valid_609314 = header.getOrDefault("X-Amz-Credential")
  valid_609314 = validateParameter(valid_609314, JString, required = false,
                                 default = nil)
  if valid_609314 != nil:
    section.add "X-Amz-Credential", valid_609314
  var valid_609315 = header.getOrDefault("X-Amz-Security-Token")
  valid_609315 = validateParameter(valid_609315, JString, required = false,
                                 default = nil)
  if valid_609315 != nil:
    section.add "X-Amz-Security-Token", valid_609315
  var valid_609316 = header.getOrDefault("X-Amz-Algorithm")
  valid_609316 = validateParameter(valid_609316, JString, required = false,
                                 default = nil)
  if valid_609316 != nil:
    section.add "X-Amz-Algorithm", valid_609316
  var valid_609317 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609317 = validateParameter(valid_609317, JString, required = false,
                                 default = nil)
  if valid_609317 != nil:
    section.add "X-Amz-SignedHeaders", valid_609317
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609318: Call_GetPromoteReadReplica_609303; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  let valid = call_609318.validator(path, query, header, formData, body)
  let scheme = call_609318.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609318.url(scheme.get, call_609318.host, call_609318.base,
                         call_609318.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609318, url, valid)

proc call*(call_609319: Call_GetPromoteReadReplica_609303;
          DBInstanceIdentifier: string; BackupRetentionPeriod: int = 0;
          Action: string = "PromoteReadReplica"; Version: string = "2014-10-31";
          PreferredBackupWindow: string = ""): Recallable =
  ## getPromoteReadReplica
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  var query_609320 = newJObject()
  add(query_609320, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_609320, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_609320, "Action", newJString(Action))
  add(query_609320, "Version", newJString(Version))
  add(query_609320, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  result = call_609319.call(nil, query_609320, nil, nil, nil)

var getPromoteReadReplica* = Call_GetPromoteReadReplica_609303(
    name: "getPromoteReadReplica", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplica",
    validator: validate_GetPromoteReadReplica_609304, base: "/",
    url: url_GetPromoteReadReplica_609305, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplicaDBCluster_609356 = ref object of OpenApiRestCall_604389
proc url_PostPromoteReadReplicaDBCluster_609358(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPromoteReadReplicaDBCluster_609357(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609359 = query.getOrDefault("Action")
  valid_609359 = validateParameter(valid_609359, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_609359 != nil:
    section.add "Action", valid_609359
  var valid_609360 = query.getOrDefault("Version")
  valid_609360 = validateParameter(valid_609360, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609360 != nil:
    section.add "Version", valid_609360
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609361 = header.getOrDefault("X-Amz-Signature")
  valid_609361 = validateParameter(valid_609361, JString, required = false,
                                 default = nil)
  if valid_609361 != nil:
    section.add "X-Amz-Signature", valid_609361
  var valid_609362 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609362 = validateParameter(valid_609362, JString, required = false,
                                 default = nil)
  if valid_609362 != nil:
    section.add "X-Amz-Content-Sha256", valid_609362
  var valid_609363 = header.getOrDefault("X-Amz-Date")
  valid_609363 = validateParameter(valid_609363, JString, required = false,
                                 default = nil)
  if valid_609363 != nil:
    section.add "X-Amz-Date", valid_609363
  var valid_609364 = header.getOrDefault("X-Amz-Credential")
  valid_609364 = validateParameter(valid_609364, JString, required = false,
                                 default = nil)
  if valid_609364 != nil:
    section.add "X-Amz-Credential", valid_609364
  var valid_609365 = header.getOrDefault("X-Amz-Security-Token")
  valid_609365 = validateParameter(valid_609365, JString, required = false,
                                 default = nil)
  if valid_609365 != nil:
    section.add "X-Amz-Security-Token", valid_609365
  var valid_609366 = header.getOrDefault("X-Amz-Algorithm")
  valid_609366 = validateParameter(valid_609366, JString, required = false,
                                 default = nil)
  if valid_609366 != nil:
    section.add "X-Amz-Algorithm", valid_609366
  var valid_609367 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609367 = validateParameter(valid_609367, JString, required = false,
                                 default = nil)
  if valid_609367 != nil:
    section.add "X-Amz-SignedHeaders", valid_609367
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_609368 = formData.getOrDefault("DBClusterIdentifier")
  valid_609368 = validateParameter(valid_609368, JString, required = true,
                                 default = nil)
  if valid_609368 != nil:
    section.add "DBClusterIdentifier", valid_609368
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609369: Call_PostPromoteReadReplicaDBCluster_609356;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609369.validator(path, query, header, formData, body)
  let scheme = call_609369.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609369.url(scheme.get, call_609369.host, call_609369.base,
                         call_609369.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609369, url, valid)

proc call*(call_609370: Call_PostPromoteReadReplicaDBCluster_609356;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplicaDBCluster
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  var query_609371 = newJObject()
  var formData_609372 = newJObject()
  add(query_609371, "Action", newJString(Action))
  add(query_609371, "Version", newJString(Version))
  add(formData_609372, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_609370.call(nil, query_609371, nil, formData_609372, nil)

var postPromoteReadReplicaDBCluster* = Call_PostPromoteReadReplicaDBCluster_609356(
    name: "postPromoteReadReplicaDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_PostPromoteReadReplicaDBCluster_609357, base: "/",
    url: url_PostPromoteReadReplicaDBCluster_609358,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplicaDBCluster_609340 = ref object of OpenApiRestCall_604389
proc url_GetPromoteReadReplicaDBCluster_609342(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPromoteReadReplicaDBCluster_609341(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_609343 = query.getOrDefault("DBClusterIdentifier")
  valid_609343 = validateParameter(valid_609343, JString, required = true,
                                 default = nil)
  if valid_609343 != nil:
    section.add "DBClusterIdentifier", valid_609343
  var valid_609344 = query.getOrDefault("Action")
  valid_609344 = validateParameter(valid_609344, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_609344 != nil:
    section.add "Action", valid_609344
  var valid_609345 = query.getOrDefault("Version")
  valid_609345 = validateParameter(valid_609345, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609345 != nil:
    section.add "Version", valid_609345
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609346 = header.getOrDefault("X-Amz-Signature")
  valid_609346 = validateParameter(valid_609346, JString, required = false,
                                 default = nil)
  if valid_609346 != nil:
    section.add "X-Amz-Signature", valid_609346
  var valid_609347 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609347 = validateParameter(valid_609347, JString, required = false,
                                 default = nil)
  if valid_609347 != nil:
    section.add "X-Amz-Content-Sha256", valid_609347
  var valid_609348 = header.getOrDefault("X-Amz-Date")
  valid_609348 = validateParameter(valid_609348, JString, required = false,
                                 default = nil)
  if valid_609348 != nil:
    section.add "X-Amz-Date", valid_609348
  var valid_609349 = header.getOrDefault("X-Amz-Credential")
  valid_609349 = validateParameter(valid_609349, JString, required = false,
                                 default = nil)
  if valid_609349 != nil:
    section.add "X-Amz-Credential", valid_609349
  var valid_609350 = header.getOrDefault("X-Amz-Security-Token")
  valid_609350 = validateParameter(valid_609350, JString, required = false,
                                 default = nil)
  if valid_609350 != nil:
    section.add "X-Amz-Security-Token", valid_609350
  var valid_609351 = header.getOrDefault("X-Amz-Algorithm")
  valid_609351 = validateParameter(valid_609351, JString, required = false,
                                 default = nil)
  if valid_609351 != nil:
    section.add "X-Amz-Algorithm", valid_609351
  var valid_609352 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609352 = validateParameter(valid_609352, JString, required = false,
                                 default = nil)
  if valid_609352 != nil:
    section.add "X-Amz-SignedHeaders", valid_609352
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609353: Call_GetPromoteReadReplicaDBCluster_609340; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609353.validator(path, query, header, formData, body)
  let scheme = call_609353.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609353.url(scheme.get, call_609353.host, call_609353.base,
                         call_609353.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609353, url, valid)

proc call*(call_609354: Call_GetPromoteReadReplicaDBCluster_609340;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getPromoteReadReplicaDBCluster
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609355 = newJObject()
  add(query_609355, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_609355, "Action", newJString(Action))
  add(query_609355, "Version", newJString(Version))
  result = call_609354.call(nil, query_609355, nil, nil, nil)

var getPromoteReadReplicaDBCluster* = Call_GetPromoteReadReplicaDBCluster_609340(
    name: "getPromoteReadReplicaDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_GetPromoteReadReplicaDBCluster_609341, base: "/",
    url: url_GetPromoteReadReplicaDBCluster_609342,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPurchaseReservedDBInstancesOffering_609392 = ref object of OpenApiRestCall_604389
proc url_PostPurchaseReservedDBInstancesOffering_609394(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPurchaseReservedDBInstancesOffering_609393(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Purchases a reserved DB instance offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609395 = query.getOrDefault("Action")
  valid_609395 = validateParameter(valid_609395, JString, required = true, default = newJString(
      "PurchaseReservedDBInstancesOffering"))
  if valid_609395 != nil:
    section.add "Action", valid_609395
  var valid_609396 = query.getOrDefault("Version")
  valid_609396 = validateParameter(valid_609396, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609396 != nil:
    section.add "Version", valid_609396
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609397 = header.getOrDefault("X-Amz-Signature")
  valid_609397 = validateParameter(valid_609397, JString, required = false,
                                 default = nil)
  if valid_609397 != nil:
    section.add "X-Amz-Signature", valid_609397
  var valid_609398 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609398 = validateParameter(valid_609398, JString, required = false,
                                 default = nil)
  if valid_609398 != nil:
    section.add "X-Amz-Content-Sha256", valid_609398
  var valid_609399 = header.getOrDefault("X-Amz-Date")
  valid_609399 = validateParameter(valid_609399, JString, required = false,
                                 default = nil)
  if valid_609399 != nil:
    section.add "X-Amz-Date", valid_609399
  var valid_609400 = header.getOrDefault("X-Amz-Credential")
  valid_609400 = validateParameter(valid_609400, JString, required = false,
                                 default = nil)
  if valid_609400 != nil:
    section.add "X-Amz-Credential", valid_609400
  var valid_609401 = header.getOrDefault("X-Amz-Security-Token")
  valid_609401 = validateParameter(valid_609401, JString, required = false,
                                 default = nil)
  if valid_609401 != nil:
    section.add "X-Amz-Security-Token", valid_609401
  var valid_609402 = header.getOrDefault("X-Amz-Algorithm")
  valid_609402 = validateParameter(valid_609402, JString, required = false,
                                 default = nil)
  if valid_609402 != nil:
    section.add "X-Amz-Algorithm", valid_609402
  var valid_609403 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609403 = validateParameter(valid_609403, JString, required = false,
                                 default = nil)
  if valid_609403 != nil:
    section.add "X-Amz-SignedHeaders", valid_609403
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReservedDBInstanceId: JString
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ReservedDBInstancesOfferingId: JString (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   DBInstanceCount: JInt
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  section = newJObject()
  var valid_609404 = formData.getOrDefault("ReservedDBInstanceId")
  valid_609404 = validateParameter(valid_609404, JString, required = false,
                                 default = nil)
  if valid_609404 != nil:
    section.add "ReservedDBInstanceId", valid_609404
  var valid_609405 = formData.getOrDefault("Tags")
  valid_609405 = validateParameter(valid_609405, JArray, required = false,
                                 default = nil)
  if valid_609405 != nil:
    section.add "Tags", valid_609405
  assert formData != nil, "formData argument is necessary due to required `ReservedDBInstancesOfferingId` field"
  var valid_609406 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_609406 = validateParameter(valid_609406, JString, required = true,
                                 default = nil)
  if valid_609406 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_609406
  var valid_609407 = formData.getOrDefault("DBInstanceCount")
  valid_609407 = validateParameter(valid_609407, JInt, required = false, default = nil)
  if valid_609407 != nil:
    section.add "DBInstanceCount", valid_609407
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609408: Call_PostPurchaseReservedDBInstancesOffering_609392;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Purchases a reserved DB instance offering.
  ## 
  let valid = call_609408.validator(path, query, header, formData, body)
  let scheme = call_609408.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609408.url(scheme.get, call_609408.host, call_609408.base,
                         call_609408.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609408, url, valid)

proc call*(call_609409: Call_PostPurchaseReservedDBInstancesOffering_609392;
          ReservedDBInstancesOfferingId: string;
          ReservedDBInstanceId: string = "";
          Action: string = "PurchaseReservedDBInstancesOffering";
          Tags: JsonNode = nil; Version: string = "2014-10-31"; DBInstanceCount: int = 0): Recallable =
  ## postPurchaseReservedDBInstancesOffering
  ## Purchases a reserved DB instance offering.
  ##   ReservedDBInstanceId: string
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ReservedDBInstancesOfferingId: string (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: string (required)
  ##   DBInstanceCount: int
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  var query_609410 = newJObject()
  var formData_609411 = newJObject()
  add(formData_609411, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_609410, "Action", newJString(Action))
  if Tags != nil:
    formData_609411.add "Tags", Tags
  add(formData_609411, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_609410, "Version", newJString(Version))
  add(formData_609411, "DBInstanceCount", newJInt(DBInstanceCount))
  result = call_609409.call(nil, query_609410, nil, formData_609411, nil)

var postPurchaseReservedDBInstancesOffering* = Call_PostPurchaseReservedDBInstancesOffering_609392(
    name: "postPurchaseReservedDBInstancesOffering", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=PurchaseReservedDBInstancesOffering",
    validator: validate_PostPurchaseReservedDBInstancesOffering_609393, base: "/",
    url: url_PostPurchaseReservedDBInstancesOffering_609394,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPurchaseReservedDBInstancesOffering_609373 = ref object of OpenApiRestCall_604389
proc url_GetPurchaseReservedDBInstancesOffering_609375(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPurchaseReservedDBInstancesOffering_609374(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Purchases a reserved DB instance offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceCount: JInt
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedDBInstanceId: JString
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Action: JString (required)
  ##   ReservedDBInstancesOfferingId: JString (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_609376 = query.getOrDefault("Tags")
  valid_609376 = validateParameter(valid_609376, JArray, required = false,
                                 default = nil)
  if valid_609376 != nil:
    section.add "Tags", valid_609376
  var valid_609377 = query.getOrDefault("DBInstanceCount")
  valid_609377 = validateParameter(valid_609377, JInt, required = false, default = nil)
  if valid_609377 != nil:
    section.add "DBInstanceCount", valid_609377
  var valid_609378 = query.getOrDefault("ReservedDBInstanceId")
  valid_609378 = validateParameter(valid_609378, JString, required = false,
                                 default = nil)
  if valid_609378 != nil:
    section.add "ReservedDBInstanceId", valid_609378
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609379 = query.getOrDefault("Action")
  valid_609379 = validateParameter(valid_609379, JString, required = true, default = newJString(
      "PurchaseReservedDBInstancesOffering"))
  if valid_609379 != nil:
    section.add "Action", valid_609379
  var valid_609380 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_609380 = validateParameter(valid_609380, JString, required = true,
                                 default = nil)
  if valid_609380 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_609380
  var valid_609381 = query.getOrDefault("Version")
  valid_609381 = validateParameter(valid_609381, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609381 != nil:
    section.add "Version", valid_609381
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609382 = header.getOrDefault("X-Amz-Signature")
  valid_609382 = validateParameter(valid_609382, JString, required = false,
                                 default = nil)
  if valid_609382 != nil:
    section.add "X-Amz-Signature", valid_609382
  var valid_609383 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609383 = validateParameter(valid_609383, JString, required = false,
                                 default = nil)
  if valid_609383 != nil:
    section.add "X-Amz-Content-Sha256", valid_609383
  var valid_609384 = header.getOrDefault("X-Amz-Date")
  valid_609384 = validateParameter(valid_609384, JString, required = false,
                                 default = nil)
  if valid_609384 != nil:
    section.add "X-Amz-Date", valid_609384
  var valid_609385 = header.getOrDefault("X-Amz-Credential")
  valid_609385 = validateParameter(valid_609385, JString, required = false,
                                 default = nil)
  if valid_609385 != nil:
    section.add "X-Amz-Credential", valid_609385
  var valid_609386 = header.getOrDefault("X-Amz-Security-Token")
  valid_609386 = validateParameter(valid_609386, JString, required = false,
                                 default = nil)
  if valid_609386 != nil:
    section.add "X-Amz-Security-Token", valid_609386
  var valid_609387 = header.getOrDefault("X-Amz-Algorithm")
  valid_609387 = validateParameter(valid_609387, JString, required = false,
                                 default = nil)
  if valid_609387 != nil:
    section.add "X-Amz-Algorithm", valid_609387
  var valid_609388 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609388 = validateParameter(valid_609388, JString, required = false,
                                 default = nil)
  if valid_609388 != nil:
    section.add "X-Amz-SignedHeaders", valid_609388
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609389: Call_GetPurchaseReservedDBInstancesOffering_609373;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Purchases a reserved DB instance offering.
  ## 
  let valid = call_609389.validator(path, query, header, formData, body)
  let scheme = call_609389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609389.url(scheme.get, call_609389.host, call_609389.base,
                         call_609389.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609389, url, valid)

proc call*(call_609390: Call_GetPurchaseReservedDBInstancesOffering_609373;
          ReservedDBInstancesOfferingId: string; Tags: JsonNode = nil;
          DBInstanceCount: int = 0; ReservedDBInstanceId: string = "";
          Action: string = "PurchaseReservedDBInstancesOffering";
          Version: string = "2014-10-31"): Recallable =
  ## getPurchaseReservedDBInstancesOffering
  ## Purchases a reserved DB instance offering.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceCount: int
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedDBInstanceId: string
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Action: string (required)
  ##   ReservedDBInstancesOfferingId: string (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: string (required)
  var query_609391 = newJObject()
  if Tags != nil:
    query_609391.add "Tags", Tags
  add(query_609391, "DBInstanceCount", newJInt(DBInstanceCount))
  add(query_609391, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_609391, "Action", newJString(Action))
  add(query_609391, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_609391, "Version", newJString(Version))
  result = call_609390.call(nil, query_609391, nil, nil, nil)

var getPurchaseReservedDBInstancesOffering* = Call_GetPurchaseReservedDBInstancesOffering_609373(
    name: "getPurchaseReservedDBInstancesOffering", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=PurchaseReservedDBInstancesOffering",
    validator: validate_GetPurchaseReservedDBInstancesOffering_609374, base: "/",
    url: url_GetPurchaseReservedDBInstancesOffering_609375,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootDBInstance_609429 = ref object of OpenApiRestCall_604389
proc url_PostRebootDBInstance_609431(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRebootDBInstance_609430(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609432 = query.getOrDefault("Action")
  valid_609432 = validateParameter(valid_609432, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_609432 != nil:
    section.add "Action", valid_609432
  var valid_609433 = query.getOrDefault("Version")
  valid_609433 = validateParameter(valid_609433, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609433 != nil:
    section.add "Version", valid_609433
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609434 = header.getOrDefault("X-Amz-Signature")
  valid_609434 = validateParameter(valid_609434, JString, required = false,
                                 default = nil)
  if valid_609434 != nil:
    section.add "X-Amz-Signature", valid_609434
  var valid_609435 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609435 = validateParameter(valid_609435, JString, required = false,
                                 default = nil)
  if valid_609435 != nil:
    section.add "X-Amz-Content-Sha256", valid_609435
  var valid_609436 = header.getOrDefault("X-Amz-Date")
  valid_609436 = validateParameter(valid_609436, JString, required = false,
                                 default = nil)
  if valid_609436 != nil:
    section.add "X-Amz-Date", valid_609436
  var valid_609437 = header.getOrDefault("X-Amz-Credential")
  valid_609437 = validateParameter(valid_609437, JString, required = false,
                                 default = nil)
  if valid_609437 != nil:
    section.add "X-Amz-Credential", valid_609437
  var valid_609438 = header.getOrDefault("X-Amz-Security-Token")
  valid_609438 = validateParameter(valid_609438, JString, required = false,
                                 default = nil)
  if valid_609438 != nil:
    section.add "X-Amz-Security-Token", valid_609438
  var valid_609439 = header.getOrDefault("X-Amz-Algorithm")
  valid_609439 = validateParameter(valid_609439, JString, required = false,
                                 default = nil)
  if valid_609439 != nil:
    section.add "X-Amz-Algorithm", valid_609439
  var valid_609440 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609440 = validateParameter(valid_609440, JString, required = false,
                                 default = nil)
  if valid_609440 != nil:
    section.add "X-Amz-SignedHeaders", valid_609440
  result.add "header", section
  ## parameters in `formData` object:
  ##   ForceFailover: JBool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_609441 = formData.getOrDefault("ForceFailover")
  valid_609441 = validateParameter(valid_609441, JBool, required = false, default = nil)
  if valid_609441 != nil:
    section.add "ForceFailover", valid_609441
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_609442 = formData.getOrDefault("DBInstanceIdentifier")
  valid_609442 = validateParameter(valid_609442, JString, required = true,
                                 default = nil)
  if valid_609442 != nil:
    section.add "DBInstanceIdentifier", valid_609442
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609443: Call_PostRebootDBInstance_609429; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_609443.validator(path, query, header, formData, body)
  let scheme = call_609443.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609443.url(scheme.get, call_609443.host, call_609443.base,
                         call_609443.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609443, url, valid)

proc call*(call_609444: Call_PostRebootDBInstance_609429;
          DBInstanceIdentifier: string; ForceFailover: bool = false;
          Action: string = "RebootDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ForceFailover: bool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609445 = newJObject()
  var formData_609446 = newJObject()
  add(formData_609446, "ForceFailover", newJBool(ForceFailover))
  add(formData_609446, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_609445, "Action", newJString(Action))
  add(query_609445, "Version", newJString(Version))
  result = call_609444.call(nil, query_609445, nil, formData_609446, nil)

var postRebootDBInstance* = Call_PostRebootDBInstance_609429(
    name: "postRebootDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_PostRebootDBInstance_609430, base: "/",
    url: url_PostRebootDBInstance_609431, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootDBInstance_609412 = ref object of OpenApiRestCall_604389
proc url_GetRebootDBInstance_609414(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRebootDBInstance_609413(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ForceFailover: JBool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609415 = query.getOrDefault("ForceFailover")
  valid_609415 = validateParameter(valid_609415, JBool, required = false, default = nil)
  if valid_609415 != nil:
    section.add "ForceFailover", valid_609415
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_609416 = query.getOrDefault("DBInstanceIdentifier")
  valid_609416 = validateParameter(valid_609416, JString, required = true,
                                 default = nil)
  if valid_609416 != nil:
    section.add "DBInstanceIdentifier", valid_609416
  var valid_609417 = query.getOrDefault("Action")
  valid_609417 = validateParameter(valid_609417, JString, required = true,
                                 default = newJString("RebootDBInstance"))
  if valid_609417 != nil:
    section.add "Action", valid_609417
  var valid_609418 = query.getOrDefault("Version")
  valid_609418 = validateParameter(valid_609418, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609418 != nil:
    section.add "Version", valid_609418
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609419 = header.getOrDefault("X-Amz-Signature")
  valid_609419 = validateParameter(valid_609419, JString, required = false,
                                 default = nil)
  if valid_609419 != nil:
    section.add "X-Amz-Signature", valid_609419
  var valid_609420 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609420 = validateParameter(valid_609420, JString, required = false,
                                 default = nil)
  if valid_609420 != nil:
    section.add "X-Amz-Content-Sha256", valid_609420
  var valid_609421 = header.getOrDefault("X-Amz-Date")
  valid_609421 = validateParameter(valid_609421, JString, required = false,
                                 default = nil)
  if valid_609421 != nil:
    section.add "X-Amz-Date", valid_609421
  var valid_609422 = header.getOrDefault("X-Amz-Credential")
  valid_609422 = validateParameter(valid_609422, JString, required = false,
                                 default = nil)
  if valid_609422 != nil:
    section.add "X-Amz-Credential", valid_609422
  var valid_609423 = header.getOrDefault("X-Amz-Security-Token")
  valid_609423 = validateParameter(valid_609423, JString, required = false,
                                 default = nil)
  if valid_609423 != nil:
    section.add "X-Amz-Security-Token", valid_609423
  var valid_609424 = header.getOrDefault("X-Amz-Algorithm")
  valid_609424 = validateParameter(valid_609424, JString, required = false,
                                 default = nil)
  if valid_609424 != nil:
    section.add "X-Amz-Algorithm", valid_609424
  var valid_609425 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609425 = validateParameter(valid_609425, JString, required = false,
                                 default = nil)
  if valid_609425 != nil:
    section.add "X-Amz-SignedHeaders", valid_609425
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609426: Call_GetRebootDBInstance_609412; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_609426.validator(path, query, header, formData, body)
  let scheme = call_609426.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609426.url(scheme.get, call_609426.host, call_609426.base,
                         call_609426.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609426, url, valid)

proc call*(call_609427: Call_GetRebootDBInstance_609412;
          DBInstanceIdentifier: string; ForceFailover: bool = false;
          Action: string = "RebootDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ForceFailover: bool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609428 = newJObject()
  add(query_609428, "ForceFailover", newJBool(ForceFailover))
  add(query_609428, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_609428, "Action", newJString(Action))
  add(query_609428, "Version", newJString(Version))
  result = call_609427.call(nil, query_609428, nil, nil, nil)

var getRebootDBInstance* = Call_GetRebootDBInstance_609412(
    name: "getRebootDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_GetRebootDBInstance_609413, base: "/",
    url: url_GetRebootDBInstance_609414, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRegisterDBProxyTargets_609466 = ref object of OpenApiRestCall_604389
proc url_PostRegisterDBProxyTargets_609468(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRegisterDBProxyTargets_609467(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609469 = query.getOrDefault("Action")
  valid_609469 = validateParameter(valid_609469, JString, required = true,
                                 default = newJString("RegisterDBProxyTargets"))
  if valid_609469 != nil:
    section.add "Action", valid_609469
  var valid_609470 = query.getOrDefault("Version")
  valid_609470 = validateParameter(valid_609470, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609470 != nil:
    section.add "Version", valid_609470
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609471 = header.getOrDefault("X-Amz-Signature")
  valid_609471 = validateParameter(valid_609471, JString, required = false,
                                 default = nil)
  if valid_609471 != nil:
    section.add "X-Amz-Signature", valid_609471
  var valid_609472 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609472 = validateParameter(valid_609472, JString, required = false,
                                 default = nil)
  if valid_609472 != nil:
    section.add "X-Amz-Content-Sha256", valid_609472
  var valid_609473 = header.getOrDefault("X-Amz-Date")
  valid_609473 = validateParameter(valid_609473, JString, required = false,
                                 default = nil)
  if valid_609473 != nil:
    section.add "X-Amz-Date", valid_609473
  var valid_609474 = header.getOrDefault("X-Amz-Credential")
  valid_609474 = validateParameter(valid_609474, JString, required = false,
                                 default = nil)
  if valid_609474 != nil:
    section.add "X-Amz-Credential", valid_609474
  var valid_609475 = header.getOrDefault("X-Amz-Security-Token")
  valid_609475 = validateParameter(valid_609475, JString, required = false,
                                 default = nil)
  if valid_609475 != nil:
    section.add "X-Amz-Security-Token", valid_609475
  var valid_609476 = header.getOrDefault("X-Amz-Algorithm")
  valid_609476 = validateParameter(valid_609476, JString, required = false,
                                 default = nil)
  if valid_609476 != nil:
    section.add "X-Amz-Algorithm", valid_609476
  var valid_609477 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609477 = validateParameter(valid_609477, JString, required = false,
                                 default = nil)
  if valid_609477 != nil:
    section.add "X-Amz-SignedHeaders", valid_609477
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  section = newJObject()
  var valid_609478 = formData.getOrDefault("TargetGroupName")
  valid_609478 = validateParameter(valid_609478, JString, required = false,
                                 default = nil)
  if valid_609478 != nil:
    section.add "TargetGroupName", valid_609478
  var valid_609479 = formData.getOrDefault("DBInstanceIdentifiers")
  valid_609479 = validateParameter(valid_609479, JArray, required = false,
                                 default = nil)
  if valid_609479 != nil:
    section.add "DBInstanceIdentifiers", valid_609479
  var valid_609480 = formData.getOrDefault("DBClusterIdentifiers")
  valid_609480 = validateParameter(valid_609480, JArray, required = false,
                                 default = nil)
  if valid_609480 != nil:
    section.add "DBClusterIdentifiers", valid_609480
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_609481 = formData.getOrDefault("DBProxyName")
  valid_609481 = validateParameter(valid_609481, JString, required = true,
                                 default = nil)
  if valid_609481 != nil:
    section.add "DBProxyName", valid_609481
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609482: Call_PostRegisterDBProxyTargets_609466; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_609482.validator(path, query, header, formData, body)
  let scheme = call_609482.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609482.url(scheme.get, call_609482.host, call_609482.base,
                         call_609482.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609482, url, valid)

proc call*(call_609483: Call_PostRegisterDBProxyTargets_609466;
          DBProxyName: string; TargetGroupName: string = "";
          DBInstanceIdentifiers: JsonNode = nil;
          DBClusterIdentifiers: JsonNode = nil;
          Action: string = "RegisterDBProxyTargets"; Version: string = "2014-10-31"): Recallable =
  ## postRegisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609484 = newJObject()
  var formData_609485 = newJObject()
  add(formData_609485, "TargetGroupName", newJString(TargetGroupName))
  if DBInstanceIdentifiers != nil:
    formData_609485.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  if DBClusterIdentifiers != nil:
    formData_609485.add "DBClusterIdentifiers", DBClusterIdentifiers
  add(formData_609485, "DBProxyName", newJString(DBProxyName))
  add(query_609484, "Action", newJString(Action))
  add(query_609484, "Version", newJString(Version))
  result = call_609483.call(nil, query_609484, nil, formData_609485, nil)

var postRegisterDBProxyTargets* = Call_PostRegisterDBProxyTargets_609466(
    name: "postRegisterDBProxyTargets", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RegisterDBProxyTargets",
    validator: validate_PostRegisterDBProxyTargets_609467, base: "/",
    url: url_PostRegisterDBProxyTargets_609468,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRegisterDBProxyTargets_609447 = ref object of OpenApiRestCall_604389
proc url_GetRegisterDBProxyTargets_609449(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRegisterDBProxyTargets_609448(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  section = newJObject()
  var valid_609450 = query.getOrDefault("DBClusterIdentifiers")
  valid_609450 = validateParameter(valid_609450, JArray, required = false,
                                 default = nil)
  if valid_609450 != nil:
    section.add "DBClusterIdentifiers", valid_609450
  var valid_609451 = query.getOrDefault("DBInstanceIdentifiers")
  valid_609451 = validateParameter(valid_609451, JArray, required = false,
                                 default = nil)
  if valid_609451 != nil:
    section.add "DBInstanceIdentifiers", valid_609451
  var valid_609452 = query.getOrDefault("TargetGroupName")
  valid_609452 = validateParameter(valid_609452, JString, required = false,
                                 default = nil)
  if valid_609452 != nil:
    section.add "TargetGroupName", valid_609452
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609453 = query.getOrDefault("Action")
  valid_609453 = validateParameter(valid_609453, JString, required = true,
                                 default = newJString("RegisterDBProxyTargets"))
  if valid_609453 != nil:
    section.add "Action", valid_609453
  var valid_609454 = query.getOrDefault("Version")
  valid_609454 = validateParameter(valid_609454, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609454 != nil:
    section.add "Version", valid_609454
  var valid_609455 = query.getOrDefault("DBProxyName")
  valid_609455 = validateParameter(valid_609455, JString, required = true,
                                 default = nil)
  if valid_609455 != nil:
    section.add "DBProxyName", valid_609455
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609456 = header.getOrDefault("X-Amz-Signature")
  valid_609456 = validateParameter(valid_609456, JString, required = false,
                                 default = nil)
  if valid_609456 != nil:
    section.add "X-Amz-Signature", valid_609456
  var valid_609457 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609457 = validateParameter(valid_609457, JString, required = false,
                                 default = nil)
  if valid_609457 != nil:
    section.add "X-Amz-Content-Sha256", valid_609457
  var valid_609458 = header.getOrDefault("X-Amz-Date")
  valid_609458 = validateParameter(valid_609458, JString, required = false,
                                 default = nil)
  if valid_609458 != nil:
    section.add "X-Amz-Date", valid_609458
  var valid_609459 = header.getOrDefault("X-Amz-Credential")
  valid_609459 = validateParameter(valid_609459, JString, required = false,
                                 default = nil)
  if valid_609459 != nil:
    section.add "X-Amz-Credential", valid_609459
  var valid_609460 = header.getOrDefault("X-Amz-Security-Token")
  valid_609460 = validateParameter(valid_609460, JString, required = false,
                                 default = nil)
  if valid_609460 != nil:
    section.add "X-Amz-Security-Token", valid_609460
  var valid_609461 = header.getOrDefault("X-Amz-Algorithm")
  valid_609461 = validateParameter(valid_609461, JString, required = false,
                                 default = nil)
  if valid_609461 != nil:
    section.add "X-Amz-Algorithm", valid_609461
  var valid_609462 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609462 = validateParameter(valid_609462, JString, required = false,
                                 default = nil)
  if valid_609462 != nil:
    section.add "X-Amz-SignedHeaders", valid_609462
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609463: Call_GetRegisterDBProxyTargets_609447; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_609463.validator(path, query, header, formData, body)
  let scheme = call_609463.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609463.url(scheme.get, call_609463.host, call_609463.base,
                         call_609463.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609463, url, valid)

proc call*(call_609464: Call_GetRegisterDBProxyTargets_609447; DBProxyName: string;
          DBClusterIdentifiers: JsonNode = nil;
          DBInstanceIdentifiers: JsonNode = nil; TargetGroupName: string = "";
          Action: string = "RegisterDBProxyTargets"; Version: string = "2014-10-31"): Recallable =
  ## getRegisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  var query_609465 = newJObject()
  if DBClusterIdentifiers != nil:
    query_609465.add "DBClusterIdentifiers", DBClusterIdentifiers
  if DBInstanceIdentifiers != nil:
    query_609465.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  add(query_609465, "TargetGroupName", newJString(TargetGroupName))
  add(query_609465, "Action", newJString(Action))
  add(query_609465, "Version", newJString(Version))
  add(query_609465, "DBProxyName", newJString(DBProxyName))
  result = call_609464.call(nil, query_609465, nil, nil, nil)

var getRegisterDBProxyTargets* = Call_GetRegisterDBProxyTargets_609447(
    name: "getRegisterDBProxyTargets", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RegisterDBProxyTargets",
    validator: validate_GetRegisterDBProxyTargets_609448, base: "/",
    url: url_GetRegisterDBProxyTargets_609449,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveFromGlobalCluster_609503 = ref object of OpenApiRestCall_604389
proc url_PostRemoveFromGlobalCluster_609505(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveFromGlobalCluster_609504(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609506 = query.getOrDefault("Action")
  valid_609506 = validateParameter(valid_609506, JString, required = true, default = newJString(
      "RemoveFromGlobalCluster"))
  if valid_609506 != nil:
    section.add "Action", valid_609506
  var valid_609507 = query.getOrDefault("Version")
  valid_609507 = validateParameter(valid_609507, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609507 != nil:
    section.add "Version", valid_609507
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609508 = header.getOrDefault("X-Amz-Signature")
  valid_609508 = validateParameter(valid_609508, JString, required = false,
                                 default = nil)
  if valid_609508 != nil:
    section.add "X-Amz-Signature", valid_609508
  var valid_609509 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609509 = validateParameter(valid_609509, JString, required = false,
                                 default = nil)
  if valid_609509 != nil:
    section.add "X-Amz-Content-Sha256", valid_609509
  var valid_609510 = header.getOrDefault("X-Amz-Date")
  valid_609510 = validateParameter(valid_609510, JString, required = false,
                                 default = nil)
  if valid_609510 != nil:
    section.add "X-Amz-Date", valid_609510
  var valid_609511 = header.getOrDefault("X-Amz-Credential")
  valid_609511 = validateParameter(valid_609511, JString, required = false,
                                 default = nil)
  if valid_609511 != nil:
    section.add "X-Amz-Credential", valid_609511
  var valid_609512 = header.getOrDefault("X-Amz-Security-Token")
  valid_609512 = validateParameter(valid_609512, JString, required = false,
                                 default = nil)
  if valid_609512 != nil:
    section.add "X-Amz-Security-Token", valid_609512
  var valid_609513 = header.getOrDefault("X-Amz-Algorithm")
  valid_609513 = validateParameter(valid_609513, JString, required = false,
                                 default = nil)
  if valid_609513 != nil:
    section.add "X-Amz-Algorithm", valid_609513
  var valid_609514 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609514 = validateParameter(valid_609514, JString, required = false,
                                 default = nil)
  if valid_609514 != nil:
    section.add "X-Amz-SignedHeaders", valid_609514
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: JString
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  section = newJObject()
  var valid_609515 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_609515 = validateParameter(valid_609515, JString, required = false,
                                 default = nil)
  if valid_609515 != nil:
    section.add "GlobalClusterIdentifier", valid_609515
  var valid_609516 = formData.getOrDefault("DbClusterIdentifier")
  valid_609516 = validateParameter(valid_609516, JString, required = false,
                                 default = nil)
  if valid_609516 != nil:
    section.add "DbClusterIdentifier", valid_609516
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609517: Call_PostRemoveFromGlobalCluster_609503; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609517.validator(path, query, header, formData, body)
  let scheme = call_609517.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609517.url(scheme.get, call_609517.host, call_609517.base,
                         call_609517.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609517, url, valid)

proc call*(call_609518: Call_PostRemoveFromGlobalCluster_609503;
          GlobalClusterIdentifier: string = ""; DbClusterIdentifier: string = "";
          Action: string = "RemoveFromGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## postRemoveFromGlobalCluster
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: string
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609519 = newJObject()
  var formData_609520 = newJObject()
  add(formData_609520, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_609520, "DbClusterIdentifier", newJString(DbClusterIdentifier))
  add(query_609519, "Action", newJString(Action))
  add(query_609519, "Version", newJString(Version))
  result = call_609518.call(nil, query_609519, nil, formData_609520, nil)

var postRemoveFromGlobalCluster* = Call_PostRemoveFromGlobalCluster_609503(
    name: "postRemoveFromGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveFromGlobalCluster",
    validator: validate_PostRemoveFromGlobalCluster_609504, base: "/",
    url: url_PostRemoveFromGlobalCluster_609505,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveFromGlobalCluster_609486 = ref object of OpenApiRestCall_604389
proc url_GetRemoveFromGlobalCluster_609488(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveFromGlobalCluster_609487(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: JString
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609489 = query.getOrDefault("GlobalClusterIdentifier")
  valid_609489 = validateParameter(valid_609489, JString, required = false,
                                 default = nil)
  if valid_609489 != nil:
    section.add "GlobalClusterIdentifier", valid_609489
  var valid_609490 = query.getOrDefault("DbClusterIdentifier")
  valid_609490 = validateParameter(valid_609490, JString, required = false,
                                 default = nil)
  if valid_609490 != nil:
    section.add "DbClusterIdentifier", valid_609490
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609491 = query.getOrDefault("Action")
  valid_609491 = validateParameter(valid_609491, JString, required = true, default = newJString(
      "RemoveFromGlobalCluster"))
  if valid_609491 != nil:
    section.add "Action", valid_609491
  var valid_609492 = query.getOrDefault("Version")
  valid_609492 = validateParameter(valid_609492, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609492 != nil:
    section.add "Version", valid_609492
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609493 = header.getOrDefault("X-Amz-Signature")
  valid_609493 = validateParameter(valid_609493, JString, required = false,
                                 default = nil)
  if valid_609493 != nil:
    section.add "X-Amz-Signature", valid_609493
  var valid_609494 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609494 = validateParameter(valid_609494, JString, required = false,
                                 default = nil)
  if valid_609494 != nil:
    section.add "X-Amz-Content-Sha256", valid_609494
  var valid_609495 = header.getOrDefault("X-Amz-Date")
  valid_609495 = validateParameter(valid_609495, JString, required = false,
                                 default = nil)
  if valid_609495 != nil:
    section.add "X-Amz-Date", valid_609495
  var valid_609496 = header.getOrDefault("X-Amz-Credential")
  valid_609496 = validateParameter(valid_609496, JString, required = false,
                                 default = nil)
  if valid_609496 != nil:
    section.add "X-Amz-Credential", valid_609496
  var valid_609497 = header.getOrDefault("X-Amz-Security-Token")
  valid_609497 = validateParameter(valid_609497, JString, required = false,
                                 default = nil)
  if valid_609497 != nil:
    section.add "X-Amz-Security-Token", valid_609497
  var valid_609498 = header.getOrDefault("X-Amz-Algorithm")
  valid_609498 = validateParameter(valid_609498, JString, required = false,
                                 default = nil)
  if valid_609498 != nil:
    section.add "X-Amz-Algorithm", valid_609498
  var valid_609499 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609499 = validateParameter(valid_609499, JString, required = false,
                                 default = nil)
  if valid_609499 != nil:
    section.add "X-Amz-SignedHeaders", valid_609499
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609500: Call_GetRemoveFromGlobalCluster_609486; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609500.validator(path, query, header, formData, body)
  let scheme = call_609500.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609500.url(scheme.get, call_609500.host, call_609500.base,
                         call_609500.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609500, url, valid)

proc call*(call_609501: Call_GetRemoveFromGlobalCluster_609486;
          GlobalClusterIdentifier: string = ""; DbClusterIdentifier: string = "";
          Action: string = "RemoveFromGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveFromGlobalCluster
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: string
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609502 = newJObject()
  add(query_609502, "GlobalClusterIdentifier", newJString(GlobalClusterIdentifier))
  add(query_609502, "DbClusterIdentifier", newJString(DbClusterIdentifier))
  add(query_609502, "Action", newJString(Action))
  add(query_609502, "Version", newJString(Version))
  result = call_609501.call(nil, query_609502, nil, nil, nil)

var getRemoveFromGlobalCluster* = Call_GetRemoveFromGlobalCluster_609486(
    name: "getRemoveFromGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveFromGlobalCluster",
    validator: validate_GetRemoveFromGlobalCluster_609487, base: "/",
    url: url_GetRemoveFromGlobalCluster_609488,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBCluster_609539 = ref object of OpenApiRestCall_604389
proc url_PostRemoveRoleFromDBCluster_609541(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveRoleFromDBCluster_609540(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609542 = query.getOrDefault("Action")
  valid_609542 = validateParameter(valid_609542, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_609542 != nil:
    section.add "Action", valid_609542
  var valid_609543 = query.getOrDefault("Version")
  valid_609543 = validateParameter(valid_609543, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609543 != nil:
    section.add "Version", valid_609543
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609544 = header.getOrDefault("X-Amz-Signature")
  valid_609544 = validateParameter(valid_609544, JString, required = false,
                                 default = nil)
  if valid_609544 != nil:
    section.add "X-Amz-Signature", valid_609544
  var valid_609545 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609545 = validateParameter(valid_609545, JString, required = false,
                                 default = nil)
  if valid_609545 != nil:
    section.add "X-Amz-Content-Sha256", valid_609545
  var valid_609546 = header.getOrDefault("X-Amz-Date")
  valid_609546 = validateParameter(valid_609546, JString, required = false,
                                 default = nil)
  if valid_609546 != nil:
    section.add "X-Amz-Date", valid_609546
  var valid_609547 = header.getOrDefault("X-Amz-Credential")
  valid_609547 = validateParameter(valid_609547, JString, required = false,
                                 default = nil)
  if valid_609547 != nil:
    section.add "X-Amz-Credential", valid_609547
  var valid_609548 = header.getOrDefault("X-Amz-Security-Token")
  valid_609548 = validateParameter(valid_609548, JString, required = false,
                                 default = nil)
  if valid_609548 != nil:
    section.add "X-Amz-Security-Token", valid_609548
  var valid_609549 = header.getOrDefault("X-Amz-Algorithm")
  valid_609549 = validateParameter(valid_609549, JString, required = false,
                                 default = nil)
  if valid_609549 != nil:
    section.add "X-Amz-Algorithm", valid_609549
  var valid_609550 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609550 = validateParameter(valid_609550, JString, required = false,
                                 default = nil)
  if valid_609550 != nil:
    section.add "X-Amz-SignedHeaders", valid_609550
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  section = newJObject()
  var valid_609551 = formData.getOrDefault("FeatureName")
  valid_609551 = validateParameter(valid_609551, JString, required = false,
                                 default = nil)
  if valid_609551 != nil:
    section.add "FeatureName", valid_609551
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_609552 = formData.getOrDefault("RoleArn")
  valid_609552 = validateParameter(valid_609552, JString, required = true,
                                 default = nil)
  if valid_609552 != nil:
    section.add "RoleArn", valid_609552
  var valid_609553 = formData.getOrDefault("DBClusterIdentifier")
  valid_609553 = validateParameter(valid_609553, JString, required = true,
                                 default = nil)
  if valid_609553 != nil:
    section.add "DBClusterIdentifier", valid_609553
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609554: Call_PostRemoveRoleFromDBCluster_609539; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609554.validator(path, query, header, formData, body)
  let scheme = call_609554.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609554.url(scheme.get, call_609554.host, call_609554.base,
                         call_609554.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609554, url, valid)

proc call*(call_609555: Call_PostRemoveRoleFromDBCluster_609539; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "RemoveRoleFromDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBCluster
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  var query_609556 = newJObject()
  var formData_609557 = newJObject()
  add(formData_609557, "FeatureName", newJString(FeatureName))
  add(formData_609557, "RoleArn", newJString(RoleArn))
  add(query_609556, "Action", newJString(Action))
  add(query_609556, "Version", newJString(Version))
  add(formData_609557, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_609555.call(nil, query_609556, nil, formData_609557, nil)

var postRemoveRoleFromDBCluster* = Call_PostRemoveRoleFromDBCluster_609539(
    name: "postRemoveRoleFromDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_PostRemoveRoleFromDBCluster_609540, base: "/",
    url: url_PostRemoveRoleFromDBCluster_609541,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBCluster_609521 = ref object of OpenApiRestCall_604389
proc url_GetRemoveRoleFromDBCluster_609523(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveRoleFromDBCluster_609522(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_609524 = query.getOrDefault("RoleArn")
  valid_609524 = validateParameter(valid_609524, JString, required = true,
                                 default = nil)
  if valid_609524 != nil:
    section.add "RoleArn", valid_609524
  var valid_609525 = query.getOrDefault("DBClusterIdentifier")
  valid_609525 = validateParameter(valid_609525, JString, required = true,
                                 default = nil)
  if valid_609525 != nil:
    section.add "DBClusterIdentifier", valid_609525
  var valid_609526 = query.getOrDefault("FeatureName")
  valid_609526 = validateParameter(valid_609526, JString, required = false,
                                 default = nil)
  if valid_609526 != nil:
    section.add "FeatureName", valid_609526
  var valid_609527 = query.getOrDefault("Action")
  valid_609527 = validateParameter(valid_609527, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_609527 != nil:
    section.add "Action", valid_609527
  var valid_609528 = query.getOrDefault("Version")
  valid_609528 = validateParameter(valid_609528, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609528 != nil:
    section.add "Version", valid_609528
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609529 = header.getOrDefault("X-Amz-Signature")
  valid_609529 = validateParameter(valid_609529, JString, required = false,
                                 default = nil)
  if valid_609529 != nil:
    section.add "X-Amz-Signature", valid_609529
  var valid_609530 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609530 = validateParameter(valid_609530, JString, required = false,
                                 default = nil)
  if valid_609530 != nil:
    section.add "X-Amz-Content-Sha256", valid_609530
  var valid_609531 = header.getOrDefault("X-Amz-Date")
  valid_609531 = validateParameter(valid_609531, JString, required = false,
                                 default = nil)
  if valid_609531 != nil:
    section.add "X-Amz-Date", valid_609531
  var valid_609532 = header.getOrDefault("X-Amz-Credential")
  valid_609532 = validateParameter(valid_609532, JString, required = false,
                                 default = nil)
  if valid_609532 != nil:
    section.add "X-Amz-Credential", valid_609532
  var valid_609533 = header.getOrDefault("X-Amz-Security-Token")
  valid_609533 = validateParameter(valid_609533, JString, required = false,
                                 default = nil)
  if valid_609533 != nil:
    section.add "X-Amz-Security-Token", valid_609533
  var valid_609534 = header.getOrDefault("X-Amz-Algorithm")
  valid_609534 = validateParameter(valid_609534, JString, required = false,
                                 default = nil)
  if valid_609534 != nil:
    section.add "X-Amz-Algorithm", valid_609534
  var valid_609535 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609535 = validateParameter(valid_609535, JString, required = false,
                                 default = nil)
  if valid_609535 != nil:
    section.add "X-Amz-SignedHeaders", valid_609535
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609536: Call_GetRemoveRoleFromDBCluster_609521; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609536.validator(path, query, header, formData, body)
  let scheme = call_609536.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609536.url(scheme.get, call_609536.host, call_609536.base,
                         call_609536.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609536, url, valid)

proc call*(call_609537: Call_GetRemoveRoleFromDBCluster_609521; RoleArn: string;
          DBClusterIdentifier: string; FeatureName: string = "";
          Action: string = "RemoveRoleFromDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBCluster
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609538 = newJObject()
  add(query_609538, "RoleArn", newJString(RoleArn))
  add(query_609538, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_609538, "FeatureName", newJString(FeatureName))
  add(query_609538, "Action", newJString(Action))
  add(query_609538, "Version", newJString(Version))
  result = call_609537.call(nil, query_609538, nil, nil, nil)

var getRemoveRoleFromDBCluster* = Call_GetRemoveRoleFromDBCluster_609521(
    name: "getRemoveRoleFromDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_GetRemoveRoleFromDBCluster_609522, base: "/",
    url: url_GetRemoveRoleFromDBCluster_609523,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBInstance_609576 = ref object of OpenApiRestCall_604389
proc url_PostRemoveRoleFromDBInstance_609578(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveRoleFromDBInstance_609577(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609579 = query.getOrDefault("Action")
  valid_609579 = validateParameter(valid_609579, JString, required = true, default = newJString(
      "RemoveRoleFromDBInstance"))
  if valid_609579 != nil:
    section.add "Action", valid_609579
  var valid_609580 = query.getOrDefault("Version")
  valid_609580 = validateParameter(valid_609580, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609580 != nil:
    section.add "Version", valid_609580
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609581 = header.getOrDefault("X-Amz-Signature")
  valid_609581 = validateParameter(valid_609581, JString, required = false,
                                 default = nil)
  if valid_609581 != nil:
    section.add "X-Amz-Signature", valid_609581
  var valid_609582 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609582 = validateParameter(valid_609582, JString, required = false,
                                 default = nil)
  if valid_609582 != nil:
    section.add "X-Amz-Content-Sha256", valid_609582
  var valid_609583 = header.getOrDefault("X-Amz-Date")
  valid_609583 = validateParameter(valid_609583, JString, required = false,
                                 default = nil)
  if valid_609583 != nil:
    section.add "X-Amz-Date", valid_609583
  var valid_609584 = header.getOrDefault("X-Amz-Credential")
  valid_609584 = validateParameter(valid_609584, JString, required = false,
                                 default = nil)
  if valid_609584 != nil:
    section.add "X-Amz-Credential", valid_609584
  var valid_609585 = header.getOrDefault("X-Amz-Security-Token")
  valid_609585 = validateParameter(valid_609585, JString, required = false,
                                 default = nil)
  if valid_609585 != nil:
    section.add "X-Amz-Security-Token", valid_609585
  var valid_609586 = header.getOrDefault("X-Amz-Algorithm")
  valid_609586 = validateParameter(valid_609586, JString, required = false,
                                 default = nil)
  if valid_609586 != nil:
    section.add "X-Amz-Algorithm", valid_609586
  var valid_609587 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609587 = validateParameter(valid_609587, JString, required = false,
                                 default = nil)
  if valid_609587 != nil:
    section.add "X-Amz-SignedHeaders", valid_609587
  result.add "header", section
  ## parameters in `formData` object:
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `FeatureName` field"
  var valid_609588 = formData.getOrDefault("FeatureName")
  valid_609588 = validateParameter(valid_609588, JString, required = true,
                                 default = nil)
  if valid_609588 != nil:
    section.add "FeatureName", valid_609588
  var valid_609589 = formData.getOrDefault("RoleArn")
  valid_609589 = validateParameter(valid_609589, JString, required = true,
                                 default = nil)
  if valid_609589 != nil:
    section.add "RoleArn", valid_609589
  var valid_609590 = formData.getOrDefault("DBInstanceIdentifier")
  valid_609590 = validateParameter(valid_609590, JString, required = true,
                                 default = nil)
  if valid_609590 != nil:
    section.add "DBInstanceIdentifier", valid_609590
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609591: Call_PostRemoveRoleFromDBInstance_609576; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  let valid = call_609591.validator(path, query, header, formData, body)
  let scheme = call_609591.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609591.url(scheme.get, call_609591.host, call_609591.base,
                         call_609591.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609591, url, valid)

proc call*(call_609592: Call_PostRemoveRoleFromDBInstance_609576;
          FeatureName: string; RoleArn: string; DBInstanceIdentifier: string;
          Action: string = "RemoveRoleFromDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBInstance
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609593 = newJObject()
  var formData_609594 = newJObject()
  add(formData_609594, "FeatureName", newJString(FeatureName))
  add(formData_609594, "RoleArn", newJString(RoleArn))
  add(formData_609594, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_609593, "Action", newJString(Action))
  add(query_609593, "Version", newJString(Version))
  result = call_609592.call(nil, query_609593, nil, formData_609594, nil)

var postRemoveRoleFromDBInstance* = Call_PostRemoveRoleFromDBInstance_609576(
    name: "postRemoveRoleFromDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBInstance",
    validator: validate_PostRemoveRoleFromDBInstance_609577, base: "/",
    url: url_PostRemoveRoleFromDBInstance_609578,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBInstance_609558 = ref object of OpenApiRestCall_604389
proc url_GetRemoveRoleFromDBInstance_609560(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveRoleFromDBInstance_609559(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_609561 = query.getOrDefault("RoleArn")
  valid_609561 = validateParameter(valid_609561, JString, required = true,
                                 default = nil)
  if valid_609561 != nil:
    section.add "RoleArn", valid_609561
  var valid_609562 = query.getOrDefault("FeatureName")
  valid_609562 = validateParameter(valid_609562, JString, required = true,
                                 default = nil)
  if valid_609562 != nil:
    section.add "FeatureName", valid_609562
  var valid_609563 = query.getOrDefault("DBInstanceIdentifier")
  valid_609563 = validateParameter(valid_609563, JString, required = true,
                                 default = nil)
  if valid_609563 != nil:
    section.add "DBInstanceIdentifier", valid_609563
  var valid_609564 = query.getOrDefault("Action")
  valid_609564 = validateParameter(valid_609564, JString, required = true, default = newJString(
      "RemoveRoleFromDBInstance"))
  if valid_609564 != nil:
    section.add "Action", valid_609564
  var valid_609565 = query.getOrDefault("Version")
  valid_609565 = validateParameter(valid_609565, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609565 != nil:
    section.add "Version", valid_609565
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609566 = header.getOrDefault("X-Amz-Signature")
  valid_609566 = validateParameter(valid_609566, JString, required = false,
                                 default = nil)
  if valid_609566 != nil:
    section.add "X-Amz-Signature", valid_609566
  var valid_609567 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609567 = validateParameter(valid_609567, JString, required = false,
                                 default = nil)
  if valid_609567 != nil:
    section.add "X-Amz-Content-Sha256", valid_609567
  var valid_609568 = header.getOrDefault("X-Amz-Date")
  valid_609568 = validateParameter(valid_609568, JString, required = false,
                                 default = nil)
  if valid_609568 != nil:
    section.add "X-Amz-Date", valid_609568
  var valid_609569 = header.getOrDefault("X-Amz-Credential")
  valid_609569 = validateParameter(valid_609569, JString, required = false,
                                 default = nil)
  if valid_609569 != nil:
    section.add "X-Amz-Credential", valid_609569
  var valid_609570 = header.getOrDefault("X-Amz-Security-Token")
  valid_609570 = validateParameter(valid_609570, JString, required = false,
                                 default = nil)
  if valid_609570 != nil:
    section.add "X-Amz-Security-Token", valid_609570
  var valid_609571 = header.getOrDefault("X-Amz-Algorithm")
  valid_609571 = validateParameter(valid_609571, JString, required = false,
                                 default = nil)
  if valid_609571 != nil:
    section.add "X-Amz-Algorithm", valid_609571
  var valid_609572 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609572 = validateParameter(valid_609572, JString, required = false,
                                 default = nil)
  if valid_609572 != nil:
    section.add "X-Amz-SignedHeaders", valid_609572
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609573: Call_GetRemoveRoleFromDBInstance_609558; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  let valid = call_609573.validator(path, query, header, formData, body)
  let scheme = call_609573.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609573.url(scheme.get, call_609573.host, call_609573.base,
                         call_609573.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609573, url, valid)

proc call*(call_609574: Call_GetRemoveRoleFromDBInstance_609558; RoleArn: string;
          FeatureName: string; DBInstanceIdentifier: string;
          Action: string = "RemoveRoleFromDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBInstance
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609575 = newJObject()
  add(query_609575, "RoleArn", newJString(RoleArn))
  add(query_609575, "FeatureName", newJString(FeatureName))
  add(query_609575, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_609575, "Action", newJString(Action))
  add(query_609575, "Version", newJString(Version))
  result = call_609574.call(nil, query_609575, nil, nil, nil)

var getRemoveRoleFromDBInstance* = Call_GetRemoveRoleFromDBInstance_609558(
    name: "getRemoveRoleFromDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBInstance",
    validator: validate_GetRemoveRoleFromDBInstance_609559, base: "/",
    url: url_GetRemoveRoleFromDBInstance_609560,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveSourceIdentifierFromSubscription_609612 = ref object of OpenApiRestCall_604389
proc url_PostRemoveSourceIdentifierFromSubscription_609614(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveSourceIdentifierFromSubscription_609613(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609615 = query.getOrDefault("Action")
  valid_609615 = validateParameter(valid_609615, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_609615 != nil:
    section.add "Action", valid_609615
  var valid_609616 = query.getOrDefault("Version")
  valid_609616 = validateParameter(valid_609616, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609616 != nil:
    section.add "Version", valid_609616
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609617 = header.getOrDefault("X-Amz-Signature")
  valid_609617 = validateParameter(valid_609617, JString, required = false,
                                 default = nil)
  if valid_609617 != nil:
    section.add "X-Amz-Signature", valid_609617
  var valid_609618 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609618 = validateParameter(valid_609618, JString, required = false,
                                 default = nil)
  if valid_609618 != nil:
    section.add "X-Amz-Content-Sha256", valid_609618
  var valid_609619 = header.getOrDefault("X-Amz-Date")
  valid_609619 = validateParameter(valid_609619, JString, required = false,
                                 default = nil)
  if valid_609619 != nil:
    section.add "X-Amz-Date", valid_609619
  var valid_609620 = header.getOrDefault("X-Amz-Credential")
  valid_609620 = validateParameter(valid_609620, JString, required = false,
                                 default = nil)
  if valid_609620 != nil:
    section.add "X-Amz-Credential", valid_609620
  var valid_609621 = header.getOrDefault("X-Amz-Security-Token")
  valid_609621 = validateParameter(valid_609621, JString, required = false,
                                 default = nil)
  if valid_609621 != nil:
    section.add "X-Amz-Security-Token", valid_609621
  var valid_609622 = header.getOrDefault("X-Amz-Algorithm")
  valid_609622 = validateParameter(valid_609622, JString, required = false,
                                 default = nil)
  if valid_609622 != nil:
    section.add "X-Amz-Algorithm", valid_609622
  var valid_609623 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609623 = validateParameter(valid_609623, JString, required = false,
                                 default = nil)
  if valid_609623 != nil:
    section.add "X-Amz-SignedHeaders", valid_609623
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_609624 = formData.getOrDefault("SubscriptionName")
  valid_609624 = validateParameter(valid_609624, JString, required = true,
                                 default = nil)
  if valid_609624 != nil:
    section.add "SubscriptionName", valid_609624
  var valid_609625 = formData.getOrDefault("SourceIdentifier")
  valid_609625 = validateParameter(valid_609625, JString, required = true,
                                 default = nil)
  if valid_609625 != nil:
    section.add "SourceIdentifier", valid_609625
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609626: Call_PostRemoveSourceIdentifierFromSubscription_609612;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  let valid = call_609626.validator(path, query, header, formData, body)
  let scheme = call_609626.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609626.url(scheme.get, call_609626.host, call_609626.base,
                         call_609626.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609626, url, valid)

proc call*(call_609627: Call_PostRemoveSourceIdentifierFromSubscription_609612;
          SubscriptionName: string; SourceIdentifier: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609628 = newJObject()
  var formData_609629 = newJObject()
  add(formData_609629, "SubscriptionName", newJString(SubscriptionName))
  add(formData_609629, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_609628, "Action", newJString(Action))
  add(query_609628, "Version", newJString(Version))
  result = call_609627.call(nil, query_609628, nil, formData_609629, nil)

var postRemoveSourceIdentifierFromSubscription* = Call_PostRemoveSourceIdentifierFromSubscription_609612(
    name: "postRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_PostRemoveSourceIdentifierFromSubscription_609613,
    base: "/", url: url_PostRemoveSourceIdentifierFromSubscription_609614,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveSourceIdentifierFromSubscription_609595 = ref object of OpenApiRestCall_604389
proc url_GetRemoveSourceIdentifierFromSubscription_609597(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveSourceIdentifierFromSubscription_609596(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `SourceIdentifier` field"
  var valid_609598 = query.getOrDefault("SourceIdentifier")
  valid_609598 = validateParameter(valid_609598, JString, required = true,
                                 default = nil)
  if valid_609598 != nil:
    section.add "SourceIdentifier", valid_609598
  var valid_609599 = query.getOrDefault("SubscriptionName")
  valid_609599 = validateParameter(valid_609599, JString, required = true,
                                 default = nil)
  if valid_609599 != nil:
    section.add "SubscriptionName", valid_609599
  var valid_609600 = query.getOrDefault("Action")
  valid_609600 = validateParameter(valid_609600, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_609600 != nil:
    section.add "Action", valid_609600
  var valid_609601 = query.getOrDefault("Version")
  valid_609601 = validateParameter(valid_609601, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609601 != nil:
    section.add "Version", valid_609601
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609602 = header.getOrDefault("X-Amz-Signature")
  valid_609602 = validateParameter(valid_609602, JString, required = false,
                                 default = nil)
  if valid_609602 != nil:
    section.add "X-Amz-Signature", valid_609602
  var valid_609603 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609603 = validateParameter(valid_609603, JString, required = false,
                                 default = nil)
  if valid_609603 != nil:
    section.add "X-Amz-Content-Sha256", valid_609603
  var valid_609604 = header.getOrDefault("X-Amz-Date")
  valid_609604 = validateParameter(valid_609604, JString, required = false,
                                 default = nil)
  if valid_609604 != nil:
    section.add "X-Amz-Date", valid_609604
  var valid_609605 = header.getOrDefault("X-Amz-Credential")
  valid_609605 = validateParameter(valid_609605, JString, required = false,
                                 default = nil)
  if valid_609605 != nil:
    section.add "X-Amz-Credential", valid_609605
  var valid_609606 = header.getOrDefault("X-Amz-Security-Token")
  valid_609606 = validateParameter(valid_609606, JString, required = false,
                                 default = nil)
  if valid_609606 != nil:
    section.add "X-Amz-Security-Token", valid_609606
  var valid_609607 = header.getOrDefault("X-Amz-Algorithm")
  valid_609607 = validateParameter(valid_609607, JString, required = false,
                                 default = nil)
  if valid_609607 != nil:
    section.add "X-Amz-Algorithm", valid_609607
  var valid_609608 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609608 = validateParameter(valid_609608, JString, required = false,
                                 default = nil)
  if valid_609608 != nil:
    section.add "X-Amz-SignedHeaders", valid_609608
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609609: Call_GetRemoveSourceIdentifierFromSubscription_609595;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  let valid = call_609609.validator(path, query, header, formData, body)
  let scheme = call_609609.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609609.url(scheme.get, call_609609.host, call_609609.base,
                         call_609609.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609609, url, valid)

proc call*(call_609610: Call_GetRemoveSourceIdentifierFromSubscription_609595;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing RDS event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609611 = newJObject()
  add(query_609611, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_609611, "SubscriptionName", newJString(SubscriptionName))
  add(query_609611, "Action", newJString(Action))
  add(query_609611, "Version", newJString(Version))
  result = call_609610.call(nil, query_609611, nil, nil, nil)

var getRemoveSourceIdentifierFromSubscription* = Call_GetRemoveSourceIdentifierFromSubscription_609595(
    name: "getRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_GetRemoveSourceIdentifierFromSubscription_609596,
    base: "/", url: url_GetRemoveSourceIdentifierFromSubscription_609597,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_609647 = ref object of OpenApiRestCall_604389
proc url_PostRemoveTagsFromResource_609649(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveTagsFromResource_609648(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609650 = query.getOrDefault("Action")
  valid_609650 = validateParameter(valid_609650, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_609650 != nil:
    section.add "Action", valid_609650
  var valid_609651 = query.getOrDefault("Version")
  valid_609651 = validateParameter(valid_609651, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609651 != nil:
    section.add "Version", valid_609651
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609652 = header.getOrDefault("X-Amz-Signature")
  valid_609652 = validateParameter(valid_609652, JString, required = false,
                                 default = nil)
  if valid_609652 != nil:
    section.add "X-Amz-Signature", valid_609652
  var valid_609653 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609653 = validateParameter(valid_609653, JString, required = false,
                                 default = nil)
  if valid_609653 != nil:
    section.add "X-Amz-Content-Sha256", valid_609653
  var valid_609654 = header.getOrDefault("X-Amz-Date")
  valid_609654 = validateParameter(valid_609654, JString, required = false,
                                 default = nil)
  if valid_609654 != nil:
    section.add "X-Amz-Date", valid_609654
  var valid_609655 = header.getOrDefault("X-Amz-Credential")
  valid_609655 = validateParameter(valid_609655, JString, required = false,
                                 default = nil)
  if valid_609655 != nil:
    section.add "X-Amz-Credential", valid_609655
  var valid_609656 = header.getOrDefault("X-Amz-Security-Token")
  valid_609656 = validateParameter(valid_609656, JString, required = false,
                                 default = nil)
  if valid_609656 != nil:
    section.add "X-Amz-Security-Token", valid_609656
  var valid_609657 = header.getOrDefault("X-Amz-Algorithm")
  valid_609657 = validateParameter(valid_609657, JString, required = false,
                                 default = nil)
  if valid_609657 != nil:
    section.add "X-Amz-Algorithm", valid_609657
  var valid_609658 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609658 = validateParameter(valid_609658, JString, required = false,
                                 default = nil)
  if valid_609658 != nil:
    section.add "X-Amz-SignedHeaders", valid_609658
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_609659 = formData.getOrDefault("TagKeys")
  valid_609659 = validateParameter(valid_609659, JArray, required = true, default = nil)
  if valid_609659 != nil:
    section.add "TagKeys", valid_609659
  var valid_609660 = formData.getOrDefault("ResourceName")
  valid_609660 = validateParameter(valid_609660, JString, required = true,
                                 default = nil)
  if valid_609660 != nil:
    section.add "ResourceName", valid_609660
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609661: Call_PostRemoveTagsFromResource_609647; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_609661.validator(path, query, header, formData, body)
  let scheme = call_609661.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609661.url(scheme.get, call_609661.host, call_609661.base,
                         call_609661.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609661, url, valid)

proc call*(call_609662: Call_PostRemoveTagsFromResource_609647; TagKeys: JsonNode;
          ResourceName: string; Action: string = "RemoveTagsFromResource";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveTagsFromResource
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  var query_609663 = newJObject()
  var formData_609664 = newJObject()
  if TagKeys != nil:
    formData_609664.add "TagKeys", TagKeys
  add(query_609663, "Action", newJString(Action))
  add(query_609663, "Version", newJString(Version))
  add(formData_609664, "ResourceName", newJString(ResourceName))
  result = call_609662.call(nil, query_609663, nil, formData_609664, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_609647(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_609648, base: "/",
    url: url_PostRemoveTagsFromResource_609649,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_609630 = ref object of OpenApiRestCall_604389
proc url_GetRemoveTagsFromResource_609632(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveTagsFromResource_609631(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_609633 = query.getOrDefault("ResourceName")
  valid_609633 = validateParameter(valid_609633, JString, required = true,
                                 default = nil)
  if valid_609633 != nil:
    section.add "ResourceName", valid_609633
  var valid_609634 = query.getOrDefault("TagKeys")
  valid_609634 = validateParameter(valid_609634, JArray, required = true, default = nil)
  if valid_609634 != nil:
    section.add "TagKeys", valid_609634
  var valid_609635 = query.getOrDefault("Action")
  valid_609635 = validateParameter(valid_609635, JString, required = true,
                                 default = newJString("RemoveTagsFromResource"))
  if valid_609635 != nil:
    section.add "Action", valid_609635
  var valid_609636 = query.getOrDefault("Version")
  valid_609636 = validateParameter(valid_609636, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609636 != nil:
    section.add "Version", valid_609636
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609637 = header.getOrDefault("X-Amz-Signature")
  valid_609637 = validateParameter(valid_609637, JString, required = false,
                                 default = nil)
  if valid_609637 != nil:
    section.add "X-Amz-Signature", valid_609637
  var valid_609638 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609638 = validateParameter(valid_609638, JString, required = false,
                                 default = nil)
  if valid_609638 != nil:
    section.add "X-Amz-Content-Sha256", valid_609638
  var valid_609639 = header.getOrDefault("X-Amz-Date")
  valid_609639 = validateParameter(valid_609639, JString, required = false,
                                 default = nil)
  if valid_609639 != nil:
    section.add "X-Amz-Date", valid_609639
  var valid_609640 = header.getOrDefault("X-Amz-Credential")
  valid_609640 = validateParameter(valid_609640, JString, required = false,
                                 default = nil)
  if valid_609640 != nil:
    section.add "X-Amz-Credential", valid_609640
  var valid_609641 = header.getOrDefault("X-Amz-Security-Token")
  valid_609641 = validateParameter(valid_609641, JString, required = false,
                                 default = nil)
  if valid_609641 != nil:
    section.add "X-Amz-Security-Token", valid_609641
  var valid_609642 = header.getOrDefault("X-Amz-Algorithm")
  valid_609642 = validateParameter(valid_609642, JString, required = false,
                                 default = nil)
  if valid_609642 != nil:
    section.add "X-Amz-Algorithm", valid_609642
  var valid_609643 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609643 = validateParameter(valid_609643, JString, required = false,
                                 default = nil)
  if valid_609643 != nil:
    section.add "X-Amz-SignedHeaders", valid_609643
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609644: Call_GetRemoveTagsFromResource_609630; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_609644.validator(path, query, header, formData, body)
  let scheme = call_609644.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609644.url(scheme.get, call_609644.host, call_609644.base,
                         call_609644.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609644, url, valid)

proc call*(call_609645: Call_GetRemoveTagsFromResource_609630;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveTagsFromResource
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609646 = newJObject()
  add(query_609646, "ResourceName", newJString(ResourceName))
  if TagKeys != nil:
    query_609646.add "TagKeys", TagKeys
  add(query_609646, "Action", newJString(Action))
  add(query_609646, "Version", newJString(Version))
  result = call_609645.call(nil, query_609646, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_609630(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_609631, base: "/",
    url: url_GetRemoveTagsFromResource_609632,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBClusterParameterGroup_609683 = ref object of OpenApiRestCall_604389
proc url_PostResetDBClusterParameterGroup_609685(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetDBClusterParameterGroup_609684(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609686 = query.getOrDefault("Action")
  valid_609686 = validateParameter(valid_609686, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_609686 != nil:
    section.add "Action", valid_609686
  var valid_609687 = query.getOrDefault("Version")
  valid_609687 = validateParameter(valid_609687, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609687 != nil:
    section.add "Version", valid_609687
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609688 = header.getOrDefault("X-Amz-Signature")
  valid_609688 = validateParameter(valid_609688, JString, required = false,
                                 default = nil)
  if valid_609688 != nil:
    section.add "X-Amz-Signature", valid_609688
  var valid_609689 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609689 = validateParameter(valid_609689, JString, required = false,
                                 default = nil)
  if valid_609689 != nil:
    section.add "X-Amz-Content-Sha256", valid_609689
  var valid_609690 = header.getOrDefault("X-Amz-Date")
  valid_609690 = validateParameter(valid_609690, JString, required = false,
                                 default = nil)
  if valid_609690 != nil:
    section.add "X-Amz-Date", valid_609690
  var valid_609691 = header.getOrDefault("X-Amz-Credential")
  valid_609691 = validateParameter(valid_609691, JString, required = false,
                                 default = nil)
  if valid_609691 != nil:
    section.add "X-Amz-Credential", valid_609691
  var valid_609692 = header.getOrDefault("X-Amz-Security-Token")
  valid_609692 = validateParameter(valid_609692, JString, required = false,
                                 default = nil)
  if valid_609692 != nil:
    section.add "X-Amz-Security-Token", valid_609692
  var valid_609693 = header.getOrDefault("X-Amz-Algorithm")
  valid_609693 = validateParameter(valid_609693, JString, required = false,
                                 default = nil)
  if valid_609693 != nil:
    section.add "X-Amz-Algorithm", valid_609693
  var valid_609694 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609694 = validateParameter(valid_609694, JString, required = false,
                                 default = nil)
  if valid_609694 != nil:
    section.add "X-Amz-SignedHeaders", valid_609694
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  section = newJObject()
  var valid_609695 = formData.getOrDefault("ResetAllParameters")
  valid_609695 = validateParameter(valid_609695, JBool, required = false, default = nil)
  if valid_609695 != nil:
    section.add "ResetAllParameters", valid_609695
  var valid_609696 = formData.getOrDefault("Parameters")
  valid_609696 = validateParameter(valid_609696, JArray, required = false,
                                 default = nil)
  if valid_609696 != nil:
    section.add "Parameters", valid_609696
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_609697 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_609697 = validateParameter(valid_609697, JString, required = true,
                                 default = nil)
  if valid_609697 != nil:
    section.add "DBClusterParameterGroupName", valid_609697
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609698: Call_PostResetDBClusterParameterGroup_609683;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609698.validator(path, query, header, formData, body)
  let scheme = call_609698.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609698.url(scheme.get, call_609698.host, call_609698.base,
                         call_609698.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609698, url, valid)

proc call*(call_609699: Call_PostResetDBClusterParameterGroup_609683;
          DBClusterParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetDBClusterParameterGroup";
          Parameters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ResetAllParameters: bool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: string (required)
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Version: string (required)
  var query_609700 = newJObject()
  var formData_609701 = newJObject()
  add(formData_609701, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_609700, "Action", newJString(Action))
  if Parameters != nil:
    formData_609701.add "Parameters", Parameters
  add(formData_609701, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_609700, "Version", newJString(Version))
  result = call_609699.call(nil, query_609700, nil, formData_609701, nil)

var postResetDBClusterParameterGroup* = Call_PostResetDBClusterParameterGroup_609683(
    name: "postResetDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_PostResetDBClusterParameterGroup_609684, base: "/",
    url: url_PostResetDBClusterParameterGroup_609685,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBClusterParameterGroup_609665 = ref object of OpenApiRestCall_604389
proc url_GetResetDBClusterParameterGroup_609667(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetDBClusterParameterGroup_609666(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_609668 = query.getOrDefault("Parameters")
  valid_609668 = validateParameter(valid_609668, JArray, required = false,
                                 default = nil)
  if valid_609668 != nil:
    section.add "Parameters", valid_609668
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_609669 = query.getOrDefault("DBClusterParameterGroupName")
  valid_609669 = validateParameter(valid_609669, JString, required = true,
                                 default = nil)
  if valid_609669 != nil:
    section.add "DBClusterParameterGroupName", valid_609669
  var valid_609670 = query.getOrDefault("ResetAllParameters")
  valid_609670 = validateParameter(valid_609670, JBool, required = false, default = nil)
  if valid_609670 != nil:
    section.add "ResetAllParameters", valid_609670
  var valid_609671 = query.getOrDefault("Action")
  valid_609671 = validateParameter(valid_609671, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_609671 != nil:
    section.add "Action", valid_609671
  var valid_609672 = query.getOrDefault("Version")
  valid_609672 = validateParameter(valid_609672, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609672 != nil:
    section.add "Version", valid_609672
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609673 = header.getOrDefault("X-Amz-Signature")
  valid_609673 = validateParameter(valid_609673, JString, required = false,
                                 default = nil)
  if valid_609673 != nil:
    section.add "X-Amz-Signature", valid_609673
  var valid_609674 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609674 = validateParameter(valid_609674, JString, required = false,
                                 default = nil)
  if valid_609674 != nil:
    section.add "X-Amz-Content-Sha256", valid_609674
  var valid_609675 = header.getOrDefault("X-Amz-Date")
  valid_609675 = validateParameter(valid_609675, JString, required = false,
                                 default = nil)
  if valid_609675 != nil:
    section.add "X-Amz-Date", valid_609675
  var valid_609676 = header.getOrDefault("X-Amz-Credential")
  valid_609676 = validateParameter(valid_609676, JString, required = false,
                                 default = nil)
  if valid_609676 != nil:
    section.add "X-Amz-Credential", valid_609676
  var valid_609677 = header.getOrDefault("X-Amz-Security-Token")
  valid_609677 = validateParameter(valid_609677, JString, required = false,
                                 default = nil)
  if valid_609677 != nil:
    section.add "X-Amz-Security-Token", valid_609677
  var valid_609678 = header.getOrDefault("X-Amz-Algorithm")
  valid_609678 = validateParameter(valid_609678, JString, required = false,
                                 default = nil)
  if valid_609678 != nil:
    section.add "X-Amz-Algorithm", valid_609678
  var valid_609679 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609679 = validateParameter(valid_609679, JString, required = false,
                                 default = nil)
  if valid_609679 != nil:
    section.add "X-Amz-SignedHeaders", valid_609679
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609680: Call_GetResetDBClusterParameterGroup_609665;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609680.validator(path, query, header, formData, body)
  let scheme = call_609680.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609680.url(scheme.get, call_609680.host, call_609680.base,
                         call_609680.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609680, url, valid)

proc call*(call_609681: Call_GetResetDBClusterParameterGroup_609665;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          ResetAllParameters: bool = false;
          Action: string = "ResetDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609682 = newJObject()
  if Parameters != nil:
    query_609682.add "Parameters", Parameters
  add(query_609682, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_609682, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_609682, "Action", newJString(Action))
  add(query_609682, "Version", newJString(Version))
  result = call_609681.call(nil, query_609682, nil, nil, nil)

var getResetDBClusterParameterGroup* = Call_GetResetDBClusterParameterGroup_609665(
    name: "getResetDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_GetResetDBClusterParameterGroup_609666, base: "/",
    url: url_GetResetDBClusterParameterGroup_609667,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBParameterGroup_609720 = ref object of OpenApiRestCall_604389
proc url_PostResetDBParameterGroup_609722(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetDBParameterGroup_609721(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609723 = query.getOrDefault("Action")
  valid_609723 = validateParameter(valid_609723, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_609723 != nil:
    section.add "Action", valid_609723
  var valid_609724 = query.getOrDefault("Version")
  valid_609724 = validateParameter(valid_609724, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609724 != nil:
    section.add "Version", valid_609724
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609725 = header.getOrDefault("X-Amz-Signature")
  valid_609725 = validateParameter(valid_609725, JString, required = false,
                                 default = nil)
  if valid_609725 != nil:
    section.add "X-Amz-Signature", valid_609725
  var valid_609726 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609726 = validateParameter(valid_609726, JString, required = false,
                                 default = nil)
  if valid_609726 != nil:
    section.add "X-Amz-Content-Sha256", valid_609726
  var valid_609727 = header.getOrDefault("X-Amz-Date")
  valid_609727 = validateParameter(valid_609727, JString, required = false,
                                 default = nil)
  if valid_609727 != nil:
    section.add "X-Amz-Date", valid_609727
  var valid_609728 = header.getOrDefault("X-Amz-Credential")
  valid_609728 = validateParameter(valid_609728, JString, required = false,
                                 default = nil)
  if valid_609728 != nil:
    section.add "X-Amz-Credential", valid_609728
  var valid_609729 = header.getOrDefault("X-Amz-Security-Token")
  valid_609729 = validateParameter(valid_609729, JString, required = false,
                                 default = nil)
  if valid_609729 != nil:
    section.add "X-Amz-Security-Token", valid_609729
  var valid_609730 = header.getOrDefault("X-Amz-Algorithm")
  valid_609730 = validateParameter(valid_609730, JString, required = false,
                                 default = nil)
  if valid_609730 != nil:
    section.add "X-Amz-Algorithm", valid_609730
  var valid_609731 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609731 = validateParameter(valid_609731, JString, required = false,
                                 default = nil)
  if valid_609731 != nil:
    section.add "X-Amz-SignedHeaders", valid_609731
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResetAllParameters: JBool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  section = newJObject()
  var valid_609732 = formData.getOrDefault("ResetAllParameters")
  valid_609732 = validateParameter(valid_609732, JBool, required = false, default = nil)
  if valid_609732 != nil:
    section.add "ResetAllParameters", valid_609732
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_609733 = formData.getOrDefault("DBParameterGroupName")
  valid_609733 = validateParameter(valid_609733, JString, required = true,
                                 default = nil)
  if valid_609733 != nil:
    section.add "DBParameterGroupName", valid_609733
  var valid_609734 = formData.getOrDefault("Parameters")
  valid_609734 = validateParameter(valid_609734, JArray, required = false,
                                 default = nil)
  if valid_609734 != nil:
    section.add "Parameters", valid_609734
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609735: Call_PostResetDBParameterGroup_609720; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  let valid = call_609735.validator(path, query, header, formData, body)
  let scheme = call_609735.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609735.url(scheme.get, call_609735.host, call_609735.base,
                         call_609735.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609735, url, valid)

proc call*(call_609736: Call_PostResetDBParameterGroup_609720;
          DBParameterGroupName: string; ResetAllParameters: bool = false;
          Action: string = "ResetDBParameterGroup"; Parameters: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ##   ResetAllParameters: bool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Version: string (required)
  var query_609737 = newJObject()
  var formData_609738 = newJObject()
  add(formData_609738, "ResetAllParameters", newJBool(ResetAllParameters))
  add(formData_609738, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_609737, "Action", newJString(Action))
  if Parameters != nil:
    formData_609738.add "Parameters", Parameters
  add(query_609737, "Version", newJString(Version))
  result = call_609736.call(nil, query_609737, nil, formData_609738, nil)

var postResetDBParameterGroup* = Call_PostResetDBParameterGroup_609720(
    name: "postResetDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_PostResetDBParameterGroup_609721, base: "/",
    url: url_PostResetDBParameterGroup_609722,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBParameterGroup_609702 = ref object of OpenApiRestCall_604389
proc url_GetResetDBParameterGroup_609704(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetDBParameterGroup_609703(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: JBool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_609705 = query.getOrDefault("DBParameterGroupName")
  valid_609705 = validateParameter(valid_609705, JString, required = true,
                                 default = nil)
  if valid_609705 != nil:
    section.add "DBParameterGroupName", valid_609705
  var valid_609706 = query.getOrDefault("Parameters")
  valid_609706 = validateParameter(valid_609706, JArray, required = false,
                                 default = nil)
  if valid_609706 != nil:
    section.add "Parameters", valid_609706
  var valid_609707 = query.getOrDefault("ResetAllParameters")
  valid_609707 = validateParameter(valid_609707, JBool, required = false, default = nil)
  if valid_609707 != nil:
    section.add "ResetAllParameters", valid_609707
  var valid_609708 = query.getOrDefault("Action")
  valid_609708 = validateParameter(valid_609708, JString, required = true,
                                 default = newJString("ResetDBParameterGroup"))
  if valid_609708 != nil:
    section.add "Action", valid_609708
  var valid_609709 = query.getOrDefault("Version")
  valid_609709 = validateParameter(valid_609709, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609709 != nil:
    section.add "Version", valid_609709
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609710 = header.getOrDefault("X-Amz-Signature")
  valid_609710 = validateParameter(valid_609710, JString, required = false,
                                 default = nil)
  if valid_609710 != nil:
    section.add "X-Amz-Signature", valid_609710
  var valid_609711 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609711 = validateParameter(valid_609711, JString, required = false,
                                 default = nil)
  if valid_609711 != nil:
    section.add "X-Amz-Content-Sha256", valid_609711
  var valid_609712 = header.getOrDefault("X-Amz-Date")
  valid_609712 = validateParameter(valid_609712, JString, required = false,
                                 default = nil)
  if valid_609712 != nil:
    section.add "X-Amz-Date", valid_609712
  var valid_609713 = header.getOrDefault("X-Amz-Credential")
  valid_609713 = validateParameter(valid_609713, JString, required = false,
                                 default = nil)
  if valid_609713 != nil:
    section.add "X-Amz-Credential", valid_609713
  var valid_609714 = header.getOrDefault("X-Amz-Security-Token")
  valid_609714 = validateParameter(valid_609714, JString, required = false,
                                 default = nil)
  if valid_609714 != nil:
    section.add "X-Amz-Security-Token", valid_609714
  var valid_609715 = header.getOrDefault("X-Amz-Algorithm")
  valid_609715 = validateParameter(valid_609715, JString, required = false,
                                 default = nil)
  if valid_609715 != nil:
    section.add "X-Amz-Algorithm", valid_609715
  var valid_609716 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609716 = validateParameter(valid_609716, JString, required = false,
                                 default = nil)
  if valid_609716 != nil:
    section.add "X-Amz-SignedHeaders", valid_609716
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609717: Call_GetResetDBParameterGroup_609702; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  let valid = call_609717.validator(path, query, header, formData, body)
  let scheme = call_609717.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609717.url(scheme.get, call_609717.host, call_609717.base,
                         call_609717.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609717, url, valid)

proc call*(call_609718: Call_GetResetDBParameterGroup_609702;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          ResetAllParameters: bool = false;
          Action: string = "ResetDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: bool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_609719 = newJObject()
  add(query_609719, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_609719.add "Parameters", Parameters
  add(query_609719, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_609719, "Action", newJString(Action))
  add(query_609719, "Version", newJString(Version))
  result = call_609718.call(nil, query_609719, nil, nil, nil)

var getResetDBParameterGroup* = Call_GetResetDBParameterGroup_609702(
    name: "getResetDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_GetResetDBParameterGroup_609703, base: "/",
    url: url_GetResetDBParameterGroup_609704, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromS3_609783 = ref object of OpenApiRestCall_604389
proc url_PostRestoreDBClusterFromS3_609785(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterFromS3_609784(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609786 = query.getOrDefault("Action")
  valid_609786 = validateParameter(valid_609786, JString, required = true,
                                 default = newJString("RestoreDBClusterFromS3"))
  if valid_609786 != nil:
    section.add "Action", valid_609786
  var valid_609787 = query.getOrDefault("Version")
  valid_609787 = validateParameter(valid_609787, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609787 != nil:
    section.add "Version", valid_609787
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609788 = header.getOrDefault("X-Amz-Signature")
  valid_609788 = validateParameter(valid_609788, JString, required = false,
                                 default = nil)
  if valid_609788 != nil:
    section.add "X-Amz-Signature", valid_609788
  var valid_609789 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609789 = validateParameter(valid_609789, JString, required = false,
                                 default = nil)
  if valid_609789 != nil:
    section.add "X-Amz-Content-Sha256", valid_609789
  var valid_609790 = header.getOrDefault("X-Amz-Date")
  valid_609790 = validateParameter(valid_609790, JString, required = false,
                                 default = nil)
  if valid_609790 != nil:
    section.add "X-Amz-Date", valid_609790
  var valid_609791 = header.getOrDefault("X-Amz-Credential")
  valid_609791 = validateParameter(valid_609791, JString, required = false,
                                 default = nil)
  if valid_609791 != nil:
    section.add "X-Amz-Credential", valid_609791
  var valid_609792 = header.getOrDefault("X-Amz-Security-Token")
  valid_609792 = validateParameter(valid_609792, JString, required = false,
                                 default = nil)
  if valid_609792 != nil:
    section.add "X-Amz-Security-Token", valid_609792
  var valid_609793 = header.getOrDefault("X-Amz-Algorithm")
  valid_609793 = validateParameter(valid_609793, JString, required = false,
                                 default = nil)
  if valid_609793 != nil:
    section.add "X-Amz-Algorithm", valid_609793
  var valid_609794 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609794 = validateParameter(valid_609794, JString, required = false,
                                 default = nil)
  if valid_609794 != nil:
    section.add "X-Amz-SignedHeaders", valid_609794
  result.add "header", section
  ## parameters in `formData` object:
  ##   S3Prefix: JString
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MasterUsername: JString (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   SourceEngine: JString (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_609795 = formData.getOrDefault("S3Prefix")
  valid_609795 = validateParameter(valid_609795, JString, required = false,
                                 default = nil)
  if valid_609795 != nil:
    section.add "S3Prefix", valid_609795
  var valid_609796 = formData.getOrDefault("Port")
  valid_609796 = validateParameter(valid_609796, JInt, required = false, default = nil)
  if valid_609796 != nil:
    section.add "Port", valid_609796
  var valid_609797 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_609797 = validateParameter(valid_609797, JString, required = false,
                                 default = nil)
  if valid_609797 != nil:
    section.add "PreferredMaintenanceWindow", valid_609797
  assert formData != nil, "formData argument is necessary due to required `S3IngestionRoleArn` field"
  var valid_609798 = formData.getOrDefault("S3IngestionRoleArn")
  valid_609798 = validateParameter(valid_609798, JString, required = true,
                                 default = nil)
  if valid_609798 != nil:
    section.add "S3IngestionRoleArn", valid_609798
  var valid_609799 = formData.getOrDefault("PreferredBackupWindow")
  valid_609799 = validateParameter(valid_609799, JString, required = false,
                                 default = nil)
  if valid_609799 != nil:
    section.add "PreferredBackupWindow", valid_609799
  var valid_609800 = formData.getOrDefault("MasterUserPassword")
  valid_609800 = validateParameter(valid_609800, JString, required = true,
                                 default = nil)
  if valid_609800 != nil:
    section.add "MasterUserPassword", valid_609800
  var valid_609801 = formData.getOrDefault("MasterUsername")
  valid_609801 = validateParameter(valid_609801, JString, required = true,
                                 default = nil)
  if valid_609801 != nil:
    section.add "MasterUsername", valid_609801
  var valid_609802 = formData.getOrDefault("SourceEngine")
  valid_609802 = validateParameter(valid_609802, JString, required = true,
                                 default = nil)
  if valid_609802 != nil:
    section.add "SourceEngine", valid_609802
  var valid_609803 = formData.getOrDefault("EngineVersion")
  valid_609803 = validateParameter(valid_609803, JString, required = false,
                                 default = nil)
  if valid_609803 != nil:
    section.add "EngineVersion", valid_609803
  var valid_609804 = formData.getOrDefault("BacktrackWindow")
  valid_609804 = validateParameter(valid_609804, JInt, required = false, default = nil)
  if valid_609804 != nil:
    section.add "BacktrackWindow", valid_609804
  var valid_609805 = formData.getOrDefault("DatabaseName")
  valid_609805 = validateParameter(valid_609805, JString, required = false,
                                 default = nil)
  if valid_609805 != nil:
    section.add "DatabaseName", valid_609805
  var valid_609806 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_609806 = validateParameter(valid_609806, JArray, required = false,
                                 default = nil)
  if valid_609806 != nil:
    section.add "VpcSecurityGroupIds", valid_609806
  var valid_609807 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_609807 = validateParameter(valid_609807, JBool, required = false, default = nil)
  if valid_609807 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_609807
  var valid_609808 = formData.getOrDefault("AvailabilityZones")
  valid_609808 = validateParameter(valid_609808, JArray, required = false,
                                 default = nil)
  if valid_609808 != nil:
    section.add "AvailabilityZones", valid_609808
  var valid_609809 = formData.getOrDefault("BackupRetentionPeriod")
  valid_609809 = validateParameter(valid_609809, JInt, required = false, default = nil)
  if valid_609809 != nil:
    section.add "BackupRetentionPeriod", valid_609809
  var valid_609810 = formData.getOrDefault("Engine")
  valid_609810 = validateParameter(valid_609810, JString, required = true,
                                 default = nil)
  if valid_609810 != nil:
    section.add "Engine", valid_609810
  var valid_609811 = formData.getOrDefault("KmsKeyId")
  valid_609811 = validateParameter(valid_609811, JString, required = false,
                                 default = nil)
  if valid_609811 != nil:
    section.add "KmsKeyId", valid_609811
  var valid_609812 = formData.getOrDefault("S3BucketName")
  valid_609812 = validateParameter(valid_609812, JString, required = true,
                                 default = nil)
  if valid_609812 != nil:
    section.add "S3BucketName", valid_609812
  var valid_609813 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_609813 = validateParameter(valid_609813, JArray, required = false,
                                 default = nil)
  if valid_609813 != nil:
    section.add "EnableCloudwatchLogsExports", valid_609813
  var valid_609814 = formData.getOrDefault("SourceEngineVersion")
  valid_609814 = validateParameter(valid_609814, JString, required = true,
                                 default = nil)
  if valid_609814 != nil:
    section.add "SourceEngineVersion", valid_609814
  var valid_609815 = formData.getOrDefault("Tags")
  valid_609815 = validateParameter(valid_609815, JArray, required = false,
                                 default = nil)
  if valid_609815 != nil:
    section.add "Tags", valid_609815
  var valid_609816 = formData.getOrDefault("DBSubnetGroupName")
  valid_609816 = validateParameter(valid_609816, JString, required = false,
                                 default = nil)
  if valid_609816 != nil:
    section.add "DBSubnetGroupName", valid_609816
  var valid_609817 = formData.getOrDefault("OptionGroupName")
  valid_609817 = validateParameter(valid_609817, JString, required = false,
                                 default = nil)
  if valid_609817 != nil:
    section.add "OptionGroupName", valid_609817
  var valid_609818 = formData.getOrDefault("CharacterSetName")
  valid_609818 = validateParameter(valid_609818, JString, required = false,
                                 default = nil)
  if valid_609818 != nil:
    section.add "CharacterSetName", valid_609818
  var valid_609819 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_609819 = validateParameter(valid_609819, JString, required = false,
                                 default = nil)
  if valid_609819 != nil:
    section.add "DBClusterParameterGroupName", valid_609819
  var valid_609820 = formData.getOrDefault("StorageEncrypted")
  valid_609820 = validateParameter(valid_609820, JBool, required = false, default = nil)
  if valid_609820 != nil:
    section.add "StorageEncrypted", valid_609820
  var valid_609821 = formData.getOrDefault("DBClusterIdentifier")
  valid_609821 = validateParameter(valid_609821, JString, required = true,
                                 default = nil)
  if valid_609821 != nil:
    section.add "DBClusterIdentifier", valid_609821
  var valid_609822 = formData.getOrDefault("DeletionProtection")
  valid_609822 = validateParameter(valid_609822, JBool, required = false, default = nil)
  if valid_609822 != nil:
    section.add "DeletionProtection", valid_609822
  var valid_609823 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_609823 = validateParameter(valid_609823, JBool, required = false, default = nil)
  if valid_609823 != nil:
    section.add "CopyTagsToSnapshot", valid_609823
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609824: Call_PostRestoreDBClusterFromS3_609783; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609824.validator(path, query, header, formData, body)
  let scheme = call_609824.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609824.url(scheme.get, call_609824.host, call_609824.base,
                         call_609824.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609824, url, valid)

proc call*(call_609825: Call_PostRestoreDBClusterFromS3_609783;
          S3IngestionRoleArn: string; MasterUserPassword: string;
          MasterUsername: string; SourceEngine: string; Engine: string;
          S3BucketName: string; SourceEngineVersion: string;
          DBClusterIdentifier: string; S3Prefix: string = ""; Port: int = 0;
          PreferredMaintenanceWindow: string = "";
          PreferredBackupWindow: string = ""; EngineVersion: string = "";
          BacktrackWindow: int = 0; DatabaseName: string = "";
          VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZones: JsonNode = nil; BackupRetentionPeriod: int = 0;
          KmsKeyId: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterFromS3"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          CharacterSetName: string = ""; DBClusterParameterGroupName: string = "";
          Version: string = "2014-10-31"; StorageEncrypted: bool = false;
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postRestoreDBClusterFromS3
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   S3Prefix: string
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   Port: int
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: string (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MasterUsername: string (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   SourceEngine: string (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   CharacterSetName: string
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Version: string (required)
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  var query_609826 = newJObject()
  var formData_609827 = newJObject()
  add(formData_609827, "S3Prefix", newJString(S3Prefix))
  add(formData_609827, "Port", newJInt(Port))
  add(formData_609827, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_609827, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(formData_609827, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_609827, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_609827, "MasterUsername", newJString(MasterUsername))
  add(formData_609827, "SourceEngine", newJString(SourceEngine))
  add(formData_609827, "EngineVersion", newJString(EngineVersion))
  add(formData_609827, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_609827, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_609827.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_609827, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if AvailabilityZones != nil:
    formData_609827.add "AvailabilityZones", AvailabilityZones
  add(formData_609827, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_609827, "Engine", newJString(Engine))
  add(formData_609827, "KmsKeyId", newJString(KmsKeyId))
  add(formData_609827, "S3BucketName", newJString(S3BucketName))
  if EnableCloudwatchLogsExports != nil:
    formData_609827.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_609827, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_609826, "Action", newJString(Action))
  if Tags != nil:
    formData_609827.add "Tags", Tags
  add(formData_609827, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_609827, "OptionGroupName", newJString(OptionGroupName))
  add(formData_609827, "CharacterSetName", newJString(CharacterSetName))
  add(formData_609827, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_609826, "Version", newJString(Version))
  add(formData_609827, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_609827, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_609827, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_609827, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_609825.call(nil, query_609826, nil, formData_609827, nil)

var postRestoreDBClusterFromS3* = Call_PostRestoreDBClusterFromS3_609783(
    name: "postRestoreDBClusterFromS3", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromS3",
    validator: validate_PostRestoreDBClusterFromS3_609784, base: "/",
    url: url_PostRestoreDBClusterFromS3_609785,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromS3_609739 = ref object of OpenApiRestCall_604389
proc url_GetRestoreDBClusterFromS3_609741(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterFromS3_609740(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   S3Prefix: JString
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   MasterUsername: JString (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   Version: JString (required)
  section = newJObject()
  var valid_609742 = query.getOrDefault("DatabaseName")
  valid_609742 = validateParameter(valid_609742, JString, required = false,
                                 default = nil)
  if valid_609742 != nil:
    section.add "DatabaseName", valid_609742
  assert query != nil, "query argument is necessary due to required `SourceEngineVersion` field"
  var valid_609743 = query.getOrDefault("SourceEngineVersion")
  valid_609743 = validateParameter(valid_609743, JString, required = true,
                                 default = nil)
  if valid_609743 != nil:
    section.add "SourceEngineVersion", valid_609743
  var valid_609744 = query.getOrDefault("StorageEncrypted")
  valid_609744 = validateParameter(valid_609744, JBool, required = false, default = nil)
  if valid_609744 != nil:
    section.add "StorageEncrypted", valid_609744
  var valid_609745 = query.getOrDefault("Engine")
  valid_609745 = validateParameter(valid_609745, JString, required = true,
                                 default = nil)
  if valid_609745 != nil:
    section.add "Engine", valid_609745
  var valid_609746 = query.getOrDefault("SourceEngine")
  valid_609746 = validateParameter(valid_609746, JString, required = true,
                                 default = nil)
  if valid_609746 != nil:
    section.add "SourceEngine", valid_609746
  var valid_609747 = query.getOrDefault("DeletionProtection")
  valid_609747 = validateParameter(valid_609747, JBool, required = false, default = nil)
  if valid_609747 != nil:
    section.add "DeletionProtection", valid_609747
  var valid_609748 = query.getOrDefault("CharacterSetName")
  valid_609748 = validateParameter(valid_609748, JString, required = false,
                                 default = nil)
  if valid_609748 != nil:
    section.add "CharacterSetName", valid_609748
  var valid_609749 = query.getOrDefault("S3Prefix")
  valid_609749 = validateParameter(valid_609749, JString, required = false,
                                 default = nil)
  if valid_609749 != nil:
    section.add "S3Prefix", valid_609749
  var valid_609750 = query.getOrDefault("CopyTagsToSnapshot")
  valid_609750 = validateParameter(valid_609750, JBool, required = false, default = nil)
  if valid_609750 != nil:
    section.add "CopyTagsToSnapshot", valid_609750
  var valid_609751 = query.getOrDefault("Tags")
  valid_609751 = validateParameter(valid_609751, JArray, required = false,
                                 default = nil)
  if valid_609751 != nil:
    section.add "Tags", valid_609751
  var valid_609752 = query.getOrDefault("KmsKeyId")
  valid_609752 = validateParameter(valid_609752, JString, required = false,
                                 default = nil)
  if valid_609752 != nil:
    section.add "KmsKeyId", valid_609752
  var valid_609753 = query.getOrDefault("DBClusterIdentifier")
  valid_609753 = validateParameter(valid_609753, JString, required = true,
                                 default = nil)
  if valid_609753 != nil:
    section.add "DBClusterIdentifier", valid_609753
  var valid_609754 = query.getOrDefault("BacktrackWindow")
  valid_609754 = validateParameter(valid_609754, JInt, required = false, default = nil)
  if valid_609754 != nil:
    section.add "BacktrackWindow", valid_609754
  var valid_609755 = query.getOrDefault("DBClusterParameterGroupName")
  valid_609755 = validateParameter(valid_609755, JString, required = false,
                                 default = nil)
  if valid_609755 != nil:
    section.add "DBClusterParameterGroupName", valid_609755
  var valid_609756 = query.getOrDefault("S3BucketName")
  valid_609756 = validateParameter(valid_609756, JString, required = true,
                                 default = nil)
  if valid_609756 != nil:
    section.add "S3BucketName", valid_609756
  var valid_609757 = query.getOrDefault("AvailabilityZones")
  valid_609757 = validateParameter(valid_609757, JArray, required = false,
                                 default = nil)
  if valid_609757 != nil:
    section.add "AvailabilityZones", valid_609757
  var valid_609758 = query.getOrDefault("MasterUsername")
  valid_609758 = validateParameter(valid_609758, JString, required = true,
                                 default = nil)
  if valid_609758 != nil:
    section.add "MasterUsername", valid_609758
  var valid_609759 = query.getOrDefault("BackupRetentionPeriod")
  valid_609759 = validateParameter(valid_609759, JInt, required = false, default = nil)
  if valid_609759 != nil:
    section.add "BackupRetentionPeriod", valid_609759
  var valid_609760 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_609760 = validateParameter(valid_609760, JBool, required = false, default = nil)
  if valid_609760 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_609760
  var valid_609761 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_609761 = validateParameter(valid_609761, JArray, required = false,
                                 default = nil)
  if valid_609761 != nil:
    section.add "EnableCloudwatchLogsExports", valid_609761
  var valid_609762 = query.getOrDefault("EngineVersion")
  valid_609762 = validateParameter(valid_609762, JString, required = false,
                                 default = nil)
  if valid_609762 != nil:
    section.add "EngineVersion", valid_609762
  var valid_609763 = query.getOrDefault("Action")
  valid_609763 = validateParameter(valid_609763, JString, required = true,
                                 default = newJString("RestoreDBClusterFromS3"))
  if valid_609763 != nil:
    section.add "Action", valid_609763
  var valid_609764 = query.getOrDefault("Port")
  valid_609764 = validateParameter(valid_609764, JInt, required = false, default = nil)
  if valid_609764 != nil:
    section.add "Port", valid_609764
  var valid_609765 = query.getOrDefault("VpcSecurityGroupIds")
  valid_609765 = validateParameter(valid_609765, JArray, required = false,
                                 default = nil)
  if valid_609765 != nil:
    section.add "VpcSecurityGroupIds", valid_609765
  var valid_609766 = query.getOrDefault("MasterUserPassword")
  valid_609766 = validateParameter(valid_609766, JString, required = true,
                                 default = nil)
  if valid_609766 != nil:
    section.add "MasterUserPassword", valid_609766
  var valid_609767 = query.getOrDefault("OptionGroupName")
  valid_609767 = validateParameter(valid_609767, JString, required = false,
                                 default = nil)
  if valid_609767 != nil:
    section.add "OptionGroupName", valid_609767
  var valid_609768 = query.getOrDefault("DBSubnetGroupName")
  valid_609768 = validateParameter(valid_609768, JString, required = false,
                                 default = nil)
  if valid_609768 != nil:
    section.add "DBSubnetGroupName", valid_609768
  var valid_609769 = query.getOrDefault("PreferredBackupWindow")
  valid_609769 = validateParameter(valid_609769, JString, required = false,
                                 default = nil)
  if valid_609769 != nil:
    section.add "PreferredBackupWindow", valid_609769
  var valid_609770 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_609770 = validateParameter(valid_609770, JString, required = false,
                                 default = nil)
  if valid_609770 != nil:
    section.add "PreferredMaintenanceWindow", valid_609770
  var valid_609771 = query.getOrDefault("S3IngestionRoleArn")
  valid_609771 = validateParameter(valid_609771, JString, required = true,
                                 default = nil)
  if valid_609771 != nil:
    section.add "S3IngestionRoleArn", valid_609771
  var valid_609772 = query.getOrDefault("Version")
  valid_609772 = validateParameter(valid_609772, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609772 != nil:
    section.add "Version", valid_609772
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609773 = header.getOrDefault("X-Amz-Signature")
  valid_609773 = validateParameter(valid_609773, JString, required = false,
                                 default = nil)
  if valid_609773 != nil:
    section.add "X-Amz-Signature", valid_609773
  var valid_609774 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609774 = validateParameter(valid_609774, JString, required = false,
                                 default = nil)
  if valid_609774 != nil:
    section.add "X-Amz-Content-Sha256", valid_609774
  var valid_609775 = header.getOrDefault("X-Amz-Date")
  valid_609775 = validateParameter(valid_609775, JString, required = false,
                                 default = nil)
  if valid_609775 != nil:
    section.add "X-Amz-Date", valid_609775
  var valid_609776 = header.getOrDefault("X-Amz-Credential")
  valid_609776 = validateParameter(valid_609776, JString, required = false,
                                 default = nil)
  if valid_609776 != nil:
    section.add "X-Amz-Credential", valid_609776
  var valid_609777 = header.getOrDefault("X-Amz-Security-Token")
  valid_609777 = validateParameter(valid_609777, JString, required = false,
                                 default = nil)
  if valid_609777 != nil:
    section.add "X-Amz-Security-Token", valid_609777
  var valid_609778 = header.getOrDefault("X-Amz-Algorithm")
  valid_609778 = validateParameter(valid_609778, JString, required = false,
                                 default = nil)
  if valid_609778 != nil:
    section.add "X-Amz-Algorithm", valid_609778
  var valid_609779 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609779 = validateParameter(valid_609779, JString, required = false,
                                 default = nil)
  if valid_609779 != nil:
    section.add "X-Amz-SignedHeaders", valid_609779
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609780: Call_GetRestoreDBClusterFromS3_609739; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609780.validator(path, query, header, formData, body)
  let scheme = call_609780.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609780.url(scheme.get, call_609780.host, call_609780.base,
                         call_609780.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609780, url, valid)

proc call*(call_609781: Call_GetRestoreDBClusterFromS3_609739;
          SourceEngineVersion: string; Engine: string; SourceEngine: string;
          DBClusterIdentifier: string; S3BucketName: string; MasterUsername: string;
          MasterUserPassword: string; S3IngestionRoleArn: string;
          DatabaseName: string = ""; StorageEncrypted: bool = false;
          DeletionProtection: bool = false; CharacterSetName: string = "";
          S3Prefix: string = ""; CopyTagsToSnapshot: bool = false; Tags: JsonNode = nil;
          KmsKeyId: string = ""; BacktrackWindow: int = 0;
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil; BackupRetentionPeriod: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBClusterFromS3"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterFromS3
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   SourceEngine: string (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CharacterSetName: string
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   S3Prefix: string
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   MasterUsername: string (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   S3IngestionRoleArn: string (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   Version: string (required)
  var query_609782 = newJObject()
  add(query_609782, "DatabaseName", newJString(DatabaseName))
  add(query_609782, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_609782, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_609782, "Engine", newJString(Engine))
  add(query_609782, "SourceEngine", newJString(SourceEngine))
  add(query_609782, "DeletionProtection", newJBool(DeletionProtection))
  add(query_609782, "CharacterSetName", newJString(CharacterSetName))
  add(query_609782, "S3Prefix", newJString(S3Prefix))
  add(query_609782, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  if Tags != nil:
    query_609782.add "Tags", Tags
  add(query_609782, "KmsKeyId", newJString(KmsKeyId))
  add(query_609782, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_609782, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_609782, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_609782, "S3BucketName", newJString(S3BucketName))
  if AvailabilityZones != nil:
    query_609782.add "AvailabilityZones", AvailabilityZones
  add(query_609782, "MasterUsername", newJString(MasterUsername))
  add(query_609782, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_609782, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_609782.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_609782, "EngineVersion", newJString(EngineVersion))
  add(query_609782, "Action", newJString(Action))
  add(query_609782, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_609782.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_609782, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_609782, "OptionGroupName", newJString(OptionGroupName))
  add(query_609782, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_609782, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_609782, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_609782, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_609782, "Version", newJString(Version))
  result = call_609781.call(nil, query_609782, nil, nil, nil)

var getRestoreDBClusterFromS3* = Call_GetRestoreDBClusterFromS3_609739(
    name: "getRestoreDBClusterFromS3", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromS3",
    validator: validate_GetRestoreDBClusterFromS3_609740, base: "/",
    url: url_GetRestoreDBClusterFromS3_609741,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromSnapshot_609867 = ref object of OpenApiRestCall_604389
proc url_PostRestoreDBClusterFromSnapshot_609869(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterFromSnapshot_609868(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609870 = query.getOrDefault("Action")
  valid_609870 = validateParameter(valid_609870, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_609870 != nil:
    section.add "Action", valid_609870
  var valid_609871 = query.getOrDefault("Version")
  valid_609871 = validateParameter(valid_609871, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609871 != nil:
    section.add "Version", valid_609871
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609872 = header.getOrDefault("X-Amz-Signature")
  valid_609872 = validateParameter(valid_609872, JString, required = false,
                                 default = nil)
  if valid_609872 != nil:
    section.add "X-Amz-Signature", valid_609872
  var valid_609873 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609873 = validateParameter(valid_609873, JString, required = false,
                                 default = nil)
  if valid_609873 != nil:
    section.add "X-Amz-Content-Sha256", valid_609873
  var valid_609874 = header.getOrDefault("X-Amz-Date")
  valid_609874 = validateParameter(valid_609874, JString, required = false,
                                 default = nil)
  if valid_609874 != nil:
    section.add "X-Amz-Date", valid_609874
  var valid_609875 = header.getOrDefault("X-Amz-Credential")
  valid_609875 = validateParameter(valid_609875, JString, required = false,
                                 default = nil)
  if valid_609875 != nil:
    section.add "X-Amz-Credential", valid_609875
  var valid_609876 = header.getOrDefault("X-Amz-Security-Token")
  valid_609876 = validateParameter(valid_609876, JString, required = false,
                                 default = nil)
  if valid_609876 != nil:
    section.add "X-Amz-Security-Token", valid_609876
  var valid_609877 = header.getOrDefault("X-Amz-Algorithm")
  valid_609877 = validateParameter(valid_609877, JString, required = false,
                                 default = nil)
  if valid_609877 != nil:
    section.add "X-Amz-Algorithm", valid_609877
  var valid_609878 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609878 = validateParameter(valid_609878, JString, required = false,
                                 default = nil)
  if valid_609878 != nil:
    section.add "X-Amz-SignedHeaders", valid_609878
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: JString
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_609879 = formData.getOrDefault("Port")
  valid_609879 = validateParameter(valid_609879, JInt, required = false, default = nil)
  if valid_609879 != nil:
    section.add "Port", valid_609879
  var valid_609880 = formData.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_609880 = validateParameter(valid_609880, JString, required = false,
                                 default = nil)
  if valid_609880 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_609880
  var valid_609881 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_609881 = validateParameter(valid_609881, JString, required = false,
                                 default = nil)
  if valid_609881 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_609881
  var valid_609882 = formData.getOrDefault("EngineVersion")
  valid_609882 = validateParameter(valid_609882, JString, required = false,
                                 default = nil)
  if valid_609882 != nil:
    section.add "EngineVersion", valid_609882
  var valid_609883 = formData.getOrDefault("BacktrackWindow")
  valid_609883 = validateParameter(valid_609883, JInt, required = false, default = nil)
  if valid_609883 != nil:
    section.add "BacktrackWindow", valid_609883
  var valid_609884 = formData.getOrDefault("DatabaseName")
  valid_609884 = validateParameter(valid_609884, JString, required = false,
                                 default = nil)
  if valid_609884 != nil:
    section.add "DatabaseName", valid_609884
  var valid_609885 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_609885 = validateParameter(valid_609885, JArray, required = false,
                                 default = nil)
  if valid_609885 != nil:
    section.add "VpcSecurityGroupIds", valid_609885
  var valid_609886 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_609886 = validateParameter(valid_609886, JBool, required = false, default = nil)
  if valid_609886 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_609886
  var valid_609887 = formData.getOrDefault("AvailabilityZones")
  valid_609887 = validateParameter(valid_609887, JArray, required = false,
                                 default = nil)
  if valid_609887 != nil:
    section.add "AvailabilityZones", valid_609887
  var valid_609888 = formData.getOrDefault("KmsKeyId")
  valid_609888 = validateParameter(valid_609888, JString, required = false,
                                 default = nil)
  if valid_609888 != nil:
    section.add "KmsKeyId", valid_609888
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_609889 = formData.getOrDefault("Engine")
  valid_609889 = validateParameter(valid_609889, JString, required = true,
                                 default = nil)
  if valid_609889 != nil:
    section.add "Engine", valid_609889
  var valid_609890 = formData.getOrDefault("EngineMode")
  valid_609890 = validateParameter(valid_609890, JString, required = false,
                                 default = nil)
  if valid_609890 != nil:
    section.add "EngineMode", valid_609890
  var valid_609891 = formData.getOrDefault("SnapshotIdentifier")
  valid_609891 = validateParameter(valid_609891, JString, required = true,
                                 default = nil)
  if valid_609891 != nil:
    section.add "SnapshotIdentifier", valid_609891
  var valid_609892 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_609892 = validateParameter(valid_609892, JArray, required = false,
                                 default = nil)
  if valid_609892 != nil:
    section.add "EnableCloudwatchLogsExports", valid_609892
  var valid_609893 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_609893 = validateParameter(valid_609893, JString, required = false,
                                 default = nil)
  if valid_609893 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_609893
  var valid_609894 = formData.getOrDefault("Tags")
  valid_609894 = validateParameter(valid_609894, JArray, required = false,
                                 default = nil)
  if valid_609894 != nil:
    section.add "Tags", valid_609894
  var valid_609895 = formData.getOrDefault("DBSubnetGroupName")
  valid_609895 = validateParameter(valid_609895, JString, required = false,
                                 default = nil)
  if valid_609895 != nil:
    section.add "DBSubnetGroupName", valid_609895
  var valid_609896 = formData.getOrDefault("OptionGroupName")
  valid_609896 = validateParameter(valid_609896, JString, required = false,
                                 default = nil)
  if valid_609896 != nil:
    section.add "OptionGroupName", valid_609896
  var valid_609897 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_609897 = validateParameter(valid_609897, JString, required = false,
                                 default = nil)
  if valid_609897 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_609897
  var valid_609898 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_609898 = validateParameter(valid_609898, JString, required = false,
                                 default = nil)
  if valid_609898 != nil:
    section.add "DBClusterParameterGroupName", valid_609898
  var valid_609899 = formData.getOrDefault("DBClusterIdentifier")
  valid_609899 = validateParameter(valid_609899, JString, required = true,
                                 default = nil)
  if valid_609899 != nil:
    section.add "DBClusterIdentifier", valid_609899
  var valid_609900 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_609900 = validateParameter(valid_609900, JString, required = false,
                                 default = nil)
  if valid_609900 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_609900
  var valid_609901 = formData.getOrDefault("DeletionProtection")
  valid_609901 = validateParameter(valid_609901, JBool, required = false, default = nil)
  if valid_609901 != nil:
    section.add "DeletionProtection", valid_609901
  var valid_609902 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_609902 = validateParameter(valid_609902, JBool, required = false, default = nil)
  if valid_609902 != nil:
    section.add "CopyTagsToSnapshot", valid_609902
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609903: Call_PostRestoreDBClusterFromSnapshot_609867;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609903.validator(path, query, header, formData, body)
  let scheme = call_609903.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609903.url(scheme.get, call_609903.host, call_609903.base,
                         call_609903.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609903, url, valid)

proc call*(call_609904: Call_PostRestoreDBClusterFromSnapshot_609867;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; ScalingConfigurationSecondsUntilAutoPause: string = "";
          ScalingConfigurationTimeoutAction: string = "";
          EngineVersion: string = ""; BacktrackWindow: int = 0;
          DatabaseName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZones: JsonNode = nil; KmsKeyId: string = "";
          EngineMode: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          ScalingConfigurationMaxCapacity: string = "";
          Action: string = "RestoreDBClusterFromSnapshot"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationAutoPause: string = "";
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   EngineVersion: string
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  var query_609905 = newJObject()
  var formData_609906 = newJObject()
  add(formData_609906, "Port", newJInt(Port))
  add(formData_609906, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_609906, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_609906, "EngineVersion", newJString(EngineVersion))
  add(formData_609906, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_609906, "DatabaseName", newJString(DatabaseName))
  if VpcSecurityGroupIds != nil:
    formData_609906.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_609906, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if AvailabilityZones != nil:
    formData_609906.add "AvailabilityZones", AvailabilityZones
  add(formData_609906, "KmsKeyId", newJString(KmsKeyId))
  add(formData_609906, "Engine", newJString(Engine))
  add(formData_609906, "EngineMode", newJString(EngineMode))
  add(formData_609906, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  if EnableCloudwatchLogsExports != nil:
    formData_609906.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_609906, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_609905, "Action", newJString(Action))
  if Tags != nil:
    formData_609906.add "Tags", Tags
  add(formData_609906, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_609906, "OptionGroupName", newJString(OptionGroupName))
  add(formData_609906, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_609906, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_609905, "Version", newJString(Version))
  add(formData_609906, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_609906, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_609906, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_609906, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_609904.call(nil, query_609905, nil, formData_609906, nil)

var postRestoreDBClusterFromSnapshot* = Call_PostRestoreDBClusterFromSnapshot_609867(
    name: "postRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_PostRestoreDBClusterFromSnapshot_609868, base: "/",
    url: url_PostRestoreDBClusterFromSnapshot_609869,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromSnapshot_609828 = ref object of OpenApiRestCall_604389
proc url_GetRestoreDBClusterFromSnapshot_609830(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterFromSnapshot_609829(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: JString
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  section = newJObject()
  var valid_609831 = query.getOrDefault("DatabaseName")
  valid_609831 = validateParameter(valid_609831, JString, required = false,
                                 default = nil)
  if valid_609831 != nil:
    section.add "DatabaseName", valid_609831
  var valid_609832 = query.getOrDefault("DeletionProtection")
  valid_609832 = validateParameter(valid_609832, JBool, required = false, default = nil)
  if valid_609832 != nil:
    section.add "DeletionProtection", valid_609832
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_609833 = query.getOrDefault("Engine")
  valid_609833 = validateParameter(valid_609833, JString, required = true,
                                 default = nil)
  if valid_609833 != nil:
    section.add "Engine", valid_609833
  var valid_609834 = query.getOrDefault("CopyTagsToSnapshot")
  valid_609834 = validateParameter(valid_609834, JBool, required = false, default = nil)
  if valid_609834 != nil:
    section.add "CopyTagsToSnapshot", valid_609834
  var valid_609835 = query.getOrDefault("SnapshotIdentifier")
  valid_609835 = validateParameter(valid_609835, JString, required = true,
                                 default = nil)
  if valid_609835 != nil:
    section.add "SnapshotIdentifier", valid_609835
  var valid_609836 = query.getOrDefault("Tags")
  valid_609836 = validateParameter(valid_609836, JArray, required = false,
                                 default = nil)
  if valid_609836 != nil:
    section.add "Tags", valid_609836
  var valid_609837 = query.getOrDefault("KmsKeyId")
  valid_609837 = validateParameter(valid_609837, JString, required = false,
                                 default = nil)
  if valid_609837 != nil:
    section.add "KmsKeyId", valid_609837
  var valid_609838 = query.getOrDefault("DBClusterIdentifier")
  valid_609838 = validateParameter(valid_609838, JString, required = true,
                                 default = nil)
  if valid_609838 != nil:
    section.add "DBClusterIdentifier", valid_609838
  var valid_609839 = query.getOrDefault("BacktrackWindow")
  valid_609839 = validateParameter(valid_609839, JInt, required = false, default = nil)
  if valid_609839 != nil:
    section.add "BacktrackWindow", valid_609839
  var valid_609840 = query.getOrDefault("EngineMode")
  valid_609840 = validateParameter(valid_609840, JString, required = false,
                                 default = nil)
  if valid_609840 != nil:
    section.add "EngineMode", valid_609840
  var valid_609841 = query.getOrDefault("DBClusterParameterGroupName")
  valid_609841 = validateParameter(valid_609841, JString, required = false,
                                 default = nil)
  if valid_609841 != nil:
    section.add "DBClusterParameterGroupName", valid_609841
  var valid_609842 = query.getOrDefault("AvailabilityZones")
  valid_609842 = validateParameter(valid_609842, JArray, required = false,
                                 default = nil)
  if valid_609842 != nil:
    section.add "AvailabilityZones", valid_609842
  var valid_609843 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_609843 = validateParameter(valid_609843, JString, required = false,
                                 default = nil)
  if valid_609843 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_609843
  var valid_609844 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_609844 = validateParameter(valid_609844, JString, required = false,
                                 default = nil)
  if valid_609844 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_609844
  var valid_609845 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_609845 = validateParameter(valid_609845, JString, required = false,
                                 default = nil)
  if valid_609845 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_609845
  var valid_609846 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_609846 = validateParameter(valid_609846, JBool, required = false, default = nil)
  if valid_609846 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_609846
  var valid_609847 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_609847 = validateParameter(valid_609847, JString, required = false,
                                 default = nil)
  if valid_609847 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_609847
  var valid_609848 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_609848 = validateParameter(valid_609848, JArray, required = false,
                                 default = nil)
  if valid_609848 != nil:
    section.add "EnableCloudwatchLogsExports", valid_609848
  var valid_609849 = query.getOrDefault("EngineVersion")
  valid_609849 = validateParameter(valid_609849, JString, required = false,
                                 default = nil)
  if valid_609849 != nil:
    section.add "EngineVersion", valid_609849
  var valid_609850 = query.getOrDefault("Action")
  valid_609850 = validateParameter(valid_609850, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_609850 != nil:
    section.add "Action", valid_609850
  var valid_609851 = query.getOrDefault("Port")
  valid_609851 = validateParameter(valid_609851, JInt, required = false, default = nil)
  if valid_609851 != nil:
    section.add "Port", valid_609851
  var valid_609852 = query.getOrDefault("VpcSecurityGroupIds")
  valid_609852 = validateParameter(valid_609852, JArray, required = false,
                                 default = nil)
  if valid_609852 != nil:
    section.add "VpcSecurityGroupIds", valid_609852
  var valid_609853 = query.getOrDefault("OptionGroupName")
  valid_609853 = validateParameter(valid_609853, JString, required = false,
                                 default = nil)
  if valid_609853 != nil:
    section.add "OptionGroupName", valid_609853
  var valid_609854 = query.getOrDefault("DBSubnetGroupName")
  valid_609854 = validateParameter(valid_609854, JString, required = false,
                                 default = nil)
  if valid_609854 != nil:
    section.add "DBSubnetGroupName", valid_609854
  var valid_609855 = query.getOrDefault("Version")
  valid_609855 = validateParameter(valid_609855, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609855 != nil:
    section.add "Version", valid_609855
  var valid_609856 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_609856 = validateParameter(valid_609856, JString, required = false,
                                 default = nil)
  if valid_609856 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_609856
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609857 = header.getOrDefault("X-Amz-Signature")
  valid_609857 = validateParameter(valid_609857, JString, required = false,
                                 default = nil)
  if valid_609857 != nil:
    section.add "X-Amz-Signature", valid_609857
  var valid_609858 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609858 = validateParameter(valid_609858, JString, required = false,
                                 default = nil)
  if valid_609858 != nil:
    section.add "X-Amz-Content-Sha256", valid_609858
  var valid_609859 = header.getOrDefault("X-Amz-Date")
  valid_609859 = validateParameter(valid_609859, JString, required = false,
                                 default = nil)
  if valid_609859 != nil:
    section.add "X-Amz-Date", valid_609859
  var valid_609860 = header.getOrDefault("X-Amz-Credential")
  valid_609860 = validateParameter(valid_609860, JString, required = false,
                                 default = nil)
  if valid_609860 != nil:
    section.add "X-Amz-Credential", valid_609860
  var valid_609861 = header.getOrDefault("X-Amz-Security-Token")
  valid_609861 = validateParameter(valid_609861, JString, required = false,
                                 default = nil)
  if valid_609861 != nil:
    section.add "X-Amz-Security-Token", valid_609861
  var valid_609862 = header.getOrDefault("X-Amz-Algorithm")
  valid_609862 = validateParameter(valid_609862, JString, required = false,
                                 default = nil)
  if valid_609862 != nil:
    section.add "X-Amz-Algorithm", valid_609862
  var valid_609863 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609863 = validateParameter(valid_609863, JString, required = false,
                                 default = nil)
  if valid_609863 != nil:
    section.add "X-Amz-SignedHeaders", valid_609863
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609864: Call_GetRestoreDBClusterFromSnapshot_609828;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609864.validator(path, query, header, formData, body)
  let scheme = call_609864.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609864.url(scheme.get, call_609864.host, call_609864.base,
                         call_609864.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609864, url, valid)

proc call*(call_609865: Call_GetRestoreDBClusterFromSnapshot_609828;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          DatabaseName: string = ""; DeletionProtection: bool = false;
          CopyTagsToSnapshot: bool = false; Tags: JsonNode = nil; KmsKeyId: string = "";
          BacktrackWindow: int = 0; EngineMode: string = "";
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          ScalingConfigurationMinCapacity: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBClusterFromSnapshot"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31";
          ScalingConfigurationMaxCapacity: string = ""): Recallable =
  ## getRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   EngineVersion: string
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  var query_609866 = newJObject()
  add(query_609866, "DatabaseName", newJString(DatabaseName))
  add(query_609866, "DeletionProtection", newJBool(DeletionProtection))
  add(query_609866, "Engine", newJString(Engine))
  add(query_609866, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_609866, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  if Tags != nil:
    query_609866.add "Tags", Tags
  add(query_609866, "KmsKeyId", newJString(KmsKeyId))
  add(query_609866, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_609866, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_609866, "EngineMode", newJString(EngineMode))
  add(query_609866, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_609866.add "AvailabilityZones", AvailabilityZones
  add(query_609866, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_609866, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_609866, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_609866, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_609866, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  if EnableCloudwatchLogsExports != nil:
    query_609866.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_609866, "EngineVersion", newJString(EngineVersion))
  add(query_609866, "Action", newJString(Action))
  add(query_609866, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_609866.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_609866, "OptionGroupName", newJString(OptionGroupName))
  add(query_609866, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_609866, "Version", newJString(Version))
  add(query_609866, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  result = call_609865.call(nil, query_609866, nil, nil, nil)

var getRestoreDBClusterFromSnapshot* = Call_GetRestoreDBClusterFromSnapshot_609828(
    name: "getRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_GetRestoreDBClusterFromSnapshot_609829, base: "/",
    url: url_GetRestoreDBClusterFromSnapshot_609830,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterToPointInTime_609939 = ref object of OpenApiRestCall_604389
proc url_PostRestoreDBClusterToPointInTime_609941(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterToPointInTime_609940(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_609942 = query.getOrDefault("Action")
  valid_609942 = validateParameter(valid_609942, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_609942 != nil:
    section.add "Action", valid_609942
  var valid_609943 = query.getOrDefault("Version")
  valid_609943 = validateParameter(valid_609943, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609943 != nil:
    section.add "Version", valid_609943
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609944 = header.getOrDefault("X-Amz-Signature")
  valid_609944 = validateParameter(valid_609944, JString, required = false,
                                 default = nil)
  if valid_609944 != nil:
    section.add "X-Amz-Signature", valid_609944
  var valid_609945 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609945 = validateParameter(valid_609945, JString, required = false,
                                 default = nil)
  if valid_609945 != nil:
    section.add "X-Amz-Content-Sha256", valid_609945
  var valid_609946 = header.getOrDefault("X-Amz-Date")
  valid_609946 = validateParameter(valid_609946, JString, required = false,
                                 default = nil)
  if valid_609946 != nil:
    section.add "X-Amz-Date", valid_609946
  var valid_609947 = header.getOrDefault("X-Amz-Credential")
  valid_609947 = validateParameter(valid_609947, JString, required = false,
                                 default = nil)
  if valid_609947 != nil:
    section.add "X-Amz-Credential", valid_609947
  var valid_609948 = header.getOrDefault("X-Amz-Security-Token")
  valid_609948 = validateParameter(valid_609948, JString, required = false,
                                 default = nil)
  if valid_609948 != nil:
    section.add "X-Amz-Security-Token", valid_609948
  var valid_609949 = header.getOrDefault("X-Amz-Algorithm")
  valid_609949 = validateParameter(valid_609949, JString, required = false,
                                 default = nil)
  if valid_609949 != nil:
    section.add "X-Amz-Algorithm", valid_609949
  var valid_609950 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609950 = validateParameter(valid_609950, JString, required = false,
                                 default = nil)
  if valid_609950 != nil:
    section.add "X-Amz-SignedHeaders", valid_609950
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  section = newJObject()
  var valid_609951 = formData.getOrDefault("Port")
  valid_609951 = validateParameter(valid_609951, JInt, required = false, default = nil)
  if valid_609951 != nil:
    section.add "Port", valid_609951
  var valid_609952 = formData.getOrDefault("BacktrackWindow")
  valid_609952 = validateParameter(valid_609952, JInt, required = false, default = nil)
  if valid_609952 != nil:
    section.add "BacktrackWindow", valid_609952
  var valid_609953 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_609953 = validateParameter(valid_609953, JArray, required = false,
                                 default = nil)
  if valid_609953 != nil:
    section.add "VpcSecurityGroupIds", valid_609953
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterIdentifier` field"
  var valid_609954 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_609954 = validateParameter(valid_609954, JString, required = true,
                                 default = nil)
  if valid_609954 != nil:
    section.add "SourceDBClusterIdentifier", valid_609954
  var valid_609955 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_609955 = validateParameter(valid_609955, JBool, required = false, default = nil)
  if valid_609955 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_609955
  var valid_609956 = formData.getOrDefault("KmsKeyId")
  valid_609956 = validateParameter(valid_609956, JString, required = false,
                                 default = nil)
  if valid_609956 != nil:
    section.add "KmsKeyId", valid_609956
  var valid_609957 = formData.getOrDefault("RestoreType")
  valid_609957 = validateParameter(valid_609957, JString, required = false,
                                 default = nil)
  if valid_609957 != nil:
    section.add "RestoreType", valid_609957
  var valid_609958 = formData.getOrDefault("UseLatestRestorableTime")
  valid_609958 = validateParameter(valid_609958, JBool, required = false, default = nil)
  if valid_609958 != nil:
    section.add "UseLatestRestorableTime", valid_609958
  var valid_609959 = formData.getOrDefault("RestoreToTime")
  valid_609959 = validateParameter(valid_609959, JString, required = false,
                                 default = nil)
  if valid_609959 != nil:
    section.add "RestoreToTime", valid_609959
  var valid_609960 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_609960 = validateParameter(valid_609960, JArray, required = false,
                                 default = nil)
  if valid_609960 != nil:
    section.add "EnableCloudwatchLogsExports", valid_609960
  var valid_609961 = formData.getOrDefault("Tags")
  valid_609961 = validateParameter(valid_609961, JArray, required = false,
                                 default = nil)
  if valid_609961 != nil:
    section.add "Tags", valid_609961
  var valid_609962 = formData.getOrDefault("DBSubnetGroupName")
  valid_609962 = validateParameter(valid_609962, JString, required = false,
                                 default = nil)
  if valid_609962 != nil:
    section.add "DBSubnetGroupName", valid_609962
  var valid_609963 = formData.getOrDefault("OptionGroupName")
  valid_609963 = validateParameter(valid_609963, JString, required = false,
                                 default = nil)
  if valid_609963 != nil:
    section.add "OptionGroupName", valid_609963
  var valid_609964 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_609964 = validateParameter(valid_609964, JString, required = false,
                                 default = nil)
  if valid_609964 != nil:
    section.add "DBClusterParameterGroupName", valid_609964
  var valid_609965 = formData.getOrDefault("DBClusterIdentifier")
  valid_609965 = validateParameter(valid_609965, JString, required = true,
                                 default = nil)
  if valid_609965 != nil:
    section.add "DBClusterIdentifier", valid_609965
  var valid_609966 = formData.getOrDefault("DeletionProtection")
  valid_609966 = validateParameter(valid_609966, JBool, required = false, default = nil)
  if valid_609966 != nil:
    section.add "DeletionProtection", valid_609966
  var valid_609967 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_609967 = validateParameter(valid_609967, JBool, required = false, default = nil)
  if valid_609967 != nil:
    section.add "CopyTagsToSnapshot", valid_609967
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609968: Call_PostRestoreDBClusterToPointInTime_609939;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609968.validator(path, query, header, formData, body)
  let scheme = call_609968.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609968.url(scheme.get, call_609968.host, call_609968.base,
                         call_609968.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609968, url, valid)

proc call*(call_609969: Call_PostRestoreDBClusterToPointInTime_609939;
          SourceDBClusterIdentifier: string; DBClusterIdentifier: string;
          Port: int = 0; BacktrackWindow: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          RestoreType: string = ""; UseLatestRestorableTime: bool = false;
          RestoreToTime: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterToPointInTime"; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; OptionGroupName: string = "";
          DBClusterParameterGroupName: string = ""; Version: string = "2014-10-31";
          DeletionProtection: bool = false; CopyTagsToSnapshot: bool = false): Recallable =
  ## postRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  var query_609970 = newJObject()
  var formData_609971 = newJObject()
  add(formData_609971, "Port", newJInt(Port))
  add(formData_609971, "BacktrackWindow", newJInt(BacktrackWindow))
  if VpcSecurityGroupIds != nil:
    formData_609971.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_609971, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_609971, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_609971, "KmsKeyId", newJString(KmsKeyId))
  add(formData_609971, "RestoreType", newJString(RestoreType))
  add(formData_609971, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_609971, "RestoreToTime", newJString(RestoreToTime))
  if EnableCloudwatchLogsExports != nil:
    formData_609971.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_609970, "Action", newJString(Action))
  if Tags != nil:
    formData_609971.add "Tags", Tags
  add(formData_609971, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_609971, "OptionGroupName", newJString(OptionGroupName))
  add(formData_609971, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_609970, "Version", newJString(Version))
  add(formData_609971, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_609971, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_609971, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  result = call_609969.call(nil, query_609970, nil, formData_609971, nil)

var postRestoreDBClusterToPointInTime* = Call_PostRestoreDBClusterToPointInTime_609939(
    name: "postRestoreDBClusterToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_PostRestoreDBClusterToPointInTime_609940, base: "/",
    url: url_PostRestoreDBClusterToPointInTime_609941,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterToPointInTime_609907 = ref object of OpenApiRestCall_604389
proc url_GetRestoreDBClusterToPointInTime_609909(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterToPointInTime_609908(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: JString (required)
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_609910 = query.getOrDefault("DeletionProtection")
  valid_609910 = validateParameter(valid_609910, JBool, required = false, default = nil)
  if valid_609910 != nil:
    section.add "DeletionProtection", valid_609910
  var valid_609911 = query.getOrDefault("RestoreType")
  valid_609911 = validateParameter(valid_609911, JString, required = false,
                                 default = nil)
  if valid_609911 != nil:
    section.add "RestoreType", valid_609911
  var valid_609912 = query.getOrDefault("UseLatestRestorableTime")
  valid_609912 = validateParameter(valid_609912, JBool, required = false, default = nil)
  if valid_609912 != nil:
    section.add "UseLatestRestorableTime", valid_609912
  var valid_609913 = query.getOrDefault("CopyTagsToSnapshot")
  valid_609913 = validateParameter(valid_609913, JBool, required = false, default = nil)
  if valid_609913 != nil:
    section.add "CopyTagsToSnapshot", valid_609913
  var valid_609914 = query.getOrDefault("Tags")
  valid_609914 = validateParameter(valid_609914, JArray, required = false,
                                 default = nil)
  if valid_609914 != nil:
    section.add "Tags", valid_609914
  var valid_609915 = query.getOrDefault("KmsKeyId")
  valid_609915 = validateParameter(valid_609915, JString, required = false,
                                 default = nil)
  if valid_609915 != nil:
    section.add "KmsKeyId", valid_609915
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_609916 = query.getOrDefault("DBClusterIdentifier")
  valid_609916 = validateParameter(valid_609916, JString, required = true,
                                 default = nil)
  if valid_609916 != nil:
    section.add "DBClusterIdentifier", valid_609916
  var valid_609917 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_609917 = validateParameter(valid_609917, JString, required = true,
                                 default = nil)
  if valid_609917 != nil:
    section.add "SourceDBClusterIdentifier", valid_609917
  var valid_609918 = query.getOrDefault("BacktrackWindow")
  valid_609918 = validateParameter(valid_609918, JInt, required = false, default = nil)
  if valid_609918 != nil:
    section.add "BacktrackWindow", valid_609918
  var valid_609919 = query.getOrDefault("DBClusterParameterGroupName")
  valid_609919 = validateParameter(valid_609919, JString, required = false,
                                 default = nil)
  if valid_609919 != nil:
    section.add "DBClusterParameterGroupName", valid_609919
  var valid_609920 = query.getOrDefault("RestoreToTime")
  valid_609920 = validateParameter(valid_609920, JString, required = false,
                                 default = nil)
  if valid_609920 != nil:
    section.add "RestoreToTime", valid_609920
  var valid_609921 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_609921 = validateParameter(valid_609921, JBool, required = false, default = nil)
  if valid_609921 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_609921
  var valid_609922 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_609922 = validateParameter(valid_609922, JArray, required = false,
                                 default = nil)
  if valid_609922 != nil:
    section.add "EnableCloudwatchLogsExports", valid_609922
  var valid_609923 = query.getOrDefault("Action")
  valid_609923 = validateParameter(valid_609923, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_609923 != nil:
    section.add "Action", valid_609923
  var valid_609924 = query.getOrDefault("Port")
  valid_609924 = validateParameter(valid_609924, JInt, required = false, default = nil)
  if valid_609924 != nil:
    section.add "Port", valid_609924
  var valid_609925 = query.getOrDefault("VpcSecurityGroupIds")
  valid_609925 = validateParameter(valid_609925, JArray, required = false,
                                 default = nil)
  if valid_609925 != nil:
    section.add "VpcSecurityGroupIds", valid_609925
  var valid_609926 = query.getOrDefault("OptionGroupName")
  valid_609926 = validateParameter(valid_609926, JString, required = false,
                                 default = nil)
  if valid_609926 != nil:
    section.add "OptionGroupName", valid_609926
  var valid_609927 = query.getOrDefault("DBSubnetGroupName")
  valid_609927 = validateParameter(valid_609927, JString, required = false,
                                 default = nil)
  if valid_609927 != nil:
    section.add "DBSubnetGroupName", valid_609927
  var valid_609928 = query.getOrDefault("Version")
  valid_609928 = validateParameter(valid_609928, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609928 != nil:
    section.add "Version", valid_609928
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_609929 = header.getOrDefault("X-Amz-Signature")
  valid_609929 = validateParameter(valid_609929, JString, required = false,
                                 default = nil)
  if valid_609929 != nil:
    section.add "X-Amz-Signature", valid_609929
  var valid_609930 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_609930 = validateParameter(valid_609930, JString, required = false,
                                 default = nil)
  if valid_609930 != nil:
    section.add "X-Amz-Content-Sha256", valid_609930
  var valid_609931 = header.getOrDefault("X-Amz-Date")
  valid_609931 = validateParameter(valid_609931, JString, required = false,
                                 default = nil)
  if valid_609931 != nil:
    section.add "X-Amz-Date", valid_609931
  var valid_609932 = header.getOrDefault("X-Amz-Credential")
  valid_609932 = validateParameter(valid_609932, JString, required = false,
                                 default = nil)
  if valid_609932 != nil:
    section.add "X-Amz-Credential", valid_609932
  var valid_609933 = header.getOrDefault("X-Amz-Security-Token")
  valid_609933 = validateParameter(valid_609933, JString, required = false,
                                 default = nil)
  if valid_609933 != nil:
    section.add "X-Amz-Security-Token", valid_609933
  var valid_609934 = header.getOrDefault("X-Amz-Algorithm")
  valid_609934 = validateParameter(valid_609934, JString, required = false,
                                 default = nil)
  if valid_609934 != nil:
    section.add "X-Amz-Algorithm", valid_609934
  var valid_609935 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_609935 = validateParameter(valid_609935, JString, required = false,
                                 default = nil)
  if valid_609935 != nil:
    section.add "X-Amz-SignedHeaders", valid_609935
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_609936: Call_GetRestoreDBClusterToPointInTime_609907;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_609936.validator(path, query, header, formData, body)
  let scheme = call_609936.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_609936.url(scheme.get, call_609936.host, call_609936.base,
                         call_609936.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_609936, url, valid)

proc call*(call_609937: Call_GetRestoreDBClusterToPointInTime_609907;
          DBClusterIdentifier: string; SourceDBClusterIdentifier: string;
          DeletionProtection: bool = false; RestoreType: string = "";
          UseLatestRestorableTime: bool = false; CopyTagsToSnapshot: bool = false;
          Tags: JsonNode = nil; KmsKeyId: string = ""; BacktrackWindow: int = 0;
          DBClusterParameterGroupName: string = ""; RestoreToTime: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBClusterToPointInTime"; Port: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_609938 = newJObject()
  add(query_609938, "DeletionProtection", newJBool(DeletionProtection))
  add(query_609938, "RestoreType", newJString(RestoreType))
  add(query_609938, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_609938, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  if Tags != nil:
    query_609938.add "Tags", Tags
  add(query_609938, "KmsKeyId", newJString(KmsKeyId))
  add(query_609938, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_609938, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_609938, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_609938, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_609938, "RestoreToTime", newJString(RestoreToTime))
  add(query_609938, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_609938.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_609938, "Action", newJString(Action))
  add(query_609938, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    query_609938.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_609938, "OptionGroupName", newJString(OptionGroupName))
  add(query_609938, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_609938, "Version", newJString(Version))
  result = call_609937.call(nil, query_609938, nil, nil, nil)

var getRestoreDBClusterToPointInTime* = Call_GetRestoreDBClusterToPointInTime_609907(
    name: "getRestoreDBClusterToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_GetRestoreDBClusterToPointInTime_609908, base: "/",
    url: url_GetRestoreDBClusterToPointInTime_609909,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceFromDBSnapshot_610015 = ref object of OpenApiRestCall_604389
proc url_PostRestoreDBInstanceFromDBSnapshot_610017(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBInstanceFromDBSnapshot_610016(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610018 = query.getOrDefault("Action")
  valid_610018 = validateParameter(valid_610018, JString, required = true, default = newJString(
      "RestoreDBInstanceFromDBSnapshot"))
  if valid_610018 != nil:
    section.add "Action", valid_610018
  var valid_610019 = query.getOrDefault("Version")
  valid_610019 = validateParameter(valid_610019, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610019 != nil:
    section.add "Version", valid_610019
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610020 = header.getOrDefault("X-Amz-Signature")
  valid_610020 = validateParameter(valid_610020, JString, required = false,
                                 default = nil)
  if valid_610020 != nil:
    section.add "X-Amz-Signature", valid_610020
  var valid_610021 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610021 = validateParameter(valid_610021, JString, required = false,
                                 default = nil)
  if valid_610021 != nil:
    section.add "X-Amz-Content-Sha256", valid_610021
  var valid_610022 = header.getOrDefault("X-Amz-Date")
  valid_610022 = validateParameter(valid_610022, JString, required = false,
                                 default = nil)
  if valid_610022 != nil:
    section.add "X-Amz-Date", valid_610022
  var valid_610023 = header.getOrDefault("X-Amz-Credential")
  valid_610023 = validateParameter(valid_610023, JString, required = false,
                                 default = nil)
  if valid_610023 != nil:
    section.add "X-Amz-Credential", valid_610023
  var valid_610024 = header.getOrDefault("X-Amz-Security-Token")
  valid_610024 = validateParameter(valid_610024, JString, required = false,
                                 default = nil)
  if valid_610024 != nil:
    section.add "X-Amz-Security-Token", valid_610024
  var valid_610025 = header.getOrDefault("X-Amz-Algorithm")
  valid_610025 = validateParameter(valid_610025, JString, required = false,
                                 default = nil)
  if valid_610025 != nil:
    section.add "X-Amz-Algorithm", valid_610025
  var valid_610026 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610026 = validateParameter(valid_610026, JString, required = false,
                                 default = nil)
  if valid_610026 != nil:
    section.add "X-Amz-SignedHeaders", valid_610026
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   Iops: JInt
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  section = newJObject()
  var valid_610027 = formData.getOrDefault("Port")
  valid_610027 = validateParameter(valid_610027, JInt, required = false, default = nil)
  if valid_610027 != nil:
    section.add "Port", valid_610027
  var valid_610028 = formData.getOrDefault("DBInstanceClass")
  valid_610028 = validateParameter(valid_610028, JString, required = false,
                                 default = nil)
  if valid_610028 != nil:
    section.add "DBInstanceClass", valid_610028
  var valid_610029 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_610029 = validateParameter(valid_610029, JBool, required = false, default = nil)
  if valid_610029 != nil:
    section.add "UseDefaultProcessorFeatures", valid_610029
  var valid_610030 = formData.getOrDefault("MultiAZ")
  valid_610030 = validateParameter(valid_610030, JBool, required = false, default = nil)
  if valid_610030 != nil:
    section.add "MultiAZ", valid_610030
  var valid_610031 = formData.getOrDefault("Domain")
  valid_610031 = validateParameter(valid_610031, JString, required = false,
                                 default = nil)
  if valid_610031 != nil:
    section.add "Domain", valid_610031
  var valid_610032 = formData.getOrDefault("DBParameterGroupName")
  valid_610032 = validateParameter(valid_610032, JString, required = false,
                                 default = nil)
  if valid_610032 != nil:
    section.add "DBParameterGroupName", valid_610032
  var valid_610033 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_610033 = validateParameter(valid_610033, JArray, required = false,
                                 default = nil)
  if valid_610033 != nil:
    section.add "VpcSecurityGroupIds", valid_610033
  var valid_610034 = formData.getOrDefault("AvailabilityZone")
  valid_610034 = validateParameter(valid_610034, JString, required = false,
                                 default = nil)
  if valid_610034 != nil:
    section.add "AvailabilityZone", valid_610034
  var valid_610035 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_610035 = validateParameter(valid_610035, JBool, required = false, default = nil)
  if valid_610035 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_610035
  var valid_610036 = formData.getOrDefault("Engine")
  valid_610036 = validateParameter(valid_610036, JString, required = false,
                                 default = nil)
  if valid_610036 != nil:
    section.add "Engine", valid_610036
  var valid_610037 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_610037 = validateParameter(valid_610037, JBool, required = false, default = nil)
  if valid_610037 != nil:
    section.add "AutoMinorVersionUpgrade", valid_610037
  var valid_610038 = formData.getOrDefault("TdeCredentialPassword")
  valid_610038 = validateParameter(valid_610038, JString, required = false,
                                 default = nil)
  if valid_610038 != nil:
    section.add "TdeCredentialPassword", valid_610038
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_610039 = formData.getOrDefault("DBInstanceIdentifier")
  valid_610039 = validateParameter(valid_610039, JString, required = true,
                                 default = nil)
  if valid_610039 != nil:
    section.add "DBInstanceIdentifier", valid_610039
  var valid_610040 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_610040 = validateParameter(valid_610040, JString, required = true,
                                 default = nil)
  if valid_610040 != nil:
    section.add "DBSnapshotIdentifier", valid_610040
  var valid_610041 = formData.getOrDefault("DBName")
  valid_610041 = validateParameter(valid_610041, JString, required = false,
                                 default = nil)
  if valid_610041 != nil:
    section.add "DBName", valid_610041
  var valid_610042 = formData.getOrDefault("Iops")
  valid_610042 = validateParameter(valid_610042, JInt, required = false, default = nil)
  if valid_610042 != nil:
    section.add "Iops", valid_610042
  var valid_610043 = formData.getOrDefault("TdeCredentialArn")
  valid_610043 = validateParameter(valid_610043, JString, required = false,
                                 default = nil)
  if valid_610043 != nil:
    section.add "TdeCredentialArn", valid_610043
  var valid_610044 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_610044 = validateParameter(valid_610044, JArray, required = false,
                                 default = nil)
  if valid_610044 != nil:
    section.add "EnableCloudwatchLogsExports", valid_610044
  var valid_610045 = formData.getOrDefault("PubliclyAccessible")
  valid_610045 = validateParameter(valid_610045, JBool, required = false, default = nil)
  if valid_610045 != nil:
    section.add "PubliclyAccessible", valid_610045
  var valid_610046 = formData.getOrDefault("LicenseModel")
  valid_610046 = validateParameter(valid_610046, JString, required = false,
                                 default = nil)
  if valid_610046 != nil:
    section.add "LicenseModel", valid_610046
  var valid_610047 = formData.getOrDefault("Tags")
  valid_610047 = validateParameter(valid_610047, JArray, required = false,
                                 default = nil)
  if valid_610047 != nil:
    section.add "Tags", valid_610047
  var valid_610048 = formData.getOrDefault("DBSubnetGroupName")
  valid_610048 = validateParameter(valid_610048, JString, required = false,
                                 default = nil)
  if valid_610048 != nil:
    section.add "DBSubnetGroupName", valid_610048
  var valid_610049 = formData.getOrDefault("DomainIAMRoleName")
  valid_610049 = validateParameter(valid_610049, JString, required = false,
                                 default = nil)
  if valid_610049 != nil:
    section.add "DomainIAMRoleName", valid_610049
  var valid_610050 = formData.getOrDefault("OptionGroupName")
  valid_610050 = validateParameter(valid_610050, JString, required = false,
                                 default = nil)
  if valid_610050 != nil:
    section.add "OptionGroupName", valid_610050
  var valid_610051 = formData.getOrDefault("StorageType")
  valid_610051 = validateParameter(valid_610051, JString, required = false,
                                 default = nil)
  if valid_610051 != nil:
    section.add "StorageType", valid_610051
  var valid_610052 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_610052 = validateParameter(valid_610052, JBool, required = false, default = nil)
  if valid_610052 != nil:
    section.add "CopyTagsToSnapshot", valid_610052
  var valid_610053 = formData.getOrDefault("DeletionProtection")
  valid_610053 = validateParameter(valid_610053, JBool, required = false, default = nil)
  if valid_610053 != nil:
    section.add "DeletionProtection", valid_610053
  var valid_610054 = formData.getOrDefault("ProcessorFeatures")
  valid_610054 = validateParameter(valid_610054, JArray, required = false,
                                 default = nil)
  if valid_610054 != nil:
    section.add "ProcessorFeatures", valid_610054
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610055: Call_PostRestoreDBInstanceFromDBSnapshot_610015;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  let valid = call_610055.validator(path, query, header, formData, body)
  let scheme = call_610055.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610055.url(scheme.get, call_610055.host, call_610055.base,
                         call_610055.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610055, url, valid)

proc call*(call_610056: Call_PostRestoreDBInstanceFromDBSnapshot_610015;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string; Port: int = 0;
          DBInstanceClass: string = ""; UseDefaultProcessorFeatures: bool = false;
          MultiAZ: bool = false; Domain: string = ""; DBParameterGroupName: string = "";
          VpcSecurityGroupIds: JsonNode = nil; AvailabilityZone: string = "";
          EnableIAMDatabaseAuthentication: bool = false; Engine: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          DBName: string = ""; Iops: int = 0; TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          PubliclyAccessible: bool = false;
          Action: string = "RestoreDBInstanceFromDBSnapshot";
          LicenseModel: string = ""; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; Version: string = "2014-10-31";
          StorageType: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil): Recallable =
  ## postRestoreDBInstanceFromDBSnapshot
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   Iops: int
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Version: string (required)
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  var query_610057 = newJObject()
  var formData_610058 = newJObject()
  add(formData_610058, "Port", newJInt(Port))
  add(formData_610058, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_610058, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_610058, "MultiAZ", newJBool(MultiAZ))
  add(formData_610058, "Domain", newJString(Domain))
  add(formData_610058, "DBParameterGroupName", newJString(DBParameterGroupName))
  if VpcSecurityGroupIds != nil:
    formData_610058.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_610058, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_610058, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_610058, "Engine", newJString(Engine))
  add(formData_610058, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_610058, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_610058, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_610058, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(formData_610058, "DBName", newJString(DBName))
  add(formData_610058, "Iops", newJInt(Iops))
  add(formData_610058, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_610058.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_610058, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_610057, "Action", newJString(Action))
  add(formData_610058, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_610058.add "Tags", Tags
  add(formData_610058, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_610058, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_610058, "OptionGroupName", newJString(OptionGroupName))
  add(query_610057, "Version", newJString(Version))
  add(formData_610058, "StorageType", newJString(StorageType))
  add(formData_610058, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_610058, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_610058.add "ProcessorFeatures", ProcessorFeatures
  result = call_610056.call(nil, query_610057, nil, formData_610058, nil)

var postRestoreDBInstanceFromDBSnapshot* = Call_PostRestoreDBInstanceFromDBSnapshot_610015(
    name: "postRestoreDBInstanceFromDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromDBSnapshot",
    validator: validate_PostRestoreDBInstanceFromDBSnapshot_610016, base: "/",
    url: url_PostRestoreDBInstanceFromDBSnapshot_610017,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceFromDBSnapshot_609972 = ref object of OpenApiRestCall_604389
proc url_GetRestoreDBInstanceFromDBSnapshot_609974(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBInstanceFromDBSnapshot_609973(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: JString (required)
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: JInt
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  var valid_609975 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_609975 = validateParameter(valid_609975, JBool, required = false, default = nil)
  if valid_609975 != nil:
    section.add "UseDefaultProcessorFeatures", valid_609975
  var valid_609976 = query.getOrDefault("DBName")
  valid_609976 = validateParameter(valid_609976, JString, required = false,
                                 default = nil)
  if valid_609976 != nil:
    section.add "DBName", valid_609976
  var valid_609977 = query.getOrDefault("TdeCredentialPassword")
  valid_609977 = validateParameter(valid_609977, JString, required = false,
                                 default = nil)
  if valid_609977 != nil:
    section.add "TdeCredentialPassword", valid_609977
  var valid_609978 = query.getOrDefault("DeletionProtection")
  valid_609978 = validateParameter(valid_609978, JBool, required = false, default = nil)
  if valid_609978 != nil:
    section.add "DeletionProtection", valid_609978
  var valid_609979 = query.getOrDefault("Engine")
  valid_609979 = validateParameter(valid_609979, JString, required = false,
                                 default = nil)
  if valid_609979 != nil:
    section.add "Engine", valid_609979
  var valid_609980 = query.getOrDefault("CopyTagsToSnapshot")
  valid_609980 = validateParameter(valid_609980, JBool, required = false, default = nil)
  if valid_609980 != nil:
    section.add "CopyTagsToSnapshot", valid_609980
  var valid_609981 = query.getOrDefault("DBParameterGroupName")
  valid_609981 = validateParameter(valid_609981, JString, required = false,
                                 default = nil)
  if valid_609981 != nil:
    section.add "DBParameterGroupName", valid_609981
  var valid_609982 = query.getOrDefault("Tags")
  valid_609982 = validateParameter(valid_609982, JArray, required = false,
                                 default = nil)
  if valid_609982 != nil:
    section.add "Tags", valid_609982
  var valid_609983 = query.getOrDefault("LicenseModel")
  valid_609983 = validateParameter(valid_609983, JString, required = false,
                                 default = nil)
  if valid_609983 != nil:
    section.add "LicenseModel", valid_609983
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_609984 = query.getOrDefault("DBInstanceIdentifier")
  valid_609984 = validateParameter(valid_609984, JString, required = true,
                                 default = nil)
  if valid_609984 != nil:
    section.add "DBInstanceIdentifier", valid_609984
  var valid_609985 = query.getOrDefault("DBSnapshotIdentifier")
  valid_609985 = validateParameter(valid_609985, JString, required = true,
                                 default = nil)
  if valid_609985 != nil:
    section.add "DBSnapshotIdentifier", valid_609985
  var valid_609986 = query.getOrDefault("TdeCredentialArn")
  valid_609986 = validateParameter(valid_609986, JString, required = false,
                                 default = nil)
  if valid_609986 != nil:
    section.add "TdeCredentialArn", valid_609986
  var valid_609987 = query.getOrDefault("ProcessorFeatures")
  valid_609987 = validateParameter(valid_609987, JArray, required = false,
                                 default = nil)
  if valid_609987 != nil:
    section.add "ProcessorFeatures", valid_609987
  var valid_609988 = query.getOrDefault("StorageType")
  valid_609988 = validateParameter(valid_609988, JString, required = false,
                                 default = nil)
  if valid_609988 != nil:
    section.add "StorageType", valid_609988
  var valid_609989 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_609989 = validateParameter(valid_609989, JBool, required = false, default = nil)
  if valid_609989 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_609989
  var valid_609990 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_609990 = validateParameter(valid_609990, JArray, required = false,
                                 default = nil)
  if valid_609990 != nil:
    section.add "EnableCloudwatchLogsExports", valid_609990
  var valid_609991 = query.getOrDefault("Action")
  valid_609991 = validateParameter(valid_609991, JString, required = true, default = newJString(
      "RestoreDBInstanceFromDBSnapshot"))
  if valid_609991 != nil:
    section.add "Action", valid_609991
  var valid_609992 = query.getOrDefault("MultiAZ")
  valid_609992 = validateParameter(valid_609992, JBool, required = false, default = nil)
  if valid_609992 != nil:
    section.add "MultiAZ", valid_609992
  var valid_609993 = query.getOrDefault("Port")
  valid_609993 = validateParameter(valid_609993, JInt, required = false, default = nil)
  if valid_609993 != nil:
    section.add "Port", valid_609993
  var valid_609994 = query.getOrDefault("Domain")
  valid_609994 = validateParameter(valid_609994, JString, required = false,
                                 default = nil)
  if valid_609994 != nil:
    section.add "Domain", valid_609994
  var valid_609995 = query.getOrDefault("VpcSecurityGroupIds")
  valid_609995 = validateParameter(valid_609995, JArray, required = false,
                                 default = nil)
  if valid_609995 != nil:
    section.add "VpcSecurityGroupIds", valid_609995
  var valid_609996 = query.getOrDefault("AvailabilityZone")
  valid_609996 = validateParameter(valid_609996, JString, required = false,
                                 default = nil)
  if valid_609996 != nil:
    section.add "AvailabilityZone", valid_609996
  var valid_609997 = query.getOrDefault("OptionGroupName")
  valid_609997 = validateParameter(valid_609997, JString, required = false,
                                 default = nil)
  if valid_609997 != nil:
    section.add "OptionGroupName", valid_609997
  var valid_609998 = query.getOrDefault("DBSubnetGroupName")
  valid_609998 = validateParameter(valid_609998, JString, required = false,
                                 default = nil)
  if valid_609998 != nil:
    section.add "DBSubnetGroupName", valid_609998
  var valid_609999 = query.getOrDefault("Version")
  valid_609999 = validateParameter(valid_609999, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_609999 != nil:
    section.add "Version", valid_609999
  var valid_610000 = query.getOrDefault("DBInstanceClass")
  valid_610000 = validateParameter(valid_610000, JString, required = false,
                                 default = nil)
  if valid_610000 != nil:
    section.add "DBInstanceClass", valid_610000
  var valid_610001 = query.getOrDefault("PubliclyAccessible")
  valid_610001 = validateParameter(valid_610001, JBool, required = false, default = nil)
  if valid_610001 != nil:
    section.add "PubliclyAccessible", valid_610001
  var valid_610002 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_610002 = validateParameter(valid_610002, JBool, required = false, default = nil)
  if valid_610002 != nil:
    section.add "AutoMinorVersionUpgrade", valid_610002
  var valid_610003 = query.getOrDefault("Iops")
  valid_610003 = validateParameter(valid_610003, JInt, required = false, default = nil)
  if valid_610003 != nil:
    section.add "Iops", valid_610003
  var valid_610004 = query.getOrDefault("DomainIAMRoleName")
  valid_610004 = validateParameter(valid_610004, JString, required = false,
                                 default = nil)
  if valid_610004 != nil:
    section.add "DomainIAMRoleName", valid_610004
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610005 = header.getOrDefault("X-Amz-Signature")
  valid_610005 = validateParameter(valid_610005, JString, required = false,
                                 default = nil)
  if valid_610005 != nil:
    section.add "X-Amz-Signature", valid_610005
  var valid_610006 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610006 = validateParameter(valid_610006, JString, required = false,
                                 default = nil)
  if valid_610006 != nil:
    section.add "X-Amz-Content-Sha256", valid_610006
  var valid_610007 = header.getOrDefault("X-Amz-Date")
  valid_610007 = validateParameter(valid_610007, JString, required = false,
                                 default = nil)
  if valid_610007 != nil:
    section.add "X-Amz-Date", valid_610007
  var valid_610008 = header.getOrDefault("X-Amz-Credential")
  valid_610008 = validateParameter(valid_610008, JString, required = false,
                                 default = nil)
  if valid_610008 != nil:
    section.add "X-Amz-Credential", valid_610008
  var valid_610009 = header.getOrDefault("X-Amz-Security-Token")
  valid_610009 = validateParameter(valid_610009, JString, required = false,
                                 default = nil)
  if valid_610009 != nil:
    section.add "X-Amz-Security-Token", valid_610009
  var valid_610010 = header.getOrDefault("X-Amz-Algorithm")
  valid_610010 = validateParameter(valid_610010, JString, required = false,
                                 default = nil)
  if valid_610010 != nil:
    section.add "X-Amz-Algorithm", valid_610010
  var valid_610011 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610011 = validateParameter(valid_610011, JString, required = false,
                                 default = nil)
  if valid_610011 != nil:
    section.add "X-Amz-SignedHeaders", valid_610011
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610012: Call_GetRestoreDBInstanceFromDBSnapshot_609972;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  let valid = call_610012.validator(path, query, header, formData, body)
  let scheme = call_610012.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610012.url(scheme.get, call_610012.host, call_610012.base,
                         call_610012.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610012, url, valid)

proc call*(call_610013: Call_GetRestoreDBInstanceFromDBSnapshot_609972;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          UseDefaultProcessorFeatures: bool = false; DBName: string = "";
          TdeCredentialPassword: string = ""; DeletionProtection: bool = false;
          Engine: string = ""; CopyTagsToSnapshot: bool = false;
          DBParameterGroupName: string = ""; Tags: JsonNode = nil;
          LicenseModel: string = ""; TdeCredentialArn: string = "";
          ProcessorFeatures: JsonNode = nil; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBInstanceFromDBSnapshot"; MultiAZ: bool = false;
          Port: int = 0; Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31";
          DBInstanceClass: string = ""; PubliclyAccessible: bool = false;
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getRestoreDBInstanceFromDBSnapshot
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Action: string (required)
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: int
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_610014 = newJObject()
  add(query_610014, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_610014, "DBName", newJString(DBName))
  add(query_610014, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_610014, "DeletionProtection", newJBool(DeletionProtection))
  add(query_610014, "Engine", newJString(Engine))
  add(query_610014, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_610014, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_610014.add "Tags", Tags
  add(query_610014, "LicenseModel", newJString(LicenseModel))
  add(query_610014, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_610014, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_610014, "TdeCredentialArn", newJString(TdeCredentialArn))
  if ProcessorFeatures != nil:
    query_610014.add "ProcessorFeatures", ProcessorFeatures
  add(query_610014, "StorageType", newJString(StorageType))
  add(query_610014, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_610014.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_610014, "Action", newJString(Action))
  add(query_610014, "MultiAZ", newJBool(MultiAZ))
  add(query_610014, "Port", newJInt(Port))
  add(query_610014, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_610014.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_610014, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_610014, "OptionGroupName", newJString(OptionGroupName))
  add(query_610014, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_610014, "Version", newJString(Version))
  add(query_610014, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_610014, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_610014, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_610014, "Iops", newJInt(Iops))
  add(query_610014, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_610013.call(nil, query_610014, nil, nil, nil)

var getRestoreDBInstanceFromDBSnapshot* = Call_GetRestoreDBInstanceFromDBSnapshot_609972(
    name: "getRestoreDBInstanceFromDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromDBSnapshot",
    validator: validate_GetRestoreDBInstanceFromDBSnapshot_609973, base: "/",
    url: url_GetRestoreDBInstanceFromDBSnapshot_609974,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceFromS3_610117 = ref object of OpenApiRestCall_604389
proc url_PostRestoreDBInstanceFromS3_610119(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBInstanceFromS3_610118(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610120 = query.getOrDefault("Action")
  valid_610120 = validateParameter(valid_610120, JString, required = true, default = newJString(
      "RestoreDBInstanceFromS3"))
  if valid_610120 != nil:
    section.add "Action", valid_610120
  var valid_610121 = query.getOrDefault("Version")
  valid_610121 = validateParameter(valid_610121, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610121 != nil:
    section.add "Version", valid_610121
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_610122 = header.getOrDefault("X-Amz-Security-Token")
  valid_610122 = validateParameter(valid_610122, JString, required = false,
                                 default = nil)
  if valid_610122 != nil:
    section.add "X-Amz-Security-Token", valid_610122
  var valid_610123 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610123 = validateParameter(valid_610123, JString, required = false,
                                 default = nil)
  if valid_610123 != nil:
    section.add "X-Amz-SignedHeaders", valid_610123
  var valid_610124 = header.getOrDefault("X-Amz-Signature")
  valid_610124 = validateParameter(valid_610124, JString, required = false,
                                 default = nil)
  if valid_610124 != nil:
    section.add "X-Amz-Signature", valid_610124
  var valid_610125 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610125 = validateParameter(valid_610125, JString, required = false,
                                 default = nil)
  if valid_610125 != nil:
    section.add "X-Amz-Content-Sha256", valid_610125
  var valid_610126 = header.getOrDefault("X-Amz-Date")
  valid_610126 = validateParameter(valid_610126, JString, required = false,
                                 default = nil)
  if valid_610126 != nil:
    section.add "X-Amz-Date", valid_610126
  var valid_610127 = header.getOrDefault("X-Amz-Credential")
  valid_610127 = validateParameter(valid_610127, JString, required = false,
                                 default = nil)
  if valid_610127 != nil:
    section.add "X-Amz-Credential", valid_610127
  var valid_610128 = header.getOrDefault("X-Amz-Algorithm")
  valid_610128 = validateParameter(valid_610128, JString, required = false,
                                 default = nil)
  if valid_610128 != nil:
    section.add "X-Amz-Algorithm", valid_610128
  result.add "header", section
  ## parameters in `formData` object:
  ##   S3IngestionRoleArn: JString (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: JString
  ##                    : A DB subnet group to associate with this DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   S3Prefix: JString
  ##           : The prefix of your Amazon S3 bucket. 
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: JString
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngine: JString (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   S3BucketName: JString (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   DBName: JString
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: JString
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: JString
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `S3IngestionRoleArn` field"
  var valid_610129 = formData.getOrDefault("S3IngestionRoleArn")
  valid_610129 = validateParameter(valid_610129, JString, required = true,
                                 default = nil)
  if valid_610129 != nil:
    section.add "S3IngestionRoleArn", valid_610129
  var valid_610130 = formData.getOrDefault("Port")
  valid_610130 = validateParameter(valid_610130, JInt, required = false, default = nil)
  if valid_610130 != nil:
    section.add "Port", valid_610130
  var valid_610131 = formData.getOrDefault("MultiAZ")
  valid_610131 = validateParameter(valid_610131, JBool, required = false, default = nil)
  if valid_610131 != nil:
    section.add "MultiAZ", valid_610131
  var valid_610132 = formData.getOrDefault("MasterUsername")
  valid_610132 = validateParameter(valid_610132, JString, required = false,
                                 default = nil)
  if valid_610132 != nil:
    section.add "MasterUsername", valid_610132
  var valid_610133 = formData.getOrDefault("MonitoringRoleArn")
  valid_610133 = validateParameter(valid_610133, JString, required = false,
                                 default = nil)
  if valid_610133 != nil:
    section.add "MonitoringRoleArn", valid_610133
  var valid_610134 = formData.getOrDefault("MonitoringInterval")
  valid_610134 = validateParameter(valid_610134, JInt, required = false, default = nil)
  if valid_610134 != nil:
    section.add "MonitoringInterval", valid_610134
  var valid_610135 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_610135 = validateParameter(valid_610135, JArray, required = false,
                                 default = nil)
  if valid_610135 != nil:
    section.add "VpcSecurityGroupIds", valid_610135
  var valid_610136 = formData.getOrDefault("AvailabilityZone")
  valid_610136 = validateParameter(valid_610136, JString, required = false,
                                 default = nil)
  if valid_610136 != nil:
    section.add "AvailabilityZone", valid_610136
  var valid_610137 = formData.getOrDefault("EnablePerformanceInsights")
  valid_610137 = validateParameter(valid_610137, JBool, required = false, default = nil)
  if valid_610137 != nil:
    section.add "EnablePerformanceInsights", valid_610137
  var valid_610138 = formData.getOrDefault("DBInstanceIdentifier")
  valid_610138 = validateParameter(valid_610138, JString, required = true,
                                 default = nil)
  if valid_610138 != nil:
    section.add "DBInstanceIdentifier", valid_610138
  var valid_610139 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_610139 = validateParameter(valid_610139, JArray, required = false,
                                 default = nil)
  if valid_610139 != nil:
    section.add "EnableCloudwatchLogsExports", valid_610139
  var valid_610140 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_610140 = validateParameter(valid_610140, JInt, required = false, default = nil)
  if valid_610140 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_610140
  var valid_610141 = formData.getOrDefault("DBSubnetGroupName")
  valid_610141 = validateParameter(valid_610141, JString, required = false,
                                 default = nil)
  if valid_610141 != nil:
    section.add "DBSubnetGroupName", valid_610141
  var valid_610142 = formData.getOrDefault("StorageType")
  valid_610142 = validateParameter(valid_610142, JString, required = false,
                                 default = nil)
  if valid_610142 != nil:
    section.add "StorageType", valid_610142
  var valid_610143 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_610143 = validateParameter(valid_610143, JBool, required = false, default = nil)
  if valid_610143 != nil:
    section.add "CopyTagsToSnapshot", valid_610143
  var valid_610144 = formData.getOrDefault("DeletionProtection")
  valid_610144 = validateParameter(valid_610144, JBool, required = false, default = nil)
  if valid_610144 != nil:
    section.add "DeletionProtection", valid_610144
  var valid_610145 = formData.getOrDefault("ProcessorFeatures")
  valid_610145 = validateParameter(valid_610145, JArray, required = false,
                                 default = nil)
  if valid_610145 != nil:
    section.add "ProcessorFeatures", valid_610145
  var valid_610146 = formData.getOrDefault("AllocatedStorage")
  valid_610146 = validateParameter(valid_610146, JInt, required = false, default = nil)
  if valid_610146 != nil:
    section.add "AllocatedStorage", valid_610146
  var valid_610147 = formData.getOrDefault("S3Prefix")
  valid_610147 = validateParameter(valid_610147, JString, required = false,
                                 default = nil)
  if valid_610147 != nil:
    section.add "S3Prefix", valid_610147
  var valid_610148 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_610148 = validateParameter(valid_610148, JString, required = false,
                                 default = nil)
  if valid_610148 != nil:
    section.add "PreferredMaintenanceWindow", valid_610148
  var valid_610149 = formData.getOrDefault("DBInstanceClass")
  valid_610149 = validateParameter(valid_610149, JString, required = true,
                                 default = nil)
  if valid_610149 != nil:
    section.add "DBInstanceClass", valid_610149
  var valid_610150 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_610150 = validateParameter(valid_610150, JBool, required = false, default = nil)
  if valid_610150 != nil:
    section.add "UseDefaultProcessorFeatures", valid_610150
  var valid_610151 = formData.getOrDefault("PreferredBackupWindow")
  valid_610151 = validateParameter(valid_610151, JString, required = false,
                                 default = nil)
  if valid_610151 != nil:
    section.add "PreferredBackupWindow", valid_610151
  var valid_610152 = formData.getOrDefault("MasterUserPassword")
  valid_610152 = validateParameter(valid_610152, JString, required = false,
                                 default = nil)
  if valid_610152 != nil:
    section.add "MasterUserPassword", valid_610152
  var valid_610153 = formData.getOrDefault("SourceEngine")
  valid_610153 = validateParameter(valid_610153, JString, required = true,
                                 default = nil)
  if valid_610153 != nil:
    section.add "SourceEngine", valid_610153
  var valid_610154 = formData.getOrDefault("DBParameterGroupName")
  valid_610154 = validateParameter(valid_610154, JString, required = false,
                                 default = nil)
  if valid_610154 != nil:
    section.add "DBParameterGroupName", valid_610154
  var valid_610155 = formData.getOrDefault("EngineVersion")
  valid_610155 = validateParameter(valid_610155, JString, required = false,
                                 default = nil)
  if valid_610155 != nil:
    section.add "EngineVersion", valid_610155
  var valid_610156 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_610156 = validateParameter(valid_610156, JBool, required = false, default = nil)
  if valid_610156 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_610156
  var valid_610157 = formData.getOrDefault("BackupRetentionPeriod")
  valid_610157 = validateParameter(valid_610157, JInt, required = false, default = nil)
  if valid_610157 != nil:
    section.add "BackupRetentionPeriod", valid_610157
  var valid_610158 = formData.getOrDefault("KmsKeyId")
  valid_610158 = validateParameter(valid_610158, JString, required = false,
                                 default = nil)
  if valid_610158 != nil:
    section.add "KmsKeyId", valid_610158
  var valid_610159 = formData.getOrDefault("Engine")
  valid_610159 = validateParameter(valid_610159, JString, required = true,
                                 default = nil)
  if valid_610159 != nil:
    section.add "Engine", valid_610159
  var valid_610160 = formData.getOrDefault("S3BucketName")
  valid_610160 = validateParameter(valid_610160, JString, required = true,
                                 default = nil)
  if valid_610160 != nil:
    section.add "S3BucketName", valid_610160
  var valid_610161 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_610161 = validateParameter(valid_610161, JBool, required = false, default = nil)
  if valid_610161 != nil:
    section.add "AutoMinorVersionUpgrade", valid_610161
  var valid_610162 = formData.getOrDefault("DBName")
  valid_610162 = validateParameter(valid_610162, JString, required = false,
                                 default = nil)
  if valid_610162 != nil:
    section.add "DBName", valid_610162
  var valid_610163 = formData.getOrDefault("Iops")
  valid_610163 = validateParameter(valid_610163, JInt, required = false, default = nil)
  if valid_610163 != nil:
    section.add "Iops", valid_610163
  var valid_610164 = formData.getOrDefault("PubliclyAccessible")
  valid_610164 = validateParameter(valid_610164, JBool, required = false, default = nil)
  if valid_610164 != nil:
    section.add "PubliclyAccessible", valid_610164
  var valid_610165 = formData.getOrDefault("SourceEngineVersion")
  valid_610165 = validateParameter(valid_610165, JString, required = true,
                                 default = nil)
  if valid_610165 != nil:
    section.add "SourceEngineVersion", valid_610165
  var valid_610166 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_610166 = validateParameter(valid_610166, JString, required = false,
                                 default = nil)
  if valid_610166 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_610166
  var valid_610167 = formData.getOrDefault("LicenseModel")
  valid_610167 = validateParameter(valid_610167, JString, required = false,
                                 default = nil)
  if valid_610167 != nil:
    section.add "LicenseModel", valid_610167
  var valid_610168 = formData.getOrDefault("Tags")
  valid_610168 = validateParameter(valid_610168, JArray, required = false,
                                 default = nil)
  if valid_610168 != nil:
    section.add "Tags", valid_610168
  var valid_610169 = formData.getOrDefault("OptionGroupName")
  valid_610169 = validateParameter(valid_610169, JString, required = false,
                                 default = nil)
  if valid_610169 != nil:
    section.add "OptionGroupName", valid_610169
  var valid_610170 = formData.getOrDefault("DBSecurityGroups")
  valid_610170 = validateParameter(valid_610170, JArray, required = false,
                                 default = nil)
  if valid_610170 != nil:
    section.add "DBSecurityGroups", valid_610170
  var valid_610171 = formData.getOrDefault("StorageEncrypted")
  valid_610171 = validateParameter(valid_610171, JBool, required = false, default = nil)
  if valid_610171 != nil:
    section.add "StorageEncrypted", valid_610171
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610172: Call_PostRestoreDBInstanceFromS3_610117; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_610172.validator(path, query, header, formData, body)
  let scheme = call_610172.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610172.url(scheme.get, call_610172.host, call_610172.base,
                         call_610172.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610172, url, valid)

proc call*(call_610173: Call_PostRestoreDBInstanceFromS3_610117;
          S3IngestionRoleArn: string; DBInstanceIdentifier: string;
          DBInstanceClass: string; SourceEngine: string; Engine: string;
          S3BucketName: string; SourceEngineVersion: string; Port: int = 0;
          MultiAZ: bool = false; MasterUsername: string = "";
          MonitoringRoleArn: string = ""; MonitoringInterval: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; AvailabilityZone: string = "";
          EnablePerformanceInsights: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBInstanceFromS3";
          PerformanceInsightsRetentionPeriod: int = 0;
          DBSubnetGroupName: string = ""; StorageType: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          ProcessorFeatures: JsonNode = nil; AllocatedStorage: int = 0;
          S3Prefix: string = ""; PreferredMaintenanceWindow: string = "";
          UseDefaultProcessorFeatures: bool = false;
          PreferredBackupWindow: string = ""; MasterUserPassword: string = "";
          DBParameterGroupName: string = ""; EngineVersion: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          BackupRetentionPeriod: int = 0; KmsKeyId: string = "";
          AutoMinorVersionUpgrade: bool = false; DBName: string = ""; Iops: int = 0;
          PubliclyAccessible: bool = false;
          PerformanceInsightsKMSKeyId: string = ""; LicenseModel: string = "";
          Tags: JsonNode = nil; OptionGroupName: string = "";
          Version: string = "2014-10-31"; DBSecurityGroups: JsonNode = nil;
          StorageEncrypted: bool = false): Recallable =
  ## postRestoreDBInstanceFromS3
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   S3IngestionRoleArn: string (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   MasterUsername: string
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   DBSubnetGroupName: string
  ##                    : A DB subnet group to associate with this DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   S3Prefix: string
  ##           : The prefix of your Amazon S3 bucket. 
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PreferredBackupWindow: string
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngine: string (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   BackupRetentionPeriod: int
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   S3BucketName: string (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   DBName: string
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   LicenseModel: string
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupName: string
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   Version: string (required)
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  var query_610174 = newJObject()
  var formData_610175 = newJObject()
  add(formData_610175, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(formData_610175, "Port", newJInt(Port))
  add(formData_610175, "MultiAZ", newJBool(MultiAZ))
  add(formData_610175, "MasterUsername", newJString(MasterUsername))
  add(formData_610175, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_610175, "MonitoringInterval", newJInt(MonitoringInterval))
  if VpcSecurityGroupIds != nil:
    formData_610175.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_610175, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_610175, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_610175, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  if EnableCloudwatchLogsExports != nil:
    formData_610175.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_610174, "Action", newJString(Action))
  add(formData_610175, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_610175, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_610175, "StorageType", newJString(StorageType))
  add(formData_610175, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_610175, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_610175.add "ProcessorFeatures", ProcessorFeatures
  add(formData_610175, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_610175, "S3Prefix", newJString(S3Prefix))
  add(formData_610175, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_610175, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_610175, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_610175, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(formData_610175, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_610175, "SourceEngine", newJString(SourceEngine))
  add(formData_610175, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_610175, "EngineVersion", newJString(EngineVersion))
  add(formData_610175, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_610175, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_610175, "KmsKeyId", newJString(KmsKeyId))
  add(formData_610175, "Engine", newJString(Engine))
  add(formData_610175, "S3BucketName", newJString(S3BucketName))
  add(formData_610175, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_610175, "DBName", newJString(DBName))
  add(formData_610175, "Iops", newJInt(Iops))
  add(formData_610175, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_610175, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(formData_610175, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_610175, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_610175.add "Tags", Tags
  add(formData_610175, "OptionGroupName", newJString(OptionGroupName))
  add(query_610174, "Version", newJString(Version))
  if DBSecurityGroups != nil:
    formData_610175.add "DBSecurityGroups", DBSecurityGroups
  add(formData_610175, "StorageEncrypted", newJBool(StorageEncrypted))
  result = call_610173.call(nil, query_610174, nil, formData_610175, nil)

var postRestoreDBInstanceFromS3* = Call_PostRestoreDBInstanceFromS3_610117(
    name: "postRestoreDBInstanceFromS3", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromS3",
    validator: validate_PostRestoreDBInstanceFromS3_610118, base: "/",
    url: url_PostRestoreDBInstanceFromS3_610119,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceFromS3_610059 = ref object of OpenApiRestCall_604389
proc url_GetRestoreDBInstanceFromS3_610061(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBInstanceFromS3_610060(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   S3BucketName: JString (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: JInt
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   Action: JString (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   S3IngestionRoleArn: JString (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   DBName: JString
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   S3Prefix: JString
  ##           : The prefix of your Amazon S3 bucket. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: JString
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBSubnetGroupName: JString
  ##                    : A DB subnet group to associate with this DB instance.
  ##   PreferredBackupWindow: JString
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  var valid_610062 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_610062 = validateParameter(valid_610062, JBool, required = false, default = nil)
  if valid_610062 != nil:
    section.add "UseDefaultProcessorFeatures", valid_610062
  assert query != nil, "query argument is necessary due to required `SourceEngineVersion` field"
  var valid_610063 = query.getOrDefault("SourceEngineVersion")
  valid_610063 = validateParameter(valid_610063, JString, required = true,
                                 default = nil)
  if valid_610063 != nil:
    section.add "SourceEngineVersion", valid_610063
  var valid_610064 = query.getOrDefault("SourceEngine")
  valid_610064 = validateParameter(valid_610064, JString, required = true,
                                 default = nil)
  if valid_610064 != nil:
    section.add "SourceEngine", valid_610064
  var valid_610065 = query.getOrDefault("Engine")
  valid_610065 = validateParameter(valid_610065, JString, required = true,
                                 default = nil)
  if valid_610065 != nil:
    section.add "Engine", valid_610065
  var valid_610066 = query.getOrDefault("CopyTagsToSnapshot")
  valid_610066 = validateParameter(valid_610066, JBool, required = false, default = nil)
  if valid_610066 != nil:
    section.add "CopyTagsToSnapshot", valid_610066
  var valid_610067 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_610067 = validateParameter(valid_610067, JInt, required = false, default = nil)
  if valid_610067 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_610067
  var valid_610068 = query.getOrDefault("MonitoringInterval")
  valid_610068 = validateParameter(valid_610068, JInt, required = false, default = nil)
  if valid_610068 != nil:
    section.add "MonitoringInterval", valid_610068
  var valid_610069 = query.getOrDefault("KmsKeyId")
  valid_610069 = validateParameter(valid_610069, JString, required = false,
                                 default = nil)
  if valid_610069 != nil:
    section.add "KmsKeyId", valid_610069
  var valid_610070 = query.getOrDefault("MonitoringRoleArn")
  valid_610070 = validateParameter(valid_610070, JString, required = false,
                                 default = nil)
  if valid_610070 != nil:
    section.add "MonitoringRoleArn", valid_610070
  var valid_610071 = query.getOrDefault("S3BucketName")
  valid_610071 = validateParameter(valid_610071, JString, required = true,
                                 default = nil)
  if valid_610071 != nil:
    section.add "S3BucketName", valid_610071
  var valid_610072 = query.getOrDefault("ProcessorFeatures")
  valid_610072 = validateParameter(valid_610072, JArray, required = false,
                                 default = nil)
  if valid_610072 != nil:
    section.add "ProcessorFeatures", valid_610072
  var valid_610073 = query.getOrDefault("MasterUsername")
  valid_610073 = validateParameter(valid_610073, JString, required = false,
                                 default = nil)
  if valid_610073 != nil:
    section.add "MasterUsername", valid_610073
  var valid_610074 = query.getOrDefault("BackupRetentionPeriod")
  valid_610074 = validateParameter(valid_610074, JInt, required = false, default = nil)
  if valid_610074 != nil:
    section.add "BackupRetentionPeriod", valid_610074
  var valid_610075 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_610075 = validateParameter(valid_610075, JArray, required = false,
                                 default = nil)
  if valid_610075 != nil:
    section.add "EnableCloudwatchLogsExports", valid_610075
  var valid_610076 = query.getOrDefault("EngineVersion")
  valid_610076 = validateParameter(valid_610076, JString, required = false,
                                 default = nil)
  if valid_610076 != nil:
    section.add "EngineVersion", valid_610076
  var valid_610077 = query.getOrDefault("Action")
  valid_610077 = validateParameter(valid_610077, JString, required = true, default = newJString(
      "RestoreDBInstanceFromS3"))
  if valid_610077 != nil:
    section.add "Action", valid_610077
  var valid_610078 = query.getOrDefault("VpcSecurityGroupIds")
  valid_610078 = validateParameter(valid_610078, JArray, required = false,
                                 default = nil)
  if valid_610078 != nil:
    section.add "VpcSecurityGroupIds", valid_610078
  var valid_610079 = query.getOrDefault("AllocatedStorage")
  valid_610079 = validateParameter(valid_610079, JInt, required = false, default = nil)
  if valid_610079 != nil:
    section.add "AllocatedStorage", valid_610079
  var valid_610080 = query.getOrDefault("EnablePerformanceInsights")
  valid_610080 = validateParameter(valid_610080, JBool, required = false, default = nil)
  if valid_610080 != nil:
    section.add "EnablePerformanceInsights", valid_610080
  var valid_610081 = query.getOrDefault("PubliclyAccessible")
  valid_610081 = validateParameter(valid_610081, JBool, required = false, default = nil)
  if valid_610081 != nil:
    section.add "PubliclyAccessible", valid_610081
  var valid_610082 = query.getOrDefault("S3IngestionRoleArn")
  valid_610082 = validateParameter(valid_610082, JString, required = true,
                                 default = nil)
  if valid_610082 != nil:
    section.add "S3IngestionRoleArn", valid_610082
  var valid_610083 = query.getOrDefault("DBName")
  valid_610083 = validateParameter(valid_610083, JString, required = false,
                                 default = nil)
  if valid_610083 != nil:
    section.add "DBName", valid_610083
  var valid_610084 = query.getOrDefault("StorageEncrypted")
  valid_610084 = validateParameter(valid_610084, JBool, required = false, default = nil)
  if valid_610084 != nil:
    section.add "StorageEncrypted", valid_610084
  var valid_610085 = query.getOrDefault("DBParameterGroupName")
  valid_610085 = validateParameter(valid_610085, JString, required = false,
                                 default = nil)
  if valid_610085 != nil:
    section.add "DBParameterGroupName", valid_610085
  var valid_610086 = query.getOrDefault("DeletionProtection")
  valid_610086 = validateParameter(valid_610086, JBool, required = false, default = nil)
  if valid_610086 != nil:
    section.add "DeletionProtection", valid_610086
  var valid_610087 = query.getOrDefault("S3Prefix")
  valid_610087 = validateParameter(valid_610087, JString, required = false,
                                 default = nil)
  if valid_610087 != nil:
    section.add "S3Prefix", valid_610087
  var valid_610088 = query.getOrDefault("Tags")
  valid_610088 = validateParameter(valid_610088, JArray, required = false,
                                 default = nil)
  if valid_610088 != nil:
    section.add "Tags", valid_610088
  var valid_610089 = query.getOrDefault("LicenseModel")
  valid_610089 = validateParameter(valid_610089, JString, required = false,
                                 default = nil)
  if valid_610089 != nil:
    section.add "LicenseModel", valid_610089
  var valid_610090 = query.getOrDefault("DBInstanceIdentifier")
  valid_610090 = validateParameter(valid_610090, JString, required = true,
                                 default = nil)
  if valid_610090 != nil:
    section.add "DBInstanceIdentifier", valid_610090
  var valid_610091 = query.getOrDefault("StorageType")
  valid_610091 = validateParameter(valid_610091, JString, required = false,
                                 default = nil)
  if valid_610091 != nil:
    section.add "StorageType", valid_610091
  var valid_610092 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_610092 = validateParameter(valid_610092, JBool, required = false, default = nil)
  if valid_610092 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_610092
  var valid_610093 = query.getOrDefault("MultiAZ")
  valid_610093 = validateParameter(valid_610093, JBool, required = false, default = nil)
  if valid_610093 != nil:
    section.add "MultiAZ", valid_610093
  var valid_610094 = query.getOrDefault("DBSecurityGroups")
  valid_610094 = validateParameter(valid_610094, JArray, required = false,
                                 default = nil)
  if valid_610094 != nil:
    section.add "DBSecurityGroups", valid_610094
  var valid_610095 = query.getOrDefault("Port")
  valid_610095 = validateParameter(valid_610095, JInt, required = false, default = nil)
  if valid_610095 != nil:
    section.add "Port", valid_610095
  var valid_610096 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_610096 = validateParameter(valid_610096, JString, required = false,
                                 default = nil)
  if valid_610096 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_610096
  var valid_610097 = query.getOrDefault("MasterUserPassword")
  valid_610097 = validateParameter(valid_610097, JString, required = false,
                                 default = nil)
  if valid_610097 != nil:
    section.add "MasterUserPassword", valid_610097
  var valid_610098 = query.getOrDefault("AvailabilityZone")
  valid_610098 = validateParameter(valid_610098, JString, required = false,
                                 default = nil)
  if valid_610098 != nil:
    section.add "AvailabilityZone", valid_610098
  var valid_610099 = query.getOrDefault("OptionGroupName")
  valid_610099 = validateParameter(valid_610099, JString, required = false,
                                 default = nil)
  if valid_610099 != nil:
    section.add "OptionGroupName", valid_610099
  var valid_610100 = query.getOrDefault("DBSubnetGroupName")
  valid_610100 = validateParameter(valid_610100, JString, required = false,
                                 default = nil)
  if valid_610100 != nil:
    section.add "DBSubnetGroupName", valid_610100
  var valid_610101 = query.getOrDefault("PreferredBackupWindow")
  valid_610101 = validateParameter(valid_610101, JString, required = false,
                                 default = nil)
  if valid_610101 != nil:
    section.add "PreferredBackupWindow", valid_610101
  var valid_610102 = query.getOrDefault("DBInstanceClass")
  valid_610102 = validateParameter(valid_610102, JString, required = true,
                                 default = nil)
  if valid_610102 != nil:
    section.add "DBInstanceClass", valid_610102
  var valid_610103 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_610103 = validateParameter(valid_610103, JString, required = false,
                                 default = nil)
  if valid_610103 != nil:
    section.add "PreferredMaintenanceWindow", valid_610103
  var valid_610104 = query.getOrDefault("Version")
  valid_610104 = validateParameter(valid_610104, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610104 != nil:
    section.add "Version", valid_610104
  var valid_610105 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_610105 = validateParameter(valid_610105, JBool, required = false, default = nil)
  if valid_610105 != nil:
    section.add "AutoMinorVersionUpgrade", valid_610105
  var valid_610106 = query.getOrDefault("Iops")
  valid_610106 = validateParameter(valid_610106, JInt, required = false, default = nil)
  if valid_610106 != nil:
    section.add "Iops", valid_610106
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Algorithm: JString
  section = newJObject()
  var valid_610107 = header.getOrDefault("X-Amz-Security-Token")
  valid_610107 = validateParameter(valid_610107, JString, required = false,
                                 default = nil)
  if valid_610107 != nil:
    section.add "X-Amz-Security-Token", valid_610107
  var valid_610108 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610108 = validateParameter(valid_610108, JString, required = false,
                                 default = nil)
  if valid_610108 != nil:
    section.add "X-Amz-SignedHeaders", valid_610108
  var valid_610109 = header.getOrDefault("X-Amz-Signature")
  valid_610109 = validateParameter(valid_610109, JString, required = false,
                                 default = nil)
  if valid_610109 != nil:
    section.add "X-Amz-Signature", valid_610109
  var valid_610110 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610110 = validateParameter(valid_610110, JString, required = false,
                                 default = nil)
  if valid_610110 != nil:
    section.add "X-Amz-Content-Sha256", valid_610110
  var valid_610111 = header.getOrDefault("X-Amz-Date")
  valid_610111 = validateParameter(valid_610111, JString, required = false,
                                 default = nil)
  if valid_610111 != nil:
    section.add "X-Amz-Date", valid_610111
  var valid_610112 = header.getOrDefault("X-Amz-Credential")
  valid_610112 = validateParameter(valid_610112, JString, required = false,
                                 default = nil)
  if valid_610112 != nil:
    section.add "X-Amz-Credential", valid_610112
  var valid_610113 = header.getOrDefault("X-Amz-Algorithm")
  valid_610113 = validateParameter(valid_610113, JString, required = false,
                                 default = nil)
  if valid_610113 != nil:
    section.add "X-Amz-Algorithm", valid_610113
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610114: Call_GetRestoreDBInstanceFromS3_610059; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_610114.validator(path, query, header, formData, body)
  let scheme = call_610114.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610114.url(scheme.get, call_610114.host, call_610114.base,
                         call_610114.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610114, url, valid)

proc call*(call_610115: Call_GetRestoreDBInstanceFromS3_610059;
          SourceEngineVersion: string; SourceEngine: string; Engine: string;
          S3BucketName: string; S3IngestionRoleArn: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          UseDefaultProcessorFeatures: bool = false;
          CopyTagsToSnapshot: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0; MonitoringInterval: int = 0;
          KmsKeyId: string = ""; MonitoringRoleArn: string = "";
          ProcessorFeatures: JsonNode = nil; MasterUsername: string = "";
          BackupRetentionPeriod: int = 0;
          EnableCloudwatchLogsExports: JsonNode = nil; EngineVersion: string = "";
          Action: string = "RestoreDBInstanceFromS3";
          VpcSecurityGroupIds: JsonNode = nil; AllocatedStorage: int = 0;
          EnablePerformanceInsights: bool = false; PubliclyAccessible: bool = false;
          DBName: string = ""; StorageEncrypted: bool = false;
          DBParameterGroupName: string = ""; DeletionProtection: bool = false;
          S3Prefix: string = ""; Tags: JsonNode = nil; LicenseModel: string = "";
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          MultiAZ: bool = false; DBSecurityGroups: JsonNode = nil; Port: int = 0;
          PerformanceInsightsKMSKeyId: string = ""; MasterUserPassword: string = "";
          AvailabilityZone: string = ""; OptionGroupName: string = "";
          DBSubnetGroupName: string = ""; PreferredBackupWindow: string = "";
          PreferredMaintenanceWindow: string = ""; Version: string = "2014-10-31";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0): Recallable =
  ## getRestoreDBInstanceFromS3
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   SourceEngine: string (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   S3BucketName: string (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   MasterUsername: string
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   BackupRetentionPeriod: int
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   Action: string (required)
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   S3IngestionRoleArn: string (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   DBName: string
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   S3Prefix: string
  ##           : The prefix of your Amazon S3 bucket. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: string
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBSubnetGroupName: string
  ##                    : A DB subnet group to associate with this DB instance.
  ##   PreferredBackupWindow: string
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  var query_610116 = newJObject()
  add(query_610116, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_610116, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_610116, "SourceEngine", newJString(SourceEngine))
  add(query_610116, "Engine", newJString(Engine))
  add(query_610116, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_610116, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_610116, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_610116, "KmsKeyId", newJString(KmsKeyId))
  add(query_610116, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_610116, "S3BucketName", newJString(S3BucketName))
  if ProcessorFeatures != nil:
    query_610116.add "ProcessorFeatures", ProcessorFeatures
  add(query_610116, "MasterUsername", newJString(MasterUsername))
  add(query_610116, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if EnableCloudwatchLogsExports != nil:
    query_610116.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_610116, "EngineVersion", newJString(EngineVersion))
  add(query_610116, "Action", newJString(Action))
  if VpcSecurityGroupIds != nil:
    query_610116.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_610116, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_610116, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_610116, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_610116, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_610116, "DBName", newJString(DBName))
  add(query_610116, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_610116, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_610116, "DeletionProtection", newJBool(DeletionProtection))
  add(query_610116, "S3Prefix", newJString(S3Prefix))
  if Tags != nil:
    query_610116.add "Tags", Tags
  add(query_610116, "LicenseModel", newJString(LicenseModel))
  add(query_610116, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_610116, "StorageType", newJString(StorageType))
  add(query_610116, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_610116, "MultiAZ", newJBool(MultiAZ))
  if DBSecurityGroups != nil:
    query_610116.add "DBSecurityGroups", DBSecurityGroups
  add(query_610116, "Port", newJInt(Port))
  add(query_610116, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_610116, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_610116, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_610116, "OptionGroupName", newJString(OptionGroupName))
  add(query_610116, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_610116, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_610116, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_610116, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_610116, "Version", newJString(Version))
  add(query_610116, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_610116, "Iops", newJInt(Iops))
  result = call_610115.call(nil, query_610116, nil, nil, nil)

var getRestoreDBInstanceFromS3* = Call_GetRestoreDBInstanceFromS3_610059(
    name: "getRestoreDBInstanceFromS3", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromS3",
    validator: validate_GetRestoreDBInstanceFromS3_610060, base: "/",
    url: url_GetRestoreDBInstanceFromS3_610061,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceToPointInTime_610222 = ref object of OpenApiRestCall_604389
proc url_PostRestoreDBInstanceToPointInTime_610224(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBInstanceToPointInTime_610223(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610225 = query.getOrDefault("Action")
  valid_610225 = validateParameter(valid_610225, JString, required = true, default = newJString(
      "RestoreDBInstanceToPointInTime"))
  if valid_610225 != nil:
    section.add "Action", valid_610225
  var valid_610226 = query.getOrDefault("Version")
  valid_610226 = validateParameter(valid_610226, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610226 != nil:
    section.add "Version", valid_610226
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610227 = header.getOrDefault("X-Amz-Signature")
  valid_610227 = validateParameter(valid_610227, JString, required = false,
                                 default = nil)
  if valid_610227 != nil:
    section.add "X-Amz-Signature", valid_610227
  var valid_610228 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610228 = validateParameter(valid_610228, JString, required = false,
                                 default = nil)
  if valid_610228 != nil:
    section.add "X-Amz-Content-Sha256", valid_610228
  var valid_610229 = header.getOrDefault("X-Amz-Date")
  valid_610229 = validateParameter(valid_610229, JString, required = false,
                                 default = nil)
  if valid_610229 != nil:
    section.add "X-Amz-Date", valid_610229
  var valid_610230 = header.getOrDefault("X-Amz-Credential")
  valid_610230 = validateParameter(valid_610230, JString, required = false,
                                 default = nil)
  if valid_610230 != nil:
    section.add "X-Amz-Credential", valid_610230
  var valid_610231 = header.getOrDefault("X-Amz-Security-Token")
  valid_610231 = validateParameter(valid_610231, JString, required = false,
                                 default = nil)
  if valid_610231 != nil:
    section.add "X-Amz-Security-Token", valid_610231
  var valid_610232 = header.getOrDefault("X-Amz-Algorithm")
  valid_610232 = validateParameter(valid_610232, JString, required = false,
                                 default = nil)
  if valid_610232 != nil:
    section.add "X-Amz-Algorithm", valid_610232
  var valid_610233 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610233 = validateParameter(valid_610233, JString, required = false,
                                 default = nil)
  if valid_610233 != nil:
    section.add "X-Amz-SignedHeaders", valid_610233
  result.add "header", section
  ## parameters in `formData` object:
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   SourceDBInstanceIdentifier: JString
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   UseLatestRestorableTime: JBool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   RestoreTime: JString
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   TargetDBInstanceIdentifier: JString (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   SourceDbiResourceId: JString
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  section = newJObject()
  var valid_610234 = formData.getOrDefault("Port")
  valid_610234 = validateParameter(valid_610234, JInt, required = false, default = nil)
  if valid_610234 != nil:
    section.add "Port", valid_610234
  var valid_610235 = formData.getOrDefault("DBInstanceClass")
  valid_610235 = validateParameter(valid_610235, JString, required = false,
                                 default = nil)
  if valid_610235 != nil:
    section.add "DBInstanceClass", valid_610235
  var valid_610236 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_610236 = validateParameter(valid_610236, JBool, required = false, default = nil)
  if valid_610236 != nil:
    section.add "UseDefaultProcessorFeatures", valid_610236
  var valid_610237 = formData.getOrDefault("MultiAZ")
  valid_610237 = validateParameter(valid_610237, JBool, required = false, default = nil)
  if valid_610237 != nil:
    section.add "MultiAZ", valid_610237
  var valid_610238 = formData.getOrDefault("Domain")
  valid_610238 = validateParameter(valid_610238, JString, required = false,
                                 default = nil)
  if valid_610238 != nil:
    section.add "Domain", valid_610238
  var valid_610239 = formData.getOrDefault("SourceDBInstanceIdentifier")
  valid_610239 = validateParameter(valid_610239, JString, required = false,
                                 default = nil)
  if valid_610239 != nil:
    section.add "SourceDBInstanceIdentifier", valid_610239
  var valid_610240 = formData.getOrDefault("DBParameterGroupName")
  valid_610240 = validateParameter(valid_610240, JString, required = false,
                                 default = nil)
  if valid_610240 != nil:
    section.add "DBParameterGroupName", valid_610240
  var valid_610241 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_610241 = validateParameter(valid_610241, JArray, required = false,
                                 default = nil)
  if valid_610241 != nil:
    section.add "VpcSecurityGroupIds", valid_610241
  var valid_610242 = formData.getOrDefault("AvailabilityZone")
  valid_610242 = validateParameter(valid_610242, JString, required = false,
                                 default = nil)
  if valid_610242 != nil:
    section.add "AvailabilityZone", valid_610242
  var valid_610243 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_610243 = validateParameter(valid_610243, JBool, required = false, default = nil)
  if valid_610243 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_610243
  var valid_610244 = formData.getOrDefault("Engine")
  valid_610244 = validateParameter(valid_610244, JString, required = false,
                                 default = nil)
  if valid_610244 != nil:
    section.add "Engine", valid_610244
  var valid_610245 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_610245 = validateParameter(valid_610245, JBool, required = false, default = nil)
  if valid_610245 != nil:
    section.add "AutoMinorVersionUpgrade", valid_610245
  var valid_610246 = formData.getOrDefault("TdeCredentialPassword")
  valid_610246 = validateParameter(valid_610246, JString, required = false,
                                 default = nil)
  if valid_610246 != nil:
    section.add "TdeCredentialPassword", valid_610246
  var valid_610247 = formData.getOrDefault("UseLatestRestorableTime")
  valid_610247 = validateParameter(valid_610247, JBool, required = false, default = nil)
  if valid_610247 != nil:
    section.add "UseLatestRestorableTime", valid_610247
  var valid_610248 = formData.getOrDefault("DBName")
  valid_610248 = validateParameter(valid_610248, JString, required = false,
                                 default = nil)
  if valid_610248 != nil:
    section.add "DBName", valid_610248
  var valid_610249 = formData.getOrDefault("Iops")
  valid_610249 = validateParameter(valid_610249, JInt, required = false, default = nil)
  if valid_610249 != nil:
    section.add "Iops", valid_610249
  var valid_610250 = formData.getOrDefault("TdeCredentialArn")
  valid_610250 = validateParameter(valid_610250, JString, required = false,
                                 default = nil)
  if valid_610250 != nil:
    section.add "TdeCredentialArn", valid_610250
  var valid_610251 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_610251 = validateParameter(valid_610251, JArray, required = false,
                                 default = nil)
  if valid_610251 != nil:
    section.add "EnableCloudwatchLogsExports", valid_610251
  var valid_610252 = formData.getOrDefault("PubliclyAccessible")
  valid_610252 = validateParameter(valid_610252, JBool, required = false, default = nil)
  if valid_610252 != nil:
    section.add "PubliclyAccessible", valid_610252
  var valid_610253 = formData.getOrDefault("LicenseModel")
  valid_610253 = validateParameter(valid_610253, JString, required = false,
                                 default = nil)
  if valid_610253 != nil:
    section.add "LicenseModel", valid_610253
  var valid_610254 = formData.getOrDefault("Tags")
  valid_610254 = validateParameter(valid_610254, JArray, required = false,
                                 default = nil)
  if valid_610254 != nil:
    section.add "Tags", valid_610254
  var valid_610255 = formData.getOrDefault("DBSubnetGroupName")
  valid_610255 = validateParameter(valid_610255, JString, required = false,
                                 default = nil)
  if valid_610255 != nil:
    section.add "DBSubnetGroupName", valid_610255
  var valid_610256 = formData.getOrDefault("DomainIAMRoleName")
  valid_610256 = validateParameter(valid_610256, JString, required = false,
                                 default = nil)
  if valid_610256 != nil:
    section.add "DomainIAMRoleName", valid_610256
  var valid_610257 = formData.getOrDefault("OptionGroupName")
  valid_610257 = validateParameter(valid_610257, JString, required = false,
                                 default = nil)
  if valid_610257 != nil:
    section.add "OptionGroupName", valid_610257
  var valid_610258 = formData.getOrDefault("RestoreTime")
  valid_610258 = validateParameter(valid_610258, JString, required = false,
                                 default = nil)
  if valid_610258 != nil:
    section.add "RestoreTime", valid_610258
  assert formData != nil, "formData argument is necessary due to required `TargetDBInstanceIdentifier` field"
  var valid_610259 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_610259 = validateParameter(valid_610259, JString, required = true,
                                 default = nil)
  if valid_610259 != nil:
    section.add "TargetDBInstanceIdentifier", valid_610259
  var valid_610260 = formData.getOrDefault("StorageType")
  valid_610260 = validateParameter(valid_610260, JString, required = false,
                                 default = nil)
  if valid_610260 != nil:
    section.add "StorageType", valid_610260
  var valid_610261 = formData.getOrDefault("SourceDbiResourceId")
  valid_610261 = validateParameter(valid_610261, JString, required = false,
                                 default = nil)
  if valid_610261 != nil:
    section.add "SourceDbiResourceId", valid_610261
  var valid_610262 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_610262 = validateParameter(valid_610262, JBool, required = false, default = nil)
  if valid_610262 != nil:
    section.add "CopyTagsToSnapshot", valid_610262
  var valid_610263 = formData.getOrDefault("DeletionProtection")
  valid_610263 = validateParameter(valid_610263, JBool, required = false, default = nil)
  if valid_610263 != nil:
    section.add "DeletionProtection", valid_610263
  var valid_610264 = formData.getOrDefault("ProcessorFeatures")
  valid_610264 = validateParameter(valid_610264, JArray, required = false,
                                 default = nil)
  if valid_610264 != nil:
    section.add "ProcessorFeatures", valid_610264
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610265: Call_PostRestoreDBInstanceToPointInTime_610222;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  let valid = call_610265.validator(path, query, header, formData, body)
  let scheme = call_610265.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610265.url(scheme.get, call_610265.host, call_610265.base,
                         call_610265.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610265, url, valid)

proc call*(call_610266: Call_PostRestoreDBInstanceToPointInTime_610222;
          TargetDBInstanceIdentifier: string; Port: int = 0;
          DBInstanceClass: string = ""; UseDefaultProcessorFeatures: bool = false;
          MultiAZ: bool = false; Domain: string = "";
          SourceDBInstanceIdentifier: string = "";
          DBParameterGroupName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          AvailabilityZone: string = "";
          EnableIAMDatabaseAuthentication: bool = false; Engine: string = "";
          AutoMinorVersionUpgrade: bool = false; TdeCredentialPassword: string = "";
          UseLatestRestorableTime: bool = false; DBName: string = ""; Iops: int = 0;
          TdeCredentialArn: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          PubliclyAccessible: bool = false;
          Action: string = "RestoreDBInstanceToPointInTime";
          LicenseModel: string = ""; Tags: JsonNode = nil;
          DBSubnetGroupName: string = ""; DomainIAMRoleName: string = "";
          OptionGroupName: string = ""; RestoreTime: string = "";
          Version: string = "2014-10-31"; StorageType: string = "";
          SourceDbiResourceId: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; ProcessorFeatures: JsonNode = nil): Recallable =
  ## postRestoreDBInstanceToPointInTime
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   SourceDBInstanceIdentifier: string
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   UseLatestRestorableTime: bool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Action: string (required)
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   RestoreTime: string
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   TargetDBInstanceIdentifier: string (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   SourceDbiResourceId: string
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  var query_610267 = newJObject()
  var formData_610268 = newJObject()
  add(formData_610268, "Port", newJInt(Port))
  add(formData_610268, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_610268, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_610268, "MultiAZ", newJBool(MultiAZ))
  add(formData_610268, "Domain", newJString(Domain))
  add(formData_610268, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(formData_610268, "DBParameterGroupName", newJString(DBParameterGroupName))
  if VpcSecurityGroupIds != nil:
    formData_610268.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_610268, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_610268, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_610268, "Engine", newJString(Engine))
  add(formData_610268, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_610268, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(formData_610268, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_610268, "DBName", newJString(DBName))
  add(formData_610268, "Iops", newJInt(Iops))
  add(formData_610268, "TdeCredentialArn", newJString(TdeCredentialArn))
  if EnableCloudwatchLogsExports != nil:
    formData_610268.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(formData_610268, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_610267, "Action", newJString(Action))
  add(formData_610268, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    formData_610268.add "Tags", Tags
  add(formData_610268, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_610268, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_610268, "OptionGroupName", newJString(OptionGroupName))
  add(formData_610268, "RestoreTime", newJString(RestoreTime))
  add(formData_610268, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_610267, "Version", newJString(Version))
  add(formData_610268, "StorageType", newJString(StorageType))
  add(formData_610268, "SourceDbiResourceId", newJString(SourceDbiResourceId))
  add(formData_610268, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_610268, "DeletionProtection", newJBool(DeletionProtection))
  if ProcessorFeatures != nil:
    formData_610268.add "ProcessorFeatures", ProcessorFeatures
  result = call_610266.call(nil, query_610267, nil, formData_610268, nil)

var postRestoreDBInstanceToPointInTime* = Call_PostRestoreDBInstanceToPointInTime_610222(
    name: "postRestoreDBInstanceToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceToPointInTime",
    validator: validate_PostRestoreDBInstanceToPointInTime_610223, base: "/",
    url: url_PostRestoreDBInstanceToPointInTime_610224,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceToPointInTime_610176 = ref object of OpenApiRestCall_604389
proc url_GetRestoreDBInstanceToPointInTime_610178(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBInstanceToPointInTime_610177(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   TargetDBInstanceIdentifier: JString (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   SourceDBInstanceIdentifier: JString
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   SourceDbiResourceId: JString
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   RestoreTime: JString
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Version: JString (required)
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  section = newJObject()
  var valid_610179 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_610179 = validateParameter(valid_610179, JBool, required = false, default = nil)
  if valid_610179 != nil:
    section.add "UseDefaultProcessorFeatures", valid_610179
  var valid_610180 = query.getOrDefault("DBName")
  valid_610180 = validateParameter(valid_610180, JString, required = false,
                                 default = nil)
  if valid_610180 != nil:
    section.add "DBName", valid_610180
  var valid_610181 = query.getOrDefault("TdeCredentialPassword")
  valid_610181 = validateParameter(valid_610181, JString, required = false,
                                 default = nil)
  if valid_610181 != nil:
    section.add "TdeCredentialPassword", valid_610181
  var valid_610182 = query.getOrDefault("DeletionProtection")
  valid_610182 = validateParameter(valid_610182, JBool, required = false, default = nil)
  if valid_610182 != nil:
    section.add "DeletionProtection", valid_610182
  var valid_610183 = query.getOrDefault("Engine")
  valid_610183 = validateParameter(valid_610183, JString, required = false,
                                 default = nil)
  if valid_610183 != nil:
    section.add "Engine", valid_610183
  var valid_610184 = query.getOrDefault("UseLatestRestorableTime")
  valid_610184 = validateParameter(valid_610184, JBool, required = false, default = nil)
  if valid_610184 != nil:
    section.add "UseLatestRestorableTime", valid_610184
  var valid_610185 = query.getOrDefault("CopyTagsToSnapshot")
  valid_610185 = validateParameter(valid_610185, JBool, required = false, default = nil)
  if valid_610185 != nil:
    section.add "CopyTagsToSnapshot", valid_610185
  var valid_610186 = query.getOrDefault("DBParameterGroupName")
  valid_610186 = validateParameter(valid_610186, JString, required = false,
                                 default = nil)
  if valid_610186 != nil:
    section.add "DBParameterGroupName", valid_610186
  var valid_610187 = query.getOrDefault("Tags")
  valid_610187 = validateParameter(valid_610187, JArray, required = false,
                                 default = nil)
  if valid_610187 != nil:
    section.add "Tags", valid_610187
  var valid_610188 = query.getOrDefault("LicenseModel")
  valid_610188 = validateParameter(valid_610188, JString, required = false,
                                 default = nil)
  if valid_610188 != nil:
    section.add "LicenseModel", valid_610188
  var valid_610189 = query.getOrDefault("TdeCredentialArn")
  valid_610189 = validateParameter(valid_610189, JString, required = false,
                                 default = nil)
  if valid_610189 != nil:
    section.add "TdeCredentialArn", valid_610189
  var valid_610190 = query.getOrDefault("ProcessorFeatures")
  valid_610190 = validateParameter(valid_610190, JArray, required = false,
                                 default = nil)
  if valid_610190 != nil:
    section.add "ProcessorFeatures", valid_610190
  var valid_610191 = query.getOrDefault("StorageType")
  valid_610191 = validateParameter(valid_610191, JString, required = false,
                                 default = nil)
  if valid_610191 != nil:
    section.add "StorageType", valid_610191
  assert query != nil, "query argument is necessary due to required `TargetDBInstanceIdentifier` field"
  var valid_610192 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_610192 = validateParameter(valid_610192, JString, required = true,
                                 default = nil)
  if valid_610192 != nil:
    section.add "TargetDBInstanceIdentifier", valid_610192
  var valid_610193 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_610193 = validateParameter(valid_610193, JBool, required = false, default = nil)
  if valid_610193 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_610193
  var valid_610194 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_610194 = validateParameter(valid_610194, JArray, required = false,
                                 default = nil)
  if valid_610194 != nil:
    section.add "EnableCloudwatchLogsExports", valid_610194
  var valid_610195 = query.getOrDefault("Action")
  valid_610195 = validateParameter(valid_610195, JString, required = true, default = newJString(
      "RestoreDBInstanceToPointInTime"))
  if valid_610195 != nil:
    section.add "Action", valid_610195
  var valid_610196 = query.getOrDefault("SourceDBInstanceIdentifier")
  valid_610196 = validateParameter(valid_610196, JString, required = false,
                                 default = nil)
  if valid_610196 != nil:
    section.add "SourceDBInstanceIdentifier", valid_610196
  var valid_610197 = query.getOrDefault("MultiAZ")
  valid_610197 = validateParameter(valid_610197, JBool, required = false, default = nil)
  if valid_610197 != nil:
    section.add "MultiAZ", valid_610197
  var valid_610198 = query.getOrDefault("Port")
  valid_610198 = validateParameter(valid_610198, JInt, required = false, default = nil)
  if valid_610198 != nil:
    section.add "Port", valid_610198
  var valid_610199 = query.getOrDefault("Domain")
  valid_610199 = validateParameter(valid_610199, JString, required = false,
                                 default = nil)
  if valid_610199 != nil:
    section.add "Domain", valid_610199
  var valid_610200 = query.getOrDefault("VpcSecurityGroupIds")
  valid_610200 = validateParameter(valid_610200, JArray, required = false,
                                 default = nil)
  if valid_610200 != nil:
    section.add "VpcSecurityGroupIds", valid_610200
  var valid_610201 = query.getOrDefault("SourceDbiResourceId")
  valid_610201 = validateParameter(valid_610201, JString, required = false,
                                 default = nil)
  if valid_610201 != nil:
    section.add "SourceDbiResourceId", valid_610201
  var valid_610202 = query.getOrDefault("AvailabilityZone")
  valid_610202 = validateParameter(valid_610202, JString, required = false,
                                 default = nil)
  if valid_610202 != nil:
    section.add "AvailabilityZone", valid_610202
  var valid_610203 = query.getOrDefault("OptionGroupName")
  valid_610203 = validateParameter(valid_610203, JString, required = false,
                                 default = nil)
  if valid_610203 != nil:
    section.add "OptionGroupName", valid_610203
  var valid_610204 = query.getOrDefault("DBSubnetGroupName")
  valid_610204 = validateParameter(valid_610204, JString, required = false,
                                 default = nil)
  if valid_610204 != nil:
    section.add "DBSubnetGroupName", valid_610204
  var valid_610205 = query.getOrDefault("RestoreTime")
  valid_610205 = validateParameter(valid_610205, JString, required = false,
                                 default = nil)
  if valid_610205 != nil:
    section.add "RestoreTime", valid_610205
  var valid_610206 = query.getOrDefault("DBInstanceClass")
  valid_610206 = validateParameter(valid_610206, JString, required = false,
                                 default = nil)
  if valid_610206 != nil:
    section.add "DBInstanceClass", valid_610206
  var valid_610207 = query.getOrDefault("PubliclyAccessible")
  valid_610207 = validateParameter(valid_610207, JBool, required = false, default = nil)
  if valid_610207 != nil:
    section.add "PubliclyAccessible", valid_610207
  var valid_610208 = query.getOrDefault("Version")
  valid_610208 = validateParameter(valid_610208, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610208 != nil:
    section.add "Version", valid_610208
  var valid_610209 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_610209 = validateParameter(valid_610209, JBool, required = false, default = nil)
  if valid_610209 != nil:
    section.add "AutoMinorVersionUpgrade", valid_610209
  var valid_610210 = query.getOrDefault("Iops")
  valid_610210 = validateParameter(valid_610210, JInt, required = false, default = nil)
  if valid_610210 != nil:
    section.add "Iops", valid_610210
  var valid_610211 = query.getOrDefault("DomainIAMRoleName")
  valid_610211 = validateParameter(valid_610211, JString, required = false,
                                 default = nil)
  if valid_610211 != nil:
    section.add "DomainIAMRoleName", valid_610211
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610212 = header.getOrDefault("X-Amz-Signature")
  valid_610212 = validateParameter(valid_610212, JString, required = false,
                                 default = nil)
  if valid_610212 != nil:
    section.add "X-Amz-Signature", valid_610212
  var valid_610213 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610213 = validateParameter(valid_610213, JString, required = false,
                                 default = nil)
  if valid_610213 != nil:
    section.add "X-Amz-Content-Sha256", valid_610213
  var valid_610214 = header.getOrDefault("X-Amz-Date")
  valid_610214 = validateParameter(valid_610214, JString, required = false,
                                 default = nil)
  if valid_610214 != nil:
    section.add "X-Amz-Date", valid_610214
  var valid_610215 = header.getOrDefault("X-Amz-Credential")
  valid_610215 = validateParameter(valid_610215, JString, required = false,
                                 default = nil)
  if valid_610215 != nil:
    section.add "X-Amz-Credential", valid_610215
  var valid_610216 = header.getOrDefault("X-Amz-Security-Token")
  valid_610216 = validateParameter(valid_610216, JString, required = false,
                                 default = nil)
  if valid_610216 != nil:
    section.add "X-Amz-Security-Token", valid_610216
  var valid_610217 = header.getOrDefault("X-Amz-Algorithm")
  valid_610217 = validateParameter(valid_610217, JString, required = false,
                                 default = nil)
  if valid_610217 != nil:
    section.add "X-Amz-Algorithm", valid_610217
  var valid_610218 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610218 = validateParameter(valid_610218, JString, required = false,
                                 default = nil)
  if valid_610218 != nil:
    section.add "X-Amz-SignedHeaders", valid_610218
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610219: Call_GetRestoreDBInstanceToPointInTime_610176;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  let valid = call_610219.validator(path, query, header, formData, body)
  let scheme = call_610219.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610219.url(scheme.get, call_610219.host, call_610219.base,
                         call_610219.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610219, url, valid)

proc call*(call_610220: Call_GetRestoreDBInstanceToPointInTime_610176;
          TargetDBInstanceIdentifier: string;
          UseDefaultProcessorFeatures: bool = false; DBName: string = "";
          TdeCredentialPassword: string = ""; DeletionProtection: bool = false;
          Engine: string = ""; UseLatestRestorableTime: bool = false;
          CopyTagsToSnapshot: bool = false; DBParameterGroupName: string = "";
          Tags: JsonNode = nil; LicenseModel: string = "";
          TdeCredentialArn: string = ""; ProcessorFeatures: JsonNode = nil;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          EnableCloudwatchLogsExports: JsonNode = nil;
          Action: string = "RestoreDBInstanceToPointInTime";
          SourceDBInstanceIdentifier: string = ""; MultiAZ: bool = false; Port: int = 0;
          Domain: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          SourceDbiResourceId: string = ""; AvailabilityZone: string = "";
          OptionGroupName: string = ""; DBSubnetGroupName: string = "";
          RestoreTime: string = ""; DBInstanceClass: string = "";
          PubliclyAccessible: bool = false; Version: string = "2014-10-31";
          AutoMinorVersionUpgrade: bool = false; Iops: int = 0;
          DomainIAMRoleName: string = ""): Recallable =
  ## getRestoreDBInstanceToPointInTime
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseLatestRestorableTime: bool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   TargetDBInstanceIdentifier: string (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   SourceDBInstanceIdentifier: string
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   SourceDbiResourceId: string
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   RestoreTime: string
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   Version: string (required)
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  var query_610221 = newJObject()
  add(query_610221, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_610221, "DBName", newJString(DBName))
  add(query_610221, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_610221, "DeletionProtection", newJBool(DeletionProtection))
  add(query_610221, "Engine", newJString(Engine))
  add(query_610221, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_610221, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_610221, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    query_610221.add "Tags", Tags
  add(query_610221, "LicenseModel", newJString(LicenseModel))
  add(query_610221, "TdeCredentialArn", newJString(TdeCredentialArn))
  if ProcessorFeatures != nil:
    query_610221.add "ProcessorFeatures", ProcessorFeatures
  add(query_610221, "StorageType", newJString(StorageType))
  add(query_610221, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_610221, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if EnableCloudwatchLogsExports != nil:
    query_610221.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_610221, "Action", newJString(Action))
  add(query_610221, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(query_610221, "MultiAZ", newJBool(MultiAZ))
  add(query_610221, "Port", newJInt(Port))
  add(query_610221, "Domain", newJString(Domain))
  if VpcSecurityGroupIds != nil:
    query_610221.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_610221, "SourceDbiResourceId", newJString(SourceDbiResourceId))
  add(query_610221, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_610221, "OptionGroupName", newJString(OptionGroupName))
  add(query_610221, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_610221, "RestoreTime", newJString(RestoreTime))
  add(query_610221, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_610221, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_610221, "Version", newJString(Version))
  add(query_610221, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_610221, "Iops", newJInt(Iops))
  add(query_610221, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  result = call_610220.call(nil, query_610221, nil, nil, nil)

var getRestoreDBInstanceToPointInTime* = Call_GetRestoreDBInstanceToPointInTime_610176(
    name: "getRestoreDBInstanceToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceToPointInTime",
    validator: validate_GetRestoreDBInstanceToPointInTime_610177, base: "/",
    url: url_GetRestoreDBInstanceToPointInTime_610178,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRevokeDBSecurityGroupIngress_610289 = ref object of OpenApiRestCall_604389
proc url_PostRevokeDBSecurityGroupIngress_610291(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRevokeDBSecurityGroupIngress_610290(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610292 = query.getOrDefault("Action")
  valid_610292 = validateParameter(valid_610292, JString, required = true, default = newJString(
      "RevokeDBSecurityGroupIngress"))
  if valid_610292 != nil:
    section.add "Action", valid_610292
  var valid_610293 = query.getOrDefault("Version")
  valid_610293 = validateParameter(valid_610293, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610293 != nil:
    section.add "Version", valid_610293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610294 = header.getOrDefault("X-Amz-Signature")
  valid_610294 = validateParameter(valid_610294, JString, required = false,
                                 default = nil)
  if valid_610294 != nil:
    section.add "X-Amz-Signature", valid_610294
  var valid_610295 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610295 = validateParameter(valid_610295, JString, required = false,
                                 default = nil)
  if valid_610295 != nil:
    section.add "X-Amz-Content-Sha256", valid_610295
  var valid_610296 = header.getOrDefault("X-Amz-Date")
  valid_610296 = validateParameter(valid_610296, JString, required = false,
                                 default = nil)
  if valid_610296 != nil:
    section.add "X-Amz-Date", valid_610296
  var valid_610297 = header.getOrDefault("X-Amz-Credential")
  valid_610297 = validateParameter(valid_610297, JString, required = false,
                                 default = nil)
  if valid_610297 != nil:
    section.add "X-Amz-Credential", valid_610297
  var valid_610298 = header.getOrDefault("X-Amz-Security-Token")
  valid_610298 = validateParameter(valid_610298, JString, required = false,
                                 default = nil)
  if valid_610298 != nil:
    section.add "X-Amz-Security-Token", valid_610298
  var valid_610299 = header.getOrDefault("X-Amz-Algorithm")
  valid_610299 = validateParameter(valid_610299, JString, required = false,
                                 default = nil)
  if valid_610299 != nil:
    section.add "X-Amz-Algorithm", valid_610299
  var valid_610300 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610300 = validateParameter(valid_610300, JString, required = false,
                                 default = nil)
  if valid_610300 != nil:
    section.add "X-Amz-SignedHeaders", valid_610300
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupName: JString
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: JString
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: JString
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_610301 = formData.getOrDefault("DBSecurityGroupName")
  valid_610301 = validateParameter(valid_610301, JString, required = true,
                                 default = nil)
  if valid_610301 != nil:
    section.add "DBSecurityGroupName", valid_610301
  var valid_610302 = formData.getOrDefault("EC2SecurityGroupName")
  valid_610302 = validateParameter(valid_610302, JString, required = false,
                                 default = nil)
  if valid_610302 != nil:
    section.add "EC2SecurityGroupName", valid_610302
  var valid_610303 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_610303 = validateParameter(valid_610303, JString, required = false,
                                 default = nil)
  if valid_610303 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_610303
  var valid_610304 = formData.getOrDefault("EC2SecurityGroupId")
  valid_610304 = validateParameter(valid_610304, JString, required = false,
                                 default = nil)
  if valid_610304 != nil:
    section.add "EC2SecurityGroupId", valid_610304
  var valid_610305 = formData.getOrDefault("CIDRIP")
  valid_610305 = validateParameter(valid_610305, JString, required = false,
                                 default = nil)
  if valid_610305 != nil:
    section.add "CIDRIP", valid_610305
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610306: Call_PostRevokeDBSecurityGroupIngress_610289;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  let valid = call_610306.validator(path, query, header, formData, body)
  let scheme = call_610306.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610306.url(scheme.get, call_610306.host, call_610306.base,
                         call_610306.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610306, url, valid)

proc call*(call_610307: Call_PostRevokeDBSecurityGroupIngress_610289;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupOwnerId: string = ""; EC2SecurityGroupId: string = "";
          CIDRIP: string = ""; Action: string = "RevokeDBSecurityGroupIngress";
          Version: string = "2014-10-31"): Recallable =
  ## postRevokeDBSecurityGroupIngress
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupName: string
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: string
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: string
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610308 = newJObject()
  var formData_610309 = newJObject()
  add(formData_610309, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_610309, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_610309, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(formData_610309, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(formData_610309, "CIDRIP", newJString(CIDRIP))
  add(query_610308, "Action", newJString(Action))
  add(query_610308, "Version", newJString(Version))
  result = call_610307.call(nil, query_610308, nil, formData_610309, nil)

var postRevokeDBSecurityGroupIngress* = Call_PostRevokeDBSecurityGroupIngress_610289(
    name: "postRevokeDBSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RevokeDBSecurityGroupIngress",
    validator: validate_PostRevokeDBSecurityGroupIngress_610290, base: "/",
    url: url_PostRevokeDBSecurityGroupIngress_610291,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRevokeDBSecurityGroupIngress_610269 = ref object of OpenApiRestCall_604389
proc url_GetRevokeDBSecurityGroupIngress_610271(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRevokeDBSecurityGroupIngress_610270(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupName: JString
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupId: JString
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   CIDRIP: JString
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  section = newJObject()
  var valid_610272 = query.getOrDefault("EC2SecurityGroupName")
  valid_610272 = validateParameter(valid_610272, JString, required = false,
                                 default = nil)
  if valid_610272 != nil:
    section.add "EC2SecurityGroupName", valid_610272
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_610273 = query.getOrDefault("DBSecurityGroupName")
  valid_610273 = validateParameter(valid_610273, JString, required = true,
                                 default = nil)
  if valid_610273 != nil:
    section.add "DBSecurityGroupName", valid_610273
  var valid_610274 = query.getOrDefault("EC2SecurityGroupId")
  valid_610274 = validateParameter(valid_610274, JString, required = false,
                                 default = nil)
  if valid_610274 != nil:
    section.add "EC2SecurityGroupId", valid_610274
  var valid_610275 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_610275 = validateParameter(valid_610275, JString, required = false,
                                 default = nil)
  if valid_610275 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_610275
  var valid_610276 = query.getOrDefault("Action")
  valid_610276 = validateParameter(valid_610276, JString, required = true, default = newJString(
      "RevokeDBSecurityGroupIngress"))
  if valid_610276 != nil:
    section.add "Action", valid_610276
  var valid_610277 = query.getOrDefault("Version")
  valid_610277 = validateParameter(valid_610277, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610277 != nil:
    section.add "Version", valid_610277
  var valid_610278 = query.getOrDefault("CIDRIP")
  valid_610278 = validateParameter(valid_610278, JString, required = false,
                                 default = nil)
  if valid_610278 != nil:
    section.add "CIDRIP", valid_610278
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610279 = header.getOrDefault("X-Amz-Signature")
  valid_610279 = validateParameter(valid_610279, JString, required = false,
                                 default = nil)
  if valid_610279 != nil:
    section.add "X-Amz-Signature", valid_610279
  var valid_610280 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610280 = validateParameter(valid_610280, JString, required = false,
                                 default = nil)
  if valid_610280 != nil:
    section.add "X-Amz-Content-Sha256", valid_610280
  var valid_610281 = header.getOrDefault("X-Amz-Date")
  valid_610281 = validateParameter(valid_610281, JString, required = false,
                                 default = nil)
  if valid_610281 != nil:
    section.add "X-Amz-Date", valid_610281
  var valid_610282 = header.getOrDefault("X-Amz-Credential")
  valid_610282 = validateParameter(valid_610282, JString, required = false,
                                 default = nil)
  if valid_610282 != nil:
    section.add "X-Amz-Credential", valid_610282
  var valid_610283 = header.getOrDefault("X-Amz-Security-Token")
  valid_610283 = validateParameter(valid_610283, JString, required = false,
                                 default = nil)
  if valid_610283 != nil:
    section.add "X-Amz-Security-Token", valid_610283
  var valid_610284 = header.getOrDefault("X-Amz-Algorithm")
  valid_610284 = validateParameter(valid_610284, JString, required = false,
                                 default = nil)
  if valid_610284 != nil:
    section.add "X-Amz-Algorithm", valid_610284
  var valid_610285 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610285 = validateParameter(valid_610285, JString, required = false,
                                 default = nil)
  if valid_610285 != nil:
    section.add "X-Amz-SignedHeaders", valid_610285
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610286: Call_GetRevokeDBSecurityGroupIngress_610269;
          path: JsonNode; query: JsonNode; header: JsonNode; formData: JsonNode;
          body: JsonNode): Recallable =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  let valid = call_610286.validator(path, query, header, formData, body)
  let scheme = call_610286.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610286.url(scheme.get, call_610286.host, call_610286.base,
                         call_610286.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610286, url, valid)

proc call*(call_610287: Call_GetRevokeDBSecurityGroupIngress_610269;
          DBSecurityGroupName: string; EC2SecurityGroupName: string = "";
          EC2SecurityGroupId: string = ""; EC2SecurityGroupOwnerId: string = "";
          Action: string = "RevokeDBSecurityGroupIngress";
          Version: string = "2014-10-31"; CIDRIP: string = ""): Recallable =
  ## getRevokeDBSecurityGroupIngress
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ##   EC2SecurityGroupName: string
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupId: string
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   CIDRIP: string
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  var query_610288 = newJObject()
  add(query_610288, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_610288, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_610288, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(query_610288, "EC2SecurityGroupOwnerId", newJString(EC2SecurityGroupOwnerId))
  add(query_610288, "Action", newJString(Action))
  add(query_610288, "Version", newJString(Version))
  add(query_610288, "CIDRIP", newJString(CIDRIP))
  result = call_610287.call(nil, query_610288, nil, nil, nil)

var getRevokeDBSecurityGroupIngress* = Call_GetRevokeDBSecurityGroupIngress_610269(
    name: "getRevokeDBSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RevokeDBSecurityGroupIngress",
    validator: validate_GetRevokeDBSecurityGroupIngress_610270, base: "/",
    url: url_GetRevokeDBSecurityGroupIngress_610271,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartActivityStream_610329 = ref object of OpenApiRestCall_604389
proc url_PostStartActivityStream_610331(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartActivityStream_610330(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610332 = query.getOrDefault("Action")
  valid_610332 = validateParameter(valid_610332, JString, required = true,
                                 default = newJString("StartActivityStream"))
  if valid_610332 != nil:
    section.add "Action", valid_610332
  var valid_610333 = query.getOrDefault("Version")
  valid_610333 = validateParameter(valid_610333, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610333 != nil:
    section.add "Version", valid_610333
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610334 = header.getOrDefault("X-Amz-Signature")
  valid_610334 = validateParameter(valid_610334, JString, required = false,
                                 default = nil)
  if valid_610334 != nil:
    section.add "X-Amz-Signature", valid_610334
  var valid_610335 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610335 = validateParameter(valid_610335, JString, required = false,
                                 default = nil)
  if valid_610335 != nil:
    section.add "X-Amz-Content-Sha256", valid_610335
  var valid_610336 = header.getOrDefault("X-Amz-Date")
  valid_610336 = validateParameter(valid_610336, JString, required = false,
                                 default = nil)
  if valid_610336 != nil:
    section.add "X-Amz-Date", valid_610336
  var valid_610337 = header.getOrDefault("X-Amz-Credential")
  valid_610337 = validateParameter(valid_610337, JString, required = false,
                                 default = nil)
  if valid_610337 != nil:
    section.add "X-Amz-Credential", valid_610337
  var valid_610338 = header.getOrDefault("X-Amz-Security-Token")
  valid_610338 = validateParameter(valid_610338, JString, required = false,
                                 default = nil)
  if valid_610338 != nil:
    section.add "X-Amz-Security-Token", valid_610338
  var valid_610339 = header.getOrDefault("X-Amz-Algorithm")
  valid_610339 = validateParameter(valid_610339, JString, required = false,
                                 default = nil)
  if valid_610339 != nil:
    section.add "X-Amz-Algorithm", valid_610339
  var valid_610340 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610340 = validateParameter(valid_610340, JString, required = false,
                                 default = nil)
  if valid_610340 != nil:
    section.add "X-Amz-SignedHeaders", valid_610340
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: JString (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   KmsKeyId: JString (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceArn` field"
  var valid_610341 = formData.getOrDefault("ResourceArn")
  valid_610341 = validateParameter(valid_610341, JString, required = true,
                                 default = nil)
  if valid_610341 != nil:
    section.add "ResourceArn", valid_610341
  var valid_610342 = formData.getOrDefault("Mode")
  valid_610342 = validateParameter(valid_610342, JString, required = true,
                                 default = newJString("sync"))
  if valid_610342 != nil:
    section.add "Mode", valid_610342
  var valid_610343 = formData.getOrDefault("KmsKeyId")
  valid_610343 = validateParameter(valid_610343, JString, required = true,
                                 default = nil)
  if valid_610343 != nil:
    section.add "KmsKeyId", valid_610343
  var valid_610344 = formData.getOrDefault("ApplyImmediately")
  valid_610344 = validateParameter(valid_610344, JBool, required = false, default = nil)
  if valid_610344 != nil:
    section.add "ApplyImmediately", valid_610344
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610345: Call_PostStartActivityStream_610329; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  let valid = call_610345.validator(path, query, header, formData, body)
  let scheme = call_610345.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610345.url(scheme.get, call_610345.host, call_610345.base,
                         call_610345.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610345, url, valid)

proc call*(call_610346: Call_PostStartActivityStream_610329; ResourceArn: string;
          KmsKeyId: string; Mode: string = "sync"; ApplyImmediately: bool = false;
          Action: string = "StartActivityStream"; Version: string = "2014-10-31"): Recallable =
  ## postStartActivityStream
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: string (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   KmsKeyId: string (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610347 = newJObject()
  var formData_610348 = newJObject()
  add(formData_610348, "ResourceArn", newJString(ResourceArn))
  add(formData_610348, "Mode", newJString(Mode))
  add(formData_610348, "KmsKeyId", newJString(KmsKeyId))
  add(formData_610348, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_610347, "Action", newJString(Action))
  add(query_610347, "Version", newJString(Version))
  result = call_610346.call(nil, query_610347, nil, formData_610348, nil)

var postStartActivityStream* = Call_PostStartActivityStream_610329(
    name: "postStartActivityStream", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartActivityStream",
    validator: validate_PostStartActivityStream_610330, base: "/",
    url: url_PostStartActivityStream_610331, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartActivityStream_610310 = ref object of OpenApiRestCall_604389
proc url_GetStartActivityStream_610312(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartActivityStream_610311(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   KmsKeyId: JString (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: JString (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `KmsKeyId` field"
  var valid_610313 = query.getOrDefault("KmsKeyId")
  valid_610313 = validateParameter(valid_610313, JString, required = true,
                                 default = nil)
  if valid_610313 != nil:
    section.add "KmsKeyId", valid_610313
  var valid_610314 = query.getOrDefault("ResourceArn")
  valid_610314 = validateParameter(valid_610314, JString, required = true,
                                 default = nil)
  if valid_610314 != nil:
    section.add "ResourceArn", valid_610314
  var valid_610315 = query.getOrDefault("Mode")
  valid_610315 = validateParameter(valid_610315, JString, required = true,
                                 default = newJString("sync"))
  if valid_610315 != nil:
    section.add "Mode", valid_610315
  var valid_610316 = query.getOrDefault("Action")
  valid_610316 = validateParameter(valid_610316, JString, required = true,
                                 default = newJString("StartActivityStream"))
  if valid_610316 != nil:
    section.add "Action", valid_610316
  var valid_610317 = query.getOrDefault("ApplyImmediately")
  valid_610317 = validateParameter(valid_610317, JBool, required = false, default = nil)
  if valid_610317 != nil:
    section.add "ApplyImmediately", valid_610317
  var valid_610318 = query.getOrDefault("Version")
  valid_610318 = validateParameter(valid_610318, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610318 != nil:
    section.add "Version", valid_610318
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610319 = header.getOrDefault("X-Amz-Signature")
  valid_610319 = validateParameter(valid_610319, JString, required = false,
                                 default = nil)
  if valid_610319 != nil:
    section.add "X-Amz-Signature", valid_610319
  var valid_610320 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610320 = validateParameter(valid_610320, JString, required = false,
                                 default = nil)
  if valid_610320 != nil:
    section.add "X-Amz-Content-Sha256", valid_610320
  var valid_610321 = header.getOrDefault("X-Amz-Date")
  valid_610321 = validateParameter(valid_610321, JString, required = false,
                                 default = nil)
  if valid_610321 != nil:
    section.add "X-Amz-Date", valid_610321
  var valid_610322 = header.getOrDefault("X-Amz-Credential")
  valid_610322 = validateParameter(valid_610322, JString, required = false,
                                 default = nil)
  if valid_610322 != nil:
    section.add "X-Amz-Credential", valid_610322
  var valid_610323 = header.getOrDefault("X-Amz-Security-Token")
  valid_610323 = validateParameter(valid_610323, JString, required = false,
                                 default = nil)
  if valid_610323 != nil:
    section.add "X-Amz-Security-Token", valid_610323
  var valid_610324 = header.getOrDefault("X-Amz-Algorithm")
  valid_610324 = validateParameter(valid_610324, JString, required = false,
                                 default = nil)
  if valid_610324 != nil:
    section.add "X-Amz-Algorithm", valid_610324
  var valid_610325 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610325 = validateParameter(valid_610325, JString, required = false,
                                 default = nil)
  if valid_610325 != nil:
    section.add "X-Amz-SignedHeaders", valid_610325
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610326: Call_GetStartActivityStream_610310; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  let valid = call_610326.validator(path, query, header, formData, body)
  let scheme = call_610326.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610326.url(scheme.get, call_610326.host, call_610326.base,
                         call_610326.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610326, url, valid)

proc call*(call_610327: Call_GetStartActivityStream_610310; KmsKeyId: string;
          ResourceArn: string; Mode: string = "sync";
          Action: string = "StartActivityStream"; ApplyImmediately: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getStartActivityStream
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ##   KmsKeyId: string (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Mode: string (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Version: string (required)
  var query_610328 = newJObject()
  add(query_610328, "KmsKeyId", newJString(KmsKeyId))
  add(query_610328, "ResourceArn", newJString(ResourceArn))
  add(query_610328, "Mode", newJString(Mode))
  add(query_610328, "Action", newJString(Action))
  add(query_610328, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_610328, "Version", newJString(Version))
  result = call_610327.call(nil, query_610328, nil, nil, nil)

var getStartActivityStream* = Call_GetStartActivityStream_610310(
    name: "getStartActivityStream", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=StartActivityStream",
    validator: validate_GetStartActivityStream_610311, base: "/",
    url: url_GetStartActivityStream_610312, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartDBCluster_610365 = ref object of OpenApiRestCall_604389
proc url_PostStartDBCluster_610367(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartDBCluster_610366(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610368 = query.getOrDefault("Action")
  valid_610368 = validateParameter(valid_610368, JString, required = true,
                                 default = newJString("StartDBCluster"))
  if valid_610368 != nil:
    section.add "Action", valid_610368
  var valid_610369 = query.getOrDefault("Version")
  valid_610369 = validateParameter(valid_610369, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610369 != nil:
    section.add "Version", valid_610369
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610370 = header.getOrDefault("X-Amz-Signature")
  valid_610370 = validateParameter(valid_610370, JString, required = false,
                                 default = nil)
  if valid_610370 != nil:
    section.add "X-Amz-Signature", valid_610370
  var valid_610371 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610371 = validateParameter(valid_610371, JString, required = false,
                                 default = nil)
  if valid_610371 != nil:
    section.add "X-Amz-Content-Sha256", valid_610371
  var valid_610372 = header.getOrDefault("X-Amz-Date")
  valid_610372 = validateParameter(valid_610372, JString, required = false,
                                 default = nil)
  if valid_610372 != nil:
    section.add "X-Amz-Date", valid_610372
  var valid_610373 = header.getOrDefault("X-Amz-Credential")
  valid_610373 = validateParameter(valid_610373, JString, required = false,
                                 default = nil)
  if valid_610373 != nil:
    section.add "X-Amz-Credential", valid_610373
  var valid_610374 = header.getOrDefault("X-Amz-Security-Token")
  valid_610374 = validateParameter(valid_610374, JString, required = false,
                                 default = nil)
  if valid_610374 != nil:
    section.add "X-Amz-Security-Token", valid_610374
  var valid_610375 = header.getOrDefault("X-Amz-Algorithm")
  valid_610375 = validateParameter(valid_610375, JString, required = false,
                                 default = nil)
  if valid_610375 != nil:
    section.add "X-Amz-Algorithm", valid_610375
  var valid_610376 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610376 = validateParameter(valid_610376, JString, required = false,
                                 default = nil)
  if valid_610376 != nil:
    section.add "X-Amz-SignedHeaders", valid_610376
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_610377 = formData.getOrDefault("DBClusterIdentifier")
  valid_610377 = validateParameter(valid_610377, JString, required = true,
                                 default = nil)
  if valid_610377 != nil:
    section.add "DBClusterIdentifier", valid_610377
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610378: Call_PostStartDBCluster_610365; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_610378.validator(path, query, header, formData, body)
  let scheme = call_610378.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610378.url(scheme.get, call_610378.host, call_610378.base,
                         call_610378.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610378, url, valid)

proc call*(call_610379: Call_PostStartDBCluster_610365;
          DBClusterIdentifier: string; Action: string = "StartDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postStartDBCluster
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  var query_610380 = newJObject()
  var formData_610381 = newJObject()
  add(query_610380, "Action", newJString(Action))
  add(query_610380, "Version", newJString(Version))
  add(formData_610381, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_610379.call(nil, query_610380, nil, formData_610381, nil)

var postStartDBCluster* = Call_PostStartDBCluster_610365(
    name: "postStartDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartDBCluster",
    validator: validate_PostStartDBCluster_610366, base: "/",
    url: url_PostStartDBCluster_610367, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartDBCluster_610349 = ref object of OpenApiRestCall_604389
proc url_GetStartDBCluster_610351(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartDBCluster_610350(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_610352 = query.getOrDefault("DBClusterIdentifier")
  valid_610352 = validateParameter(valid_610352, JString, required = true,
                                 default = nil)
  if valid_610352 != nil:
    section.add "DBClusterIdentifier", valid_610352
  var valid_610353 = query.getOrDefault("Action")
  valid_610353 = validateParameter(valid_610353, JString, required = true,
                                 default = newJString("StartDBCluster"))
  if valid_610353 != nil:
    section.add "Action", valid_610353
  var valid_610354 = query.getOrDefault("Version")
  valid_610354 = validateParameter(valid_610354, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610354 != nil:
    section.add "Version", valid_610354
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610355 = header.getOrDefault("X-Amz-Signature")
  valid_610355 = validateParameter(valid_610355, JString, required = false,
                                 default = nil)
  if valid_610355 != nil:
    section.add "X-Amz-Signature", valid_610355
  var valid_610356 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610356 = validateParameter(valid_610356, JString, required = false,
                                 default = nil)
  if valid_610356 != nil:
    section.add "X-Amz-Content-Sha256", valid_610356
  var valid_610357 = header.getOrDefault("X-Amz-Date")
  valid_610357 = validateParameter(valid_610357, JString, required = false,
                                 default = nil)
  if valid_610357 != nil:
    section.add "X-Amz-Date", valid_610357
  var valid_610358 = header.getOrDefault("X-Amz-Credential")
  valid_610358 = validateParameter(valid_610358, JString, required = false,
                                 default = nil)
  if valid_610358 != nil:
    section.add "X-Amz-Credential", valid_610358
  var valid_610359 = header.getOrDefault("X-Amz-Security-Token")
  valid_610359 = validateParameter(valid_610359, JString, required = false,
                                 default = nil)
  if valid_610359 != nil:
    section.add "X-Amz-Security-Token", valid_610359
  var valid_610360 = header.getOrDefault("X-Amz-Algorithm")
  valid_610360 = validateParameter(valid_610360, JString, required = false,
                                 default = nil)
  if valid_610360 != nil:
    section.add "X-Amz-Algorithm", valid_610360
  var valid_610361 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610361 = validateParameter(valid_610361, JString, required = false,
                                 default = nil)
  if valid_610361 != nil:
    section.add "X-Amz-SignedHeaders", valid_610361
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610362: Call_GetStartDBCluster_610349; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_610362.validator(path, query, header, formData, body)
  let scheme = call_610362.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610362.url(scheme.get, call_610362.host, call_610362.base,
                         call_610362.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610362, url, valid)

proc call*(call_610363: Call_GetStartDBCluster_610349; DBClusterIdentifier: string;
          Action: string = "StartDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getStartDBCluster
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610364 = newJObject()
  add(query_610364, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_610364, "Action", newJString(Action))
  add(query_610364, "Version", newJString(Version))
  result = call_610363.call(nil, query_610364, nil, nil, nil)

var getStartDBCluster* = Call_GetStartDBCluster_610349(name: "getStartDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartDBCluster", validator: validate_GetStartDBCluster_610350,
    base: "/", url: url_GetStartDBCluster_610351,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartDBInstance_610398 = ref object of OpenApiRestCall_604389
proc url_PostStartDBInstance_610400(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartDBInstance_610399(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode): JsonNode =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610401 = query.getOrDefault("Action")
  valid_610401 = validateParameter(valid_610401, JString, required = true,
                                 default = newJString("StartDBInstance"))
  if valid_610401 != nil:
    section.add "Action", valid_610401
  var valid_610402 = query.getOrDefault("Version")
  valid_610402 = validateParameter(valid_610402, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610402 != nil:
    section.add "Version", valid_610402
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610403 = header.getOrDefault("X-Amz-Signature")
  valid_610403 = validateParameter(valid_610403, JString, required = false,
                                 default = nil)
  if valid_610403 != nil:
    section.add "X-Amz-Signature", valid_610403
  var valid_610404 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610404 = validateParameter(valid_610404, JString, required = false,
                                 default = nil)
  if valid_610404 != nil:
    section.add "X-Amz-Content-Sha256", valid_610404
  var valid_610405 = header.getOrDefault("X-Amz-Date")
  valid_610405 = validateParameter(valid_610405, JString, required = false,
                                 default = nil)
  if valid_610405 != nil:
    section.add "X-Amz-Date", valid_610405
  var valid_610406 = header.getOrDefault("X-Amz-Credential")
  valid_610406 = validateParameter(valid_610406, JString, required = false,
                                 default = nil)
  if valid_610406 != nil:
    section.add "X-Amz-Credential", valid_610406
  var valid_610407 = header.getOrDefault("X-Amz-Security-Token")
  valid_610407 = validateParameter(valid_610407, JString, required = false,
                                 default = nil)
  if valid_610407 != nil:
    section.add "X-Amz-Security-Token", valid_610407
  var valid_610408 = header.getOrDefault("X-Amz-Algorithm")
  valid_610408 = validateParameter(valid_610408, JString, required = false,
                                 default = nil)
  if valid_610408 != nil:
    section.add "X-Amz-Algorithm", valid_610408
  var valid_610409 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610409 = validateParameter(valid_610409, JString, required = false,
                                 default = nil)
  if valid_610409 != nil:
    section.add "X-Amz-SignedHeaders", valid_610409
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_610410 = formData.getOrDefault("DBInstanceIdentifier")
  valid_610410 = validateParameter(valid_610410, JString, required = true,
                                 default = nil)
  if valid_610410 != nil:
    section.add "DBInstanceIdentifier", valid_610410
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610411: Call_PostStartDBInstance_610398; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_610411.validator(path, query, header, formData, body)
  let scheme = call_610411.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610411.url(scheme.get, call_610411.host, call_610411.base,
                         call_610411.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610411, url, valid)

proc call*(call_610412: Call_PostStartDBInstance_610398;
          DBInstanceIdentifier: string; Action: string = "StartDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## postStartDBInstance
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610413 = newJObject()
  var formData_610414 = newJObject()
  add(formData_610414, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_610413, "Action", newJString(Action))
  add(query_610413, "Version", newJString(Version))
  result = call_610412.call(nil, query_610413, nil, formData_610414, nil)

var postStartDBInstance* = Call_PostStartDBInstance_610398(
    name: "postStartDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartDBInstance",
    validator: validate_PostStartDBInstance_610399, base: "/",
    url: url_PostStartDBInstance_610400, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartDBInstance_610382 = ref object of OpenApiRestCall_604389
proc url_GetStartDBInstance_610384(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartDBInstance_610383(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_610385 = query.getOrDefault("DBInstanceIdentifier")
  valid_610385 = validateParameter(valid_610385, JString, required = true,
                                 default = nil)
  if valid_610385 != nil:
    section.add "DBInstanceIdentifier", valid_610385
  var valid_610386 = query.getOrDefault("Action")
  valid_610386 = validateParameter(valid_610386, JString, required = true,
                                 default = newJString("StartDBInstance"))
  if valid_610386 != nil:
    section.add "Action", valid_610386
  var valid_610387 = query.getOrDefault("Version")
  valid_610387 = validateParameter(valid_610387, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610387 != nil:
    section.add "Version", valid_610387
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610388 = header.getOrDefault("X-Amz-Signature")
  valid_610388 = validateParameter(valid_610388, JString, required = false,
                                 default = nil)
  if valid_610388 != nil:
    section.add "X-Amz-Signature", valid_610388
  var valid_610389 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610389 = validateParameter(valid_610389, JString, required = false,
                                 default = nil)
  if valid_610389 != nil:
    section.add "X-Amz-Content-Sha256", valid_610389
  var valid_610390 = header.getOrDefault("X-Amz-Date")
  valid_610390 = validateParameter(valid_610390, JString, required = false,
                                 default = nil)
  if valid_610390 != nil:
    section.add "X-Amz-Date", valid_610390
  var valid_610391 = header.getOrDefault("X-Amz-Credential")
  valid_610391 = validateParameter(valid_610391, JString, required = false,
                                 default = nil)
  if valid_610391 != nil:
    section.add "X-Amz-Credential", valid_610391
  var valid_610392 = header.getOrDefault("X-Amz-Security-Token")
  valid_610392 = validateParameter(valid_610392, JString, required = false,
                                 default = nil)
  if valid_610392 != nil:
    section.add "X-Amz-Security-Token", valid_610392
  var valid_610393 = header.getOrDefault("X-Amz-Algorithm")
  valid_610393 = validateParameter(valid_610393, JString, required = false,
                                 default = nil)
  if valid_610393 != nil:
    section.add "X-Amz-Algorithm", valid_610393
  var valid_610394 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610394 = validateParameter(valid_610394, JString, required = false,
                                 default = nil)
  if valid_610394 != nil:
    section.add "X-Amz-SignedHeaders", valid_610394
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610395: Call_GetStartDBInstance_610382; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_610395.validator(path, query, header, formData, body)
  let scheme = call_610395.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610395.url(scheme.get, call_610395.host, call_610395.base,
                         call_610395.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610395, url, valid)

proc call*(call_610396: Call_GetStartDBInstance_610382;
          DBInstanceIdentifier: string; Action: string = "StartDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## getStartDBInstance
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610397 = newJObject()
  add(query_610397, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_610397, "Action", newJString(Action))
  add(query_610397, "Version", newJString(Version))
  result = call_610396.call(nil, query_610397, nil, nil, nil)

var getStartDBInstance* = Call_GetStartDBInstance_610382(
    name: "getStartDBInstance", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartDBInstance", validator: validate_GetStartDBInstance_610383,
    base: "/", url: url_GetStartDBInstance_610384,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopActivityStream_610432 = ref object of OpenApiRestCall_604389
proc url_PostStopActivityStream_610434(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStopActivityStream_610433(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610435 = query.getOrDefault("Action")
  valid_610435 = validateParameter(valid_610435, JString, required = true,
                                 default = newJString("StopActivityStream"))
  if valid_610435 != nil:
    section.add "Action", valid_610435
  var valid_610436 = query.getOrDefault("Version")
  valid_610436 = validateParameter(valid_610436, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610436 != nil:
    section.add "Version", valid_610436
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610437 = header.getOrDefault("X-Amz-Signature")
  valid_610437 = validateParameter(valid_610437, JString, required = false,
                                 default = nil)
  if valid_610437 != nil:
    section.add "X-Amz-Signature", valid_610437
  var valid_610438 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610438 = validateParameter(valid_610438, JString, required = false,
                                 default = nil)
  if valid_610438 != nil:
    section.add "X-Amz-Content-Sha256", valid_610438
  var valid_610439 = header.getOrDefault("X-Amz-Date")
  valid_610439 = validateParameter(valid_610439, JString, required = false,
                                 default = nil)
  if valid_610439 != nil:
    section.add "X-Amz-Date", valid_610439
  var valid_610440 = header.getOrDefault("X-Amz-Credential")
  valid_610440 = validateParameter(valid_610440, JString, required = false,
                                 default = nil)
  if valid_610440 != nil:
    section.add "X-Amz-Credential", valid_610440
  var valid_610441 = header.getOrDefault("X-Amz-Security-Token")
  valid_610441 = validateParameter(valid_610441, JString, required = false,
                                 default = nil)
  if valid_610441 != nil:
    section.add "X-Amz-Security-Token", valid_610441
  var valid_610442 = header.getOrDefault("X-Amz-Algorithm")
  valid_610442 = validateParameter(valid_610442, JString, required = false,
                                 default = nil)
  if valid_610442 != nil:
    section.add "X-Amz-Algorithm", valid_610442
  var valid_610443 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610443 = validateParameter(valid_610443, JString, required = false,
                                 default = nil)
  if valid_610443 != nil:
    section.add "X-Amz-SignedHeaders", valid_610443
  result.add "header", section
  ## parameters in `formData` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ResourceArn` field"
  var valid_610444 = formData.getOrDefault("ResourceArn")
  valid_610444 = validateParameter(valid_610444, JString, required = true,
                                 default = nil)
  if valid_610444 != nil:
    section.add "ResourceArn", valid_610444
  var valid_610445 = formData.getOrDefault("ApplyImmediately")
  valid_610445 = validateParameter(valid_610445, JBool, required = false, default = nil)
  if valid_610445 != nil:
    section.add "ApplyImmediately", valid_610445
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610446: Call_PostStopActivityStream_610432; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_610446.validator(path, query, header, formData, body)
  let scheme = call_610446.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610446.url(scheme.get, call_610446.host, call_610446.base,
                         call_610446.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610446, url, valid)

proc call*(call_610447: Call_PostStopActivityStream_610432; ResourceArn: string;
          ApplyImmediately: bool = false; Action: string = "StopActivityStream";
          Version: string = "2014-10-31"): Recallable =
  ## postStopActivityStream
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610448 = newJObject()
  var formData_610449 = newJObject()
  add(formData_610449, "ResourceArn", newJString(ResourceArn))
  add(formData_610449, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_610448, "Action", newJString(Action))
  add(query_610448, "Version", newJString(Version))
  result = call_610447.call(nil, query_610448, nil, formData_610449, nil)

var postStopActivityStream* = Call_PostStopActivityStream_610432(
    name: "postStopActivityStream", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StopActivityStream",
    validator: validate_PostStopActivityStream_610433, base: "/",
    url: url_PostStopActivityStream_610434, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopActivityStream_610415 = ref object of OpenApiRestCall_604389
proc url_GetStopActivityStream_610417(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStopActivityStream_610416(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode): JsonNode =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Action: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceArn` field"
  var valid_610418 = query.getOrDefault("ResourceArn")
  valid_610418 = validateParameter(valid_610418, JString, required = true,
                                 default = nil)
  if valid_610418 != nil:
    section.add "ResourceArn", valid_610418
  var valid_610419 = query.getOrDefault("Action")
  valid_610419 = validateParameter(valid_610419, JString, required = true,
                                 default = newJString("StopActivityStream"))
  if valid_610419 != nil:
    section.add "Action", valid_610419
  var valid_610420 = query.getOrDefault("ApplyImmediately")
  valid_610420 = validateParameter(valid_610420, JBool, required = false, default = nil)
  if valid_610420 != nil:
    section.add "ApplyImmediately", valid_610420
  var valid_610421 = query.getOrDefault("Version")
  valid_610421 = validateParameter(valid_610421, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610421 != nil:
    section.add "Version", valid_610421
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610422 = header.getOrDefault("X-Amz-Signature")
  valid_610422 = validateParameter(valid_610422, JString, required = false,
                                 default = nil)
  if valid_610422 != nil:
    section.add "X-Amz-Signature", valid_610422
  var valid_610423 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610423 = validateParameter(valid_610423, JString, required = false,
                                 default = nil)
  if valid_610423 != nil:
    section.add "X-Amz-Content-Sha256", valid_610423
  var valid_610424 = header.getOrDefault("X-Amz-Date")
  valid_610424 = validateParameter(valid_610424, JString, required = false,
                                 default = nil)
  if valid_610424 != nil:
    section.add "X-Amz-Date", valid_610424
  var valid_610425 = header.getOrDefault("X-Amz-Credential")
  valid_610425 = validateParameter(valid_610425, JString, required = false,
                                 default = nil)
  if valid_610425 != nil:
    section.add "X-Amz-Credential", valid_610425
  var valid_610426 = header.getOrDefault("X-Amz-Security-Token")
  valid_610426 = validateParameter(valid_610426, JString, required = false,
                                 default = nil)
  if valid_610426 != nil:
    section.add "X-Amz-Security-Token", valid_610426
  var valid_610427 = header.getOrDefault("X-Amz-Algorithm")
  valid_610427 = validateParameter(valid_610427, JString, required = false,
                                 default = nil)
  if valid_610427 != nil:
    section.add "X-Amz-Algorithm", valid_610427
  var valid_610428 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610428 = validateParameter(valid_610428, JString, required = false,
                                 default = nil)
  if valid_610428 != nil:
    section.add "X-Amz-SignedHeaders", valid_610428
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610429: Call_GetStopActivityStream_610415; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_610429.validator(path, query, header, formData, body)
  let scheme = call_610429.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610429.url(scheme.get, call_610429.host, call_610429.base,
                         call_610429.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610429, url, valid)

proc call*(call_610430: Call_GetStopActivityStream_610415; ResourceArn: string;
          Action: string = "StopActivityStream"; ApplyImmediately: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getStopActivityStream
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Action: string (required)
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Version: string (required)
  var query_610431 = newJObject()
  add(query_610431, "ResourceArn", newJString(ResourceArn))
  add(query_610431, "Action", newJString(Action))
  add(query_610431, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_610431, "Version", newJString(Version))
  result = call_610430.call(nil, query_610431, nil, nil, nil)

var getStopActivityStream* = Call_GetStopActivityStream_610415(
    name: "getStopActivityStream", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=StopActivityStream",
    validator: validate_GetStopActivityStream_610416, base: "/",
    url: url_GetStopActivityStream_610417, schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopDBCluster_610466 = ref object of OpenApiRestCall_604389
proc url_PostStopDBCluster_610468(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStopDBCluster_610467(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610469 = query.getOrDefault("Action")
  valid_610469 = validateParameter(valid_610469, JString, required = true,
                                 default = newJString("StopDBCluster"))
  if valid_610469 != nil:
    section.add "Action", valid_610469
  var valid_610470 = query.getOrDefault("Version")
  valid_610470 = validateParameter(valid_610470, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610470 != nil:
    section.add "Version", valid_610470
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610471 = header.getOrDefault("X-Amz-Signature")
  valid_610471 = validateParameter(valid_610471, JString, required = false,
                                 default = nil)
  if valid_610471 != nil:
    section.add "X-Amz-Signature", valid_610471
  var valid_610472 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610472 = validateParameter(valid_610472, JString, required = false,
                                 default = nil)
  if valid_610472 != nil:
    section.add "X-Amz-Content-Sha256", valid_610472
  var valid_610473 = header.getOrDefault("X-Amz-Date")
  valid_610473 = validateParameter(valid_610473, JString, required = false,
                                 default = nil)
  if valid_610473 != nil:
    section.add "X-Amz-Date", valid_610473
  var valid_610474 = header.getOrDefault("X-Amz-Credential")
  valid_610474 = validateParameter(valid_610474, JString, required = false,
                                 default = nil)
  if valid_610474 != nil:
    section.add "X-Amz-Credential", valid_610474
  var valid_610475 = header.getOrDefault("X-Amz-Security-Token")
  valid_610475 = validateParameter(valid_610475, JString, required = false,
                                 default = nil)
  if valid_610475 != nil:
    section.add "X-Amz-Security-Token", valid_610475
  var valid_610476 = header.getOrDefault("X-Amz-Algorithm")
  valid_610476 = validateParameter(valid_610476, JString, required = false,
                                 default = nil)
  if valid_610476 != nil:
    section.add "X-Amz-Algorithm", valid_610476
  var valid_610477 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610477 = validateParameter(valid_610477, JString, required = false,
                                 default = nil)
  if valid_610477 != nil:
    section.add "X-Amz-SignedHeaders", valid_610477
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_610478 = formData.getOrDefault("DBClusterIdentifier")
  valid_610478 = validateParameter(valid_610478, JString, required = true,
                                 default = nil)
  if valid_610478 != nil:
    section.add "DBClusterIdentifier", valid_610478
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610479: Call_PostStopDBCluster_610466; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_610479.validator(path, query, header, formData, body)
  let scheme = call_610479.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610479.url(scheme.get, call_610479.host, call_610479.base,
                         call_610479.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610479, url, valid)

proc call*(call_610480: Call_PostStopDBCluster_610466; DBClusterIdentifier: string;
          Action: string = "StopDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postStopDBCluster
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  var query_610481 = newJObject()
  var formData_610482 = newJObject()
  add(query_610481, "Action", newJString(Action))
  add(query_610481, "Version", newJString(Version))
  add(formData_610482, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  result = call_610480.call(nil, query_610481, nil, formData_610482, nil)

var postStopDBCluster* = Call_PostStopDBCluster_610466(name: "postStopDBCluster",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_PostStopDBCluster_610467,
    base: "/", url: url_PostStopDBCluster_610468,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopDBCluster_610450 = ref object of OpenApiRestCall_604389
proc url_GetStopDBCluster_610452(protocol: Scheme; host: string; base: string;
                                route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStopDBCluster_610451(path: JsonNode; query: JsonNode;
                                     header: JsonNode; formData: JsonNode;
                                     body: JsonNode): JsonNode =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_610453 = query.getOrDefault("DBClusterIdentifier")
  valid_610453 = validateParameter(valid_610453, JString, required = true,
                                 default = nil)
  if valid_610453 != nil:
    section.add "DBClusterIdentifier", valid_610453
  var valid_610454 = query.getOrDefault("Action")
  valid_610454 = validateParameter(valid_610454, JString, required = true,
                                 default = newJString("StopDBCluster"))
  if valid_610454 != nil:
    section.add "Action", valid_610454
  var valid_610455 = query.getOrDefault("Version")
  valid_610455 = validateParameter(valid_610455, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610455 != nil:
    section.add "Version", valid_610455
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610456 = header.getOrDefault("X-Amz-Signature")
  valid_610456 = validateParameter(valid_610456, JString, required = false,
                                 default = nil)
  if valid_610456 != nil:
    section.add "X-Amz-Signature", valid_610456
  var valid_610457 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610457 = validateParameter(valid_610457, JString, required = false,
                                 default = nil)
  if valid_610457 != nil:
    section.add "X-Amz-Content-Sha256", valid_610457
  var valid_610458 = header.getOrDefault("X-Amz-Date")
  valid_610458 = validateParameter(valid_610458, JString, required = false,
                                 default = nil)
  if valid_610458 != nil:
    section.add "X-Amz-Date", valid_610458
  var valid_610459 = header.getOrDefault("X-Amz-Credential")
  valid_610459 = validateParameter(valid_610459, JString, required = false,
                                 default = nil)
  if valid_610459 != nil:
    section.add "X-Amz-Credential", valid_610459
  var valid_610460 = header.getOrDefault("X-Amz-Security-Token")
  valid_610460 = validateParameter(valid_610460, JString, required = false,
                                 default = nil)
  if valid_610460 != nil:
    section.add "X-Amz-Security-Token", valid_610460
  var valid_610461 = header.getOrDefault("X-Amz-Algorithm")
  valid_610461 = validateParameter(valid_610461, JString, required = false,
                                 default = nil)
  if valid_610461 != nil:
    section.add "X-Amz-Algorithm", valid_610461
  var valid_610462 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610462 = validateParameter(valid_610462, JString, required = false,
                                 default = nil)
  if valid_610462 != nil:
    section.add "X-Amz-SignedHeaders", valid_610462
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610463: Call_GetStopDBCluster_610450; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_610463.validator(path, query, header, formData, body)
  let scheme = call_610463.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610463.url(scheme.get, call_610463.host, call_610463.base,
                         call_610463.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610463, url, valid)

proc call*(call_610464: Call_GetStopDBCluster_610450; DBClusterIdentifier: string;
          Action: string = "StopDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getStopDBCluster
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610465 = newJObject()
  add(query_610465, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_610465, "Action", newJString(Action))
  add(query_610465, "Version", newJString(Version))
  result = call_610464.call(nil, query_610465, nil, nil, nil)

var getStopDBCluster* = Call_GetStopDBCluster_610450(name: "getStopDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_GetStopDBCluster_610451,
    base: "/", url: url_GetStopDBCluster_610452,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopDBInstance_610500 = ref object of OpenApiRestCall_604389
proc url_PostStopDBInstance_610502(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStopDBInstance_610501(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode): JsonNode =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Action` field"
  var valid_610503 = query.getOrDefault("Action")
  valid_610503 = validateParameter(valid_610503, JString, required = true,
                                 default = newJString("StopDBInstance"))
  if valid_610503 != nil:
    section.add "Action", valid_610503
  var valid_610504 = query.getOrDefault("Version")
  valid_610504 = validateParameter(valid_610504, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610504 != nil:
    section.add "Version", valid_610504
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610505 = header.getOrDefault("X-Amz-Signature")
  valid_610505 = validateParameter(valid_610505, JString, required = false,
                                 default = nil)
  if valid_610505 != nil:
    section.add "X-Amz-Signature", valid_610505
  var valid_610506 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610506 = validateParameter(valid_610506, JString, required = false,
                                 default = nil)
  if valid_610506 != nil:
    section.add "X-Amz-Content-Sha256", valid_610506
  var valid_610507 = header.getOrDefault("X-Amz-Date")
  valid_610507 = validateParameter(valid_610507, JString, required = false,
                                 default = nil)
  if valid_610507 != nil:
    section.add "X-Amz-Date", valid_610507
  var valid_610508 = header.getOrDefault("X-Amz-Credential")
  valid_610508 = validateParameter(valid_610508, JString, required = false,
                                 default = nil)
  if valid_610508 != nil:
    section.add "X-Amz-Credential", valid_610508
  var valid_610509 = header.getOrDefault("X-Amz-Security-Token")
  valid_610509 = validateParameter(valid_610509, JString, required = false,
                                 default = nil)
  if valid_610509 != nil:
    section.add "X-Amz-Security-Token", valid_610509
  var valid_610510 = header.getOrDefault("X-Amz-Algorithm")
  valid_610510 = validateParameter(valid_610510, JString, required = false,
                                 default = nil)
  if valid_610510 != nil:
    section.add "X-Amz-Algorithm", valid_610510
  var valid_610511 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610511 = validateParameter(valid_610511, JString, required = false,
                                 default = nil)
  if valid_610511 != nil:
    section.add "X-Amz-SignedHeaders", valid_610511
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: JString
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_610512 = formData.getOrDefault("DBInstanceIdentifier")
  valid_610512 = validateParameter(valid_610512, JString, required = true,
                                 default = nil)
  if valid_610512 != nil:
    section.add "DBInstanceIdentifier", valid_610512
  var valid_610513 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_610513 = validateParameter(valid_610513, JString, required = false,
                                 default = nil)
  if valid_610513 != nil:
    section.add "DBSnapshotIdentifier", valid_610513
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610514: Call_PostStopDBInstance_610500; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_610514.validator(path, query, header, formData, body)
  let scheme = call_610514.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610514.url(scheme.get, call_610514.host, call_610514.base,
                         call_610514.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610514, url, valid)

proc call*(call_610515: Call_PostStopDBInstance_610500;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string = "";
          Action: string = "StopDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postStopDBInstance
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: string
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610516 = newJObject()
  var formData_610517 = newJObject()
  add(formData_610517, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_610517, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_610516, "Action", newJString(Action))
  add(query_610516, "Version", newJString(Version))
  result = call_610515.call(nil, query_610516, nil, formData_610517, nil)

var postStopDBInstance* = Call_PostStopDBInstance_610500(
    name: "postStopDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StopDBInstance",
    validator: validate_PostStopDBInstance_610501, base: "/",
    url: url_PostStopDBInstance_610502, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopDBInstance_610483 = ref object of OpenApiRestCall_604389
proc url_GetStopDBInstance_610485(protocol: Scheme; host: string; base: string;
                                 route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base ==
      "/" and
      route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStopDBInstance_610484(path: JsonNode; query: JsonNode;
                                      header: JsonNode; formData: JsonNode;
                                      body: JsonNode): JsonNode =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: JString
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_610486 = query.getOrDefault("DBInstanceIdentifier")
  valid_610486 = validateParameter(valid_610486, JString, required = true,
                                 default = nil)
  if valid_610486 != nil:
    section.add "DBInstanceIdentifier", valid_610486
  var valid_610487 = query.getOrDefault("DBSnapshotIdentifier")
  valid_610487 = validateParameter(valid_610487, JString, required = false,
                                 default = nil)
  if valid_610487 != nil:
    section.add "DBSnapshotIdentifier", valid_610487
  var valid_610488 = query.getOrDefault("Action")
  valid_610488 = validateParameter(valid_610488, JString, required = true,
                                 default = newJString("StopDBInstance"))
  if valid_610488 != nil:
    section.add "Action", valid_610488
  var valid_610489 = query.getOrDefault("Version")
  valid_610489 = validateParameter(valid_610489, JString, required = true,
                                 default = newJString("2014-10-31"))
  if valid_610489 != nil:
    section.add "Version", valid_610489
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Signature: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Date: JString
  ##   X-Amz-Credential: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-SignedHeaders: JString
  section = newJObject()
  var valid_610490 = header.getOrDefault("X-Amz-Signature")
  valid_610490 = validateParameter(valid_610490, JString, required = false,
                                 default = nil)
  if valid_610490 != nil:
    section.add "X-Amz-Signature", valid_610490
  var valid_610491 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_610491 = validateParameter(valid_610491, JString, required = false,
                                 default = nil)
  if valid_610491 != nil:
    section.add "X-Amz-Content-Sha256", valid_610491
  var valid_610492 = header.getOrDefault("X-Amz-Date")
  valid_610492 = validateParameter(valid_610492, JString, required = false,
                                 default = nil)
  if valid_610492 != nil:
    section.add "X-Amz-Date", valid_610492
  var valid_610493 = header.getOrDefault("X-Amz-Credential")
  valid_610493 = validateParameter(valid_610493, JString, required = false,
                                 default = nil)
  if valid_610493 != nil:
    section.add "X-Amz-Credential", valid_610493
  var valid_610494 = header.getOrDefault("X-Amz-Security-Token")
  valid_610494 = validateParameter(valid_610494, JString, required = false,
                                 default = nil)
  if valid_610494 != nil:
    section.add "X-Amz-Security-Token", valid_610494
  var valid_610495 = header.getOrDefault("X-Amz-Algorithm")
  valid_610495 = validateParameter(valid_610495, JString, required = false,
                                 default = nil)
  if valid_610495 != nil:
    section.add "X-Amz-Algorithm", valid_610495
  var valid_610496 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_610496 = validateParameter(valid_610496, JString, required = false,
                                 default = nil)
  if valid_610496 != nil:
    section.add "X-Amz-SignedHeaders", valid_610496
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_610497: Call_GetStopDBInstance_610483; path: JsonNode;
          query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode): Recallable =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_610497.validator(path, query, header, formData, body)
  let scheme = call_610497.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let url = call_610497.url(scheme.get, call_610497.host, call_610497.base,
                         call_610497.route, valid.getOrDefault("path"),
                         valid.getOrDefault("query"))
  result = atozHook(call_610497, url, valid)

proc call*(call_610498: Call_GetStopDBInstance_610483;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string = "";
          Action: string = "StopDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getStopDBInstance
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: string
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_610499 = newJObject()
  add(query_610499, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_610499, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_610499, "Action", newJString(Action))
  add(query_610499, "Version", newJString(Version))
  result = call_610498.call(nil, query_610499, nil, nil, nil)

var getStopDBInstance* = Call_GetStopDBInstance_610483(name: "getStopDBInstance",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StopDBInstance", validator: validate_GetStopDBInstance_610484,
    base: "/", url: url_GetStopDBInstance_610485,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", "")
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", "")
    region = os.getEnv("AWS_REGION", "")
  assert secret != "", "need secret key in env"
  assert access != "", "need access key in env"
  assert region != "", "need region in env"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  let
    algo = SHA256
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode): Recallable {.base.} =
  let headers = massageHeaders(input.getOrDefault("header"))
  result = newRecallable(call, url, headers, input.getOrDefault("body").getStr)
  result.atozSign(input.getOrDefault("query"), SHA256)
