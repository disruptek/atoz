
import
  json, options, hashes, uri, strutils, tables, rest, os, uri, strutils, md5, base64,
  httpcore, sigv4

## auto-generated via openapi macro
## title: Amazon Relational Database Service
## version: 2014-10-31
## termsOfService: https://aws.amazon.com/service-terms/
## license:
##     name: Apache 2.0 License
##     url: http://www.apache.org/licenses/
## 
## <fullname>Amazon Relational Database Service</fullname> <p> </p> <p>Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier to set up, operate, and scale a relational database in the cloud. It provides cost-efficient, resizeable capacity for an industry-standard relational database and manages common database administration tasks, freeing up developers to focus on what makes their applications and businesses unique.</p> <p>Amazon RDS gives you access to the capabilities of a MySQL, MariaDB, PostgreSQL, Microsoft SQL Server, Oracle, or Amazon Aurora database server. These capabilities mean that the code, applications, and tools you already use today with your existing databases work with Amazon RDS without modification. Amazon RDS automatically backs up your database and maintains the database software that powers your DB instance. Amazon RDS is flexible: you can scale your DB instance's compute resources and storage capacity to meet your application's demand. As with all Amazon Web Services, there are no up-front investments, and you pay only for the resources you use.</p> <p>This interface reference for Amazon RDS contains documentation for a programming or command line interface you can use to manage Amazon RDS. Amazon RDS is asynchronous, which means that some interfaces might require techniques such as polling or callback functions to determine when a command has been applied. In this reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot, or during the maintenance window. The reference structure is as follows, and we list following some related topics from the user guide.</p> <p> <b>Amazon RDS API Reference</b> </p> <ul> <li> <p>For the alphabetical list of API actions, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Operations.html">API Actions</a>.</p> </li> <li> <p>For the alphabetical list of data types, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Types.html">Data Types</a>.</p> </li> <li> <p>For a list of common query parameters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonParameters.html">Common Parameters</a>.</p> </li> <li> <p>For descriptions of the error codes, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonErrors.html">Common Errors</a>.</p> </li> </ul> <p> <b>Amazon RDS User Guide</b> </p> <ul> <li> <p>For a summary of the Amazon RDS interfaces, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html#Welcome.Interfaces">Available RDS Interfaces</a>.</p> </li> <li> <p>For more information about how to use the Query API, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Using_the_Query_API.html">Using the Query API</a>.</p> </li> </ul>
## 
## Amazon Web Services documentation
## https://docs.aws.amazon.com/rds/
type
  Scheme {.pure.} = enum
    Https = "https", Http = "http", Wss = "wss", Ws = "ws"
  ValidatorSignature = proc (path: JsonNode = nil; query: JsonNode = nil;
                          header: JsonNode = nil; formData: JsonNode = nil;
                          body: JsonNode = nil; _: string = ""): JsonNode
  OpenApiRestCall = ref object of RestCall
    validator*: ValidatorSignature
    route*: string
    base*: string
    host*: string
    schemes*: set[Scheme]
    makeUrl*: proc (protocol: Scheme; host: string; base: string; route: string;
                  path: JsonNode; query: JsonNode): Uri

  OpenApiRestCall_21625435 = ref object of OpenApiRestCall
proc hash(scheme: Scheme): Hash {.used.} =
  result = hash(ord(scheme))

proc clone[T: OpenApiRestCall_21625435](t: T): T {.used.} =
  result = T(name: t.name, meth: t.meth, host: t.host, base: t.base, route: t.route,
           schemes: t.schemes, validator: t.validator, url: t.url)

proc pickScheme(t: OpenApiRestCall_21625435): Option[Scheme] {.used.} =
  ## select a supported scheme from a set of candidates
  for scheme in Scheme.low .. Scheme.high:
    if scheme notin t.schemes:
      continue
    if scheme in [Scheme.Https, Scheme.Wss]:
      when defined(ssl):
        return some(scheme)
      else:
        continue
    return some(scheme)

proc validateParameter(js: JsonNode; kind: JsonNodeKind; required: bool;
                      default: JsonNode = nil): JsonNode =
  ## ensure an input is of the correct json type and yield
  ## a suitable default value when appropriate
  if js == nil:
    if required:
      if default != nil:
        return validateParameter(default, kind, required = required)
  result = js
  if result == nil:
    assert not required, $kind & " expected; received nil"
    if required:
      result = newJNull()
  else:
    assert js.kind == kind, $kind & " expected; received " & $js.kind

type
  KeyVal {.used.} = tuple[key: string, val: string]
  PathTokenKind = enum
    ConstantSegment, VariableSegment
  PathToken = tuple[kind: PathTokenKind, value: string]
proc queryString(query: JsonNode): string {.used.} =
  var qs: seq[KeyVal]
  if query == nil:
    return ""
  for k, v in query.pairs:
    qs.add (key: k, val: v.getStr)
  result = encodeQuery(qs)

proc hydratePath(input: JsonNode; segments: seq[PathToken]): Option[string] {.used.} =
  ## reconstitute a path with constants and variable values taken from json
  var head: string
  if segments.len == 0:
    return some("")
  head = segments[0].value
  case segments[0].kind
  of ConstantSegment:
    discard
  of VariableSegment:
    if head notin input:
      return
    let js = input[head]
    case js.kind
    of JInt, JFloat, JNull, JBool:
      head = $js
    of JString:
      head = js.getStr
    else:
      return
  var remainder = input.hydratePath(segments[1 ..^ 1])
  if remainder.isNone:
    return
  result = some(head & remainder.get)

const
  awsServers = {Scheme.Http: {"ap-northeast-1": "rds.ap-northeast-1.amazonaws.com", "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
                           "us-west-2": "rds.us-west-2.amazonaws.com",
                           "eu-west-2": "rds.eu-west-2.amazonaws.com", "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
                           "eu-central-1": "rds.eu-central-1.amazonaws.com",
                           "us-east-2": "rds.us-east-2.amazonaws.com",
                           "us-east-1": "rds.us-east-1.amazonaws.com", "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
                           "ap-south-1": "rds.ap-south-1.amazonaws.com",
                           "eu-north-1": "rds.eu-north-1.amazonaws.com", "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
                           "us-west-1": "rds.us-west-1.amazonaws.com",
                           "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
                           "eu-west-3": "rds.eu-west-3.amazonaws.com",
                           "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
                           "sa-east-1": "rds.sa-east-1.amazonaws.com",
                           "eu-west-1": "rds.eu-west-1.amazonaws.com",
                           "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com", "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
                           "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable, Scheme.Https: {
      "ap-northeast-1": "rds.ap-northeast-1.amazonaws.com",
      "ap-southeast-1": "rds.ap-southeast-1.amazonaws.com",
      "us-west-2": "rds.us-west-2.amazonaws.com",
      "eu-west-2": "rds.eu-west-2.amazonaws.com",
      "ap-northeast-3": "rds.ap-northeast-3.amazonaws.com",
      "eu-central-1": "rds.eu-central-1.amazonaws.com",
      "us-east-2": "rds.us-east-2.amazonaws.com",
      "us-east-1": "rds.us-east-1.amazonaws.com",
      "cn-northwest-1": "rds.cn-northwest-1.amazonaws.com.cn",
      "ap-south-1": "rds.ap-south-1.amazonaws.com",
      "eu-north-1": "rds.eu-north-1.amazonaws.com",
      "ap-northeast-2": "rds.ap-northeast-2.amazonaws.com",
      "us-west-1": "rds.us-west-1.amazonaws.com",
      "us-gov-east-1": "rds.us-gov-east-1.amazonaws.com",
      "eu-west-3": "rds.eu-west-3.amazonaws.com",
      "cn-north-1": "rds.cn-north-1.amazonaws.com.cn",
      "sa-east-1": "rds.sa-east-1.amazonaws.com",
      "eu-west-1": "rds.eu-west-1.amazonaws.com",
      "us-gov-west-1": "rds.us-gov-west-1.amazonaws.com",
      "ap-southeast-2": "rds.ap-southeast-2.amazonaws.com",
      "ca-central-1": "rds.ca-central-1.amazonaws.com"}.toTable}.toTable
const
  awsServiceName = "rds"
method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode; body: string = ""): Recallable {.
    base.}
type
  Call_PostAddRoleToDBCluster_21626037 = ref object of OpenApiRestCall_21625435
proc url_PostAddRoleToDBCluster_21626039(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddRoleToDBCluster_21626038(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626040 = query.getOrDefault("Action")
  valid_21626040 = validateParameter(valid_21626040, JString, required = true,
                                   default = newJString("AddRoleToDBCluster"))
  if valid_21626040 != nil:
    section.add "Action", valid_21626040
  var valid_21626041 = query.getOrDefault("Version")
  valid_21626041 = validateParameter(valid_21626041, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626041 != nil:
    section.add "Version", valid_21626041
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626042 = header.getOrDefault("X-Amz-Date")
  valid_21626042 = validateParameter(valid_21626042, JString, required = false,
                                   default = nil)
  if valid_21626042 != nil:
    section.add "X-Amz-Date", valid_21626042
  var valid_21626043 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626043 = validateParameter(valid_21626043, JString, required = false,
                                   default = nil)
  if valid_21626043 != nil:
    section.add "X-Amz-Security-Token", valid_21626043
  var valid_21626044 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626044 = validateParameter(valid_21626044, JString, required = false,
                                   default = nil)
  if valid_21626044 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626044
  var valid_21626045 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626045 = validateParameter(valid_21626045, JString, required = false,
                                   default = nil)
  if valid_21626045 != nil:
    section.add "X-Amz-Algorithm", valid_21626045
  var valid_21626046 = header.getOrDefault("X-Amz-Signature")
  valid_21626046 = validateParameter(valid_21626046, JString, required = false,
                                   default = nil)
  if valid_21626046 != nil:
    section.add "X-Amz-Signature", valid_21626046
  var valid_21626047 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626047 = validateParameter(valid_21626047, JString, required = false,
                                   default = nil)
  if valid_21626047 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626047
  var valid_21626048 = header.getOrDefault("X-Amz-Credential")
  valid_21626048 = validateParameter(valid_21626048, JString, required = false,
                                   default = nil)
  if valid_21626048 != nil:
    section.add "X-Amz-Credential", valid_21626048
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_21626049 = formData.getOrDefault("RoleArn")
  valid_21626049 = validateParameter(valid_21626049, JString, required = true,
                                   default = nil)
  if valid_21626049 != nil:
    section.add "RoleArn", valid_21626049
  var valid_21626050 = formData.getOrDefault("DBClusterIdentifier")
  valid_21626050 = validateParameter(valid_21626050, JString, required = true,
                                   default = nil)
  if valid_21626050 != nil:
    section.add "DBClusterIdentifier", valid_21626050
  var valid_21626051 = formData.getOrDefault("FeatureName")
  valid_21626051 = validateParameter(valid_21626051, JString, required = false,
                                   default = nil)
  if valid_21626051 != nil:
    section.add "FeatureName", valid_21626051
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626052: Call_PostAddRoleToDBCluster_21626037;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21626052.validator(path, query, header, formData, body, _)
  let scheme = call_21626052.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626052.makeUrl(scheme.get, call_21626052.host, call_21626052.base,
                               call_21626052.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626052, uri, valid, _)

proc call*(call_21626053: Call_PostAddRoleToDBCluster_21626037; RoleArn: string;
          DBClusterIdentifier: string; Action: string = "AddRoleToDBCluster";
          Version: string = "2014-10-31"; FeatureName: string = ""): Recallable =
  ## postAddRoleToDBCluster
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   Version: string (required)
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  var query_21626054 = newJObject()
  var formData_21626055 = newJObject()
  add(formData_21626055, "RoleArn", newJString(RoleArn))
  add(query_21626054, "Action", newJString(Action))
  add(formData_21626055, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21626054, "Version", newJString(Version))
  add(formData_21626055, "FeatureName", newJString(FeatureName))
  result = call_21626053.call(nil, query_21626054, nil, formData_21626055, nil)

var postAddRoleToDBCluster* = Call_PostAddRoleToDBCluster_21626037(
    name: "postAddRoleToDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_PostAddRoleToDBCluster_21626038, base: "/",
    makeUrl: url_PostAddRoleToDBCluster_21626039,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBCluster_21625779 = ref object of OpenApiRestCall_21625435
proc url_GetAddRoleToDBCluster_21625781(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddRoleToDBCluster_21625780(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: JString (required)
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21625882 = query.getOrDefault("DBClusterIdentifier")
  valid_21625882 = validateParameter(valid_21625882, JString, required = true,
                                   default = nil)
  if valid_21625882 != nil:
    section.add "DBClusterIdentifier", valid_21625882
  var valid_21625883 = query.getOrDefault("RoleArn")
  valid_21625883 = validateParameter(valid_21625883, JString, required = true,
                                   default = nil)
  if valid_21625883 != nil:
    section.add "RoleArn", valid_21625883
  var valid_21625898 = query.getOrDefault("Action")
  valid_21625898 = validateParameter(valid_21625898, JString, required = true,
                                   default = newJString("AddRoleToDBCluster"))
  if valid_21625898 != nil:
    section.add "Action", valid_21625898
  var valid_21625899 = query.getOrDefault("FeatureName")
  valid_21625899 = validateParameter(valid_21625899, JString, required = false,
                                   default = nil)
  if valid_21625899 != nil:
    section.add "FeatureName", valid_21625899
  var valid_21625900 = query.getOrDefault("Version")
  valid_21625900 = validateParameter(valid_21625900, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21625900 != nil:
    section.add "Version", valid_21625900
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21625901 = header.getOrDefault("X-Amz-Date")
  valid_21625901 = validateParameter(valid_21625901, JString, required = false,
                                   default = nil)
  if valid_21625901 != nil:
    section.add "X-Amz-Date", valid_21625901
  var valid_21625902 = header.getOrDefault("X-Amz-Security-Token")
  valid_21625902 = validateParameter(valid_21625902, JString, required = false,
                                   default = nil)
  if valid_21625902 != nil:
    section.add "X-Amz-Security-Token", valid_21625902
  var valid_21625903 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21625903 = validateParameter(valid_21625903, JString, required = false,
                                   default = nil)
  if valid_21625903 != nil:
    section.add "X-Amz-Content-Sha256", valid_21625903
  var valid_21625904 = header.getOrDefault("X-Amz-Algorithm")
  valid_21625904 = validateParameter(valid_21625904, JString, required = false,
                                   default = nil)
  if valid_21625904 != nil:
    section.add "X-Amz-Algorithm", valid_21625904
  var valid_21625905 = header.getOrDefault("X-Amz-Signature")
  valid_21625905 = validateParameter(valid_21625905, JString, required = false,
                                   default = nil)
  if valid_21625905 != nil:
    section.add "X-Amz-Signature", valid_21625905
  var valid_21625906 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21625906 = validateParameter(valid_21625906, JString, required = false,
                                   default = nil)
  if valid_21625906 != nil:
    section.add "X-Amz-SignedHeaders", valid_21625906
  var valid_21625907 = header.getOrDefault("X-Amz-Credential")
  valid_21625907 = validateParameter(valid_21625907, JString, required = false,
                                   default = nil)
  if valid_21625907 != nil:
    section.add "X-Amz-Credential", valid_21625907
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21625932: Call_GetAddRoleToDBCluster_21625779;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21625932.validator(path, query, header, formData, body, _)
  let scheme = call_21625932.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21625932.makeUrl(scheme.get, call_21625932.host, call_21625932.base,
                               call_21625932.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21625932, uri, valid, _)

proc call*(call_21625995: Call_GetAddRoleToDBCluster_21625779;
          DBClusterIdentifier: string; RoleArn: string;
          Action: string = "AddRoleToDBCluster"; FeatureName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBCluster
  ## <p>Associates an Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to associate the IAM role with.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Version: string (required)
  var query_21625997 = newJObject()
  add(query_21625997, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21625997, "RoleArn", newJString(RoleArn))
  add(query_21625997, "Action", newJString(Action))
  add(query_21625997, "FeatureName", newJString(FeatureName))
  add(query_21625997, "Version", newJString(Version))
  result = call_21625995.call(nil, query_21625997, nil, nil, nil)

var getAddRoleToDBCluster* = Call_GetAddRoleToDBCluster_21625779(
    name: "getAddRoleToDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBCluster",
    validator: validate_GetAddRoleToDBCluster_21625780, base: "/",
    makeUrl: url_GetAddRoleToDBCluster_21625781,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddRoleToDBInstance_21626074 = ref object of OpenApiRestCall_21625435
proc url_PostAddRoleToDBInstance_21626076(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddRoleToDBInstance_21626075(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626077 = query.getOrDefault("Action")
  valid_21626077 = validateParameter(valid_21626077, JString, required = true,
                                   default = newJString("AddRoleToDBInstance"))
  if valid_21626077 != nil:
    section.add "Action", valid_21626077
  var valid_21626078 = query.getOrDefault("Version")
  valid_21626078 = validateParameter(valid_21626078, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626078 != nil:
    section.add "Version", valid_21626078
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626079 = header.getOrDefault("X-Amz-Date")
  valid_21626079 = validateParameter(valid_21626079, JString, required = false,
                                   default = nil)
  if valid_21626079 != nil:
    section.add "X-Amz-Date", valid_21626079
  var valid_21626080 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626080 = validateParameter(valid_21626080, JString, required = false,
                                   default = nil)
  if valid_21626080 != nil:
    section.add "X-Amz-Security-Token", valid_21626080
  var valid_21626081 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626081 = validateParameter(valid_21626081, JString, required = false,
                                   default = nil)
  if valid_21626081 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626081
  var valid_21626082 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626082 = validateParameter(valid_21626082, JString, required = false,
                                   default = nil)
  if valid_21626082 != nil:
    section.add "X-Amz-Algorithm", valid_21626082
  var valid_21626083 = header.getOrDefault("X-Amz-Signature")
  valid_21626083 = validateParameter(valid_21626083, JString, required = false,
                                   default = nil)
  if valid_21626083 != nil:
    section.add "X-Amz-Signature", valid_21626083
  var valid_21626084 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626084 = validateParameter(valid_21626084, JString, required = false,
                                   default = nil)
  if valid_21626084 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626084
  var valid_21626085 = header.getOrDefault("X-Amz-Credential")
  valid_21626085 = validateParameter(valid_21626085, JString, required = false,
                                   default = nil)
  if valid_21626085 != nil:
    section.add "X-Amz-Credential", valid_21626085
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_21626086 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21626086 = validateParameter(valid_21626086, JString, required = true,
                                   default = nil)
  if valid_21626086 != nil:
    section.add "DBInstanceIdentifier", valid_21626086
  var valid_21626087 = formData.getOrDefault("RoleArn")
  valid_21626087 = validateParameter(valid_21626087, JString, required = true,
                                   default = nil)
  if valid_21626087 != nil:
    section.add "RoleArn", valid_21626087
  var valid_21626088 = formData.getOrDefault("FeatureName")
  valid_21626088 = validateParameter(valid_21626088, JString, required = true,
                                   default = nil)
  if valid_21626088 != nil:
    section.add "FeatureName", valid_21626088
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626089: Call_PostAddRoleToDBInstance_21626074;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  let valid = call_21626089.validator(path, query, header, formData, body, _)
  let scheme = call_21626089.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626089.makeUrl(scheme.get, call_21626089.host, call_21626089.base,
                               call_21626089.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626089, uri, valid, _)

proc call*(call_21626090: Call_PostAddRoleToDBInstance_21626074;
          DBInstanceIdentifier: string; RoleArn: string; FeatureName: string;
          Action: string = "AddRoleToDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postAddRoleToDBInstance
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  var query_21626091 = newJObject()
  var formData_21626092 = newJObject()
  add(formData_21626092, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_21626092, "RoleArn", newJString(RoleArn))
  add(query_21626091, "Action", newJString(Action))
  add(query_21626091, "Version", newJString(Version))
  add(formData_21626092, "FeatureName", newJString(FeatureName))
  result = call_21626090.call(nil, query_21626091, nil, formData_21626092, nil)

var postAddRoleToDBInstance* = Call_PostAddRoleToDBInstance_21626074(
    name: "postAddRoleToDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBInstance",
    validator: validate_PostAddRoleToDBInstance_21626075, base: "/",
    makeUrl: url_PostAddRoleToDBInstance_21626076,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddRoleToDBInstance_21626056 = ref object of OpenApiRestCall_21625435
proc url_GetAddRoleToDBInstance_21626058(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddRoleToDBInstance_21626057(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   Action: JString (required)
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_21626059 = query.getOrDefault("RoleArn")
  valid_21626059 = validateParameter(valid_21626059, JString, required = true,
                                   default = nil)
  if valid_21626059 != nil:
    section.add "RoleArn", valid_21626059
  var valid_21626060 = query.getOrDefault("Action")
  valid_21626060 = validateParameter(valid_21626060, JString, required = true,
                                   default = newJString("AddRoleToDBInstance"))
  if valid_21626060 != nil:
    section.add "Action", valid_21626060
  var valid_21626061 = query.getOrDefault("FeatureName")
  valid_21626061 = validateParameter(valid_21626061, JString, required = true,
                                   default = nil)
  if valid_21626061 != nil:
    section.add "FeatureName", valid_21626061
  var valid_21626062 = query.getOrDefault("Version")
  valid_21626062 = validateParameter(valid_21626062, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626062 != nil:
    section.add "Version", valid_21626062
  var valid_21626063 = query.getOrDefault("DBInstanceIdentifier")
  valid_21626063 = validateParameter(valid_21626063, JString, required = true,
                                   default = nil)
  if valid_21626063 != nil:
    section.add "DBInstanceIdentifier", valid_21626063
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626064 = header.getOrDefault("X-Amz-Date")
  valid_21626064 = validateParameter(valid_21626064, JString, required = false,
                                   default = nil)
  if valid_21626064 != nil:
    section.add "X-Amz-Date", valid_21626064
  var valid_21626065 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626065 = validateParameter(valid_21626065, JString, required = false,
                                   default = nil)
  if valid_21626065 != nil:
    section.add "X-Amz-Security-Token", valid_21626065
  var valid_21626066 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626066 = validateParameter(valid_21626066, JString, required = false,
                                   default = nil)
  if valid_21626066 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626066
  var valid_21626067 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626067 = validateParameter(valid_21626067, JString, required = false,
                                   default = nil)
  if valid_21626067 != nil:
    section.add "X-Amz-Algorithm", valid_21626067
  var valid_21626068 = header.getOrDefault("X-Amz-Signature")
  valid_21626068 = validateParameter(valid_21626068, JString, required = false,
                                   default = nil)
  if valid_21626068 != nil:
    section.add "X-Amz-Signature", valid_21626068
  var valid_21626069 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626069 = validateParameter(valid_21626069, JString, required = false,
                                   default = nil)
  if valid_21626069 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626069
  var valid_21626070 = header.getOrDefault("X-Amz-Credential")
  valid_21626070 = validateParameter(valid_21626070, JString, required = false,
                                   default = nil)
  if valid_21626070 != nil:
    section.add "X-Amz-Credential", valid_21626070
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626071: Call_GetAddRoleToDBInstance_21626056;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ## 
  let valid = call_21626071.validator(path, query, header, formData, body, _)
  let scheme = call_21626071.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626071.makeUrl(scheme.get, call_21626071.host, call_21626071.base,
                               call_21626071.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626071, uri, valid, _)

proc call*(call_21626072: Call_GetAddRoleToDBInstance_21626056; RoleArn: string;
          FeatureName: string; DBInstanceIdentifier: string;
          Action: string = "AddRoleToDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## getAddRoleToDBInstance
  ## <p>Associates an AWS Identity and Access Management (IAM) role with a DB instance.</p> <note> <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>. 
  ##   Action: string (required)
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be associated with. For the list of supported feature names, see <a>DBEngineVersion</a>. 
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to associate the IAM role with.
  var query_21626073 = newJObject()
  add(query_21626073, "RoleArn", newJString(RoleArn))
  add(query_21626073, "Action", newJString(Action))
  add(query_21626073, "FeatureName", newJString(FeatureName))
  add(query_21626073, "Version", newJString(Version))
  add(query_21626073, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_21626072.call(nil, query_21626073, nil, nil, nil)

var getAddRoleToDBInstance* = Call_GetAddRoleToDBInstance_21626056(
    name: "getAddRoleToDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddRoleToDBInstance",
    validator: validate_GetAddRoleToDBInstance_21626057, base: "/",
    makeUrl: url_GetAddRoleToDBInstance_21626058,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddSourceIdentifierToSubscription_21626110 = ref object of OpenApiRestCall_21625435
proc url_PostAddSourceIdentifierToSubscription_21626112(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddSourceIdentifierToSubscription_21626111(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626113 = query.getOrDefault("Action")
  valid_21626113 = validateParameter(valid_21626113, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_21626113 != nil:
    section.add "Action", valid_21626113
  var valid_21626114 = query.getOrDefault("Version")
  valid_21626114 = validateParameter(valid_21626114, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626114 != nil:
    section.add "Version", valid_21626114
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626115 = header.getOrDefault("X-Amz-Date")
  valid_21626115 = validateParameter(valid_21626115, JString, required = false,
                                   default = nil)
  if valid_21626115 != nil:
    section.add "X-Amz-Date", valid_21626115
  var valid_21626116 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626116 = validateParameter(valid_21626116, JString, required = false,
                                   default = nil)
  if valid_21626116 != nil:
    section.add "X-Amz-Security-Token", valid_21626116
  var valid_21626117 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626117 = validateParameter(valid_21626117, JString, required = false,
                                   default = nil)
  if valid_21626117 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626117
  var valid_21626118 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626118 = validateParameter(valid_21626118, JString, required = false,
                                   default = nil)
  if valid_21626118 != nil:
    section.add "X-Amz-Algorithm", valid_21626118
  var valid_21626119 = header.getOrDefault("X-Amz-Signature")
  valid_21626119 = validateParameter(valid_21626119, JString, required = false,
                                   default = nil)
  if valid_21626119 != nil:
    section.add "X-Amz-Signature", valid_21626119
  var valid_21626120 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626120 = validateParameter(valid_21626120, JString, required = false,
                                   default = nil)
  if valid_21626120 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626120
  var valid_21626121 = header.getOrDefault("X-Amz-Credential")
  valid_21626121 = validateParameter(valid_21626121, JString, required = false,
                                   default = nil)
  if valid_21626121 != nil:
    section.add "X-Amz-Credential", valid_21626121
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceIdentifier` field"
  var valid_21626122 = formData.getOrDefault("SourceIdentifier")
  valid_21626122 = validateParameter(valid_21626122, JString, required = true,
                                   default = nil)
  if valid_21626122 != nil:
    section.add "SourceIdentifier", valid_21626122
  var valid_21626123 = formData.getOrDefault("SubscriptionName")
  valid_21626123 = validateParameter(valid_21626123, JString, required = true,
                                   default = nil)
  if valid_21626123 != nil:
    section.add "SubscriptionName", valid_21626123
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626124: Call_PostAddSourceIdentifierToSubscription_21626110;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  let valid = call_21626124.validator(path, query, header, formData, body, _)
  let scheme = call_21626124.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626124.makeUrl(scheme.get, call_21626124.host, call_21626124.base,
                               call_21626124.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626124, uri, valid, _)

proc call*(call_21626125: Call_PostAddSourceIdentifierToSubscription_21626110;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing RDS event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626126 = newJObject()
  var formData_21626127 = newJObject()
  add(formData_21626127, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_21626127, "SubscriptionName", newJString(SubscriptionName))
  add(query_21626126, "Action", newJString(Action))
  add(query_21626126, "Version", newJString(Version))
  result = call_21626125.call(nil, query_21626126, nil, formData_21626127, nil)

var postAddSourceIdentifierToSubscription* = Call_PostAddSourceIdentifierToSubscription_21626110(
    name: "postAddSourceIdentifierToSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_PostAddSourceIdentifierToSubscription_21626111, base: "/",
    makeUrl: url_PostAddSourceIdentifierToSubscription_21626112,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddSourceIdentifierToSubscription_21626093 = ref object of OpenApiRestCall_21625435
proc url_GetAddSourceIdentifierToSubscription_21626095(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddSourceIdentifierToSubscription_21626094(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SourceIdentifier: JString (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626096 = query.getOrDefault("Action")
  valid_21626096 = validateParameter(valid_21626096, JString, required = true, default = newJString(
      "AddSourceIdentifierToSubscription"))
  if valid_21626096 != nil:
    section.add "Action", valid_21626096
  var valid_21626097 = query.getOrDefault("SourceIdentifier")
  valid_21626097 = validateParameter(valid_21626097, JString, required = true,
                                   default = nil)
  if valid_21626097 != nil:
    section.add "SourceIdentifier", valid_21626097
  var valid_21626098 = query.getOrDefault("SubscriptionName")
  valid_21626098 = validateParameter(valid_21626098, JString, required = true,
                                   default = nil)
  if valid_21626098 != nil:
    section.add "SubscriptionName", valid_21626098
  var valid_21626099 = query.getOrDefault("Version")
  valid_21626099 = validateParameter(valid_21626099, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626099 != nil:
    section.add "Version", valid_21626099
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626100 = header.getOrDefault("X-Amz-Date")
  valid_21626100 = validateParameter(valid_21626100, JString, required = false,
                                   default = nil)
  if valid_21626100 != nil:
    section.add "X-Amz-Date", valid_21626100
  var valid_21626101 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626101 = validateParameter(valid_21626101, JString, required = false,
                                   default = nil)
  if valid_21626101 != nil:
    section.add "X-Amz-Security-Token", valid_21626101
  var valid_21626102 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626102 = validateParameter(valid_21626102, JString, required = false,
                                   default = nil)
  if valid_21626102 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626102
  var valid_21626103 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626103 = validateParameter(valid_21626103, JString, required = false,
                                   default = nil)
  if valid_21626103 != nil:
    section.add "X-Amz-Algorithm", valid_21626103
  var valid_21626104 = header.getOrDefault("X-Amz-Signature")
  valid_21626104 = validateParameter(valid_21626104, JString, required = false,
                                   default = nil)
  if valid_21626104 != nil:
    section.add "X-Amz-Signature", valid_21626104
  var valid_21626105 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626105 = validateParameter(valid_21626105, JString, required = false,
                                   default = nil)
  if valid_21626105 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626105
  var valid_21626106 = header.getOrDefault("X-Amz-Credential")
  valid_21626106 = validateParameter(valid_21626106, JString, required = false,
                                   default = nil)
  if valid_21626106 != nil:
    section.add "X-Amz-Credential", valid_21626106
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626107: Call_GetAddSourceIdentifierToSubscription_21626093;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Adds a source identifier to an existing RDS event notification subscription.
  ## 
  let valid = call_21626107.validator(path, query, header, formData, body, _)
  let scheme = call_21626107.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626107.makeUrl(scheme.get, call_21626107.host, call_21626107.base,
                               call_21626107.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626107, uri, valid, _)

proc call*(call_21626108: Call_GetAddSourceIdentifierToSubscription_21626093;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "AddSourceIdentifierToSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getAddSourceIdentifierToSubscription
  ## Adds a source identifier to an existing RDS event notification subscription.
  ##   Action: string (required)
  ##   SourceIdentifier: string (required)
  ##                   : <p>The identifier of the event source to be added.</p> <p>Constraints:</p> <ul> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to add a source identifier to.
  ##   Version: string (required)
  var query_21626109 = newJObject()
  add(query_21626109, "Action", newJString(Action))
  add(query_21626109, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_21626109, "SubscriptionName", newJString(SubscriptionName))
  add(query_21626109, "Version", newJString(Version))
  result = call_21626108.call(nil, query_21626109, nil, nil, nil)

var getAddSourceIdentifierToSubscription* = Call_GetAddSourceIdentifierToSubscription_21626093(
    name: "getAddSourceIdentifierToSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=AddSourceIdentifierToSubscription",
    validator: validate_GetAddSourceIdentifierToSubscription_21626094, base: "/",
    makeUrl: url_GetAddSourceIdentifierToSubscription_21626095,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAddTagsToResource_21626145 = ref object of OpenApiRestCall_21625435
proc url_PostAddTagsToResource_21626147(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAddTagsToResource_21626146(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626148 = query.getOrDefault("Action")
  valid_21626148 = validateParameter(valid_21626148, JString, required = true,
                                   default = newJString("AddTagsToResource"))
  if valid_21626148 != nil:
    section.add "Action", valid_21626148
  var valid_21626149 = query.getOrDefault("Version")
  valid_21626149 = validateParameter(valid_21626149, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626149 != nil:
    section.add "Version", valid_21626149
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626150 = header.getOrDefault("X-Amz-Date")
  valid_21626150 = validateParameter(valid_21626150, JString, required = false,
                                   default = nil)
  if valid_21626150 != nil:
    section.add "X-Amz-Date", valid_21626150
  var valid_21626151 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626151 = validateParameter(valid_21626151, JString, required = false,
                                   default = nil)
  if valid_21626151 != nil:
    section.add "X-Amz-Security-Token", valid_21626151
  var valid_21626152 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626152 = validateParameter(valid_21626152, JString, required = false,
                                   default = nil)
  if valid_21626152 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626152
  var valid_21626153 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626153 = validateParameter(valid_21626153, JString, required = false,
                                   default = nil)
  if valid_21626153 != nil:
    section.add "X-Amz-Algorithm", valid_21626153
  var valid_21626154 = header.getOrDefault("X-Amz-Signature")
  valid_21626154 = validateParameter(valid_21626154, JString, required = false,
                                   default = nil)
  if valid_21626154 != nil:
    section.add "X-Amz-Signature", valid_21626154
  var valid_21626155 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626155 = validateParameter(valid_21626155, JString, required = false,
                                   default = nil)
  if valid_21626155 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626155
  var valid_21626156 = header.getOrDefault("X-Amz-Credential")
  valid_21626156 = validateParameter(valid_21626156, JString, required = false,
                                   default = nil)
  if valid_21626156 != nil:
    section.add "X-Amz-Credential", valid_21626156
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Tags` field"
  var valid_21626157 = formData.getOrDefault("Tags")
  valid_21626157 = validateParameter(valid_21626157, JArray, required = true,
                                   default = nil)
  if valid_21626157 != nil:
    section.add "Tags", valid_21626157
  var valid_21626158 = formData.getOrDefault("ResourceName")
  valid_21626158 = validateParameter(valid_21626158, JString, required = true,
                                   default = nil)
  if valid_21626158 != nil:
    section.add "ResourceName", valid_21626158
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626159: Call_PostAddTagsToResource_21626145;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  let valid = call_21626159.validator(path, query, header, formData, body, _)
  let scheme = call_21626159.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626159.makeUrl(scheme.get, call_21626159.host, call_21626159.base,
                               call_21626159.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626159, uri, valid, _)

proc call*(call_21626160: Call_PostAddTagsToResource_21626145; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## postAddTagsToResource
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Version: string (required)
  var query_21626161 = newJObject()
  var formData_21626162 = newJObject()
  if Tags != nil:
    formData_21626162.add "Tags", Tags
  add(query_21626161, "Action", newJString(Action))
  add(formData_21626162, "ResourceName", newJString(ResourceName))
  add(query_21626161, "Version", newJString(Version))
  result = call_21626160.call(nil, query_21626161, nil, formData_21626162, nil)

var postAddTagsToResource* = Call_PostAddTagsToResource_21626145(
    name: "postAddTagsToResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_PostAddTagsToResource_21626146, base: "/",
    makeUrl: url_PostAddTagsToResource_21626147,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAddTagsToResource_21626128 = ref object of OpenApiRestCall_21625435
proc url_GetAddTagsToResource_21626130(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAddTagsToResource_21626129(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Tags` field"
  var valid_21626131 = query.getOrDefault("Tags")
  valid_21626131 = validateParameter(valid_21626131, JArray, required = true,
                                   default = nil)
  if valid_21626131 != nil:
    section.add "Tags", valid_21626131
  var valid_21626132 = query.getOrDefault("ResourceName")
  valid_21626132 = validateParameter(valid_21626132, JString, required = true,
                                   default = nil)
  if valid_21626132 != nil:
    section.add "ResourceName", valid_21626132
  var valid_21626133 = query.getOrDefault("Action")
  valid_21626133 = validateParameter(valid_21626133, JString, required = true,
                                   default = newJString("AddTagsToResource"))
  if valid_21626133 != nil:
    section.add "Action", valid_21626133
  var valid_21626134 = query.getOrDefault("Version")
  valid_21626134 = validateParameter(valid_21626134, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626134 != nil:
    section.add "Version", valid_21626134
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626135 = header.getOrDefault("X-Amz-Date")
  valid_21626135 = validateParameter(valid_21626135, JString, required = false,
                                   default = nil)
  if valid_21626135 != nil:
    section.add "X-Amz-Date", valid_21626135
  var valid_21626136 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626136 = validateParameter(valid_21626136, JString, required = false,
                                   default = nil)
  if valid_21626136 != nil:
    section.add "X-Amz-Security-Token", valid_21626136
  var valid_21626137 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626137 = validateParameter(valid_21626137, JString, required = false,
                                   default = nil)
  if valid_21626137 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626137
  var valid_21626138 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626138 = validateParameter(valid_21626138, JString, required = false,
                                   default = nil)
  if valid_21626138 != nil:
    section.add "X-Amz-Algorithm", valid_21626138
  var valid_21626139 = header.getOrDefault("X-Amz-Signature")
  valid_21626139 = validateParameter(valid_21626139, JString, required = false,
                                   default = nil)
  if valid_21626139 != nil:
    section.add "X-Amz-Signature", valid_21626139
  var valid_21626140 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626140 = validateParameter(valid_21626140, JString, required = false,
                                   default = nil)
  if valid_21626140 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626140
  var valid_21626141 = header.getOrDefault("X-Amz-Credential")
  valid_21626141 = validateParameter(valid_21626141, JString, required = false,
                                   default = nil)
  if valid_21626141 != nil:
    section.add "X-Amz-Credential", valid_21626141
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626142: Call_GetAddTagsToResource_21626128; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ## 
  let valid = call_21626142.validator(path, query, header, formData, body, _)
  let scheme = call_21626142.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626142.makeUrl(scheme.get, call_21626142.host, call_21626142.base,
                               call_21626142.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626142, uri, valid, _)

proc call*(call_21626143: Call_GetAddTagsToResource_21626128; Tags: JsonNode;
          ResourceName: string; Action: string = "AddTagsToResource";
          Version: string = "2014-10-31"): Recallable =
  ## getAddTagsToResource
  ## <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p> <p>For an overview on tagging Amazon RDS resources, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
  ##   Tags: JArray (required)
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626144 = newJObject()
  if Tags != nil:
    query_21626144.add "Tags", Tags
  add(query_21626144, "ResourceName", newJString(ResourceName))
  add(query_21626144, "Action", newJString(Action))
  add(query_21626144, "Version", newJString(Version))
  result = call_21626143.call(nil, query_21626144, nil, nil, nil)

var getAddTagsToResource* = Call_GetAddTagsToResource_21626128(
    name: "getAddTagsToResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AddTagsToResource",
    validator: validate_GetAddTagsToResource_21626129, base: "/",
    makeUrl: url_GetAddTagsToResource_21626130,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostApplyPendingMaintenanceAction_21626181 = ref object of OpenApiRestCall_21625435
proc url_PostApplyPendingMaintenanceAction_21626183(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostApplyPendingMaintenanceAction_21626182(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626184 = query.getOrDefault("Action")
  valid_21626184 = validateParameter(valid_21626184, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_21626184 != nil:
    section.add "Action", valid_21626184
  var valid_21626185 = query.getOrDefault("Version")
  valid_21626185 = validateParameter(valid_21626185, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626185 != nil:
    section.add "Version", valid_21626185
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626186 = header.getOrDefault("X-Amz-Date")
  valid_21626186 = validateParameter(valid_21626186, JString, required = false,
                                   default = nil)
  if valid_21626186 != nil:
    section.add "X-Amz-Date", valid_21626186
  var valid_21626187 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626187 = validateParameter(valid_21626187, JString, required = false,
                                   default = nil)
  if valid_21626187 != nil:
    section.add "X-Amz-Security-Token", valid_21626187
  var valid_21626188 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626188 = validateParameter(valid_21626188, JString, required = false,
                                   default = nil)
  if valid_21626188 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626188
  var valid_21626189 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626189 = validateParameter(valid_21626189, JString, required = false,
                                   default = nil)
  if valid_21626189 != nil:
    section.add "X-Amz-Algorithm", valid_21626189
  var valid_21626190 = header.getOrDefault("X-Amz-Signature")
  valid_21626190 = validateParameter(valid_21626190, JString, required = false,
                                   default = nil)
  if valid_21626190 != nil:
    section.add "X-Amz-Signature", valid_21626190
  var valid_21626191 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626191 = validateParameter(valid_21626191, JString, required = false,
                                   default = nil)
  if valid_21626191 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626191
  var valid_21626192 = header.getOrDefault("X-Amz-Credential")
  valid_21626192 = validateParameter(valid_21626192, JString, required = false,
                                   default = nil)
  if valid_21626192 != nil:
    section.add "X-Amz-Credential", valid_21626192
  result.add "header", section
  ## parameters in `formData` object:
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   ResourceIdentifier: JString (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `ApplyAction` field"
  var valid_21626193 = formData.getOrDefault("ApplyAction")
  valid_21626193 = validateParameter(valid_21626193, JString, required = true,
                                   default = nil)
  if valid_21626193 != nil:
    section.add "ApplyAction", valid_21626193
  var valid_21626194 = formData.getOrDefault("ResourceIdentifier")
  valid_21626194 = validateParameter(valid_21626194, JString, required = true,
                                   default = nil)
  if valid_21626194 != nil:
    section.add "ResourceIdentifier", valid_21626194
  var valid_21626195 = formData.getOrDefault("OptInType")
  valid_21626195 = validateParameter(valid_21626195, JString, required = true,
                                   default = nil)
  if valid_21626195 != nil:
    section.add "OptInType", valid_21626195
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626196: Call_PostApplyPendingMaintenanceAction_21626181;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_21626196.validator(path, query, header, formData, body, _)
  let scheme = call_21626196.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626196.makeUrl(scheme.get, call_21626196.host, call_21626196.base,
                               call_21626196.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626196, uri, valid, _)

proc call*(call_21626197: Call_PostApplyPendingMaintenanceAction_21626181;
          ApplyAction: string; ResourceIdentifier: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## postApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   Action: string (required)
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   ResourceIdentifier: string (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_21626198 = newJObject()
  var formData_21626199 = newJObject()
  add(query_21626198, "Action", newJString(Action))
  add(formData_21626199, "ApplyAction", newJString(ApplyAction))
  add(formData_21626199, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(formData_21626199, "OptInType", newJString(OptInType))
  add(query_21626198, "Version", newJString(Version))
  result = call_21626197.call(nil, query_21626198, nil, formData_21626199, nil)

var postApplyPendingMaintenanceAction* = Call_PostApplyPendingMaintenanceAction_21626181(
    name: "postApplyPendingMaintenanceAction", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_PostApplyPendingMaintenanceAction_21626182, base: "/",
    makeUrl: url_PostApplyPendingMaintenanceAction_21626183,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetApplyPendingMaintenanceAction_21626163 = ref object of OpenApiRestCall_21625435
proc url_GetApplyPendingMaintenanceAction_21626165(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetApplyPendingMaintenanceAction_21626164(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ApplyAction: JString (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   ResourceIdentifier: JString (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: JString (required)
  ##   OptInType: JString (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ApplyAction` field"
  var valid_21626166 = query.getOrDefault("ApplyAction")
  valid_21626166 = validateParameter(valid_21626166, JString, required = true,
                                   default = nil)
  if valid_21626166 != nil:
    section.add "ApplyAction", valid_21626166
  var valid_21626167 = query.getOrDefault("ResourceIdentifier")
  valid_21626167 = validateParameter(valid_21626167, JString, required = true,
                                   default = nil)
  if valid_21626167 != nil:
    section.add "ResourceIdentifier", valid_21626167
  var valid_21626168 = query.getOrDefault("Action")
  valid_21626168 = validateParameter(valid_21626168, JString, required = true, default = newJString(
      "ApplyPendingMaintenanceAction"))
  if valid_21626168 != nil:
    section.add "Action", valid_21626168
  var valid_21626169 = query.getOrDefault("OptInType")
  valid_21626169 = validateParameter(valid_21626169, JString, required = true,
                                   default = nil)
  if valid_21626169 != nil:
    section.add "OptInType", valid_21626169
  var valid_21626170 = query.getOrDefault("Version")
  valid_21626170 = validateParameter(valid_21626170, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626170 != nil:
    section.add "Version", valid_21626170
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626171 = header.getOrDefault("X-Amz-Date")
  valid_21626171 = validateParameter(valid_21626171, JString, required = false,
                                   default = nil)
  if valid_21626171 != nil:
    section.add "X-Amz-Date", valid_21626171
  var valid_21626172 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626172 = validateParameter(valid_21626172, JString, required = false,
                                   default = nil)
  if valid_21626172 != nil:
    section.add "X-Amz-Security-Token", valid_21626172
  var valid_21626173 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626173 = validateParameter(valid_21626173, JString, required = false,
                                   default = nil)
  if valid_21626173 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626173
  var valid_21626174 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626174 = validateParameter(valid_21626174, JString, required = false,
                                   default = nil)
  if valid_21626174 != nil:
    section.add "X-Amz-Algorithm", valid_21626174
  var valid_21626175 = header.getOrDefault("X-Amz-Signature")
  valid_21626175 = validateParameter(valid_21626175, JString, required = false,
                                   default = nil)
  if valid_21626175 != nil:
    section.add "X-Amz-Signature", valid_21626175
  var valid_21626176 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626176 = validateParameter(valid_21626176, JString, required = false,
                                   default = nil)
  if valid_21626176 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626176
  var valid_21626177 = header.getOrDefault("X-Amz-Credential")
  valid_21626177 = validateParameter(valid_21626177, JString, required = false,
                                   default = nil)
  if valid_21626177 != nil:
    section.add "X-Amz-Credential", valid_21626177
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626178: Call_GetApplyPendingMaintenanceAction_21626163;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ## 
  let valid = call_21626178.validator(path, query, header, formData, body, _)
  let scheme = call_21626178.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626178.makeUrl(scheme.get, call_21626178.host, call_21626178.base,
                               call_21626178.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626178, uri, valid, _)

proc call*(call_21626179: Call_GetApplyPendingMaintenanceAction_21626163;
          ApplyAction: string; ResourceIdentifier: string; OptInType: string;
          Action: string = "ApplyPendingMaintenanceAction";
          Version: string = "2014-10-31"): Recallable =
  ## getApplyPendingMaintenanceAction
  ## Applies a pending maintenance action to a resource (for example, to a DB instance).
  ##   ApplyAction: string (required)
  ##              : <p>The pending maintenance action to apply to this resource.</p> <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
  ##   ResourceIdentifier: string (required)
  ##                     : The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.
  ##   Action: string (required)
  ##   OptInType: string (required)
  ##            : <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p> <p>Valid values:</p> <ul> <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li> <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li> <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li> </ul>
  ##   Version: string (required)
  var query_21626180 = newJObject()
  add(query_21626180, "ApplyAction", newJString(ApplyAction))
  add(query_21626180, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_21626180, "Action", newJString(Action))
  add(query_21626180, "OptInType", newJString(OptInType))
  add(query_21626180, "Version", newJString(Version))
  result = call_21626179.call(nil, query_21626180, nil, nil, nil)

var getApplyPendingMaintenanceAction* = Call_GetApplyPendingMaintenanceAction_21626163(
    name: "getApplyPendingMaintenanceAction", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ApplyPendingMaintenanceAction",
    validator: validate_GetApplyPendingMaintenanceAction_21626164, base: "/",
    makeUrl: url_GetApplyPendingMaintenanceAction_21626165,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostAuthorizeDBSecurityGroupIngress_21626220 = ref object of OpenApiRestCall_21625435
proc url_PostAuthorizeDBSecurityGroupIngress_21626222(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostAuthorizeDBSecurityGroupIngress_21626221(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626223 = query.getOrDefault("Action")
  valid_21626223 = validateParameter(valid_21626223, JString, required = true, default = newJString(
      "AuthorizeDBSecurityGroupIngress"))
  if valid_21626223 != nil:
    section.add "Action", valid_21626223
  var valid_21626224 = query.getOrDefault("Version")
  valid_21626224 = validateParameter(valid_21626224, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626224 != nil:
    section.add "Version", valid_21626224
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626225 = header.getOrDefault("X-Amz-Date")
  valid_21626225 = validateParameter(valid_21626225, JString, required = false,
                                   default = nil)
  if valid_21626225 != nil:
    section.add "X-Amz-Date", valid_21626225
  var valid_21626226 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626226 = validateParameter(valid_21626226, JString, required = false,
                                   default = nil)
  if valid_21626226 != nil:
    section.add "X-Amz-Security-Token", valid_21626226
  var valid_21626227 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626227 = validateParameter(valid_21626227, JString, required = false,
                                   default = nil)
  if valid_21626227 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626227
  var valid_21626228 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626228 = validateParameter(valid_21626228, JString, required = false,
                                   default = nil)
  if valid_21626228 != nil:
    section.add "X-Amz-Algorithm", valid_21626228
  var valid_21626229 = header.getOrDefault("X-Amz-Signature")
  valid_21626229 = validateParameter(valid_21626229, JString, required = false,
                                   default = nil)
  if valid_21626229 != nil:
    section.add "X-Amz-Signature", valid_21626229
  var valid_21626230 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626230 = validateParameter(valid_21626230, JString, required = false,
                                   default = nil)
  if valid_21626230 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626230
  var valid_21626231 = header.getOrDefault("X-Amz-Credential")
  valid_21626231 = validateParameter(valid_21626231, JString, required = false,
                                   default = nil)
  if valid_21626231 != nil:
    section.add "X-Amz-Credential", valid_21626231
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   EC2SecurityGroupName: JString
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: JString
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: JString
  ##         : The IP range to authorize.
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_21626232 = formData.getOrDefault("DBSecurityGroupName")
  valid_21626232 = validateParameter(valid_21626232, JString, required = true,
                                   default = nil)
  if valid_21626232 != nil:
    section.add "DBSecurityGroupName", valid_21626232
  var valid_21626233 = formData.getOrDefault("EC2SecurityGroupName")
  valid_21626233 = validateParameter(valid_21626233, JString, required = false,
                                   default = nil)
  if valid_21626233 != nil:
    section.add "EC2SecurityGroupName", valid_21626233
  var valid_21626234 = formData.getOrDefault("EC2SecurityGroupId")
  valid_21626234 = validateParameter(valid_21626234, JString, required = false,
                                   default = nil)
  if valid_21626234 != nil:
    section.add "EC2SecurityGroupId", valid_21626234
  var valid_21626235 = formData.getOrDefault("CIDRIP")
  valid_21626235 = validateParameter(valid_21626235, JString, required = false,
                                   default = nil)
  if valid_21626235 != nil:
    section.add "CIDRIP", valid_21626235
  var valid_21626236 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_21626236 = validateParameter(valid_21626236, JString, required = false,
                                   default = nil)
  if valid_21626236 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_21626236
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626237: Call_PostAuthorizeDBSecurityGroupIngress_21626220;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_21626237.validator(path, query, header, formData, body, _)
  let scheme = call_21626237.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626237.makeUrl(scheme.get, call_21626237.host, call_21626237.base,
                               call_21626237.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626237, uri, valid, _)

proc call*(call_21626238: Call_PostAuthorizeDBSecurityGroupIngress_21626220;
          DBSecurityGroupName: string;
          Action: string = "AuthorizeDBSecurityGroupIngress";
          EC2SecurityGroupName: string = ""; EC2SecurityGroupId: string = "";
          CIDRIP: string = ""; Version: string = "2014-10-31";
          EC2SecurityGroupOwnerId: string = ""): Recallable =
  ## postAuthorizeDBSecurityGroupIngress
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   Action: string (required)
  ##   EC2SecurityGroupName: string
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: string
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: string
  ##         : The IP range to authorize.
  ##   Version: string (required)
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  var query_21626239 = newJObject()
  var formData_21626240 = newJObject()
  add(formData_21626240, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_21626239, "Action", newJString(Action))
  add(formData_21626240, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_21626240, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(formData_21626240, "CIDRIP", newJString(CIDRIP))
  add(query_21626239, "Version", newJString(Version))
  add(formData_21626240, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  result = call_21626238.call(nil, query_21626239, nil, formData_21626240, nil)

var postAuthorizeDBSecurityGroupIngress* = Call_PostAuthorizeDBSecurityGroupIngress_21626220(
    name: "postAuthorizeDBSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=AuthorizeDBSecurityGroupIngress",
    validator: validate_PostAuthorizeDBSecurityGroupIngress_21626221, base: "/",
    makeUrl: url_PostAuthorizeDBSecurityGroupIngress_21626222,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetAuthorizeDBSecurityGroupIngress_21626200 = ref object of OpenApiRestCall_21625435
proc url_GetAuthorizeDBSecurityGroupIngress_21626202(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetAuthorizeDBSecurityGroupIngress_21626201(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupId: JString
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   Action: JString (required)
  ##   CIDRIP: JString
  ##         : The IP range to authorize.
  ##   EC2SecurityGroupName: JString
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626203 = query.getOrDefault("EC2SecurityGroupId")
  valid_21626203 = validateParameter(valid_21626203, JString, required = false,
                                   default = nil)
  if valid_21626203 != nil:
    section.add "EC2SecurityGroupId", valid_21626203
  var valid_21626204 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_21626204 = validateParameter(valid_21626204, JString, required = false,
                                   default = nil)
  if valid_21626204 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_21626204
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_21626205 = query.getOrDefault("DBSecurityGroupName")
  valid_21626205 = validateParameter(valid_21626205, JString, required = true,
                                   default = nil)
  if valid_21626205 != nil:
    section.add "DBSecurityGroupName", valid_21626205
  var valid_21626206 = query.getOrDefault("Action")
  valid_21626206 = validateParameter(valid_21626206, JString, required = true, default = newJString(
      "AuthorizeDBSecurityGroupIngress"))
  if valid_21626206 != nil:
    section.add "Action", valid_21626206
  var valid_21626207 = query.getOrDefault("CIDRIP")
  valid_21626207 = validateParameter(valid_21626207, JString, required = false,
                                   default = nil)
  if valid_21626207 != nil:
    section.add "CIDRIP", valid_21626207
  var valid_21626208 = query.getOrDefault("EC2SecurityGroupName")
  valid_21626208 = validateParameter(valid_21626208, JString, required = false,
                                   default = nil)
  if valid_21626208 != nil:
    section.add "EC2SecurityGroupName", valid_21626208
  var valid_21626209 = query.getOrDefault("Version")
  valid_21626209 = validateParameter(valid_21626209, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626209 != nil:
    section.add "Version", valid_21626209
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626210 = header.getOrDefault("X-Amz-Date")
  valid_21626210 = validateParameter(valid_21626210, JString, required = false,
                                   default = nil)
  if valid_21626210 != nil:
    section.add "X-Amz-Date", valid_21626210
  var valid_21626211 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626211 = validateParameter(valid_21626211, JString, required = false,
                                   default = nil)
  if valid_21626211 != nil:
    section.add "X-Amz-Security-Token", valid_21626211
  var valid_21626212 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626212 = validateParameter(valid_21626212, JString, required = false,
                                   default = nil)
  if valid_21626212 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626212
  var valid_21626213 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626213 = validateParameter(valid_21626213, JString, required = false,
                                   default = nil)
  if valid_21626213 != nil:
    section.add "X-Amz-Algorithm", valid_21626213
  var valid_21626214 = header.getOrDefault("X-Amz-Signature")
  valid_21626214 = validateParameter(valid_21626214, JString, required = false,
                                   default = nil)
  if valid_21626214 != nil:
    section.add "X-Amz-Signature", valid_21626214
  var valid_21626215 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626215 = validateParameter(valid_21626215, JString, required = false,
                                   default = nil)
  if valid_21626215 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626215
  var valid_21626216 = header.getOrDefault("X-Amz-Credential")
  valid_21626216 = validateParameter(valid_21626216, JString, required = false,
                                   default = nil)
  if valid_21626216 != nil:
    section.add "X-Amz-Credential", valid_21626216
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626217: Call_GetAuthorizeDBSecurityGroupIngress_21626200;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_21626217.validator(path, query, header, formData, body, _)
  let scheme = call_21626217.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626217.makeUrl(scheme.get, call_21626217.host, call_21626217.base,
                               call_21626217.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626217, uri, valid, _)

proc call*(call_21626218: Call_GetAuthorizeDBSecurityGroupIngress_21626200;
          DBSecurityGroupName: string; EC2SecurityGroupId: string = "";
          EC2SecurityGroupOwnerId: string = "";
          Action: string = "AuthorizeDBSecurityGroupIngress"; CIDRIP: string = "";
          EC2SecurityGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getAuthorizeDBSecurityGroupIngress
  ## <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC instances. Second, IP ranges are available if the application accessing your database is running on the Internet. Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p> <note> <p>You can't authorize ingress from an EC2 security group in one AWS Region to an Amazon RDS DB instance in another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p> </note> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   EC2SecurityGroupId: string
  ##                     :  Id of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to add authorization to.
  ##   Action: string (required)
  ##   CIDRIP: string
  ##         : The IP range to authorize.
  ##   EC2SecurityGroupName: string
  ##                       :  Name of the EC2 security group to authorize. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Version: string (required)
  var query_21626219 = newJObject()
  add(query_21626219, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(query_21626219, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(query_21626219, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_21626219, "Action", newJString(Action))
  add(query_21626219, "CIDRIP", newJString(CIDRIP))
  add(query_21626219, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_21626219, "Version", newJString(Version))
  result = call_21626218.call(nil, query_21626219, nil, nil, nil)

var getAuthorizeDBSecurityGroupIngress* = Call_GetAuthorizeDBSecurityGroupIngress_21626200(
    name: "getAuthorizeDBSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=AuthorizeDBSecurityGroupIngress",
    validator: validate_GetAuthorizeDBSecurityGroupIngress_21626201, base: "/",
    makeUrl: url_GetAuthorizeDBSecurityGroupIngress_21626202,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostBacktrackDBCluster_21626260 = ref object of OpenApiRestCall_21625435
proc url_PostBacktrackDBCluster_21626262(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostBacktrackDBCluster_21626261(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626263 = query.getOrDefault("Action")
  valid_21626263 = validateParameter(valid_21626263, JString, required = true,
                                   default = newJString("BacktrackDBCluster"))
  if valid_21626263 != nil:
    section.add "Action", valid_21626263
  var valid_21626264 = query.getOrDefault("Version")
  valid_21626264 = validateParameter(valid_21626264, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626264 != nil:
    section.add "Version", valid_21626264
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626265 = header.getOrDefault("X-Amz-Date")
  valid_21626265 = validateParameter(valid_21626265, JString, required = false,
                                   default = nil)
  if valid_21626265 != nil:
    section.add "X-Amz-Date", valid_21626265
  var valid_21626266 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626266 = validateParameter(valid_21626266, JString, required = false,
                                   default = nil)
  if valid_21626266 != nil:
    section.add "X-Amz-Security-Token", valid_21626266
  var valid_21626267 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626267 = validateParameter(valid_21626267, JString, required = false,
                                   default = nil)
  if valid_21626267 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626267
  var valid_21626268 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626268 = validateParameter(valid_21626268, JString, required = false,
                                   default = nil)
  if valid_21626268 != nil:
    section.add "X-Amz-Algorithm", valid_21626268
  var valid_21626269 = header.getOrDefault("X-Amz-Signature")
  valid_21626269 = validateParameter(valid_21626269, JString, required = false,
                                   default = nil)
  if valid_21626269 != nil:
    section.add "X-Amz-Signature", valid_21626269
  var valid_21626270 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626270 = validateParameter(valid_21626270, JString, required = false,
                                   default = nil)
  if valid_21626270 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626270
  var valid_21626271 = header.getOrDefault("X-Amz-Credential")
  valid_21626271 = validateParameter(valid_21626271, JString, required = false,
                                   default = nil)
  if valid_21626271 != nil:
    section.add "X-Amz-Credential", valid_21626271
  result.add "header", section
  ## parameters in `formData` object:
  ##   Force: JBool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   UseEarliestTimeOnPointInTimeUnavailable: JBool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   BacktrackTo: JString (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  var valid_21626272 = formData.getOrDefault("Force")
  valid_21626272 = validateParameter(valid_21626272, JBool, required = false,
                                   default = nil)
  if valid_21626272 != nil:
    section.add "Force", valid_21626272
  var valid_21626273 = formData.getOrDefault(
      "UseEarliestTimeOnPointInTimeUnavailable")
  valid_21626273 = validateParameter(valid_21626273, JBool, required = false,
                                   default = nil)
  if valid_21626273 != nil:
    section.add "UseEarliestTimeOnPointInTimeUnavailable", valid_21626273
  assert formData != nil,
        "formData argument is necessary due to required `BacktrackTo` field"
  var valid_21626274 = formData.getOrDefault("BacktrackTo")
  valid_21626274 = validateParameter(valid_21626274, JString, required = true,
                                   default = nil)
  if valid_21626274 != nil:
    section.add "BacktrackTo", valid_21626274
  var valid_21626275 = formData.getOrDefault("DBClusterIdentifier")
  valid_21626275 = validateParameter(valid_21626275, JString, required = true,
                                   default = nil)
  if valid_21626275 != nil:
    section.add "DBClusterIdentifier", valid_21626275
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626276: Call_PostBacktrackDBCluster_21626260;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21626276.validator(path, query, header, formData, body, _)
  let scheme = call_21626276.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626276.makeUrl(scheme.get, call_21626276.host, call_21626276.base,
                               call_21626276.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626276, uri, valid, _)

proc call*(call_21626277: Call_PostBacktrackDBCluster_21626260;
          BacktrackTo: string; DBClusterIdentifier: string; Force: bool = false;
          UseEarliestTimeOnPointInTimeUnavailable: bool = false;
          Action: string = "BacktrackDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## postBacktrackDBCluster
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Force: bool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  ##   UseEarliestTimeOnPointInTimeUnavailable: bool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   BacktrackTo: string (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Version: string (required)
  var query_21626278 = newJObject()
  var formData_21626279 = newJObject()
  add(formData_21626279, "Force", newJBool(Force))
  add(formData_21626279, "UseEarliestTimeOnPointInTimeUnavailable",
      newJBool(UseEarliestTimeOnPointInTimeUnavailable))
  add(formData_21626279, "BacktrackTo", newJString(BacktrackTo))
  add(query_21626278, "Action", newJString(Action))
  add(formData_21626279, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21626278, "Version", newJString(Version))
  result = call_21626277.call(nil, query_21626278, nil, formData_21626279, nil)

var postBacktrackDBCluster* = Call_PostBacktrackDBCluster_21626260(
    name: "postBacktrackDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=BacktrackDBCluster",
    validator: validate_PostBacktrackDBCluster_21626261, base: "/",
    makeUrl: url_PostBacktrackDBCluster_21626262,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetBacktrackDBCluster_21626241 = ref object of OpenApiRestCall_21625435
proc url_GetBacktrackDBCluster_21626243(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetBacktrackDBCluster_21626242(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   BacktrackTo: JString (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   UseEarliestTimeOnPointInTimeUnavailable: JBool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   Force: JBool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `BacktrackTo` field"
  var valid_21626244 = query.getOrDefault("BacktrackTo")
  valid_21626244 = validateParameter(valid_21626244, JString, required = true,
                                   default = nil)
  if valid_21626244 != nil:
    section.add "BacktrackTo", valid_21626244
  var valid_21626245 = query.getOrDefault("UseEarliestTimeOnPointInTimeUnavailable")
  valid_21626245 = validateParameter(valid_21626245, JBool, required = false,
                                   default = nil)
  if valid_21626245 != nil:
    section.add "UseEarliestTimeOnPointInTimeUnavailable", valid_21626245
  var valid_21626246 = query.getOrDefault("DBClusterIdentifier")
  valid_21626246 = validateParameter(valid_21626246, JString, required = true,
                                   default = nil)
  if valid_21626246 != nil:
    section.add "DBClusterIdentifier", valid_21626246
  var valid_21626247 = query.getOrDefault("Action")
  valid_21626247 = validateParameter(valid_21626247, JString, required = true,
                                   default = newJString("BacktrackDBCluster"))
  if valid_21626247 != nil:
    section.add "Action", valid_21626247
  var valid_21626248 = query.getOrDefault("Version")
  valid_21626248 = validateParameter(valid_21626248, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626248 != nil:
    section.add "Version", valid_21626248
  var valid_21626249 = query.getOrDefault("Force")
  valid_21626249 = validateParameter(valid_21626249, JBool, required = false,
                                   default = nil)
  if valid_21626249 != nil:
    section.add "Force", valid_21626249
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626250 = header.getOrDefault("X-Amz-Date")
  valid_21626250 = validateParameter(valid_21626250, JString, required = false,
                                   default = nil)
  if valid_21626250 != nil:
    section.add "X-Amz-Date", valid_21626250
  var valid_21626251 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626251 = validateParameter(valid_21626251, JString, required = false,
                                   default = nil)
  if valid_21626251 != nil:
    section.add "X-Amz-Security-Token", valid_21626251
  var valid_21626252 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626252 = validateParameter(valid_21626252, JString, required = false,
                                   default = nil)
  if valid_21626252 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626252
  var valid_21626253 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626253 = validateParameter(valid_21626253, JString, required = false,
                                   default = nil)
  if valid_21626253 != nil:
    section.add "X-Amz-Algorithm", valid_21626253
  var valid_21626254 = header.getOrDefault("X-Amz-Signature")
  valid_21626254 = validateParameter(valid_21626254, JString, required = false,
                                   default = nil)
  if valid_21626254 != nil:
    section.add "X-Amz-Signature", valid_21626254
  var valid_21626255 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626255 = validateParameter(valid_21626255, JString, required = false,
                                   default = nil)
  if valid_21626255 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626255
  var valid_21626256 = header.getOrDefault("X-Amz-Credential")
  valid_21626256 = validateParameter(valid_21626256, JString, required = false,
                                   default = nil)
  if valid_21626256 != nil:
    section.add "X-Amz-Credential", valid_21626256
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626257: Call_GetBacktrackDBCluster_21626241;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21626257.validator(path, query, header, formData, body, _)
  let scheme = call_21626257.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626257.makeUrl(scheme.get, call_21626257.host, call_21626257.base,
                               call_21626257.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626257, uri, valid, _)

proc call*(call_21626258: Call_GetBacktrackDBCluster_21626241; BacktrackTo: string;
          DBClusterIdentifier: string;
          UseEarliestTimeOnPointInTimeUnavailable: bool = false;
          Action: string = "BacktrackDBCluster"; Version: string = "2014-10-31";
          Force: bool = false): Recallable =
  ## getBacktrackDBCluster
  ## <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p> <p>For more information on backtracking, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html"> Backtracking an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   BacktrackTo: string (required)
  ##              : <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note> <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li> <li> <p>Can't contain a timestamp set in the future.</p> </li> </ul> <p>Example: <code>2017-07-08T18:00Z</code> </p>
  ##   UseEarliestTimeOnPointInTimeUnavailable: bool
  ##                                          : A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   Force: bool
  ##        : A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
  var query_21626259 = newJObject()
  add(query_21626259, "BacktrackTo", newJString(BacktrackTo))
  add(query_21626259, "UseEarliestTimeOnPointInTimeUnavailable",
      newJBool(UseEarliestTimeOnPointInTimeUnavailable))
  add(query_21626259, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21626259, "Action", newJString(Action))
  add(query_21626259, "Version", newJString(Version))
  add(query_21626259, "Force", newJBool(Force))
  result = call_21626258.call(nil, query_21626259, nil, nil, nil)

var getBacktrackDBCluster* = Call_GetBacktrackDBCluster_21626241(
    name: "getBacktrackDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=BacktrackDBCluster",
    validator: validate_GetBacktrackDBCluster_21626242, base: "/",
    makeUrl: url_GetBacktrackDBCluster_21626243,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCancelExportTask_21626296 = ref object of OpenApiRestCall_21625435
proc url_PostCancelExportTask_21626298(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCancelExportTask_21626297(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Cancels an export task in progress that is exporting a snapshot to Amazon S3. Any data that has already been written to the S3 bucket isn't removed. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626299 = query.getOrDefault("Action")
  valid_21626299 = validateParameter(valid_21626299, JString, required = true,
                                   default = newJString("CancelExportTask"))
  if valid_21626299 != nil:
    section.add "Action", valid_21626299
  var valid_21626300 = query.getOrDefault("Version")
  valid_21626300 = validateParameter(valid_21626300, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626300 != nil:
    section.add "Version", valid_21626300
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626301 = header.getOrDefault("X-Amz-Date")
  valid_21626301 = validateParameter(valid_21626301, JString, required = false,
                                   default = nil)
  if valid_21626301 != nil:
    section.add "X-Amz-Date", valid_21626301
  var valid_21626302 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626302 = validateParameter(valid_21626302, JString, required = false,
                                   default = nil)
  if valid_21626302 != nil:
    section.add "X-Amz-Security-Token", valid_21626302
  var valid_21626303 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626303 = validateParameter(valid_21626303, JString, required = false,
                                   default = nil)
  if valid_21626303 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626303
  var valid_21626304 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626304 = validateParameter(valid_21626304, JString, required = false,
                                   default = nil)
  if valid_21626304 != nil:
    section.add "X-Amz-Algorithm", valid_21626304
  var valid_21626305 = header.getOrDefault("X-Amz-Signature")
  valid_21626305 = validateParameter(valid_21626305, JString, required = false,
                                   default = nil)
  if valid_21626305 != nil:
    section.add "X-Amz-Signature", valid_21626305
  var valid_21626306 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626306 = validateParameter(valid_21626306, JString, required = false,
                                   default = nil)
  if valid_21626306 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626306
  var valid_21626307 = header.getOrDefault("X-Amz-Credential")
  valid_21626307 = validateParameter(valid_21626307, JString, required = false,
                                   default = nil)
  if valid_21626307 != nil:
    section.add "X-Amz-Credential", valid_21626307
  result.add "header", section
  ## parameters in `formData` object:
  ##   ExportTaskIdentifier: JString (required)
  ##                       : The identifier of the snapshot export task to cancel.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `ExportTaskIdentifier` field"
  var valid_21626308 = formData.getOrDefault("ExportTaskIdentifier")
  valid_21626308 = validateParameter(valid_21626308, JString, required = true,
                                   default = nil)
  if valid_21626308 != nil:
    section.add "ExportTaskIdentifier", valid_21626308
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626309: Call_PostCancelExportTask_21626296; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Cancels an export task in progress that is exporting a snapshot to Amazon S3. Any data that has already been written to the S3 bucket isn't removed. 
  ## 
  let valid = call_21626309.validator(path, query, header, formData, body, _)
  let scheme = call_21626309.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626309.makeUrl(scheme.get, call_21626309.host, call_21626309.base,
                               call_21626309.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626309, uri, valid, _)

proc call*(call_21626310: Call_PostCancelExportTask_21626296;
          ExportTaskIdentifier: string; Action: string = "CancelExportTask";
          Version: string = "2014-10-31"): Recallable =
  ## postCancelExportTask
  ## Cancels an export task in progress that is exporting a snapshot to Amazon S3. Any data that has already been written to the S3 bucket isn't removed. 
  ##   ExportTaskIdentifier: string (required)
  ##                       : The identifier of the snapshot export task to cancel.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626311 = newJObject()
  var formData_21626312 = newJObject()
  add(formData_21626312, "ExportTaskIdentifier", newJString(ExportTaskIdentifier))
  add(query_21626311, "Action", newJString(Action))
  add(query_21626311, "Version", newJString(Version))
  result = call_21626310.call(nil, query_21626311, nil, formData_21626312, nil)

var postCancelExportTask* = Call_PostCancelExportTask_21626296(
    name: "postCancelExportTask", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CancelExportTask",
    validator: validate_PostCancelExportTask_21626297, base: "/",
    makeUrl: url_PostCancelExportTask_21626298,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCancelExportTask_21626280 = ref object of OpenApiRestCall_21625435
proc url_GetCancelExportTask_21626282(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCancelExportTask_21626281(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Cancels an export task in progress that is exporting a snapshot to Amazon S3. Any data that has already been written to the S3 bucket isn't removed. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   ExportTaskIdentifier: JString (required)
  ##                       : The identifier of the snapshot export task to cancel.
  section = newJObject()
  var valid_21626283 = query.getOrDefault("Action")
  valid_21626283 = validateParameter(valid_21626283, JString, required = true,
                                   default = newJString("CancelExportTask"))
  if valid_21626283 != nil:
    section.add "Action", valid_21626283
  var valid_21626284 = query.getOrDefault("Version")
  valid_21626284 = validateParameter(valid_21626284, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626284 != nil:
    section.add "Version", valid_21626284
  var valid_21626285 = query.getOrDefault("ExportTaskIdentifier")
  valid_21626285 = validateParameter(valid_21626285, JString, required = true,
                                   default = nil)
  if valid_21626285 != nil:
    section.add "ExportTaskIdentifier", valid_21626285
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626286 = header.getOrDefault("X-Amz-Date")
  valid_21626286 = validateParameter(valid_21626286, JString, required = false,
                                   default = nil)
  if valid_21626286 != nil:
    section.add "X-Amz-Date", valid_21626286
  var valid_21626287 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626287 = validateParameter(valid_21626287, JString, required = false,
                                   default = nil)
  if valid_21626287 != nil:
    section.add "X-Amz-Security-Token", valid_21626287
  var valid_21626288 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626288 = validateParameter(valid_21626288, JString, required = false,
                                   default = nil)
  if valid_21626288 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626288
  var valid_21626289 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626289 = validateParameter(valid_21626289, JString, required = false,
                                   default = nil)
  if valid_21626289 != nil:
    section.add "X-Amz-Algorithm", valid_21626289
  var valid_21626290 = header.getOrDefault("X-Amz-Signature")
  valid_21626290 = validateParameter(valid_21626290, JString, required = false,
                                   default = nil)
  if valid_21626290 != nil:
    section.add "X-Amz-Signature", valid_21626290
  var valid_21626291 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626291 = validateParameter(valid_21626291, JString, required = false,
                                   default = nil)
  if valid_21626291 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626291
  var valid_21626292 = header.getOrDefault("X-Amz-Credential")
  valid_21626292 = validateParameter(valid_21626292, JString, required = false,
                                   default = nil)
  if valid_21626292 != nil:
    section.add "X-Amz-Credential", valid_21626292
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626293: Call_GetCancelExportTask_21626280; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Cancels an export task in progress that is exporting a snapshot to Amazon S3. Any data that has already been written to the S3 bucket isn't removed. 
  ## 
  let valid = call_21626293.validator(path, query, header, formData, body, _)
  let scheme = call_21626293.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626293.makeUrl(scheme.get, call_21626293.host, call_21626293.base,
                               call_21626293.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626293, uri, valid, _)

proc call*(call_21626294: Call_GetCancelExportTask_21626280;
          ExportTaskIdentifier: string; Action: string = "CancelExportTask";
          Version: string = "2014-10-31"): Recallable =
  ## getCancelExportTask
  ## Cancels an export task in progress that is exporting a snapshot to Amazon S3. Any data that has already been written to the S3 bucket isn't removed. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ExportTaskIdentifier: string (required)
  ##                       : The identifier of the snapshot export task to cancel.
  var query_21626295 = newJObject()
  add(query_21626295, "Action", newJString(Action))
  add(query_21626295, "Version", newJString(Version))
  add(query_21626295, "ExportTaskIdentifier", newJString(ExportTaskIdentifier))
  result = call_21626294.call(nil, query_21626295, nil, nil, nil)

var getCancelExportTask* = Call_GetCancelExportTask_21626280(
    name: "getCancelExportTask", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CancelExportTask",
    validator: validate_GetCancelExportTask_21626281, base: "/",
    makeUrl: url_GetCancelExportTask_21626282,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterParameterGroup_21626332 = ref object of OpenApiRestCall_21625435
proc url_PostCopyDBClusterParameterGroup_21626334(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBClusterParameterGroup_21626333(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626335 = query.getOrDefault("Action")
  valid_21626335 = validateParameter(valid_21626335, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_21626335 != nil:
    section.add "Action", valid_21626335
  var valid_21626336 = query.getOrDefault("Version")
  valid_21626336 = validateParameter(valid_21626336, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626336 != nil:
    section.add "Version", valid_21626336
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626337 = header.getOrDefault("X-Amz-Date")
  valid_21626337 = validateParameter(valid_21626337, JString, required = false,
                                   default = nil)
  if valid_21626337 != nil:
    section.add "X-Amz-Date", valid_21626337
  var valid_21626338 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626338 = validateParameter(valid_21626338, JString, required = false,
                                   default = nil)
  if valid_21626338 != nil:
    section.add "X-Amz-Security-Token", valid_21626338
  var valid_21626339 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626339 = validateParameter(valid_21626339, JString, required = false,
                                   default = nil)
  if valid_21626339 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626339
  var valid_21626340 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626340 = validateParameter(valid_21626340, JString, required = false,
                                   default = nil)
  if valid_21626340 != nil:
    section.add "X-Amz-Algorithm", valid_21626340
  var valid_21626341 = header.getOrDefault("X-Amz-Signature")
  valid_21626341 = validateParameter(valid_21626341, JString, required = false,
                                   default = nil)
  if valid_21626341 != nil:
    section.add "X-Amz-Signature", valid_21626341
  var valid_21626342 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626342 = validateParameter(valid_21626342, JString, required = false,
                                   default = nil)
  if valid_21626342 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626342
  var valid_21626343 = header.getOrDefault("X-Amz-Credential")
  valid_21626343 = validateParameter(valid_21626343, JString, required = false,
                                   default = nil)
  if valid_21626343 != nil:
    section.add "X-Amz-Credential", valid_21626343
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBClusterParameterGroupDescription` field"
  var valid_21626344 = formData.getOrDefault(
      "TargetDBClusterParameterGroupDescription")
  valid_21626344 = validateParameter(valid_21626344, JString, required = true,
                                   default = nil)
  if valid_21626344 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_21626344
  var valid_21626345 = formData.getOrDefault("Tags")
  valid_21626345 = validateParameter(valid_21626345, JArray, required = false,
                                   default = nil)
  if valid_21626345 != nil:
    section.add "Tags", valid_21626345
  var valid_21626346 = formData.getOrDefault(
      "SourceDBClusterParameterGroupIdentifier")
  valid_21626346 = validateParameter(valid_21626346, JString, required = true,
                                   default = nil)
  if valid_21626346 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_21626346
  var valid_21626347 = formData.getOrDefault(
      "TargetDBClusterParameterGroupIdentifier")
  valid_21626347 = validateParameter(valid_21626347, JString, required = true,
                                   default = nil)
  if valid_21626347 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_21626347
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626348: Call_PostCopyDBClusterParameterGroup_21626332;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21626348.validator(path, query, header, formData, body, _)
  let scheme = call_21626348.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626348.makeUrl(scheme.get, call_21626348.host, call_21626348.base,
                               call_21626348.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626348, uri, valid, _)

proc call*(call_21626349: Call_PostCopyDBClusterParameterGroup_21626332;
          TargetDBClusterParameterGroupDescription: string;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterParameterGroup
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Version: string (required)
  var query_21626350 = newJObject()
  var formData_21626351 = newJObject()
  add(formData_21626351, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  if Tags != nil:
    formData_21626351.add "Tags", Tags
  add(query_21626350, "Action", newJString(Action))
  add(formData_21626351, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  add(formData_21626351, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_21626350, "Version", newJString(Version))
  result = call_21626349.call(nil, query_21626350, nil, formData_21626351, nil)

var postCopyDBClusterParameterGroup* = Call_PostCopyDBClusterParameterGroup_21626332(
    name: "postCopyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_PostCopyDBClusterParameterGroup_21626333, base: "/",
    makeUrl: url_PostCopyDBClusterParameterGroup_21626334,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterParameterGroup_21626313 = ref object of OpenApiRestCall_21625435
proc url_GetCopyDBClusterParameterGroup_21626315(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBClusterParameterGroup_21626314(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupDescription: JString (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Action: JString (required)
  ##   TargetDBClusterParameterGroupIdentifier: JString (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceDBClusterParameterGroupIdentifier` field"
  var valid_21626316 = query.getOrDefault("SourceDBClusterParameterGroupIdentifier")
  valid_21626316 = validateParameter(valid_21626316, JString, required = true,
                                   default = nil)
  if valid_21626316 != nil:
    section.add "SourceDBClusterParameterGroupIdentifier", valid_21626316
  var valid_21626317 = query.getOrDefault("Tags")
  valid_21626317 = validateParameter(valid_21626317, JArray, required = false,
                                   default = nil)
  if valid_21626317 != nil:
    section.add "Tags", valid_21626317
  var valid_21626318 = query.getOrDefault("TargetDBClusterParameterGroupDescription")
  valid_21626318 = validateParameter(valid_21626318, JString, required = true,
                                   default = nil)
  if valid_21626318 != nil:
    section.add "TargetDBClusterParameterGroupDescription", valid_21626318
  var valid_21626319 = query.getOrDefault("Action")
  valid_21626319 = validateParameter(valid_21626319, JString, required = true, default = newJString(
      "CopyDBClusterParameterGroup"))
  if valid_21626319 != nil:
    section.add "Action", valid_21626319
  var valid_21626320 = query.getOrDefault("TargetDBClusterParameterGroupIdentifier")
  valid_21626320 = validateParameter(valid_21626320, JString, required = true,
                                   default = nil)
  if valid_21626320 != nil:
    section.add "TargetDBClusterParameterGroupIdentifier", valid_21626320
  var valid_21626321 = query.getOrDefault("Version")
  valid_21626321 = validateParameter(valid_21626321, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626321 != nil:
    section.add "Version", valid_21626321
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626322 = header.getOrDefault("X-Amz-Date")
  valid_21626322 = validateParameter(valid_21626322, JString, required = false,
                                   default = nil)
  if valid_21626322 != nil:
    section.add "X-Amz-Date", valid_21626322
  var valid_21626323 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626323 = validateParameter(valid_21626323, JString, required = false,
                                   default = nil)
  if valid_21626323 != nil:
    section.add "X-Amz-Security-Token", valid_21626323
  var valid_21626324 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626324 = validateParameter(valid_21626324, JString, required = false,
                                   default = nil)
  if valid_21626324 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626324
  var valid_21626325 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626325 = validateParameter(valid_21626325, JString, required = false,
                                   default = nil)
  if valid_21626325 != nil:
    section.add "X-Amz-Algorithm", valid_21626325
  var valid_21626326 = header.getOrDefault("X-Amz-Signature")
  valid_21626326 = validateParameter(valid_21626326, JString, required = false,
                                   default = nil)
  if valid_21626326 != nil:
    section.add "X-Amz-Signature", valid_21626326
  var valid_21626327 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626327 = validateParameter(valid_21626327, JString, required = false,
                                   default = nil)
  if valid_21626327 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626327
  var valid_21626328 = header.getOrDefault("X-Amz-Credential")
  valid_21626328 = validateParameter(valid_21626328, JString, required = false,
                                   default = nil)
  if valid_21626328 != nil:
    section.add "X-Amz-Credential", valid_21626328
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626329: Call_GetCopyDBClusterParameterGroup_21626313;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21626329.validator(path, query, header, formData, body, _)
  let scheme = call_21626329.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626329.makeUrl(scheme.get, call_21626329.host, call_21626329.base,
                               call_21626329.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626329, uri, valid, _)

proc call*(call_21626330: Call_GetCopyDBClusterParameterGroup_21626313;
          SourceDBClusterParameterGroupIdentifier: string;
          TargetDBClusterParameterGroupDescription: string;
          TargetDBClusterParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCopyDBClusterParameterGroup
  ## <p>Copies the specified DB cluster parameter group.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SourceDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB cluster parameter group.</p> </li> <li> <p>If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example <code>my-db-cluster-param-group</code>, or a valid ARN.</p> </li> <li> <p>If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example 
  ## <code>arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBClusterParameterGroupDescription: string (required)
  ##                                           : A description for the copied DB cluster parameter group.
  ##   Action: string (required)
  ##   TargetDBClusterParameterGroupIdentifier: string (required)
  ##                                          : <p>The identifier for the copied DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster-param-group1</code> </p>
  ##   Version: string (required)
  var query_21626331 = newJObject()
  add(query_21626331, "SourceDBClusterParameterGroupIdentifier",
      newJString(SourceDBClusterParameterGroupIdentifier))
  if Tags != nil:
    query_21626331.add "Tags", Tags
  add(query_21626331, "TargetDBClusterParameterGroupDescription",
      newJString(TargetDBClusterParameterGroupDescription))
  add(query_21626331, "Action", newJString(Action))
  add(query_21626331, "TargetDBClusterParameterGroupIdentifier",
      newJString(TargetDBClusterParameterGroupIdentifier))
  add(query_21626331, "Version", newJString(Version))
  result = call_21626330.call(nil, query_21626331, nil, nil, nil)

var getCopyDBClusterParameterGroup* = Call_GetCopyDBClusterParameterGroup_21626313(
    name: "getCopyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterParameterGroup",
    validator: validate_GetCopyDBClusterParameterGroup_21626314, base: "/",
    makeUrl: url_GetCopyDBClusterParameterGroup_21626315,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBClusterSnapshot_21626374 = ref object of OpenApiRestCall_21625435
proc url_PostCopyDBClusterSnapshot_21626376(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBClusterSnapshot_21626375(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626377 = query.getOrDefault("Action")
  valid_21626377 = validateParameter(valid_21626377, JString, required = true, default = newJString(
      "CopyDBClusterSnapshot"))
  if valid_21626377 != nil:
    section.add "Action", valid_21626377
  var valid_21626378 = query.getOrDefault("Version")
  valid_21626378 = validateParameter(valid_21626378, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626378 != nil:
    section.add "Version", valid_21626378
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626379 = header.getOrDefault("X-Amz-Date")
  valid_21626379 = validateParameter(valid_21626379, JString, required = false,
                                   default = nil)
  if valid_21626379 != nil:
    section.add "X-Amz-Date", valid_21626379
  var valid_21626380 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626380 = validateParameter(valid_21626380, JString, required = false,
                                   default = nil)
  if valid_21626380 != nil:
    section.add "X-Amz-Security-Token", valid_21626380
  var valid_21626381 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626381 = validateParameter(valid_21626381, JString, required = false,
                                   default = nil)
  if valid_21626381 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626381
  var valid_21626382 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626382 = validateParameter(valid_21626382, JString, required = false,
                                   default = nil)
  if valid_21626382 != nil:
    section.add "X-Amz-Algorithm", valid_21626382
  var valid_21626383 = header.getOrDefault("X-Amz-Signature")
  valid_21626383 = validateParameter(valid_21626383, JString, required = false,
                                   default = nil)
  if valid_21626383 != nil:
    section.add "X-Amz-Signature", valid_21626383
  var valid_21626384 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626384 = validateParameter(valid_21626384, JString, required = false,
                                   default = nil)
  if valid_21626384 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626384
  var valid_21626385 = header.getOrDefault("X-Amz-Credential")
  valid_21626385 = validateParameter(valid_21626385, JString, required = false,
                                   default = nil)
  if valid_21626385 != nil:
    section.add "X-Amz-Credential", valid_21626385
  result.add "header", section
  ## parameters in `formData` object:
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  section = newJObject()
  var valid_21626386 = formData.getOrDefault("PreSignedUrl")
  valid_21626386 = validateParameter(valid_21626386, JString, required = false,
                                   default = nil)
  if valid_21626386 != nil:
    section.add "PreSignedUrl", valid_21626386
  var valid_21626387 = formData.getOrDefault("Tags")
  valid_21626387 = validateParameter(valid_21626387, JArray, required = false,
                                   default = nil)
  if valid_21626387 != nil:
    section.add "Tags", valid_21626387
  var valid_21626388 = formData.getOrDefault("SourceRegion")
  valid_21626388 = validateParameter(valid_21626388, JString, required = false,
                                   default = nil)
  if valid_21626388 != nil:
    section.add "SourceRegion", valid_21626388
  var valid_21626389 = formData.getOrDefault("CopyTags")
  valid_21626389 = validateParameter(valid_21626389, JBool, required = false,
                                   default = nil)
  if valid_21626389 != nil:
    section.add "CopyTags", valid_21626389
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterSnapshotIdentifier` field"
  var valid_21626390 = formData.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_21626390 = validateParameter(valid_21626390, JString, required = true,
                                   default = nil)
  if valid_21626390 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_21626390
  var valid_21626391 = formData.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_21626391 = validateParameter(valid_21626391, JString, required = true,
                                   default = nil)
  if valid_21626391 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_21626391
  var valid_21626392 = formData.getOrDefault("KmsKeyId")
  valid_21626392 = validateParameter(valid_21626392, JString, required = false,
                                   default = nil)
  if valid_21626392 != nil:
    section.add "KmsKeyId", valid_21626392
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626393: Call_PostCopyDBClusterSnapshot_21626374;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21626393.validator(path, query, header, formData, body, _)
  let scheme = call_21626393.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626393.makeUrl(scheme.get, call_21626393.host, call_21626393.base,
                               call_21626393.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626393, uri, valid, _)

proc call*(call_21626394: Call_PostCopyDBClusterSnapshot_21626374;
          SourceDBClusterSnapshotIdentifier: string;
          TargetDBClusterSnapshotIdentifier: string; PreSignedUrl: string = "";
          Tags: JsonNode = nil; SourceRegion: string = ""; CopyTags: bool = false;
          Action: string = "CopyDBClusterSnapshot"; KmsKeyId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   Version: string (required)
  var query_21626395 = newJObject()
  var formData_21626396 = newJObject()
  add(formData_21626396, "PreSignedUrl", newJString(PreSignedUrl))
  if Tags != nil:
    formData_21626396.add "Tags", Tags
  add(formData_21626396, "SourceRegion", newJString(SourceRegion))
  add(formData_21626396, "CopyTags", newJBool(CopyTags))
  add(formData_21626396, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(formData_21626396, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  add(query_21626395, "Action", newJString(Action))
  add(formData_21626396, "KmsKeyId", newJString(KmsKeyId))
  add(query_21626395, "Version", newJString(Version))
  result = call_21626394.call(nil, query_21626395, nil, formData_21626396, nil)

var postCopyDBClusterSnapshot* = Call_PostCopyDBClusterSnapshot_21626374(
    name: "postCopyDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_PostCopyDBClusterSnapshot_21626375, base: "/",
    makeUrl: url_PostCopyDBClusterSnapshot_21626376,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBClusterSnapshot_21626352 = ref object of OpenApiRestCall_21625435
proc url_GetCopyDBClusterSnapshot_21626354(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBClusterSnapshot_21626353(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   TargetDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   SourceDBClusterSnapshotIdentifier: JString (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Version: JString (required)
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  section = newJObject()
  var valid_21626355 = query.getOrDefault("SourceRegion")
  valid_21626355 = validateParameter(valid_21626355, JString, required = false,
                                   default = nil)
  if valid_21626355 != nil:
    section.add "SourceRegion", valid_21626355
  var valid_21626356 = query.getOrDefault("PreSignedUrl")
  valid_21626356 = validateParameter(valid_21626356, JString, required = false,
                                   default = nil)
  if valid_21626356 != nil:
    section.add "PreSignedUrl", valid_21626356
  assert query != nil, "query argument is necessary due to required `TargetDBClusterSnapshotIdentifier` field"
  var valid_21626357 = query.getOrDefault("TargetDBClusterSnapshotIdentifier")
  valid_21626357 = validateParameter(valid_21626357, JString, required = true,
                                   default = nil)
  if valid_21626357 != nil:
    section.add "TargetDBClusterSnapshotIdentifier", valid_21626357
  var valid_21626358 = query.getOrDefault("Tags")
  valid_21626358 = validateParameter(valid_21626358, JArray, required = false,
                                   default = nil)
  if valid_21626358 != nil:
    section.add "Tags", valid_21626358
  var valid_21626359 = query.getOrDefault("Action")
  valid_21626359 = validateParameter(valid_21626359, JString, required = true, default = newJString(
      "CopyDBClusterSnapshot"))
  if valid_21626359 != nil:
    section.add "Action", valid_21626359
  var valid_21626360 = query.getOrDefault("KmsKeyId")
  valid_21626360 = validateParameter(valid_21626360, JString, required = false,
                                   default = nil)
  if valid_21626360 != nil:
    section.add "KmsKeyId", valid_21626360
  var valid_21626361 = query.getOrDefault("SourceDBClusterSnapshotIdentifier")
  valid_21626361 = validateParameter(valid_21626361, JString, required = true,
                                   default = nil)
  if valid_21626361 != nil:
    section.add "SourceDBClusterSnapshotIdentifier", valid_21626361
  var valid_21626362 = query.getOrDefault("Version")
  valid_21626362 = validateParameter(valid_21626362, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626362 != nil:
    section.add "Version", valid_21626362
  var valid_21626363 = query.getOrDefault("CopyTags")
  valid_21626363 = validateParameter(valid_21626363, JBool, required = false,
                                   default = nil)
  if valid_21626363 != nil:
    section.add "CopyTags", valid_21626363
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626364 = header.getOrDefault("X-Amz-Date")
  valid_21626364 = validateParameter(valid_21626364, JString, required = false,
                                   default = nil)
  if valid_21626364 != nil:
    section.add "X-Amz-Date", valid_21626364
  var valid_21626365 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626365 = validateParameter(valid_21626365, JString, required = false,
                                   default = nil)
  if valid_21626365 != nil:
    section.add "X-Amz-Security-Token", valid_21626365
  var valid_21626366 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626366 = validateParameter(valid_21626366, JString, required = false,
                                   default = nil)
  if valid_21626366 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626366
  var valid_21626367 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626367 = validateParameter(valid_21626367, JString, required = false,
                                   default = nil)
  if valid_21626367 != nil:
    section.add "X-Amz-Algorithm", valid_21626367
  var valid_21626368 = header.getOrDefault("X-Amz-Signature")
  valid_21626368 = validateParameter(valid_21626368, JString, required = false,
                                   default = nil)
  if valid_21626368 != nil:
    section.add "X-Amz-Signature", valid_21626368
  var valid_21626369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626369 = validateParameter(valid_21626369, JString, required = false,
                                   default = nil)
  if valid_21626369 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626369
  var valid_21626370 = header.getOrDefault("X-Amz-Credential")
  valid_21626370 = validateParameter(valid_21626370, JString, required = false,
                                   default = nil)
  if valid_21626370 != nil:
    section.add "X-Amz-Credential", valid_21626370
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626371: Call_GetCopyDBClusterSnapshot_21626352;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21626371.validator(path, query, header, formData, body, _)
  let scheme = call_21626371.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626371.makeUrl(scheme.get, call_21626371.host, call_21626371.base,
                               call_21626371.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626371, uri, valid, _)

proc call*(call_21626372: Call_GetCopyDBClusterSnapshot_21626352;
          TargetDBClusterSnapshotIdentifier: string;
          SourceDBClusterSnapshotIdentifier: string; SourceRegion: string = "";
          PreSignedUrl: string = ""; Tags: JsonNode = nil;
          Action: string = "CopyDBClusterSnapshot"; KmsKeyId: string = "";
          Version: string = "2014-10-31"; CopyTags: bool = false): Recallable =
  ## getCopyDBClusterSnapshot
  ## <p>Copies a snapshot of a DB cluster.</p> <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p> <p>You can copy an encrypted DB cluster snapshot from another AWS Region. In that case, the AWS Region where you call the <code>CopyDBClusterSnapshot</code> action is the destination AWS Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another AWS Region, you must provide the following values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS Key Management System (AWS KMS) key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>PreSignedUrl</code> - A URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> action to be called in the source AWS Region where the DB cluster snapshot is copied from. The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note> </li> <li> <p> <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination AWS Region.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the ARN format for the source AWS Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL. </p> </li> </ul> <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p> <p>For more information on copying encrypted DB cluster snapshots from one AWS Region to another, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html"> Copying a Snapshot</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p> <p>The pre-signed URL must be a valid request for the <code>CopyDBSClusterSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p> </li> <li> <p> <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   TargetDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster-snapshot2</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS encryption key. If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot. </p> <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p> <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region.</p> <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter, an error is returned.</p>
  ##   SourceDBClusterSnapshotIdentifier: string (required)
  ##                                    : <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p> <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> <li> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p> </li> <li> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions"> Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul> <p>Example: <code>my-cluster-snapshot1</code> </p>
  ##   Version: string (required)
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot. By default, tags are not copied.
  var query_21626373 = newJObject()
  add(query_21626373, "SourceRegion", newJString(SourceRegion))
  add(query_21626373, "PreSignedUrl", newJString(PreSignedUrl))
  add(query_21626373, "TargetDBClusterSnapshotIdentifier",
      newJString(TargetDBClusterSnapshotIdentifier))
  if Tags != nil:
    query_21626373.add "Tags", Tags
  add(query_21626373, "Action", newJString(Action))
  add(query_21626373, "KmsKeyId", newJString(KmsKeyId))
  add(query_21626373, "SourceDBClusterSnapshotIdentifier",
      newJString(SourceDBClusterSnapshotIdentifier))
  add(query_21626373, "Version", newJString(Version))
  add(query_21626373, "CopyTags", newJBool(CopyTags))
  result = call_21626372.call(nil, query_21626373, nil, nil, nil)

var getCopyDBClusterSnapshot* = Call_GetCopyDBClusterSnapshot_21626352(
    name: "getCopyDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBClusterSnapshot",
    validator: validate_GetCopyDBClusterSnapshot_21626353, base: "/",
    makeUrl: url_GetCopyDBClusterSnapshot_21626354,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBParameterGroup_21626416 = ref object of OpenApiRestCall_21625435
proc url_PostCopyDBParameterGroup_21626418(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBParameterGroup_21626417(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626419 = query.getOrDefault("Action")
  valid_21626419 = validateParameter(valid_21626419, JString, required = true,
                                   default = newJString("CopyDBParameterGroup"))
  if valid_21626419 != nil:
    section.add "Action", valid_21626419
  var valid_21626420 = query.getOrDefault("Version")
  valid_21626420 = validateParameter(valid_21626420, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626420 != nil:
    section.add "Version", valid_21626420
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626421 = header.getOrDefault("X-Amz-Date")
  valid_21626421 = validateParameter(valid_21626421, JString, required = false,
                                   default = nil)
  if valid_21626421 != nil:
    section.add "X-Amz-Date", valid_21626421
  var valid_21626422 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626422 = validateParameter(valid_21626422, JString, required = false,
                                   default = nil)
  if valid_21626422 != nil:
    section.add "X-Amz-Security-Token", valid_21626422
  var valid_21626423 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626423 = validateParameter(valid_21626423, JString, required = false,
                                   default = nil)
  if valid_21626423 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626423
  var valid_21626424 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626424 = validateParameter(valid_21626424, JString, required = false,
                                   default = nil)
  if valid_21626424 != nil:
    section.add "X-Amz-Algorithm", valid_21626424
  var valid_21626425 = header.getOrDefault("X-Amz-Signature")
  valid_21626425 = validateParameter(valid_21626425, JString, required = false,
                                   default = nil)
  if valid_21626425 != nil:
    section.add "X-Amz-Signature", valid_21626425
  var valid_21626426 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626426 = validateParameter(valid_21626426, JString, required = false,
                                   default = nil)
  if valid_21626426 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626426
  var valid_21626427 = header.getOrDefault("X-Amz-Credential")
  valid_21626427 = validateParameter(valid_21626427, JString, required = false,
                                   default = nil)
  if valid_21626427 != nil:
    section.add "X-Amz-Credential", valid_21626427
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBParameterGroupIdentifier` field"
  var valid_21626428 = formData.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_21626428 = validateParameter(valid_21626428, JString, required = true,
                                   default = nil)
  if valid_21626428 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_21626428
  var valid_21626429 = formData.getOrDefault("Tags")
  valid_21626429 = validateParameter(valid_21626429, JArray, required = false,
                                   default = nil)
  if valid_21626429 != nil:
    section.add "Tags", valid_21626429
  var valid_21626430 = formData.getOrDefault("TargetDBParameterGroupDescription")
  valid_21626430 = validateParameter(valid_21626430, JString, required = true,
                                   default = nil)
  if valid_21626430 != nil:
    section.add "TargetDBParameterGroupDescription", valid_21626430
  var valid_21626431 = formData.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_21626431 = validateParameter(valid_21626431, JString, required = true,
                                   default = nil)
  if valid_21626431 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_21626431
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626432: Call_PostCopyDBParameterGroup_21626416;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_21626432.validator(path, query, header, formData, body, _)
  let scheme = call_21626432.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626432.makeUrl(scheme.get, call_21626432.host, call_21626432.base,
                               call_21626432.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626432, uri, valid, _)

proc call*(call_21626433: Call_PostCopyDBParameterGroup_21626416;
          TargetDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          SourceDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Version: string (required)
  var query_21626434 = newJObject()
  var formData_21626435 = newJObject()
  add(formData_21626435, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  if Tags != nil:
    formData_21626435.add "Tags", Tags
  add(query_21626434, "Action", newJString(Action))
  add(formData_21626435, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(formData_21626435, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(query_21626434, "Version", newJString(Version))
  result = call_21626433.call(nil, query_21626434, nil, formData_21626435, nil)

var postCopyDBParameterGroup* = Call_PostCopyDBParameterGroup_21626416(
    name: "postCopyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_PostCopyDBParameterGroup_21626417, base: "/",
    makeUrl: url_PostCopyDBParameterGroup_21626418,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBParameterGroup_21626397 = ref object of OpenApiRestCall_21625435
proc url_GetCopyDBParameterGroup_21626399(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBParameterGroup_21626398(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Copies the specified DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   SourceDBParameterGroupIdentifier: JString (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Version: JString (required)
  ##   TargetDBParameterGroupDescription: JString (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: JString (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  section = newJObject()
  var valid_21626400 = query.getOrDefault("Tags")
  valid_21626400 = validateParameter(valid_21626400, JArray, required = false,
                                   default = nil)
  if valid_21626400 != nil:
    section.add "Tags", valid_21626400
  var valid_21626401 = query.getOrDefault("Action")
  valid_21626401 = validateParameter(valid_21626401, JString, required = true,
                                   default = newJString("CopyDBParameterGroup"))
  if valid_21626401 != nil:
    section.add "Action", valid_21626401
  var valid_21626402 = query.getOrDefault("SourceDBParameterGroupIdentifier")
  valid_21626402 = validateParameter(valid_21626402, JString, required = true,
                                   default = nil)
  if valid_21626402 != nil:
    section.add "SourceDBParameterGroupIdentifier", valid_21626402
  var valid_21626403 = query.getOrDefault("Version")
  valid_21626403 = validateParameter(valid_21626403, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626403 != nil:
    section.add "Version", valid_21626403
  var valid_21626404 = query.getOrDefault("TargetDBParameterGroupDescription")
  valid_21626404 = validateParameter(valid_21626404, JString, required = true,
                                   default = nil)
  if valid_21626404 != nil:
    section.add "TargetDBParameterGroupDescription", valid_21626404
  var valid_21626405 = query.getOrDefault("TargetDBParameterGroupIdentifier")
  valid_21626405 = validateParameter(valid_21626405, JString, required = true,
                                   default = nil)
  if valid_21626405 != nil:
    section.add "TargetDBParameterGroupIdentifier", valid_21626405
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626406 = header.getOrDefault("X-Amz-Date")
  valid_21626406 = validateParameter(valid_21626406, JString, required = false,
                                   default = nil)
  if valid_21626406 != nil:
    section.add "X-Amz-Date", valid_21626406
  var valid_21626407 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626407 = validateParameter(valid_21626407, JString, required = false,
                                   default = nil)
  if valid_21626407 != nil:
    section.add "X-Amz-Security-Token", valid_21626407
  var valid_21626408 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626408 = validateParameter(valid_21626408, JString, required = false,
                                   default = nil)
  if valid_21626408 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626408
  var valid_21626409 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626409 = validateParameter(valid_21626409, JString, required = false,
                                   default = nil)
  if valid_21626409 != nil:
    section.add "X-Amz-Algorithm", valid_21626409
  var valid_21626410 = header.getOrDefault("X-Amz-Signature")
  valid_21626410 = validateParameter(valid_21626410, JString, required = false,
                                   default = nil)
  if valid_21626410 != nil:
    section.add "X-Amz-Signature", valid_21626410
  var valid_21626411 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626411 = validateParameter(valid_21626411, JString, required = false,
                                   default = nil)
  if valid_21626411 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626411
  var valid_21626412 = header.getOrDefault("X-Amz-Credential")
  valid_21626412 = validateParameter(valid_21626412, JString, required = false,
                                   default = nil)
  if valid_21626412 != nil:
    section.add "X-Amz-Credential", valid_21626412
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626413: Call_GetCopyDBParameterGroup_21626397;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Copies the specified DB parameter group.
  ## 
  let valid = call_21626413.validator(path, query, header, formData, body, _)
  let scheme = call_21626413.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626413.makeUrl(scheme.get, call_21626413.host, call_21626413.base,
                               call_21626413.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626413, uri, valid, _)

proc call*(call_21626414: Call_GetCopyDBParameterGroup_21626397;
          SourceDBParameterGroupIdentifier: string;
          TargetDBParameterGroupDescription: string;
          TargetDBParameterGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyDBParameterGroup
  ## Copies the specified DB parameter group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   SourceDBParameterGroupIdentifier: string (required)
  ##                                   : <p> The identifier or ARN for the source DB parameter group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid DB parameter group.</p> </li> <li> <p>Must specify a valid DB parameter group identifier, for example <code>my-db-param-group</code>, or a valid ARN.</p> </li> </ul>
  ##   Version: string (required)
  ##   TargetDBParameterGroupDescription: string (required)
  ##                                    : A description for the copied DB parameter group.
  ##   TargetDBParameterGroupIdentifier: string (required)
  ##                                   : <p>The identifier for the copied DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-parameter-group</code> </p>
  var query_21626415 = newJObject()
  if Tags != nil:
    query_21626415.add "Tags", Tags
  add(query_21626415, "Action", newJString(Action))
  add(query_21626415, "SourceDBParameterGroupIdentifier",
      newJString(SourceDBParameterGroupIdentifier))
  add(query_21626415, "Version", newJString(Version))
  add(query_21626415, "TargetDBParameterGroupDescription",
      newJString(TargetDBParameterGroupDescription))
  add(query_21626415, "TargetDBParameterGroupIdentifier",
      newJString(TargetDBParameterGroupIdentifier))
  result = call_21626414.call(nil, query_21626415, nil, nil, nil)

var getCopyDBParameterGroup* = Call_GetCopyDBParameterGroup_21626397(
    name: "getCopyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBParameterGroup",
    validator: validate_GetCopyDBParameterGroup_21626398, base: "/",
    makeUrl: url_GetCopyDBParameterGroup_21626399,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyDBSnapshot_21626459 = ref object of OpenApiRestCall_21625435
proc url_PostCopyDBSnapshot_21626461(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyDBSnapshot_21626460(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626462 = query.getOrDefault("Action")
  valid_21626462 = validateParameter(valid_21626462, JString, required = true,
                                   default = newJString("CopyDBSnapshot"))
  if valid_21626462 != nil:
    section.add "Action", valid_21626462
  var valid_21626463 = query.getOrDefault("Version")
  valid_21626463 = validateParameter(valid_21626463, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626463 != nil:
    section.add "Version", valid_21626463
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626464 = header.getOrDefault("X-Amz-Date")
  valid_21626464 = validateParameter(valid_21626464, JString, required = false,
                                   default = nil)
  if valid_21626464 != nil:
    section.add "X-Amz-Date", valid_21626464
  var valid_21626465 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626465 = validateParameter(valid_21626465, JString, required = false,
                                   default = nil)
  if valid_21626465 != nil:
    section.add "X-Amz-Security-Token", valid_21626465
  var valid_21626466 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626466 = validateParameter(valid_21626466, JString, required = false,
                                   default = nil)
  if valid_21626466 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626466
  var valid_21626467 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626467 = validateParameter(valid_21626467, JString, required = false,
                                   default = nil)
  if valid_21626467 != nil:
    section.add "X-Amz-Algorithm", valid_21626467
  var valid_21626468 = header.getOrDefault("X-Amz-Signature")
  valid_21626468 = validateParameter(valid_21626468, JString, required = false,
                                   default = nil)
  if valid_21626468 != nil:
    section.add "X-Amz-Signature", valid_21626468
  var valid_21626469 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626469 = validateParameter(valid_21626469, JString, required = false,
                                   default = nil)
  if valid_21626469 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626469
  var valid_21626470 = header.getOrDefault("X-Amz-Credential")
  valid_21626470 = validateParameter(valid_21626470, JString, required = false,
                                   default = nil)
  if valid_21626470 != nil:
    section.add "X-Amz-Credential", valid_21626470
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   OptionGroupName: JString
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   SourceDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetDBSnapshotIdentifier` field"
  var valid_21626471 = formData.getOrDefault("TargetDBSnapshotIdentifier")
  valid_21626471 = validateParameter(valid_21626471, JString, required = true,
                                   default = nil)
  if valid_21626471 != nil:
    section.add "TargetDBSnapshotIdentifier", valid_21626471
  var valid_21626472 = formData.getOrDefault("PreSignedUrl")
  valid_21626472 = validateParameter(valid_21626472, JString, required = false,
                                   default = nil)
  if valid_21626472 != nil:
    section.add "PreSignedUrl", valid_21626472
  var valid_21626473 = formData.getOrDefault("OptionGroupName")
  valid_21626473 = validateParameter(valid_21626473, JString, required = false,
                                   default = nil)
  if valid_21626473 != nil:
    section.add "OptionGroupName", valid_21626473
  var valid_21626474 = formData.getOrDefault("Tags")
  valid_21626474 = validateParameter(valid_21626474, JArray, required = false,
                                   default = nil)
  if valid_21626474 != nil:
    section.add "Tags", valid_21626474
  var valid_21626475 = formData.getOrDefault("SourceRegion")
  valid_21626475 = validateParameter(valid_21626475, JString, required = false,
                                   default = nil)
  if valid_21626475 != nil:
    section.add "SourceRegion", valid_21626475
  var valid_21626476 = formData.getOrDefault("CopyTags")
  valid_21626476 = validateParameter(valid_21626476, JBool, required = false,
                                   default = nil)
  if valid_21626476 != nil:
    section.add "CopyTags", valid_21626476
  var valid_21626477 = formData.getOrDefault("KmsKeyId")
  valid_21626477 = validateParameter(valid_21626477, JString, required = false,
                                   default = nil)
  if valid_21626477 != nil:
    section.add "KmsKeyId", valid_21626477
  var valid_21626478 = formData.getOrDefault("SourceDBSnapshotIdentifier")
  valid_21626478 = validateParameter(valid_21626478, JString, required = true,
                                   default = nil)
  if valid_21626478 != nil:
    section.add "SourceDBSnapshotIdentifier", valid_21626478
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626479: Call_PostCopyDBSnapshot_21626459; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_21626479.validator(path, query, header, formData, body, _)
  let scheme = call_21626479.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626479.makeUrl(scheme.get, call_21626479.host, call_21626479.base,
                               call_21626479.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626479, uri, valid, _)

proc call*(call_21626480: Call_PostCopyDBSnapshot_21626459;
          TargetDBSnapshotIdentifier: string; SourceDBSnapshotIdentifier: string;
          PreSignedUrl: string = ""; OptionGroupName: string = ""; Tags: JsonNode = nil;
          SourceRegion: string = ""; CopyTags: bool = false;
          Action: string = "CopyDBSnapshot"; KmsKeyId: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postCopyDBSnapshot
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   TargetDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   OptionGroupName: string
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  ##   Action: string (required)
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   SourceDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   Version: string (required)
  var query_21626481 = newJObject()
  var formData_21626482 = newJObject()
  add(formData_21626482, "TargetDBSnapshotIdentifier",
      newJString(TargetDBSnapshotIdentifier))
  add(formData_21626482, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_21626482, "OptionGroupName", newJString(OptionGroupName))
  if Tags != nil:
    formData_21626482.add "Tags", Tags
  add(formData_21626482, "SourceRegion", newJString(SourceRegion))
  add(formData_21626482, "CopyTags", newJBool(CopyTags))
  add(query_21626481, "Action", newJString(Action))
  add(formData_21626482, "KmsKeyId", newJString(KmsKeyId))
  add(formData_21626482, "SourceDBSnapshotIdentifier",
      newJString(SourceDBSnapshotIdentifier))
  add(query_21626481, "Version", newJString(Version))
  result = call_21626480.call(nil, query_21626481, nil, formData_21626482, nil)

var postCopyDBSnapshot* = Call_PostCopyDBSnapshot_21626459(
    name: "postCopyDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyDBSnapshot",
    validator: validate_PostCopyDBSnapshot_21626460, base: "/",
    makeUrl: url_PostCopyDBSnapshot_21626461, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyDBSnapshot_21626436 = ref object of OpenApiRestCall_21625435
proc url_GetCopyDBSnapshot_21626438(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyDBSnapshot_21626437(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   OptionGroupName: JString
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   Action: JString (required)
  ##   SourceDBSnapshotIdentifier: JString (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   Version: JString (required)
  ##   CopyTags: JBool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  section = newJObject()
  var valid_21626439 = query.getOrDefault("SourceRegion")
  valid_21626439 = validateParameter(valid_21626439, JString, required = false,
                                   default = nil)
  if valid_21626439 != nil:
    section.add "SourceRegion", valid_21626439
  var valid_21626440 = query.getOrDefault("OptionGroupName")
  valid_21626440 = validateParameter(valid_21626440, JString, required = false,
                                   default = nil)
  if valid_21626440 != nil:
    section.add "OptionGroupName", valid_21626440
  var valid_21626441 = query.getOrDefault("PreSignedUrl")
  valid_21626441 = validateParameter(valid_21626441, JString, required = false,
                                   default = nil)
  if valid_21626441 != nil:
    section.add "PreSignedUrl", valid_21626441
  var valid_21626442 = query.getOrDefault("Tags")
  valid_21626442 = validateParameter(valid_21626442, JArray, required = false,
                                   default = nil)
  if valid_21626442 != nil:
    section.add "Tags", valid_21626442
  assert query != nil, "query argument is necessary due to required `TargetDBSnapshotIdentifier` field"
  var valid_21626443 = query.getOrDefault("TargetDBSnapshotIdentifier")
  valid_21626443 = validateParameter(valid_21626443, JString, required = true,
                                   default = nil)
  if valid_21626443 != nil:
    section.add "TargetDBSnapshotIdentifier", valid_21626443
  var valid_21626444 = query.getOrDefault("Action")
  valid_21626444 = validateParameter(valid_21626444, JString, required = true,
                                   default = newJString("CopyDBSnapshot"))
  if valid_21626444 != nil:
    section.add "Action", valid_21626444
  var valid_21626445 = query.getOrDefault("SourceDBSnapshotIdentifier")
  valid_21626445 = validateParameter(valid_21626445, JString, required = true,
                                   default = nil)
  if valid_21626445 != nil:
    section.add "SourceDBSnapshotIdentifier", valid_21626445
  var valid_21626446 = query.getOrDefault("KmsKeyId")
  valid_21626446 = validateParameter(valid_21626446, JString, required = false,
                                   default = nil)
  if valid_21626446 != nil:
    section.add "KmsKeyId", valid_21626446
  var valid_21626447 = query.getOrDefault("Version")
  valid_21626447 = validateParameter(valid_21626447, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626447 != nil:
    section.add "Version", valid_21626447
  var valid_21626448 = query.getOrDefault("CopyTags")
  valid_21626448 = validateParameter(valid_21626448, JBool, required = false,
                                   default = nil)
  if valid_21626448 != nil:
    section.add "CopyTags", valid_21626448
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626449 = header.getOrDefault("X-Amz-Date")
  valid_21626449 = validateParameter(valid_21626449, JString, required = false,
                                   default = nil)
  if valid_21626449 != nil:
    section.add "X-Amz-Date", valid_21626449
  var valid_21626450 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626450 = validateParameter(valid_21626450, JString, required = false,
                                   default = nil)
  if valid_21626450 != nil:
    section.add "X-Amz-Security-Token", valid_21626450
  var valid_21626451 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626451 = validateParameter(valid_21626451, JString, required = false,
                                   default = nil)
  if valid_21626451 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626451
  var valid_21626452 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626452 = validateParameter(valid_21626452, JString, required = false,
                                   default = nil)
  if valid_21626452 != nil:
    section.add "X-Amz-Algorithm", valid_21626452
  var valid_21626453 = header.getOrDefault("X-Amz-Signature")
  valid_21626453 = validateParameter(valid_21626453, JString, required = false,
                                   default = nil)
  if valid_21626453 != nil:
    section.add "X-Amz-Signature", valid_21626453
  var valid_21626454 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626454 = validateParameter(valid_21626454, JString, required = false,
                                   default = nil)
  if valid_21626454 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626454
  var valid_21626455 = header.getOrDefault("X-Amz-Credential")
  valid_21626455 = validateParameter(valid_21626455, JString, required = false,
                                   default = nil)
  if valid_21626455 != nil:
    section.add "X-Amz-Credential", valid_21626455
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626456: Call_GetCopyDBSnapshot_21626436; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_21626456.validator(path, query, header, formData, body, _)
  let scheme = call_21626456.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626456.makeUrl(scheme.get, call_21626456.host, call_21626456.base,
                               call_21626456.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626456, uri, valid, _)

proc call*(call_21626457: Call_GetCopyDBSnapshot_21626436;
          TargetDBSnapshotIdentifier: string; SourceDBSnapshotIdentifier: string;
          SourceRegion: string = ""; OptionGroupName: string = "";
          PreSignedUrl: string = ""; Tags: JsonNode = nil;
          Action: string = "CopyDBSnapshot"; KmsKeyId: string = "";
          Version: string = "2014-10-31"; CopyTags: bool = false): Recallable =
  ## getCopyDBSnapshot
  ## <p>Copies the specified DB snapshot. The source DB snapshot must be in the "available" state.</p> <p>You can copy a snapshot from one AWS Region to another. In that case, the AWS Region where you call the <code>CopyDBSnapshot</code> action is the destination AWS Region for the DB snapshot copy. </p> <p>For more information about copying snapshots, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the snapshot to be copied.
  ##   OptionGroupName: string
  ##                  : <p>The name of an option group to associate with the copy of the snapshot.</p> <p>Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the source DB snapshot to copy. </p> <p>You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB snapshot in the same AWS Region.</p> <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL. </p> <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TargetDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the copy of the snapshot. </p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-db-snapshot</code> </p>
  ##   Action: string (required)
  ##   SourceDBSnapshotIdentifier: string (required)
  ##                             : <p>The identifier for the source DB snapshot.</p> <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify <code>rds:mysql-instance1-snapshot-20130805</code>. </p> <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p> <p>If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot. </p> <p>If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid system snapshot in the "available" state.</p> </li> </ul> <p>Example: <code>rds:mydb-2012-04-02-00-01</code> </p> <p>Example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot. </p> <p>If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter. </p> <p>If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted. </p> <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p>
  ##   Version: string (required)
  ##   CopyTags: bool
  ##           : A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.
  var query_21626458 = newJObject()
  add(query_21626458, "SourceRegion", newJString(SourceRegion))
  add(query_21626458, "OptionGroupName", newJString(OptionGroupName))
  add(query_21626458, "PreSignedUrl", newJString(PreSignedUrl))
  if Tags != nil:
    query_21626458.add "Tags", Tags
  add(query_21626458, "TargetDBSnapshotIdentifier",
      newJString(TargetDBSnapshotIdentifier))
  add(query_21626458, "Action", newJString(Action))
  add(query_21626458, "SourceDBSnapshotIdentifier",
      newJString(SourceDBSnapshotIdentifier))
  add(query_21626458, "KmsKeyId", newJString(KmsKeyId))
  add(query_21626458, "Version", newJString(Version))
  add(query_21626458, "CopyTags", newJBool(CopyTags))
  result = call_21626457.call(nil, query_21626458, nil, nil, nil)

var getCopyDBSnapshot* = Call_GetCopyDBSnapshot_21626436(name: "getCopyDBSnapshot",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CopyDBSnapshot", validator: validate_GetCopyDBSnapshot_21626437,
    base: "/", makeUrl: url_GetCopyDBSnapshot_21626438,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCopyOptionGroup_21626502 = ref object of OpenApiRestCall_21625435
proc url_PostCopyOptionGroup_21626504(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCopyOptionGroup_21626503(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Copies the specified option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626505 = query.getOrDefault("Action")
  valid_21626505 = validateParameter(valid_21626505, JString, required = true,
                                   default = newJString("CopyOptionGroup"))
  if valid_21626505 != nil:
    section.add "Action", valid_21626505
  var valid_21626506 = query.getOrDefault("Version")
  valid_21626506 = validateParameter(valid_21626506, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626506 != nil:
    section.add "Version", valid_21626506
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626507 = header.getOrDefault("X-Amz-Date")
  valid_21626507 = validateParameter(valid_21626507, JString, required = false,
                                   default = nil)
  if valid_21626507 != nil:
    section.add "X-Amz-Date", valid_21626507
  var valid_21626508 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626508 = validateParameter(valid_21626508, JString, required = false,
                                   default = nil)
  if valid_21626508 != nil:
    section.add "X-Amz-Security-Token", valid_21626508
  var valid_21626509 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626509 = validateParameter(valid_21626509, JString, required = false,
                                   default = nil)
  if valid_21626509 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626509
  var valid_21626510 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626510 = validateParameter(valid_21626510, JString, required = false,
                                   default = nil)
  if valid_21626510 != nil:
    section.add "X-Amz-Algorithm", valid_21626510
  var valid_21626511 = header.getOrDefault("X-Amz-Signature")
  valid_21626511 = validateParameter(valid_21626511, JString, required = false,
                                   default = nil)
  if valid_21626511 != nil:
    section.add "X-Amz-Signature", valid_21626511
  var valid_21626512 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626512 = validateParameter(valid_21626512, JString, required = false,
                                   default = nil)
  if valid_21626512 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626512
  var valid_21626513 = header.getOrDefault("X-Amz-Credential")
  valid_21626513 = validateParameter(valid_21626513, JString, required = false,
                                   default = nil)
  if valid_21626513 != nil:
    section.add "X-Amz-Credential", valid_21626513
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetOptionGroupDescription: JString (required)
  ##                               : The description for the copied option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   TargetOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `TargetOptionGroupDescription` field"
  var valid_21626514 = formData.getOrDefault("TargetOptionGroupDescription")
  valid_21626514 = validateParameter(valid_21626514, JString, required = true,
                                   default = nil)
  if valid_21626514 != nil:
    section.add "TargetOptionGroupDescription", valid_21626514
  var valid_21626515 = formData.getOrDefault("Tags")
  valid_21626515 = validateParameter(valid_21626515, JArray, required = false,
                                   default = nil)
  if valid_21626515 != nil:
    section.add "Tags", valid_21626515
  var valid_21626516 = formData.getOrDefault("SourceOptionGroupIdentifier")
  valid_21626516 = validateParameter(valid_21626516, JString, required = true,
                                   default = nil)
  if valid_21626516 != nil:
    section.add "SourceOptionGroupIdentifier", valid_21626516
  var valid_21626517 = formData.getOrDefault("TargetOptionGroupIdentifier")
  valid_21626517 = validateParameter(valid_21626517, JString, required = true,
                                   default = nil)
  if valid_21626517 != nil:
    section.add "TargetOptionGroupIdentifier", valid_21626517
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626518: Call_PostCopyOptionGroup_21626502; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Copies the specified option group.
  ## 
  let valid = call_21626518.validator(path, query, header, formData, body, _)
  let scheme = call_21626518.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626518.makeUrl(scheme.get, call_21626518.host, call_21626518.base,
                               call_21626518.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626518, uri, valid, _)

proc call*(call_21626519: Call_PostCopyOptionGroup_21626502;
          TargetOptionGroupDescription: string;
          SourceOptionGroupIdentifier: string;
          TargetOptionGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCopyOptionGroup
  ## Copies the specified option group.
  ##   TargetOptionGroupDescription: string (required)
  ##                               : The description for the copied option group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Action: string (required)
  ##   TargetOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  ##   Version: string (required)
  var query_21626520 = newJObject()
  var formData_21626521 = newJObject()
  add(formData_21626521, "TargetOptionGroupDescription",
      newJString(TargetOptionGroupDescription))
  if Tags != nil:
    formData_21626521.add "Tags", Tags
  add(formData_21626521, "SourceOptionGroupIdentifier",
      newJString(SourceOptionGroupIdentifier))
  add(query_21626520, "Action", newJString(Action))
  add(formData_21626521, "TargetOptionGroupIdentifier",
      newJString(TargetOptionGroupIdentifier))
  add(query_21626520, "Version", newJString(Version))
  result = call_21626519.call(nil, query_21626520, nil, formData_21626521, nil)

var postCopyOptionGroup* = Call_PostCopyOptionGroup_21626502(
    name: "postCopyOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CopyOptionGroup",
    validator: validate_PostCopyOptionGroup_21626503, base: "/",
    makeUrl: url_PostCopyOptionGroup_21626504,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCopyOptionGroup_21626483 = ref object of OpenApiRestCall_21625435
proc url_GetCopyOptionGroup_21626485(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCopyOptionGroup_21626484(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Copies the specified option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   TargetOptionGroupDescription: JString (required)
  ##                               : The description for the copied option group.
  ##   Version: JString (required)
  ##   TargetOptionGroupIdentifier: JString (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `SourceOptionGroupIdentifier` field"
  var valid_21626486 = query.getOrDefault("SourceOptionGroupIdentifier")
  valid_21626486 = validateParameter(valid_21626486, JString, required = true,
                                   default = nil)
  if valid_21626486 != nil:
    section.add "SourceOptionGroupIdentifier", valid_21626486
  var valid_21626487 = query.getOrDefault("Tags")
  valid_21626487 = validateParameter(valid_21626487, JArray, required = false,
                                   default = nil)
  if valid_21626487 != nil:
    section.add "Tags", valid_21626487
  var valid_21626488 = query.getOrDefault("Action")
  valid_21626488 = validateParameter(valid_21626488, JString, required = true,
                                   default = newJString("CopyOptionGroup"))
  if valid_21626488 != nil:
    section.add "Action", valid_21626488
  var valid_21626489 = query.getOrDefault("TargetOptionGroupDescription")
  valid_21626489 = validateParameter(valid_21626489, JString, required = true,
                                   default = nil)
  if valid_21626489 != nil:
    section.add "TargetOptionGroupDescription", valid_21626489
  var valid_21626490 = query.getOrDefault("Version")
  valid_21626490 = validateParameter(valid_21626490, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626490 != nil:
    section.add "Version", valid_21626490
  var valid_21626491 = query.getOrDefault("TargetOptionGroupIdentifier")
  valid_21626491 = validateParameter(valid_21626491, JString, required = true,
                                   default = nil)
  if valid_21626491 != nil:
    section.add "TargetOptionGroupIdentifier", valid_21626491
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626492 = header.getOrDefault("X-Amz-Date")
  valid_21626492 = validateParameter(valid_21626492, JString, required = false,
                                   default = nil)
  if valid_21626492 != nil:
    section.add "X-Amz-Date", valid_21626492
  var valid_21626493 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626493 = validateParameter(valid_21626493, JString, required = false,
                                   default = nil)
  if valid_21626493 != nil:
    section.add "X-Amz-Security-Token", valid_21626493
  var valid_21626494 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626494 = validateParameter(valid_21626494, JString, required = false,
                                   default = nil)
  if valid_21626494 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626494
  var valid_21626495 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626495 = validateParameter(valid_21626495, JString, required = false,
                                   default = nil)
  if valid_21626495 != nil:
    section.add "X-Amz-Algorithm", valid_21626495
  var valid_21626496 = header.getOrDefault("X-Amz-Signature")
  valid_21626496 = validateParameter(valid_21626496, JString, required = false,
                                   default = nil)
  if valid_21626496 != nil:
    section.add "X-Amz-Signature", valid_21626496
  var valid_21626497 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626497 = validateParameter(valid_21626497, JString, required = false,
                                   default = nil)
  if valid_21626497 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626497
  var valid_21626498 = header.getOrDefault("X-Amz-Credential")
  valid_21626498 = validateParameter(valid_21626498, JString, required = false,
                                   default = nil)
  if valid_21626498 != nil:
    section.add "X-Amz-Credential", valid_21626498
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626499: Call_GetCopyOptionGroup_21626483; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Copies the specified option group.
  ## 
  let valid = call_21626499.validator(path, query, header, formData, body, _)
  let scheme = call_21626499.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626499.makeUrl(scheme.get, call_21626499.host, call_21626499.base,
                               call_21626499.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626499, uri, valid, _)

proc call*(call_21626500: Call_GetCopyOptionGroup_21626483;
          SourceOptionGroupIdentifier: string;
          TargetOptionGroupDescription: string;
          TargetOptionGroupIdentifier: string; Tags: JsonNode = nil;
          Action: string = "CopyOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCopyOptionGroup
  ## Copies the specified option group.
  ##   SourceOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier or ARN for the source option group. For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid option group.</p> </li> <li> <p>If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example <code>my-option-group</code>, or a valid ARN.</p> </li> <li> <p>If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example <code>arn:aws:rds:us-west-2:123456789012:og:special-options</code>.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   TargetOptionGroupDescription: string (required)
  ##                               : The description for the copied option group.
  ##   Version: string (required)
  ##   TargetOptionGroupIdentifier: string (required)
  ##                              : <p>The identifier for the copied option group.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-option-group</code> </p>
  var query_21626501 = newJObject()
  add(query_21626501, "SourceOptionGroupIdentifier",
      newJString(SourceOptionGroupIdentifier))
  if Tags != nil:
    query_21626501.add "Tags", Tags
  add(query_21626501, "Action", newJString(Action))
  add(query_21626501, "TargetOptionGroupDescription",
      newJString(TargetOptionGroupDescription))
  add(query_21626501, "Version", newJString(Version))
  add(query_21626501, "TargetOptionGroupIdentifier",
      newJString(TargetOptionGroupIdentifier))
  result = call_21626500.call(nil, query_21626501, nil, nil, nil)

var getCopyOptionGroup* = Call_GetCopyOptionGroup_21626483(
    name: "getCopyOptionGroup", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CopyOptionGroup", validator: validate_GetCopyOptionGroup_21626484,
    base: "/", makeUrl: url_GetCopyOptionGroup_21626485,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateCustomAvailabilityZone_21626541 = ref object of OpenApiRestCall_21625435
proc url_PostCreateCustomAvailabilityZone_21626543(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateCustomAvailabilityZone_21626542(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626544 = query.getOrDefault("Action")
  valid_21626544 = validateParameter(valid_21626544, JString, required = true, default = newJString(
      "CreateCustomAvailabilityZone"))
  if valid_21626544 != nil:
    section.add "Action", valid_21626544
  var valid_21626545 = query.getOrDefault("Version")
  valid_21626545 = validateParameter(valid_21626545, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626545 != nil:
    section.add "Version", valid_21626545
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626546 = header.getOrDefault("X-Amz-Date")
  valid_21626546 = validateParameter(valid_21626546, JString, required = false,
                                   default = nil)
  if valid_21626546 != nil:
    section.add "X-Amz-Date", valid_21626546
  var valid_21626547 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626547 = validateParameter(valid_21626547, JString, required = false,
                                   default = nil)
  if valid_21626547 != nil:
    section.add "X-Amz-Security-Token", valid_21626547
  var valid_21626548 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626548 = validateParameter(valid_21626548, JString, required = false,
                                   default = nil)
  if valid_21626548 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626548
  var valid_21626549 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626549 = validateParameter(valid_21626549, JString, required = false,
                                   default = nil)
  if valid_21626549 != nil:
    section.add "X-Amz-Algorithm", valid_21626549
  var valid_21626550 = header.getOrDefault("X-Amz-Signature")
  valid_21626550 = validateParameter(valid_21626550, JString, required = false,
                                   default = nil)
  if valid_21626550 != nil:
    section.add "X-Amz-Signature", valid_21626550
  var valid_21626551 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626551 = validateParameter(valid_21626551, JString, required = false,
                                   default = nil)
  if valid_21626551 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626551
  var valid_21626552 = header.getOrDefault("X-Amz-Credential")
  valid_21626552 = validateParameter(valid_21626552, JString, required = false,
                                   default = nil)
  if valid_21626552 != nil:
    section.add "X-Amz-Credential", valid_21626552
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewVpnTunnelName: JString
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   CustomAvailabilityZoneName: JString (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   ExistingVpnId: JString
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   VpnTunnelOriginatorIP: JString
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  section = newJObject()
  var valid_21626553 = formData.getOrDefault("NewVpnTunnelName")
  valid_21626553 = validateParameter(valid_21626553, JString, required = false,
                                   default = nil)
  if valid_21626553 != nil:
    section.add "NewVpnTunnelName", valid_21626553
  assert formData != nil, "formData argument is necessary due to required `CustomAvailabilityZoneName` field"
  var valid_21626554 = formData.getOrDefault("CustomAvailabilityZoneName")
  valid_21626554 = validateParameter(valid_21626554, JString, required = true,
                                   default = nil)
  if valid_21626554 != nil:
    section.add "CustomAvailabilityZoneName", valid_21626554
  var valid_21626555 = formData.getOrDefault("ExistingVpnId")
  valid_21626555 = validateParameter(valid_21626555, JString, required = false,
                                   default = nil)
  if valid_21626555 != nil:
    section.add "ExistingVpnId", valid_21626555
  var valid_21626556 = formData.getOrDefault("VpnTunnelOriginatorIP")
  valid_21626556 = validateParameter(valid_21626556, JString, required = false,
                                   default = nil)
  if valid_21626556 != nil:
    section.add "VpnTunnelOriginatorIP", valid_21626556
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626557: Call_PostCreateCustomAvailabilityZone_21626541;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_21626557.validator(path, query, header, formData, body, _)
  let scheme = call_21626557.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626557.makeUrl(scheme.get, call_21626557.host, call_21626557.base,
                               call_21626557.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626557, uri, valid, _)

proc call*(call_21626558: Call_PostCreateCustomAvailabilityZone_21626541;
          CustomAvailabilityZoneName: string; NewVpnTunnelName: string = "";
          Action: string = "CreateCustomAvailabilityZone";
          ExistingVpnId: string = ""; VpnTunnelOriginatorIP: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateCustomAvailabilityZone
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   NewVpnTunnelName: string
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneName: string (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   ExistingVpnId: string
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   VpnTunnelOriginatorIP: string
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   Version: string (required)
  var query_21626559 = newJObject()
  var formData_21626560 = newJObject()
  add(formData_21626560, "NewVpnTunnelName", newJString(NewVpnTunnelName))
  add(query_21626559, "Action", newJString(Action))
  add(formData_21626560, "CustomAvailabilityZoneName",
      newJString(CustomAvailabilityZoneName))
  add(formData_21626560, "ExistingVpnId", newJString(ExistingVpnId))
  add(formData_21626560, "VpnTunnelOriginatorIP",
      newJString(VpnTunnelOriginatorIP))
  add(query_21626559, "Version", newJString(Version))
  result = call_21626558.call(nil, query_21626559, nil, formData_21626560, nil)

var postCreateCustomAvailabilityZone* = Call_PostCreateCustomAvailabilityZone_21626541(
    name: "postCreateCustomAvailabilityZone", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateCustomAvailabilityZone",
    validator: validate_PostCreateCustomAvailabilityZone_21626542, base: "/",
    makeUrl: url_PostCreateCustomAvailabilityZone_21626543,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateCustomAvailabilityZone_21626522 = ref object of OpenApiRestCall_21625435
proc url_GetCreateCustomAvailabilityZone_21626524(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateCustomAvailabilityZone_21626523(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   VpnTunnelOriginatorIP: JString
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   CustomAvailabilityZoneName: JString (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   NewVpnTunnelName: JString
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: JString
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626525 = query.getOrDefault("VpnTunnelOriginatorIP")
  valid_21626525 = validateParameter(valid_21626525, JString, required = false,
                                   default = nil)
  if valid_21626525 != nil:
    section.add "VpnTunnelOriginatorIP", valid_21626525
  assert query != nil, "query argument is necessary due to required `CustomAvailabilityZoneName` field"
  var valid_21626526 = query.getOrDefault("CustomAvailabilityZoneName")
  valid_21626526 = validateParameter(valid_21626526, JString, required = true,
                                   default = nil)
  if valid_21626526 != nil:
    section.add "CustomAvailabilityZoneName", valid_21626526
  var valid_21626527 = query.getOrDefault("NewVpnTunnelName")
  valid_21626527 = validateParameter(valid_21626527, JString, required = false,
                                   default = nil)
  if valid_21626527 != nil:
    section.add "NewVpnTunnelName", valid_21626527
  var valid_21626528 = query.getOrDefault("ExistingVpnId")
  valid_21626528 = validateParameter(valid_21626528, JString, required = false,
                                   default = nil)
  if valid_21626528 != nil:
    section.add "ExistingVpnId", valid_21626528
  var valid_21626529 = query.getOrDefault("Action")
  valid_21626529 = validateParameter(valid_21626529, JString, required = true, default = newJString(
      "CreateCustomAvailabilityZone"))
  if valid_21626529 != nil:
    section.add "Action", valid_21626529
  var valid_21626530 = query.getOrDefault("Version")
  valid_21626530 = validateParameter(valid_21626530, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626530 != nil:
    section.add "Version", valid_21626530
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626531 = header.getOrDefault("X-Amz-Date")
  valid_21626531 = validateParameter(valid_21626531, JString, required = false,
                                   default = nil)
  if valid_21626531 != nil:
    section.add "X-Amz-Date", valid_21626531
  var valid_21626532 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626532 = validateParameter(valid_21626532, JString, required = false,
                                   default = nil)
  if valid_21626532 != nil:
    section.add "X-Amz-Security-Token", valid_21626532
  var valid_21626533 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626533 = validateParameter(valid_21626533, JString, required = false,
                                   default = nil)
  if valid_21626533 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626533
  var valid_21626534 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626534 = validateParameter(valid_21626534, JString, required = false,
                                   default = nil)
  if valid_21626534 != nil:
    section.add "X-Amz-Algorithm", valid_21626534
  var valid_21626535 = header.getOrDefault("X-Amz-Signature")
  valid_21626535 = validateParameter(valid_21626535, JString, required = false,
                                   default = nil)
  if valid_21626535 != nil:
    section.add "X-Amz-Signature", valid_21626535
  var valid_21626536 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626536 = validateParameter(valid_21626536, JString, required = false,
                                   default = nil)
  if valid_21626536 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626536
  var valid_21626537 = header.getOrDefault("X-Amz-Credential")
  valid_21626537 = validateParameter(valid_21626537, JString, required = false,
                                   default = nil)
  if valid_21626537 != nil:
    section.add "X-Amz-Credential", valid_21626537
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626538: Call_GetCreateCustomAvailabilityZone_21626522;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_21626538.validator(path, query, header, formData, body, _)
  let scheme = call_21626538.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626538.makeUrl(scheme.get, call_21626538.host, call_21626538.base,
                               call_21626538.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626538, uri, valid, _)

proc call*(call_21626539: Call_GetCreateCustomAvailabilityZone_21626522;
          CustomAvailabilityZoneName: string; VpnTunnelOriginatorIP: string = "";
          NewVpnTunnelName: string = ""; ExistingVpnId: string = "";
          Action: string = "CreateCustomAvailabilityZone";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateCustomAvailabilityZone
  ## <p>Creates a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   VpnTunnelOriginatorIP: string
  ##                        : <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   CustomAvailabilityZoneName: string (required)
  ##                             : The name of the custom Availability Zone (AZ).
  ##   NewVpnTunnelName: string
  ##                   : <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p> <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
  ##   ExistingVpnId: string
  ##                : The ID of an existing virtual private network (VPN) between the Amazon RDS website and the VMware vSphere cluster.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626540 = newJObject()
  add(query_21626540, "VpnTunnelOriginatorIP", newJString(VpnTunnelOriginatorIP))
  add(query_21626540, "CustomAvailabilityZoneName",
      newJString(CustomAvailabilityZoneName))
  add(query_21626540, "NewVpnTunnelName", newJString(NewVpnTunnelName))
  add(query_21626540, "ExistingVpnId", newJString(ExistingVpnId))
  add(query_21626540, "Action", newJString(Action))
  add(query_21626540, "Version", newJString(Version))
  result = call_21626539.call(nil, query_21626540, nil, nil, nil)

var getCreateCustomAvailabilityZone* = Call_GetCreateCustomAvailabilityZone_21626522(
    name: "getCreateCustomAvailabilityZone", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateCustomAvailabilityZone",
    validator: validate_GetCreateCustomAvailabilityZone_21626523, base: "/",
    makeUrl: url_GetCreateCustomAvailabilityZone_21626524,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBCluster_21626631 = ref object of OpenApiRestCall_21625435
proc url_PostCreateDBCluster_21626633(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBCluster_21626632(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626634 = query.getOrDefault("Action")
  valid_21626634 = validateParameter(valid_21626634, JString, required = true,
                                   default = newJString("CreateDBCluster"))
  if valid_21626634 != nil:
    section.add "Action", valid_21626634
  var valid_21626635 = query.getOrDefault("Version")
  valid_21626635 = validateParameter(valid_21626635, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626635 != nil:
    section.add "Version", valid_21626635
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626636 = header.getOrDefault("X-Amz-Date")
  valid_21626636 = validateParameter(valid_21626636, JString, required = false,
                                   default = nil)
  if valid_21626636 != nil:
    section.add "X-Amz-Date", valid_21626636
  var valid_21626637 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626637 = validateParameter(valid_21626637, JString, required = false,
                                   default = nil)
  if valid_21626637 != nil:
    section.add "X-Amz-Security-Token", valid_21626637
  var valid_21626638 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626638 = validateParameter(valid_21626638, JString, required = false,
                                   default = nil)
  if valid_21626638 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626638
  var valid_21626639 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626639 = validateParameter(valid_21626639, JString, required = false,
                                   default = nil)
  if valid_21626639 != nil:
    section.add "X-Amz-Algorithm", valid_21626639
  var valid_21626640 = header.getOrDefault("X-Amz-Signature")
  valid_21626640 = validateParameter(valid_21626640, JString, required = false,
                                   default = nil)
  if valid_21626640 != nil:
    section.add "X-Amz-Signature", valid_21626640
  var valid_21626641 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626641 = validateParameter(valid_21626641, JString, required = false,
                                   default = nil)
  if valid_21626641 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626641
  var valid_21626642 = header.getOrDefault("X-Amz-Credential")
  valid_21626642 = validateParameter(valid_21626642, JString, required = false,
                                   default = nil)
  if valid_21626642 != nil:
    section.add "X-Amz-Credential", valid_21626642
  result.add "header", section
  ## parameters in `formData` object:
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   GlobalClusterIdentifier: JString
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   PreSignedUrl: JString
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alphanumeric characters. If you do not provide a name, Amazon RDS doesn't create a database in the DB cluster you are creating.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB cluster in.</p> <p> For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurmysql-kerberos.html">Using Kerberos Authentication for Aurora MySQL</a> in the <i>Amazon Aurora User Guide</i>. </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   EngineMode: JString
  ##             : <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p> <ul> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations"> Limitations of Aurora Serverless</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations"> Limitations of Parallel Query</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations"> Requirements for Aurora Global Databases</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations"> Limitations of Multi-Master Clusters</a> </p> </li> </ul>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  section = newJObject()
  var valid_21626643 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_21626643 = validateParameter(valid_21626643, JString, required = false,
                                   default = nil)
  if valid_21626643 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_21626643
  var valid_21626644 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_21626644 = validateParameter(valid_21626644, JString, required = false,
                                   default = nil)
  if valid_21626644 != nil:
    section.add "GlobalClusterIdentifier", valid_21626644
  var valid_21626645 = formData.getOrDefault("EnableHttpEndpoint")
  valid_21626645 = validateParameter(valid_21626645, JBool, required = false,
                                   default = nil)
  if valid_21626645 != nil:
    section.add "EnableHttpEndpoint", valid_21626645
  var valid_21626646 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_21626646 = validateParameter(valid_21626646, JArray, required = false,
                                   default = nil)
  if valid_21626646 != nil:
    section.add "VpcSecurityGroupIds", valid_21626646
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_21626647 = formData.getOrDefault("Engine")
  valid_21626647 = validateParameter(valid_21626647, JString, required = true,
                                   default = nil)
  if valid_21626647 != nil:
    section.add "Engine", valid_21626647
  var valid_21626648 = formData.getOrDefault("PreSignedUrl")
  valid_21626648 = validateParameter(valid_21626648, JString, required = false,
                                   default = nil)
  if valid_21626648 != nil:
    section.add "PreSignedUrl", valid_21626648
  var valid_21626649 = formData.getOrDefault("BackupRetentionPeriod")
  valid_21626649 = validateParameter(valid_21626649, JInt, required = false,
                                   default = nil)
  if valid_21626649 != nil:
    section.add "BackupRetentionPeriod", valid_21626649
  var valid_21626650 = formData.getOrDefault("BacktrackWindow")
  valid_21626650 = validateParameter(valid_21626650, JInt, required = false,
                                   default = nil)
  if valid_21626650 != nil:
    section.add "BacktrackWindow", valid_21626650
  var valid_21626651 = formData.getOrDefault("Tags")
  valid_21626651 = validateParameter(valid_21626651, JArray, required = false,
                                   default = nil)
  if valid_21626651 != nil:
    section.add "Tags", valid_21626651
  var valid_21626652 = formData.getOrDefault("SourceRegion")
  valid_21626652 = validateParameter(valid_21626652, JString, required = false,
                                   default = nil)
  if valid_21626652 != nil:
    section.add "SourceRegion", valid_21626652
  var valid_21626653 = formData.getOrDefault("DeletionProtection")
  valid_21626653 = validateParameter(valid_21626653, JBool, required = false,
                                   default = nil)
  if valid_21626653 != nil:
    section.add "DeletionProtection", valid_21626653
  var valid_21626654 = formData.getOrDefault("DBSubnetGroupName")
  valid_21626654 = validateParameter(valid_21626654, JString, required = false,
                                   default = nil)
  if valid_21626654 != nil:
    section.add "DBSubnetGroupName", valid_21626654
  var valid_21626655 = formData.getOrDefault("AvailabilityZones")
  valid_21626655 = validateParameter(valid_21626655, JArray, required = false,
                                   default = nil)
  if valid_21626655 != nil:
    section.add "AvailabilityZones", valid_21626655
  var valid_21626656 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_21626656 = validateParameter(valid_21626656, JString, required = false,
                                   default = nil)
  if valid_21626656 != nil:
    section.add "DBClusterParameterGroupName", valid_21626656
  var valid_21626657 = formData.getOrDefault("DatabaseName")
  valid_21626657 = validateParameter(valid_21626657, JString, required = false,
                                   default = nil)
  if valid_21626657 != nil:
    section.add "DatabaseName", valid_21626657
  var valid_21626658 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_21626658 = validateParameter(valid_21626658, JArray, required = false,
                                   default = nil)
  if valid_21626658 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21626658
  var valid_21626659 = formData.getOrDefault("CharacterSetName")
  valid_21626659 = validateParameter(valid_21626659, JString, required = false,
                                   default = nil)
  if valid_21626659 != nil:
    section.add "CharacterSetName", valid_21626659
  var valid_21626660 = formData.getOrDefault("Domain")
  valid_21626660 = validateParameter(valid_21626660, JString, required = false,
                                   default = nil)
  if valid_21626660 != nil:
    section.add "Domain", valid_21626660
  var valid_21626661 = formData.getOrDefault("KmsKeyId")
  valid_21626661 = validateParameter(valid_21626661, JString, required = false,
                                   default = nil)
  if valid_21626661 != nil:
    section.add "KmsKeyId", valid_21626661
  var valid_21626662 = formData.getOrDefault("StorageEncrypted")
  valid_21626662 = validateParameter(valid_21626662, JBool, required = false,
                                   default = nil)
  if valid_21626662 != nil:
    section.add "StorageEncrypted", valid_21626662
  var valid_21626663 = formData.getOrDefault("DBClusterIdentifier")
  valid_21626663 = validateParameter(valid_21626663, JString, required = true,
                                   default = nil)
  if valid_21626663 != nil:
    section.add "DBClusterIdentifier", valid_21626663
  var valid_21626664 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_21626664 = validateParameter(valid_21626664, JString, required = false,
                                   default = nil)
  if valid_21626664 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_21626664
  var valid_21626665 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_21626665 = validateParameter(valid_21626665, JString, required = false,
                                   default = nil)
  if valid_21626665 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_21626665
  var valid_21626666 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_21626666 = validateParameter(valid_21626666, JBool, required = false,
                                   default = nil)
  if valid_21626666 != nil:
    section.add "CopyTagsToSnapshot", valid_21626666
  var valid_21626667 = formData.getOrDefault("Port")
  valid_21626667 = validateParameter(valid_21626667, JInt, required = false,
                                   default = nil)
  if valid_21626667 != nil:
    section.add "Port", valid_21626667
  var valid_21626668 = formData.getOrDefault("EngineMode")
  valid_21626668 = validateParameter(valid_21626668, JString, required = false,
                                   default = nil)
  if valid_21626668 != nil:
    section.add "EngineMode", valid_21626668
  var valid_21626669 = formData.getOrDefault("OptionGroupName")
  valid_21626669 = validateParameter(valid_21626669, JString, required = false,
                                   default = nil)
  if valid_21626669 != nil:
    section.add "OptionGroupName", valid_21626669
  var valid_21626670 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_21626670 = validateParameter(valid_21626670, JString, required = false,
                                   default = nil)
  if valid_21626670 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_21626670
  var valid_21626671 = formData.getOrDefault("MasterUserPassword")
  valid_21626671 = validateParameter(valid_21626671, JString, required = false,
                                   default = nil)
  if valid_21626671 != nil:
    section.add "MasterUserPassword", valid_21626671
  var valid_21626672 = formData.getOrDefault("ReplicationSourceIdentifier")
  valid_21626672 = validateParameter(valid_21626672, JString, required = false,
                                   default = nil)
  if valid_21626672 != nil:
    section.add "ReplicationSourceIdentifier", valid_21626672
  var valid_21626673 = formData.getOrDefault("DomainIAMRoleName")
  valid_21626673 = validateParameter(valid_21626673, JString, required = false,
                                   default = nil)
  if valid_21626673 != nil:
    section.add "DomainIAMRoleName", valid_21626673
  var valid_21626674 = formData.getOrDefault("MasterUsername")
  valid_21626674 = validateParameter(valid_21626674, JString, required = false,
                                   default = nil)
  if valid_21626674 != nil:
    section.add "MasterUsername", valid_21626674
  var valid_21626675 = formData.getOrDefault(
      "ScalingConfiguration.SecondsUntilAutoPause")
  valid_21626675 = validateParameter(valid_21626675, JString, required = false,
                                   default = nil)
  if valid_21626675 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_21626675
  var valid_21626676 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21626676 = validateParameter(valid_21626676, JBool, required = false,
                                   default = nil)
  if valid_21626676 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21626676
  var valid_21626677 = formData.getOrDefault("PreferredBackupWindow")
  valid_21626677 = validateParameter(valid_21626677, JString, required = false,
                                   default = nil)
  if valid_21626677 != nil:
    section.add "PreferredBackupWindow", valid_21626677
  var valid_21626678 = formData.getOrDefault("EngineVersion")
  valid_21626678 = validateParameter(valid_21626678, JString, required = false,
                                   default = nil)
  if valid_21626678 != nil:
    section.add "EngineVersion", valid_21626678
  var valid_21626679 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_21626679 = validateParameter(valid_21626679, JString, required = false,
                                   default = nil)
  if valid_21626679 != nil:
    section.add "PreferredMaintenanceWindow", valid_21626679
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626680: Call_PostCreateDBCluster_21626631; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21626680.validator(path, query, header, formData, body, _)
  let scheme = call_21626680.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626680.makeUrl(scheme.get, call_21626680.host, call_21626680.base,
                               call_21626680.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626680, uri, valid, _)

proc call*(call_21626681: Call_PostCreateDBCluster_21626631; Engine: string;
          DBClusterIdentifier: string;
          ScalingConfigurationMaxCapacity: string = "";
          GlobalClusterIdentifier: string = ""; EnableHttpEndpoint: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; PreSignedUrl: string = "";
          BackupRetentionPeriod: int = 0; BacktrackWindow: int = 0;
          Tags: JsonNode = nil; SourceRegion: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          AvailabilityZones: JsonNode = nil;
          DBClusterParameterGroupName: string = ""; DatabaseName: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          CharacterSetName: string = ""; Domain: string = ""; KmsKeyId: string = "";
          StorageEncrypted: bool = false;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationAutoPause: string = "";
          CopyTagsToSnapshot: bool = false; Port: int = 0; EngineMode: string = "";
          OptionGroupName: string = "";
          ScalingConfigurationMinCapacity: string = "";
          MasterUserPassword: string = ""; ReplicationSourceIdentifier: string = "";
          DomainIAMRoleName: string = ""; Action: string = "CreateDBCluster";
          MasterUsername: string = "";
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; EngineVersion: string = "";
          Version: string = "2014-10-31"; PreferredMaintenanceWindow: string = ""): Recallable =
  ## postCreateDBCluster
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   GlobalClusterIdentifier: string
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   PreSignedUrl: string
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alphanumeric characters. If you do not provide a name, Amazon RDS doesn't create a database in the DB cluster you are creating.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB cluster in.</p> <p> For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurmysql-kerberos.html">Using Kerberos Authentication for Aurora MySQL</a> in the <i>Amazon Aurora User Guide</i>. </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   EngineMode: string
  ##             : <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p> <ul> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations"> Limitations of Aurora Serverless</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations"> Limitations of Parallel Query</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations"> Requirements for Aurora Global Databases</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations"> Limitations of Multi-Master Clusters</a> </p> </li> </ul>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Action: string (required)
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  var query_21626682 = newJObject()
  var formData_21626683 = newJObject()
  add(formData_21626683, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(formData_21626683, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_21626683, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  if VpcSecurityGroupIds != nil:
    formData_21626683.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_21626683, "Engine", newJString(Engine))
  add(formData_21626683, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_21626683, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_21626683, "BacktrackWindow", newJInt(BacktrackWindow))
  if Tags != nil:
    formData_21626683.add "Tags", Tags
  add(formData_21626683, "SourceRegion", newJString(SourceRegion))
  add(formData_21626683, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_21626683, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if AvailabilityZones != nil:
    formData_21626683.add "AvailabilityZones", AvailabilityZones
  add(formData_21626683, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_21626683, "DatabaseName", newJString(DatabaseName))
  if EnableCloudwatchLogsExports != nil:
    formData_21626683.add "EnableCloudwatchLogsExports",
                         EnableCloudwatchLogsExports
  add(formData_21626683, "CharacterSetName", newJString(CharacterSetName))
  add(formData_21626683, "Domain", newJString(Domain))
  add(formData_21626683, "KmsKeyId", newJString(KmsKeyId))
  add(formData_21626683, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_21626683, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_21626683, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_21626683, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_21626683, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_21626683, "Port", newJInt(Port))
  add(formData_21626683, "EngineMode", newJString(EngineMode))
  add(formData_21626683, "OptionGroupName", newJString(OptionGroupName))
  add(formData_21626683, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_21626683, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_21626683, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(formData_21626683, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_21626682, "Action", newJString(Action))
  add(formData_21626683, "MasterUsername", newJString(MasterUsername))
  add(formData_21626683, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_21626683, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_21626683, "PreferredBackupWindow",
      newJString(PreferredBackupWindow))
  add(formData_21626683, "EngineVersion", newJString(EngineVersion))
  add(query_21626682, "Version", newJString(Version))
  add(formData_21626683, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_21626681.call(nil, query_21626682, nil, formData_21626683, nil)

var postCreateDBCluster* = Call_PostCreateDBCluster_21626631(
    name: "postCreateDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBCluster",
    validator: validate_PostCreateDBCluster_21626632, base: "/",
    makeUrl: url_PostCreateDBCluster_21626633,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBCluster_21626561 = ref object of OpenApiRestCall_21625435
proc url_GetCreateDBCluster_21626563(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBCluster_21626562(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   ReplicationSourceIdentifier: JString
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB cluster in.</p> <p> For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurmysql-kerberos.html">Using Kerberos Authentication for Aurora MySQL</a> in the <i>Amazon Aurora User Guide</i>. </p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUsername: JString
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   DatabaseName: JString
  ##               : The name for your database of up to 64 alphanumeric characters. If you do not provide a name, Amazon RDS doesn't create a database in the DB cluster you are creating.
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   EngineMode: JString
  ##             : <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p> <ul> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations"> Limitations of Aurora Serverless</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations"> Limitations of Parallel Query</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations"> Requirements for Aurora Global Databases</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations"> Limitations of Multi-Master Clusters</a> </p> </li> </ul>
  ##   PreSignedUrl: JString
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   Action: JString (required)
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   GlobalClusterIdentifier: JString
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   Version: JString (required)
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_21626582 = query.getOrDefault("Engine")
  valid_21626582 = validateParameter(valid_21626582, JString, required = true,
                                   default = nil)
  if valid_21626582 != nil:
    section.add "Engine", valid_21626582
  var valid_21626583 = query.getOrDefault("ReplicationSourceIdentifier")
  valid_21626583 = validateParameter(valid_21626583, JString, required = false,
                                   default = nil)
  if valid_21626583 != nil:
    section.add "ReplicationSourceIdentifier", valid_21626583
  var valid_21626584 = query.getOrDefault("DBClusterParameterGroupName")
  valid_21626584 = validateParameter(valid_21626584, JString, required = false,
                                   default = nil)
  if valid_21626584 != nil:
    section.add "DBClusterParameterGroupName", valid_21626584
  var valid_21626585 = query.getOrDefault("StorageEncrypted")
  valid_21626585 = validateParameter(valid_21626585, JBool, required = false,
                                   default = nil)
  if valid_21626585 != nil:
    section.add "StorageEncrypted", valid_21626585
  var valid_21626586 = query.getOrDefault("AvailabilityZones")
  valid_21626586 = validateParameter(valid_21626586, JArray, required = false,
                                   default = nil)
  if valid_21626586 != nil:
    section.add "AvailabilityZones", valid_21626586
  var valid_21626587 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21626587 = validateParameter(valid_21626587, JBool, required = false,
                                   default = nil)
  if valid_21626587 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21626587
  var valid_21626588 = query.getOrDefault("DBClusterIdentifier")
  valid_21626588 = validateParameter(valid_21626588, JString, required = true,
                                   default = nil)
  if valid_21626588 != nil:
    section.add "DBClusterIdentifier", valid_21626588
  var valid_21626589 = query.getOrDefault("MasterUserPassword")
  valid_21626589 = validateParameter(valid_21626589, JString, required = false,
                                   default = nil)
  if valid_21626589 != nil:
    section.add "MasterUserPassword", valid_21626589
  var valid_21626590 = query.getOrDefault("DomainIAMRoleName")
  valid_21626590 = validateParameter(valid_21626590, JString, required = false,
                                   default = nil)
  if valid_21626590 != nil:
    section.add "DomainIAMRoleName", valid_21626590
  var valid_21626591 = query.getOrDefault("BackupRetentionPeriod")
  valid_21626591 = validateParameter(valid_21626591, JInt, required = false,
                                   default = nil)
  if valid_21626591 != nil:
    section.add "BackupRetentionPeriod", valid_21626591
  var valid_21626592 = query.getOrDefault("CopyTagsToSnapshot")
  valid_21626592 = validateParameter(valid_21626592, JBool, required = false,
                                   default = nil)
  if valid_21626592 != nil:
    section.add "CopyTagsToSnapshot", valid_21626592
  var valid_21626593 = query.getOrDefault("DeletionProtection")
  valid_21626593 = validateParameter(valid_21626593, JBool, required = false,
                                   default = nil)
  if valid_21626593 != nil:
    section.add "DeletionProtection", valid_21626593
  var valid_21626594 = query.getOrDefault("EnableHttpEndpoint")
  valid_21626594 = validateParameter(valid_21626594, JBool, required = false,
                                   default = nil)
  if valid_21626594 != nil:
    section.add "EnableHttpEndpoint", valid_21626594
  var valid_21626595 = query.getOrDefault("DBSubnetGroupName")
  valid_21626595 = validateParameter(valid_21626595, JString, required = false,
                                   default = nil)
  if valid_21626595 != nil:
    section.add "DBSubnetGroupName", valid_21626595
  var valid_21626596 = query.getOrDefault("KmsKeyId")
  valid_21626596 = validateParameter(valid_21626596, JString, required = false,
                                   default = nil)
  if valid_21626596 != nil:
    section.add "KmsKeyId", valid_21626596
  var valid_21626597 = query.getOrDefault("Domain")
  valid_21626597 = validateParameter(valid_21626597, JString, required = false,
                                   default = nil)
  if valid_21626597 != nil:
    section.add "Domain", valid_21626597
  var valid_21626598 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_21626598 = validateParameter(valid_21626598, JString, required = false,
                                   default = nil)
  if valid_21626598 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_21626598
  var valid_21626599 = query.getOrDefault("EngineVersion")
  valid_21626599 = validateParameter(valid_21626599, JString, required = false,
                                   default = nil)
  if valid_21626599 != nil:
    section.add "EngineVersion", valid_21626599
  var valid_21626600 = query.getOrDefault("PreferredBackupWindow")
  valid_21626600 = validateParameter(valid_21626600, JString, required = false,
                                   default = nil)
  if valid_21626600 != nil:
    section.add "PreferredBackupWindow", valid_21626600
  var valid_21626601 = query.getOrDefault("MasterUsername")
  valid_21626601 = validateParameter(valid_21626601, JString, required = false,
                                   default = nil)
  if valid_21626601 != nil:
    section.add "MasterUsername", valid_21626601
  var valid_21626602 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_21626602 = validateParameter(valid_21626602, JString, required = false,
                                   default = nil)
  if valid_21626602 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_21626602
  var valid_21626603 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_21626603 = validateParameter(valid_21626603, JString, required = false,
                                   default = nil)
  if valid_21626603 != nil:
    section.add "PreferredMaintenanceWindow", valid_21626603
  var valid_21626604 = query.getOrDefault("SourceRegion")
  valid_21626604 = validateParameter(valid_21626604, JString, required = false,
                                   default = nil)
  if valid_21626604 != nil:
    section.add "SourceRegion", valid_21626604
  var valid_21626605 = query.getOrDefault("DatabaseName")
  valid_21626605 = validateParameter(valid_21626605, JString, required = false,
                                   default = nil)
  if valid_21626605 != nil:
    section.add "DatabaseName", valid_21626605
  var valid_21626606 = query.getOrDefault("OptionGroupName")
  valid_21626606 = validateParameter(valid_21626606, JString, required = false,
                                   default = nil)
  if valid_21626606 != nil:
    section.add "OptionGroupName", valid_21626606
  var valid_21626607 = query.getOrDefault("EngineMode")
  valid_21626607 = validateParameter(valid_21626607, JString, required = false,
                                   default = nil)
  if valid_21626607 != nil:
    section.add "EngineMode", valid_21626607
  var valid_21626608 = query.getOrDefault("PreSignedUrl")
  valid_21626608 = validateParameter(valid_21626608, JString, required = false,
                                   default = nil)
  if valid_21626608 != nil:
    section.add "PreSignedUrl", valid_21626608
  var valid_21626609 = query.getOrDefault("VpcSecurityGroupIds")
  valid_21626609 = validateParameter(valid_21626609, JArray, required = false,
                                   default = nil)
  if valid_21626609 != nil:
    section.add "VpcSecurityGroupIds", valid_21626609
  var valid_21626610 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_21626610 = validateParameter(valid_21626610, JArray, required = false,
                                   default = nil)
  if valid_21626610 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21626610
  var valid_21626611 = query.getOrDefault("Tags")
  valid_21626611 = validateParameter(valid_21626611, JArray, required = false,
                                   default = nil)
  if valid_21626611 != nil:
    section.add "Tags", valid_21626611
  var valid_21626612 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_21626612 = validateParameter(valid_21626612, JString, required = false,
                                   default = nil)
  if valid_21626612 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_21626612
  var valid_21626613 = query.getOrDefault("Action")
  valid_21626613 = validateParameter(valid_21626613, JString, required = true,
                                   default = newJString("CreateDBCluster"))
  if valid_21626613 != nil:
    section.add "Action", valid_21626613
  var valid_21626614 = query.getOrDefault("CharacterSetName")
  valid_21626614 = validateParameter(valid_21626614, JString, required = false,
                                   default = nil)
  if valid_21626614 != nil:
    section.add "CharacterSetName", valid_21626614
  var valid_21626615 = query.getOrDefault("BacktrackWindow")
  valid_21626615 = validateParameter(valid_21626615, JInt, required = false,
                                   default = nil)
  if valid_21626615 != nil:
    section.add "BacktrackWindow", valid_21626615
  var valid_21626616 = query.getOrDefault("GlobalClusterIdentifier")
  valid_21626616 = validateParameter(valid_21626616, JString, required = false,
                                   default = nil)
  if valid_21626616 != nil:
    section.add "GlobalClusterIdentifier", valid_21626616
  var valid_21626617 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_21626617 = validateParameter(valid_21626617, JString, required = false,
                                   default = nil)
  if valid_21626617 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_21626617
  var valid_21626618 = query.getOrDefault("Port")
  valid_21626618 = validateParameter(valid_21626618, JInt, required = false,
                                   default = nil)
  if valid_21626618 != nil:
    section.add "Port", valid_21626618
  var valid_21626619 = query.getOrDefault("Version")
  valid_21626619 = validateParameter(valid_21626619, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626619 != nil:
    section.add "Version", valid_21626619
  var valid_21626620 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_21626620 = validateParameter(valid_21626620, JString, required = false,
                                   default = nil)
  if valid_21626620 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_21626620
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626621 = header.getOrDefault("X-Amz-Date")
  valid_21626621 = validateParameter(valid_21626621, JString, required = false,
                                   default = nil)
  if valid_21626621 != nil:
    section.add "X-Amz-Date", valid_21626621
  var valid_21626622 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626622 = validateParameter(valid_21626622, JString, required = false,
                                   default = nil)
  if valid_21626622 != nil:
    section.add "X-Amz-Security-Token", valid_21626622
  var valid_21626623 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626623 = validateParameter(valid_21626623, JString, required = false,
                                   default = nil)
  if valid_21626623 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626623
  var valid_21626624 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626624 = validateParameter(valid_21626624, JString, required = false,
                                   default = nil)
  if valid_21626624 != nil:
    section.add "X-Amz-Algorithm", valid_21626624
  var valid_21626625 = header.getOrDefault("X-Amz-Signature")
  valid_21626625 = validateParameter(valid_21626625, JString, required = false,
                                   default = nil)
  if valid_21626625 != nil:
    section.add "X-Amz-Signature", valid_21626625
  var valid_21626626 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626626 = validateParameter(valid_21626626, JString, required = false,
                                   default = nil)
  if valid_21626626 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626626
  var valid_21626627 = header.getOrDefault("X-Amz-Credential")
  valid_21626627 = validateParameter(valid_21626627, JString, required = false,
                                   default = nil)
  if valid_21626627 != nil:
    section.add "X-Amz-Credential", valid_21626627
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626628: Call_GetCreateDBCluster_21626561; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21626628.validator(path, query, header, formData, body, _)
  let scheme = call_21626628.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626628.makeUrl(scheme.get, call_21626628.host, call_21626628.base,
                               call_21626628.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626628, uri, valid, _)

proc call*(call_21626629: Call_GetCreateDBCluster_21626561; Engine: string;
          DBClusterIdentifier: string; ReplicationSourceIdentifier: string = "";
          DBClusterParameterGroupName: string = ""; StorageEncrypted: bool = false;
          AvailabilityZones: JsonNode = nil;
          EnableIAMDatabaseAuthentication: bool = false;
          MasterUserPassword: string = ""; DomainIAMRoleName: string = "";
          BackupRetentionPeriod: int = 0; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; EnableHttpEndpoint: bool = false;
          DBSubnetGroupName: string = ""; KmsKeyId: string = ""; Domain: string = "";
          ScalingConfigurationMaxCapacity: string = ""; EngineVersion: string = "";
          PreferredBackupWindow: string = ""; MasterUsername: string = "";
          ScalingConfigurationMinCapacity: string = "";
          PreferredMaintenanceWindow: string = ""; SourceRegion: string = "";
          DatabaseName: string = ""; OptionGroupName: string = "";
          EngineMode: string = ""; PreSignedUrl: string = "";
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; Tags: JsonNode = nil;
          ScalingConfigurationAutoPause: string = "";
          Action: string = "CreateDBCluster"; CharacterSetName: string = "";
          BacktrackWindow: int = 0; GlobalClusterIdentifier: string = "";
          ScalingConfigurationSecondsUntilAutoPause: string = ""; Port: int = 0;
          Version: string = "2014-10-31";
          ScalingConfigurationTimeoutAction: string = ""): Recallable =
  ## getCreateDBCluster
  ## <p>Creates a new Amazon Aurora DB cluster.</p> <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create the DB cluster as a Read Replica of another DB cluster or Amazon RDS MySQL DB instance. For cross-region replication where the DB cluster identified by <code>ReplicationSourceIdentifier</code> is encrypted, you must also specify the <code>PreSignedUrl</code> parameter.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this DB cluster.</p> <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code> </p>
  ##   ReplicationSourceIdentifier: string
  ##                              : The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
  ##   DBClusterParameterGroupName: string
  ##                              : <p> The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> </ul>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the DB cluster is encrypted.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>. 
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB cluster.</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If an encryption key isn't specified in <code>KmsKeyId</code>:</p> <ul> <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key. </p> </li> <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default encryption key.</p> </li> </ul> <p>AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p> <p>If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set <code>KmsKeyId</code> to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.</p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB cluster in.</p> <p> For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurmysql-kerberos.html">Using Kerberos Authentication for Aurora MySQL</a> in the <i>Amazon Aurora User Guide</i>. </p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   MasterUsername: string
  ##                 : <p>The name of the master user for the DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   DatabaseName: string
  ##               : The name for your database of up to 64 alphanumeric characters. If you do not provide a name, Amazon RDS doesn't create a database in the DB cluster you are creating.
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   EngineMode: string
  ##             : <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p> <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p> <ul> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations"> Limitations of Aurora Serverless</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations"> Limitations of Parallel Query</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations"> Requirements for Aurora Global Databases</a> </p> </li> <li> <p> <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations"> Limitations of Multi-Master Clusters</a> </p> </li> </ul>
  ##   PreSignedUrl: string
  ##               : <p>A URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p> <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p> <p>The pre-signed URL request must contain the following parameter values:</p> <ul> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p> </li> <li> <p> <code>DestinationRegion</code> - The name of the AWS Region that Aurora Read Replica will be created in.</p> </li> <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with this DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   Action: string (required)
  ##   CharacterSetName: string
  ##                   : A value that indicates that the DB cluster should be associated with the specified CharacterSet.
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0. </p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   GlobalClusterIdentifier: string
  ##                          :  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   Port: int
  ##       : <p>The port number on which the instances in the DB cluster accept connections.</p> <p> Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql. </p>
  ##   Version: string (required)
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  var query_21626630 = newJObject()
  add(query_21626630, "Engine", newJString(Engine))
  add(query_21626630, "ReplicationSourceIdentifier",
      newJString(ReplicationSourceIdentifier))
  add(query_21626630, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_21626630, "StorageEncrypted", newJBool(StorageEncrypted))
  if AvailabilityZones != nil:
    query_21626630.add "AvailabilityZones", AvailabilityZones
  add(query_21626630, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_21626630, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21626630, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_21626630, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_21626630, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_21626630, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_21626630, "DeletionProtection", newJBool(DeletionProtection))
  add(query_21626630, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(query_21626630, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21626630, "KmsKeyId", newJString(KmsKeyId))
  add(query_21626630, "Domain", newJString(Domain))
  add(query_21626630, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_21626630, "EngineVersion", newJString(EngineVersion))
  add(query_21626630, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_21626630, "MasterUsername", newJString(MasterUsername))
  add(query_21626630, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_21626630, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_21626630, "SourceRegion", newJString(SourceRegion))
  add(query_21626630, "DatabaseName", newJString(DatabaseName))
  add(query_21626630, "OptionGroupName", newJString(OptionGroupName))
  add(query_21626630, "EngineMode", newJString(EngineMode))
  add(query_21626630, "PreSignedUrl", newJString(PreSignedUrl))
  if VpcSecurityGroupIds != nil:
    query_21626630.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_21626630.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  if Tags != nil:
    query_21626630.add "Tags", Tags
  add(query_21626630, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_21626630, "Action", newJString(Action))
  add(query_21626630, "CharacterSetName", newJString(CharacterSetName))
  add(query_21626630, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_21626630, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_21626630, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_21626630, "Port", newJInt(Port))
  add(query_21626630, "Version", newJString(Version))
  add(query_21626630, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  result = call_21626629.call(nil, query_21626630, nil, nil, nil)

var getCreateDBCluster* = Call_GetCreateDBCluster_21626561(
    name: "getCreateDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBCluster", validator: validate_GetCreateDBCluster_21626562,
    base: "/", makeUrl: url_GetCreateDBCluster_21626563,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterEndpoint_21626705 = ref object of OpenApiRestCall_21625435
proc url_PostCreateDBClusterEndpoint_21626707(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterEndpoint_21626706(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626708 = query.getOrDefault("Action")
  valid_21626708 = validateParameter(valid_21626708, JString, required = true, default = newJString(
      "CreateDBClusterEndpoint"))
  if valid_21626708 != nil:
    section.add "Action", valid_21626708
  var valid_21626709 = query.getOrDefault("Version")
  valid_21626709 = validateParameter(valid_21626709, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626709 != nil:
    section.add "Version", valid_21626709
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626710 = header.getOrDefault("X-Amz-Date")
  valid_21626710 = validateParameter(valid_21626710, JString, required = false,
                                   default = nil)
  if valid_21626710 != nil:
    section.add "X-Amz-Date", valid_21626710
  var valid_21626711 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626711 = validateParameter(valid_21626711, JString, required = false,
                                   default = nil)
  if valid_21626711 != nil:
    section.add "X-Amz-Security-Token", valid_21626711
  var valid_21626712 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626712 = validateParameter(valid_21626712, JString, required = false,
                                   default = nil)
  if valid_21626712 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626712
  var valid_21626713 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626713 = validateParameter(valid_21626713, JString, required = false,
                                   default = nil)
  if valid_21626713 != nil:
    section.add "X-Amz-Algorithm", valid_21626713
  var valid_21626714 = header.getOrDefault("X-Amz-Signature")
  valid_21626714 = validateParameter(valid_21626714, JString, required = false,
                                   default = nil)
  if valid_21626714 != nil:
    section.add "X-Amz-Signature", valid_21626714
  var valid_21626715 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626715 = validateParameter(valid_21626715, JString, required = false,
                                   default = nil)
  if valid_21626715 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626715
  var valid_21626716 = header.getOrDefault("X-Amz-Credential")
  valid_21626716 = validateParameter(valid_21626716, JString, required = false,
                                   default = nil)
  if valid_21626716 != nil:
    section.add "X-Amz-Credential", valid_21626716
  result.add "header", section
  ## parameters in `formData` object:
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EndpointType: JString (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  section = newJObject()
  var valid_21626717 = formData.getOrDefault("ExcludedMembers")
  valid_21626717 = validateParameter(valid_21626717, JArray, required = false,
                                   default = nil)
  if valid_21626717 != nil:
    section.add "ExcludedMembers", valid_21626717
  var valid_21626718 = formData.getOrDefault("Tags")
  valid_21626718 = validateParameter(valid_21626718, JArray, required = false,
                                   default = nil)
  if valid_21626718 != nil:
    section.add "Tags", valid_21626718
  assert formData != nil,
        "formData argument is necessary due to required `EndpointType` field"
  var valid_21626719 = formData.getOrDefault("EndpointType")
  valid_21626719 = validateParameter(valid_21626719, JString, required = true,
                                   default = nil)
  if valid_21626719 != nil:
    section.add "EndpointType", valid_21626719
  var valid_21626720 = formData.getOrDefault("DBClusterIdentifier")
  valid_21626720 = validateParameter(valid_21626720, JString, required = true,
                                   default = nil)
  if valid_21626720 != nil:
    section.add "DBClusterIdentifier", valid_21626720
  var valid_21626721 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_21626721 = validateParameter(valid_21626721, JString, required = true,
                                   default = nil)
  if valid_21626721 != nil:
    section.add "DBClusterEndpointIdentifier", valid_21626721
  var valid_21626722 = formData.getOrDefault("StaticMembers")
  valid_21626722 = validateParameter(valid_21626722, JArray, required = false,
                                   default = nil)
  if valid_21626722 != nil:
    section.add "StaticMembers", valid_21626722
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626723: Call_PostCreateDBClusterEndpoint_21626705;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21626723.validator(path, query, header, formData, body, _)
  let scheme = call_21626723.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626723.makeUrl(scheme.get, call_21626723.host, call_21626723.base,
                               call_21626723.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626723, uri, valid, _)

proc call*(call_21626724: Call_PostCreateDBClusterEndpoint_21626705;
          EndpointType: string; DBClusterIdentifier: string;
          DBClusterEndpointIdentifier: string; ExcludedMembers: JsonNode = nil;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterEndpoint";
          StaticMembers: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterEndpoint
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EndpointType: string (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Version: string (required)
  var query_21626725 = newJObject()
  var formData_21626726 = newJObject()
  if ExcludedMembers != nil:
    formData_21626726.add "ExcludedMembers", ExcludedMembers
  if Tags != nil:
    formData_21626726.add "Tags", Tags
  add(formData_21626726, "EndpointType", newJString(EndpointType))
  add(query_21626725, "Action", newJString(Action))
  add(formData_21626726, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_21626726, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    formData_21626726.add "StaticMembers", StaticMembers
  add(query_21626725, "Version", newJString(Version))
  result = call_21626724.call(nil, query_21626725, nil, formData_21626726, nil)

var postCreateDBClusterEndpoint* = Call_PostCreateDBClusterEndpoint_21626705(
    name: "postCreateDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterEndpoint",
    validator: validate_PostCreateDBClusterEndpoint_21626706, base: "/",
    makeUrl: url_PostCreateDBClusterEndpoint_21626707,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterEndpoint_21626684 = ref object of OpenApiRestCall_21625435
proc url_GetCreateDBClusterEndpoint_21626686(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterEndpoint_21626685(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EndpointType: JString (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `EndpointType` field"
  var valid_21626687 = query.getOrDefault("EndpointType")
  valid_21626687 = validateParameter(valid_21626687, JString, required = true,
                                   default = nil)
  if valid_21626687 != nil:
    section.add "EndpointType", valid_21626687
  var valid_21626688 = query.getOrDefault("DBClusterIdentifier")
  valid_21626688 = validateParameter(valid_21626688, JString, required = true,
                                   default = nil)
  if valid_21626688 != nil:
    section.add "DBClusterIdentifier", valid_21626688
  var valid_21626689 = query.getOrDefault("StaticMembers")
  valid_21626689 = validateParameter(valid_21626689, JArray, required = false,
                                   default = nil)
  if valid_21626689 != nil:
    section.add "StaticMembers", valid_21626689
  var valid_21626690 = query.getOrDefault("Tags")
  valid_21626690 = validateParameter(valid_21626690, JArray, required = false,
                                   default = nil)
  if valid_21626690 != nil:
    section.add "Tags", valid_21626690
  var valid_21626691 = query.getOrDefault("Action")
  valid_21626691 = validateParameter(valid_21626691, JString, required = true, default = newJString(
      "CreateDBClusterEndpoint"))
  if valid_21626691 != nil:
    section.add "Action", valid_21626691
  var valid_21626692 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_21626692 = validateParameter(valid_21626692, JString, required = true,
                                   default = nil)
  if valid_21626692 != nil:
    section.add "DBClusterEndpointIdentifier", valid_21626692
  var valid_21626693 = query.getOrDefault("ExcludedMembers")
  valid_21626693 = validateParameter(valid_21626693, JArray, required = false,
                                   default = nil)
  if valid_21626693 != nil:
    section.add "ExcludedMembers", valid_21626693
  var valid_21626694 = query.getOrDefault("Version")
  valid_21626694 = validateParameter(valid_21626694, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626694 != nil:
    section.add "Version", valid_21626694
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626695 = header.getOrDefault("X-Amz-Date")
  valid_21626695 = validateParameter(valid_21626695, JString, required = false,
                                   default = nil)
  if valid_21626695 != nil:
    section.add "X-Amz-Date", valid_21626695
  var valid_21626696 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626696 = validateParameter(valid_21626696, JString, required = false,
                                   default = nil)
  if valid_21626696 != nil:
    section.add "X-Amz-Security-Token", valid_21626696
  var valid_21626697 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626697 = validateParameter(valid_21626697, JString, required = false,
                                   default = nil)
  if valid_21626697 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626697
  var valid_21626698 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626698 = validateParameter(valid_21626698, JString, required = false,
                                   default = nil)
  if valid_21626698 != nil:
    section.add "X-Amz-Algorithm", valid_21626698
  var valid_21626699 = header.getOrDefault("X-Amz-Signature")
  valid_21626699 = validateParameter(valid_21626699, JString, required = false,
                                   default = nil)
  if valid_21626699 != nil:
    section.add "X-Amz-Signature", valid_21626699
  var valid_21626700 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626700 = validateParameter(valid_21626700, JString, required = false,
                                   default = nil)
  if valid_21626700 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626700
  var valid_21626701 = header.getOrDefault("X-Amz-Credential")
  valid_21626701 = validateParameter(valid_21626701, JString, required = false,
                                   default = nil)
  if valid_21626701 != nil:
    section.add "X-Amz-Credential", valid_21626701
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626702: Call_GetCreateDBClusterEndpoint_21626684;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21626702.validator(path, query, header, formData, body, _)
  let scheme = call_21626702.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626702.makeUrl(scheme.get, call_21626702.host, call_21626702.base,
                               call_21626702.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626702, uri, valid, _)

proc call*(call_21626703: Call_GetCreateDBClusterEndpoint_21626684;
          EndpointType: string; DBClusterIdentifier: string;
          DBClusterEndpointIdentifier: string; StaticMembers: JsonNode = nil;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterEndpoint";
          ExcludedMembers: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterEndpoint
  ## <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   EndpointType: string (required)
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Version: string (required)
  var query_21626704 = newJObject()
  add(query_21626704, "EndpointType", newJString(EndpointType))
  add(query_21626704, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  if StaticMembers != nil:
    query_21626704.add "StaticMembers", StaticMembers
  if Tags != nil:
    query_21626704.add "Tags", Tags
  add(query_21626704, "Action", newJString(Action))
  add(query_21626704, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if ExcludedMembers != nil:
    query_21626704.add "ExcludedMembers", ExcludedMembers
  add(query_21626704, "Version", newJString(Version))
  result = call_21626703.call(nil, query_21626704, nil, nil, nil)

var getCreateDBClusterEndpoint* = Call_GetCreateDBClusterEndpoint_21626684(
    name: "getCreateDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterEndpoint",
    validator: validate_GetCreateDBClusterEndpoint_21626685, base: "/",
    makeUrl: url_GetCreateDBClusterEndpoint_21626686,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterParameterGroup_21626746 = ref object of OpenApiRestCall_21625435
proc url_PostCreateDBClusterParameterGroup_21626748(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterParameterGroup_21626747(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626749 = query.getOrDefault("Action")
  valid_21626749 = validateParameter(valid_21626749, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_21626749 != nil:
    section.add "Action", valid_21626749
  var valid_21626750 = query.getOrDefault("Version")
  valid_21626750 = validateParameter(valid_21626750, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626750 != nil:
    section.add "Version", valid_21626750
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626751 = header.getOrDefault("X-Amz-Date")
  valid_21626751 = validateParameter(valid_21626751, JString, required = false,
                                   default = nil)
  if valid_21626751 != nil:
    section.add "X-Amz-Date", valid_21626751
  var valid_21626752 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626752 = validateParameter(valid_21626752, JString, required = false,
                                   default = nil)
  if valid_21626752 != nil:
    section.add "X-Amz-Security-Token", valid_21626752
  var valid_21626753 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626753 = validateParameter(valid_21626753, JString, required = false,
                                   default = nil)
  if valid_21626753 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626753
  var valid_21626754 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626754 = validateParameter(valid_21626754, JString, required = false,
                                   default = nil)
  if valid_21626754 != nil:
    section.add "X-Amz-Algorithm", valid_21626754
  var valid_21626755 = header.getOrDefault("X-Amz-Signature")
  valid_21626755 = validateParameter(valid_21626755, JString, required = false,
                                   default = nil)
  if valid_21626755 != nil:
    section.add "X-Amz-Signature", valid_21626755
  var valid_21626756 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626756 = validateParameter(valid_21626756, JString, required = false,
                                   default = nil)
  if valid_21626756 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626756
  var valid_21626757 = header.getOrDefault("X-Amz-Credential")
  valid_21626757 = validateParameter(valid_21626757, JString, required = false,
                                   default = nil)
  if valid_21626757 != nil:
    section.add "X-Amz-Credential", valid_21626757
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  section = newJObject()
  var valid_21626758 = formData.getOrDefault("Tags")
  valid_21626758 = validateParameter(valid_21626758, JArray, required = false,
                                   default = nil)
  if valid_21626758 != nil:
    section.add "Tags", valid_21626758
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_21626759 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_21626759 = validateParameter(valid_21626759, JString, required = true,
                                   default = nil)
  if valid_21626759 != nil:
    section.add "DBClusterParameterGroupName", valid_21626759
  var valid_21626760 = formData.getOrDefault("DBParameterGroupFamily")
  valid_21626760 = validateParameter(valid_21626760, JString, required = true,
                                   default = nil)
  if valid_21626760 != nil:
    section.add "DBParameterGroupFamily", valid_21626760
  var valid_21626761 = formData.getOrDefault("Description")
  valid_21626761 = validateParameter(valid_21626761, JString, required = true,
                                   default = nil)
  if valid_21626761 != nil:
    section.add "Description", valid_21626761
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626762: Call_PostCreateDBClusterParameterGroup_21626746;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21626762.validator(path, query, header, formData, body, _)
  let scheme = call_21626762.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626762.makeUrl(scheme.get, call_21626762.host, call_21626762.base,
                               call_21626762.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626762, uri, valid, _)

proc call*(call_21626763: Call_PostCreateDBClusterParameterGroup_21626746;
          DBClusterParameterGroupName: string; DBParameterGroupFamily: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  var query_21626764 = newJObject()
  var formData_21626765 = newJObject()
  if Tags != nil:
    formData_21626765.add "Tags", Tags
  add(query_21626764, "Action", newJString(Action))
  add(formData_21626765, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_21626765, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  add(query_21626764, "Version", newJString(Version))
  add(formData_21626765, "Description", newJString(Description))
  result = call_21626763.call(nil, query_21626764, nil, formData_21626765, nil)

var postCreateDBClusterParameterGroup* = Call_PostCreateDBClusterParameterGroup_21626746(
    name: "postCreateDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_PostCreateDBClusterParameterGroup_21626747, base: "/",
    makeUrl: url_PostCreateDBClusterParameterGroup_21626748,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterParameterGroup_21626727 = ref object of OpenApiRestCall_21625435
proc url_GetCreateDBClusterParameterGroup_21626729(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterParameterGroup_21626728(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Description: JString (required)
  ##              : The description for the DB cluster parameter group.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_21626730 = query.getOrDefault("DBClusterParameterGroupName")
  valid_21626730 = validateParameter(valid_21626730, JString, required = true,
                                   default = nil)
  if valid_21626730 != nil:
    section.add "DBClusterParameterGroupName", valid_21626730
  var valid_21626731 = query.getOrDefault("Description")
  valid_21626731 = validateParameter(valid_21626731, JString, required = true,
                                   default = nil)
  if valid_21626731 != nil:
    section.add "Description", valid_21626731
  var valid_21626732 = query.getOrDefault("DBParameterGroupFamily")
  valid_21626732 = validateParameter(valid_21626732, JString, required = true,
                                   default = nil)
  if valid_21626732 != nil:
    section.add "DBParameterGroupFamily", valid_21626732
  var valid_21626733 = query.getOrDefault("Tags")
  valid_21626733 = validateParameter(valid_21626733, JArray, required = false,
                                   default = nil)
  if valid_21626733 != nil:
    section.add "Tags", valid_21626733
  var valid_21626734 = query.getOrDefault("Action")
  valid_21626734 = validateParameter(valid_21626734, JString, required = true, default = newJString(
      "CreateDBClusterParameterGroup"))
  if valid_21626734 != nil:
    section.add "Action", valid_21626734
  var valid_21626735 = query.getOrDefault("Version")
  valid_21626735 = validateParameter(valid_21626735, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626735 != nil:
    section.add "Version", valid_21626735
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626736 = header.getOrDefault("X-Amz-Date")
  valid_21626736 = validateParameter(valid_21626736, JString, required = false,
                                   default = nil)
  if valid_21626736 != nil:
    section.add "X-Amz-Date", valid_21626736
  var valid_21626737 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626737 = validateParameter(valid_21626737, JString, required = false,
                                   default = nil)
  if valid_21626737 != nil:
    section.add "X-Amz-Security-Token", valid_21626737
  var valid_21626738 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626738 = validateParameter(valid_21626738, JString, required = false,
                                   default = nil)
  if valid_21626738 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626738
  var valid_21626739 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626739 = validateParameter(valid_21626739, JString, required = false,
                                   default = nil)
  if valid_21626739 != nil:
    section.add "X-Amz-Algorithm", valid_21626739
  var valid_21626740 = header.getOrDefault("X-Amz-Signature")
  valid_21626740 = validateParameter(valid_21626740, JString, required = false,
                                   default = nil)
  if valid_21626740 != nil:
    section.add "X-Amz-Signature", valid_21626740
  var valid_21626741 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626741 = validateParameter(valid_21626741, JString, required = false,
                                   default = nil)
  if valid_21626741 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626741
  var valid_21626742 = header.getOrDefault("X-Amz-Credential")
  valid_21626742 = validateParameter(valid_21626742, JString, required = false,
                                   default = nil)
  if valid_21626742 != nil:
    section.add "X-Amz-Credential", valid_21626742
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626743: Call_GetCreateDBClusterParameterGroup_21626727;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21626743.validator(path, query, header, formData, body, _)
  let scheme = call_21626743.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626743.makeUrl(scheme.get, call_21626743.host, call_21626743.base,
                               call_21626743.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626743, uri, valid, _)

proc call*(call_21626744: Call_GetCreateDBClusterParameterGroup_21626727;
          DBClusterParameterGroupName: string; Description: string;
          DBParameterGroupFamily: string; Tags: JsonNode = nil;
          Action: string = "CreateDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterParameterGroup
  ## <p>Creates a new DB cluster parameter group.</p> <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p> <p> A DB cluster parameter group is initially created with the default parameters for the database engine used by instances in the DB cluster. To provide custom values for any of the parameters, you must modify the group after creating it using <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to associate it with your DB cluster using <code>ModifyDBCluster</code>. When you associate a new DB cluster parameter group with a running DB cluster, you need to reboot the DB instances in the DB cluster without failover for the new DB cluster parameter group and associated settings to take effect. </p> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> </important> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB cluster parameter group.</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Description: string (required)
  ##              : The description for the DB cluster parameter group.
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>aurora-postgresql9.6</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626745 = newJObject()
  add(query_21626745, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_21626745, "Description", newJString(Description))
  add(query_21626745, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_21626745.add "Tags", Tags
  add(query_21626745, "Action", newJString(Action))
  add(query_21626745, "Version", newJString(Version))
  result = call_21626744.call(nil, query_21626745, nil, nil, nil)

var getCreateDBClusterParameterGroup* = Call_GetCreateDBClusterParameterGroup_21626727(
    name: "getCreateDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterParameterGroup",
    validator: validate_GetCreateDBClusterParameterGroup_21626728, base: "/",
    makeUrl: url_GetCreateDBClusterParameterGroup_21626729,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBClusterSnapshot_21626784 = ref object of OpenApiRestCall_21625435
proc url_PostCreateDBClusterSnapshot_21626786(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBClusterSnapshot_21626785(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626787 = query.getOrDefault("Action")
  valid_21626787 = validateParameter(valid_21626787, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_21626787 != nil:
    section.add "Action", valid_21626787
  var valid_21626788 = query.getOrDefault("Version")
  valid_21626788 = validateParameter(valid_21626788, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626788 != nil:
    section.add "Version", valid_21626788
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626789 = header.getOrDefault("X-Amz-Date")
  valid_21626789 = validateParameter(valid_21626789, JString, required = false,
                                   default = nil)
  if valid_21626789 != nil:
    section.add "X-Amz-Date", valid_21626789
  var valid_21626790 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626790 = validateParameter(valid_21626790, JString, required = false,
                                   default = nil)
  if valid_21626790 != nil:
    section.add "X-Amz-Security-Token", valid_21626790
  var valid_21626791 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626791 = validateParameter(valid_21626791, JString, required = false,
                                   default = nil)
  if valid_21626791 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626791
  var valid_21626792 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626792 = validateParameter(valid_21626792, JString, required = false,
                                   default = nil)
  if valid_21626792 != nil:
    section.add "X-Amz-Algorithm", valid_21626792
  var valid_21626793 = header.getOrDefault("X-Amz-Signature")
  valid_21626793 = validateParameter(valid_21626793, JString, required = false,
                                   default = nil)
  if valid_21626793 != nil:
    section.add "X-Amz-Signature", valid_21626793
  var valid_21626794 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626794 = validateParameter(valid_21626794, JString, required = false,
                                   default = nil)
  if valid_21626794 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626794
  var valid_21626795 = header.getOrDefault("X-Amz-Credential")
  valid_21626795 = validateParameter(valid_21626795, JString, required = false,
                                   default = nil)
  if valid_21626795 != nil:
    section.add "X-Amz-Credential", valid_21626795
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_21626796 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_21626796 = validateParameter(valid_21626796, JString, required = true,
                                   default = nil)
  if valid_21626796 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_21626796
  var valid_21626797 = formData.getOrDefault("Tags")
  valid_21626797 = validateParameter(valid_21626797, JArray, required = false,
                                   default = nil)
  if valid_21626797 != nil:
    section.add "Tags", valid_21626797
  var valid_21626798 = formData.getOrDefault("DBClusterIdentifier")
  valid_21626798 = validateParameter(valid_21626798, JString, required = true,
                                   default = nil)
  if valid_21626798 != nil:
    section.add "DBClusterIdentifier", valid_21626798
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626799: Call_PostCreateDBClusterSnapshot_21626784;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21626799.validator(path, query, header, formData, body, _)
  let scheme = call_21626799.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626799.makeUrl(scheme.get, call_21626799.host, call_21626799.base,
                               call_21626799.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626799, uri, valid, _)

proc call*(call_21626800: Call_PostCreateDBClusterSnapshot_21626784;
          DBClusterSnapshotIdentifier: string; DBClusterIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBClusterSnapshot
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Version: string (required)
  var query_21626801 = newJObject()
  var formData_21626802 = newJObject()
  add(formData_21626802, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    formData_21626802.add "Tags", Tags
  add(query_21626801, "Action", newJString(Action))
  add(formData_21626802, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21626801, "Version", newJString(Version))
  result = call_21626800.call(nil, query_21626801, nil, formData_21626802, nil)

var postCreateDBClusterSnapshot* = Call_PostCreateDBClusterSnapshot_21626784(
    name: "postCreateDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_PostCreateDBClusterSnapshot_21626785, base: "/",
    makeUrl: url_PostCreateDBClusterSnapshot_21626786,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBClusterSnapshot_21626766 = ref object of OpenApiRestCall_21625435
proc url_GetCreateDBClusterSnapshot_21626768(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBClusterSnapshot_21626767(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21626769 = query.getOrDefault("DBClusterIdentifier")
  valid_21626769 = validateParameter(valid_21626769, JString, required = true,
                                   default = nil)
  if valid_21626769 != nil:
    section.add "DBClusterIdentifier", valid_21626769
  var valid_21626770 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_21626770 = validateParameter(valid_21626770, JString, required = true,
                                   default = nil)
  if valid_21626770 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_21626770
  var valid_21626771 = query.getOrDefault("Tags")
  valid_21626771 = validateParameter(valid_21626771, JArray, required = false,
                                   default = nil)
  if valid_21626771 != nil:
    section.add "Tags", valid_21626771
  var valid_21626772 = query.getOrDefault("Action")
  valid_21626772 = validateParameter(valid_21626772, JString, required = true, default = newJString(
      "CreateDBClusterSnapshot"))
  if valid_21626772 != nil:
    section.add "Action", valid_21626772
  var valid_21626773 = query.getOrDefault("Version")
  valid_21626773 = validateParameter(valid_21626773, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626773 != nil:
    section.add "Version", valid_21626773
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626774 = header.getOrDefault("X-Amz-Date")
  valid_21626774 = validateParameter(valid_21626774, JString, required = false,
                                   default = nil)
  if valid_21626774 != nil:
    section.add "X-Amz-Date", valid_21626774
  var valid_21626775 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626775 = validateParameter(valid_21626775, JString, required = false,
                                   default = nil)
  if valid_21626775 != nil:
    section.add "X-Amz-Security-Token", valid_21626775
  var valid_21626776 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626776 = validateParameter(valid_21626776, JString, required = false,
                                   default = nil)
  if valid_21626776 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626776
  var valid_21626777 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626777 = validateParameter(valid_21626777, JString, required = false,
                                   default = nil)
  if valid_21626777 != nil:
    section.add "X-Amz-Algorithm", valid_21626777
  var valid_21626778 = header.getOrDefault("X-Amz-Signature")
  valid_21626778 = validateParameter(valid_21626778, JString, required = false,
                                   default = nil)
  if valid_21626778 != nil:
    section.add "X-Amz-Signature", valid_21626778
  var valid_21626779 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626779 = validateParameter(valid_21626779, JString, required = false,
                                   default = nil)
  if valid_21626779 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626779
  var valid_21626780 = header.getOrDefault("X-Amz-Credential")
  valid_21626780 = validateParameter(valid_21626780, JString, required = false,
                                   default = nil)
  if valid_21626780 != nil:
    section.add "X-Amz-Credential", valid_21626780
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626781: Call_GetCreateDBClusterSnapshot_21626766;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21626781.validator(path, query, header, formData, body, _)
  let scheme = call_21626781.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626781.makeUrl(scheme.get, call_21626781.host, call_21626781.base,
                               call_21626781.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626781, uri, valid, _)

proc call*(call_21626782: Call_GetCreateDBClusterSnapshot_21626766;
          DBClusterIdentifier: string; DBClusterSnapshotIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBClusterSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBClusterSnapshot
  ## <p>Creates a snapshot of a DB cluster. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1-snapshot1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21626783 = newJObject()
  add(query_21626783, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21626783, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Tags != nil:
    query_21626783.add "Tags", Tags
  add(query_21626783, "Action", newJString(Action))
  add(query_21626783, "Version", newJString(Version))
  result = call_21626782.call(nil, query_21626783, nil, nil, nil)

var getCreateDBClusterSnapshot* = Call_GetCreateDBClusterSnapshot_21626766(
    name: "getCreateDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBClusterSnapshot",
    validator: validate_GetCreateDBClusterSnapshot_21626767, base: "/",
    makeUrl: url_GetCreateDBClusterSnapshot_21626768,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstance_21626864 = ref object of OpenApiRestCall_21625435
proc url_PostCreateDBInstance_21626866(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBInstance_21626865(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626867 = query.getOrDefault("Action")
  valid_21626867 = validateParameter(valid_21626867, JString, required = true,
                                   default = newJString("CreateDBInstance"))
  if valid_21626867 != nil:
    section.add "Action", valid_21626867
  var valid_21626868 = query.getOrDefault("Version")
  valid_21626868 = validateParameter(valid_21626868, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626868 != nil:
    section.add "Version", valid_21626868
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626869 = header.getOrDefault("X-Amz-Date")
  valid_21626869 = validateParameter(valid_21626869, JString, required = false,
                                   default = nil)
  if valid_21626869 != nil:
    section.add "X-Amz-Date", valid_21626869
  var valid_21626870 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626870 = validateParameter(valid_21626870, JString, required = false,
                                   default = nil)
  if valid_21626870 != nil:
    section.add "X-Amz-Security-Token", valid_21626870
  var valid_21626871 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626871 = validateParameter(valid_21626871, JString, required = false,
                                   default = nil)
  if valid_21626871 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626871
  var valid_21626872 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626872 = validateParameter(valid_21626872, JString, required = false,
                                   default = nil)
  if valid_21626872 != nil:
    section.add "X-Amz-Algorithm", valid_21626872
  var valid_21626873 = header.getOrDefault("X-Amz-Signature")
  valid_21626873 = validateParameter(valid_21626873, JString, required = false,
                                   default = nil)
  if valid_21626873 != nil:
    section.add "X-Amz-Signature", valid_21626873
  var valid_21626874 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626874 = validateParameter(valid_21626874, JString, required = false,
                                   default = nil)
  if valid_21626874 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626874
  var valid_21626875 = header.getOrDefault("X-Amz-Credential")
  valid_21626875 = validateParameter(valid_21626875, JString, required = false,
                                   default = nil)
  if valid_21626875 != nil:
    section.add "X-Amz-Credential", valid_21626875
  result.add "header", section
  ## parameters in `formData` object:
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: JBool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   Timezone: JString
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   CharacterSetName: JString
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   StorageEncrypted: JBool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBClusterIdentifier: JString
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   DBName: JString
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group. Also, that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: JString
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  section = newJObject()
  var valid_21626876 = formData.getOrDefault("ProcessorFeatures")
  valid_21626876 = validateParameter(valid_21626876, JArray, required = false,
                                   default = nil)
  if valid_21626876 != nil:
    section.add "ProcessorFeatures", valid_21626876
  var valid_21626877 = formData.getOrDefault("EnablePerformanceInsights")
  valid_21626877 = validateParameter(valid_21626877, JBool, required = false,
                                   default = nil)
  if valid_21626877 != nil:
    section.add "EnablePerformanceInsights", valid_21626877
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_21626878 = formData.getOrDefault("Engine")
  valid_21626878 = validateParameter(valid_21626878, JString, required = true,
                                   default = nil)
  if valid_21626878 != nil:
    section.add "Engine", valid_21626878
  var valid_21626879 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_21626879 = validateParameter(valid_21626879, JArray, required = false,
                                   default = nil)
  if valid_21626879 != nil:
    section.add "VpcSecurityGroupIds", valid_21626879
  var valid_21626880 = formData.getOrDefault("Iops")
  valid_21626880 = validateParameter(valid_21626880, JInt, required = false,
                                   default = nil)
  if valid_21626880 != nil:
    section.add "Iops", valid_21626880
  var valid_21626881 = formData.getOrDefault("BackupRetentionPeriod")
  valid_21626881 = validateParameter(valid_21626881, JInt, required = false,
                                   default = nil)
  if valid_21626881 != nil:
    section.add "BackupRetentionPeriod", valid_21626881
  var valid_21626882 = formData.getOrDefault("MaxAllocatedStorage")
  valid_21626882 = validateParameter(valid_21626882, JInt, required = false,
                                   default = nil)
  if valid_21626882 != nil:
    section.add "MaxAllocatedStorage", valid_21626882
  var valid_21626883 = formData.getOrDefault("Tags")
  valid_21626883 = validateParameter(valid_21626883, JArray, required = false,
                                   default = nil)
  if valid_21626883 != nil:
    section.add "Tags", valid_21626883
  var valid_21626884 = formData.getOrDefault("TdeCredentialArn")
  valid_21626884 = validateParameter(valid_21626884, JString, required = false,
                                   default = nil)
  if valid_21626884 != nil:
    section.add "TdeCredentialArn", valid_21626884
  var valid_21626885 = formData.getOrDefault("DeletionProtection")
  valid_21626885 = validateParameter(valid_21626885, JBool, required = false,
                                   default = nil)
  if valid_21626885 != nil:
    section.add "DeletionProtection", valid_21626885
  var valid_21626886 = formData.getOrDefault("DBSubnetGroupName")
  valid_21626886 = validateParameter(valid_21626886, JString, required = false,
                                   default = nil)
  if valid_21626886 != nil:
    section.add "DBSubnetGroupName", valid_21626886
  var valid_21626887 = formData.getOrDefault("MultiAZ")
  valid_21626887 = validateParameter(valid_21626887, JBool, required = false,
                                   default = nil)
  if valid_21626887 != nil:
    section.add "MultiAZ", valid_21626887
  var valid_21626888 = formData.getOrDefault("PubliclyAccessible")
  valid_21626888 = validateParameter(valid_21626888, JBool, required = false,
                                   default = nil)
  if valid_21626888 != nil:
    section.add "PubliclyAccessible", valid_21626888
  var valid_21626889 = formData.getOrDefault("StorageType")
  valid_21626889 = validateParameter(valid_21626889, JString, required = false,
                                   default = nil)
  if valid_21626889 != nil:
    section.add "StorageType", valid_21626889
  var valid_21626890 = formData.getOrDefault("Timezone")
  valid_21626890 = validateParameter(valid_21626890, JString, required = false,
                                   default = nil)
  if valid_21626890 != nil:
    section.add "Timezone", valid_21626890
  var valid_21626891 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_21626891 = validateParameter(valid_21626891, JArray, required = false,
                                   default = nil)
  if valid_21626891 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21626891
  var valid_21626892 = formData.getOrDefault("CharacterSetName")
  valid_21626892 = validateParameter(valid_21626892, JString, required = false,
                                   default = nil)
  if valid_21626892 != nil:
    section.add "CharacterSetName", valid_21626892
  var valid_21626893 = formData.getOrDefault("Domain")
  valid_21626893 = validateParameter(valid_21626893, JString, required = false,
                                   default = nil)
  if valid_21626893 != nil:
    section.add "Domain", valid_21626893
  var valid_21626894 = formData.getOrDefault("LicenseModel")
  valid_21626894 = validateParameter(valid_21626894, JString, required = false,
                                   default = nil)
  if valid_21626894 != nil:
    section.add "LicenseModel", valid_21626894
  var valid_21626895 = formData.getOrDefault("KmsKeyId")
  valid_21626895 = validateParameter(valid_21626895, JString, required = false,
                                   default = nil)
  if valid_21626895 != nil:
    section.add "KmsKeyId", valid_21626895
  var valid_21626896 = formData.getOrDefault("StorageEncrypted")
  valid_21626896 = validateParameter(valid_21626896, JBool, required = false,
                                   default = nil)
  if valid_21626896 != nil:
    section.add "StorageEncrypted", valid_21626896
  var valid_21626897 = formData.getOrDefault("DBClusterIdentifier")
  valid_21626897 = validateParameter(valid_21626897, JString, required = false,
                                   default = nil)
  if valid_21626897 != nil:
    section.add "DBClusterIdentifier", valid_21626897
  var valid_21626898 = formData.getOrDefault("MonitoringRoleArn")
  valid_21626898 = validateParameter(valid_21626898, JString, required = false,
                                   default = nil)
  if valid_21626898 != nil:
    section.add "MonitoringRoleArn", valid_21626898
  var valid_21626899 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_21626899 = validateParameter(valid_21626899, JInt, required = false,
                                   default = nil)
  if valid_21626899 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_21626899
  var valid_21626900 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_21626900 = validateParameter(valid_21626900, JString, required = false,
                                   default = nil)
  if valid_21626900 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_21626900
  var valid_21626901 = formData.getOrDefault("DBSecurityGroups")
  valid_21626901 = validateParameter(valid_21626901, JArray, required = false,
                                   default = nil)
  if valid_21626901 != nil:
    section.add "DBSecurityGroups", valid_21626901
  var valid_21626902 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_21626902 = validateParameter(valid_21626902, JBool, required = false,
                                   default = nil)
  if valid_21626902 != nil:
    section.add "CopyTagsToSnapshot", valid_21626902
  var valid_21626903 = formData.getOrDefault("Port")
  valid_21626903 = validateParameter(valid_21626903, JInt, required = false,
                                   default = nil)
  if valid_21626903 != nil:
    section.add "Port", valid_21626903
  var valid_21626904 = formData.getOrDefault("DBName")
  valid_21626904 = validateParameter(valid_21626904, JString, required = false,
                                   default = nil)
  if valid_21626904 != nil:
    section.add "DBName", valid_21626904
  var valid_21626905 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21626905 = validateParameter(valid_21626905, JString, required = true,
                                   default = nil)
  if valid_21626905 != nil:
    section.add "DBInstanceIdentifier", valid_21626905
  var valid_21626906 = formData.getOrDefault("OptionGroupName")
  valid_21626906 = validateParameter(valid_21626906, JString, required = false,
                                   default = nil)
  if valid_21626906 != nil:
    section.add "OptionGroupName", valid_21626906
  var valid_21626907 = formData.getOrDefault("DBParameterGroupName")
  valid_21626907 = validateParameter(valid_21626907, JString, required = false,
                                   default = nil)
  if valid_21626907 != nil:
    section.add "DBParameterGroupName", valid_21626907
  var valid_21626908 = formData.getOrDefault("MasterUserPassword")
  valid_21626908 = validateParameter(valid_21626908, JString, required = false,
                                   default = nil)
  if valid_21626908 != nil:
    section.add "MasterUserPassword", valid_21626908
  var valid_21626909 = formData.getOrDefault("TdeCredentialPassword")
  valid_21626909 = validateParameter(valid_21626909, JString, required = false,
                                   default = nil)
  if valid_21626909 != nil:
    section.add "TdeCredentialPassword", valid_21626909
  var valid_21626910 = formData.getOrDefault("AvailabilityZone")
  valid_21626910 = validateParameter(valid_21626910, JString, required = false,
                                   default = nil)
  if valid_21626910 != nil:
    section.add "AvailabilityZone", valid_21626910
  var valid_21626911 = formData.getOrDefault("MonitoringInterval")
  valid_21626911 = validateParameter(valid_21626911, JInt, required = false,
                                   default = nil)
  if valid_21626911 != nil:
    section.add "MonitoringInterval", valid_21626911
  var valid_21626912 = formData.getOrDefault("DomainIAMRoleName")
  valid_21626912 = validateParameter(valid_21626912, JString, required = false,
                                   default = nil)
  if valid_21626912 != nil:
    section.add "DomainIAMRoleName", valid_21626912
  var valid_21626913 = formData.getOrDefault("AllocatedStorage")
  valid_21626913 = validateParameter(valid_21626913, JInt, required = false,
                                   default = nil)
  if valid_21626913 != nil:
    section.add "AllocatedStorage", valid_21626913
  var valid_21626914 = formData.getOrDefault("MasterUsername")
  valid_21626914 = validateParameter(valid_21626914, JString, required = false,
                                   default = nil)
  if valid_21626914 != nil:
    section.add "MasterUsername", valid_21626914
  var valid_21626915 = formData.getOrDefault("PromotionTier")
  valid_21626915 = validateParameter(valid_21626915, JInt, required = false,
                                   default = nil)
  if valid_21626915 != nil:
    section.add "PromotionTier", valid_21626915
  var valid_21626916 = formData.getOrDefault("DBInstanceClass")
  valid_21626916 = validateParameter(valid_21626916, JString, required = true,
                                   default = nil)
  if valid_21626916 != nil:
    section.add "DBInstanceClass", valid_21626916
  var valid_21626917 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21626917 = validateParameter(valid_21626917, JBool, required = false,
                                   default = nil)
  if valid_21626917 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21626917
  var valid_21626918 = formData.getOrDefault("PreferredBackupWindow")
  valid_21626918 = validateParameter(valid_21626918, JString, required = false,
                                   default = nil)
  if valid_21626918 != nil:
    section.add "PreferredBackupWindow", valid_21626918
  var valid_21626919 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_21626919 = validateParameter(valid_21626919, JBool, required = false,
                                   default = nil)
  if valid_21626919 != nil:
    section.add "AutoMinorVersionUpgrade", valid_21626919
  var valid_21626920 = formData.getOrDefault("EngineVersion")
  valid_21626920 = validateParameter(valid_21626920, JString, required = false,
                                   default = nil)
  if valid_21626920 != nil:
    section.add "EngineVersion", valid_21626920
  var valid_21626921 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_21626921 = validateParameter(valid_21626921, JString, required = false,
                                   default = nil)
  if valid_21626921 != nil:
    section.add "PreferredMaintenanceWindow", valid_21626921
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626922: Call_PostCreateDBInstance_21626864; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_21626922.validator(path, query, header, formData, body, _)
  let scheme = call_21626922.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626922.makeUrl(scheme.get, call_21626922.host, call_21626922.base,
                               call_21626922.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626922, uri, valid, _)

proc call*(call_21626923: Call_PostCreateDBInstance_21626864; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          ProcessorFeatures: JsonNode = nil;
          EnablePerformanceInsights: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; Iops: int = 0;
          BackupRetentionPeriod: int = 0; MaxAllocatedStorage: int = 0;
          Tags: JsonNode = nil; TdeCredentialArn: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          MultiAZ: bool = false; PubliclyAccessible: bool = false;
          StorageType: string = ""; Timezone: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          CharacterSetName: string = ""; Domain: string = ""; LicenseModel: string = "";
          KmsKeyId: string = ""; StorageEncrypted: bool = false;
          DBClusterIdentifier: string = ""; MonitoringRoleArn: string = "";
          PerformanceInsightsRetentionPeriod: int = 0;
          PerformanceInsightsKMSKeyId: string = "";
          DBSecurityGroups: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          Port: int = 0; DBName: string = ""; OptionGroupName: string = "";
          DBParameterGroupName: string = ""; MasterUserPassword: string = "";
          TdeCredentialPassword: string = ""; AvailabilityZone: string = "";
          MonitoringInterval: int = 0; DomainIAMRoleName: string = "";
          Action: string = "CreateDBInstance"; AllocatedStorage: int = 0;
          MasterUsername: string = ""; PromotionTier: int = 0;
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          EngineVersion: string = ""; Version: string = "2014-10-31";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postCreateDBInstance
  ## Creates a new DB instance.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: bool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   Timezone: string
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   CharacterSetName: string
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   StorageEncrypted: bool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   DBClusterIdentifier: string
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   DBName: string
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group. Also, that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: string
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Action: string (required)
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   MasterUsername: string
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  var query_21626924 = newJObject()
  var formData_21626925 = newJObject()
  if ProcessorFeatures != nil:
    formData_21626925.add "ProcessorFeatures", ProcessorFeatures
  add(formData_21626925, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_21626925, "Engine", newJString(Engine))
  if VpcSecurityGroupIds != nil:
    formData_21626925.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_21626925, "Iops", newJInt(Iops))
  add(formData_21626925, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_21626925, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  if Tags != nil:
    formData_21626925.add "Tags", Tags
  add(formData_21626925, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(formData_21626925, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_21626925, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_21626925, "MultiAZ", newJBool(MultiAZ))
  add(formData_21626925, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_21626925, "StorageType", newJString(StorageType))
  add(formData_21626925, "Timezone", newJString(Timezone))
  if EnableCloudwatchLogsExports != nil:
    formData_21626925.add "EnableCloudwatchLogsExports",
                         EnableCloudwatchLogsExports
  add(formData_21626925, "CharacterSetName", newJString(CharacterSetName))
  add(formData_21626925, "Domain", newJString(Domain))
  add(formData_21626925, "LicenseModel", newJString(LicenseModel))
  add(formData_21626925, "KmsKeyId", newJString(KmsKeyId))
  add(formData_21626925, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_21626925, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_21626925, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_21626925, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_21626925, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  if DBSecurityGroups != nil:
    formData_21626925.add "DBSecurityGroups", DBSecurityGroups
  add(formData_21626925, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_21626925, "Port", newJInt(Port))
  add(formData_21626925, "DBName", newJString(DBName))
  add(formData_21626925, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_21626925, "OptionGroupName", newJString(OptionGroupName))
  add(formData_21626925, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_21626925, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_21626925, "TdeCredentialPassword",
      newJString(TdeCredentialPassword))
  add(formData_21626925, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_21626925, "MonitoringInterval", newJInt(MonitoringInterval))
  add(formData_21626925, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_21626924, "Action", newJString(Action))
  add(formData_21626925, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_21626925, "MasterUsername", newJString(MasterUsername))
  add(formData_21626925, "PromotionTier", newJInt(PromotionTier))
  add(formData_21626925, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_21626925, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_21626925, "PreferredBackupWindow",
      newJString(PreferredBackupWindow))
  add(formData_21626925, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_21626925, "EngineVersion", newJString(EngineVersion))
  add(query_21626924, "Version", newJString(Version))
  add(formData_21626925, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_21626923.call(nil, query_21626924, nil, formData_21626925, nil)

var postCreateDBInstance* = Call_PostCreateDBInstance_21626864(
    name: "postCreateDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_PostCreateDBInstance_21626865, base: "/",
    makeUrl: url_PostCreateDBInstance_21626866,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstance_21626803 = ref object of OpenApiRestCall_21625435
proc url_GetCreateDBInstance_21626805(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBInstance_21626804(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a new DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   StorageEncrypted: JBool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   DBClusterIdentifier: JString
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   DBName: JString
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   DeletionProtection: JBool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   OptionGroupName: JString
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group. Also, that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   AvailabilityZone: JString
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   LicenseModel: JString
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Action: JString (required)
  ##   CharacterSetName: JString
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   Timezone: JString
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626806 = query.getOrDefault("MonitoringInterval")
  valid_21626806 = validateParameter(valid_21626806, JInt, required = false,
                                   default = nil)
  if valid_21626806 != nil:
    section.add "MonitoringInterval", valid_21626806
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_21626807 = query.getOrDefault("Engine")
  valid_21626807 = validateParameter(valid_21626807, JString, required = true,
                                   default = nil)
  if valid_21626807 != nil:
    section.add "Engine", valid_21626807
  var valid_21626808 = query.getOrDefault("PromotionTier")
  valid_21626808 = validateParameter(valid_21626808, JInt, required = false,
                                   default = nil)
  if valid_21626808 != nil:
    section.add "PromotionTier", valid_21626808
  var valid_21626809 = query.getOrDefault("MaxAllocatedStorage")
  valid_21626809 = validateParameter(valid_21626809, JInt, required = false,
                                   default = nil)
  if valid_21626809 != nil:
    section.add "MaxAllocatedStorage", valid_21626809
  var valid_21626810 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_21626810 = validateParameter(valid_21626810, JInt, required = false,
                                   default = nil)
  if valid_21626810 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_21626810
  var valid_21626811 = query.getOrDefault("StorageEncrypted")
  valid_21626811 = validateParameter(valid_21626811, JBool, required = false,
                                   default = nil)
  if valid_21626811 != nil:
    section.add "StorageEncrypted", valid_21626811
  var valid_21626812 = query.getOrDefault("AllocatedStorage")
  valid_21626812 = validateParameter(valid_21626812, JInt, required = false,
                                   default = nil)
  if valid_21626812 != nil:
    section.add "AllocatedStorage", valid_21626812
  var valid_21626813 = query.getOrDefault("StorageType")
  valid_21626813 = validateParameter(valid_21626813, JString, required = false,
                                   default = nil)
  if valid_21626813 != nil:
    section.add "StorageType", valid_21626813
  var valid_21626814 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21626814 = validateParameter(valid_21626814, JBool, required = false,
                                   default = nil)
  if valid_21626814 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21626814
  var valid_21626815 = query.getOrDefault("DBClusterIdentifier")
  valid_21626815 = validateParameter(valid_21626815, JString, required = false,
                                   default = nil)
  if valid_21626815 != nil:
    section.add "DBClusterIdentifier", valid_21626815
  var valid_21626816 = query.getOrDefault("DBSecurityGroups")
  valid_21626816 = validateParameter(valid_21626816, JArray, required = false,
                                   default = nil)
  if valid_21626816 != nil:
    section.add "DBSecurityGroups", valid_21626816
  var valid_21626817 = query.getOrDefault("MasterUserPassword")
  valid_21626817 = validateParameter(valid_21626817, JString, required = false,
                                   default = nil)
  if valid_21626817 != nil:
    section.add "MasterUserPassword", valid_21626817
  var valid_21626818 = query.getOrDefault("MonitoringRoleArn")
  valid_21626818 = validateParameter(valid_21626818, JString, required = false,
                                   default = nil)
  if valid_21626818 != nil:
    section.add "MonitoringRoleArn", valid_21626818
  var valid_21626819 = query.getOrDefault("MultiAZ")
  valid_21626819 = validateParameter(valid_21626819, JBool, required = false,
                                   default = nil)
  if valid_21626819 != nil:
    section.add "MultiAZ", valid_21626819
  var valid_21626820 = query.getOrDefault("TdeCredentialPassword")
  valid_21626820 = validateParameter(valid_21626820, JString, required = false,
                                   default = nil)
  if valid_21626820 != nil:
    section.add "TdeCredentialPassword", valid_21626820
  var valid_21626821 = query.getOrDefault("DomainIAMRoleName")
  valid_21626821 = validateParameter(valid_21626821, JString, required = false,
                                   default = nil)
  if valid_21626821 != nil:
    section.add "DomainIAMRoleName", valid_21626821
  var valid_21626822 = query.getOrDefault("BackupRetentionPeriod")
  valid_21626822 = validateParameter(valid_21626822, JInt, required = false,
                                   default = nil)
  if valid_21626822 != nil:
    section.add "BackupRetentionPeriod", valid_21626822
  var valid_21626823 = query.getOrDefault("DBName")
  valid_21626823 = validateParameter(valid_21626823, JString, required = false,
                                   default = nil)
  if valid_21626823 != nil:
    section.add "DBName", valid_21626823
  var valid_21626824 = query.getOrDefault("CopyTagsToSnapshot")
  valid_21626824 = validateParameter(valid_21626824, JBool, required = false,
                                   default = nil)
  if valid_21626824 != nil:
    section.add "CopyTagsToSnapshot", valid_21626824
  var valid_21626825 = query.getOrDefault("DeletionProtection")
  valid_21626825 = validateParameter(valid_21626825, JBool, required = false,
                                   default = nil)
  if valid_21626825 != nil:
    section.add "DeletionProtection", valid_21626825
  var valid_21626826 = query.getOrDefault("DBSubnetGroupName")
  valid_21626826 = validateParameter(valid_21626826, JString, required = false,
                                   default = nil)
  if valid_21626826 != nil:
    section.add "DBSubnetGroupName", valid_21626826
  var valid_21626827 = query.getOrDefault("KmsKeyId")
  valid_21626827 = validateParameter(valid_21626827, JString, required = false,
                                   default = nil)
  if valid_21626827 != nil:
    section.add "KmsKeyId", valid_21626827
  var valid_21626828 = query.getOrDefault("Domain")
  valid_21626828 = validateParameter(valid_21626828, JString, required = false,
                                   default = nil)
  if valid_21626828 != nil:
    section.add "Domain", valid_21626828
  var valid_21626829 = query.getOrDefault("EngineVersion")
  valid_21626829 = validateParameter(valid_21626829, JString, required = false,
                                   default = nil)
  if valid_21626829 != nil:
    section.add "EngineVersion", valid_21626829
  var valid_21626830 = query.getOrDefault("PreferredBackupWindow")
  valid_21626830 = validateParameter(valid_21626830, JString, required = false,
                                   default = nil)
  if valid_21626830 != nil:
    section.add "PreferredBackupWindow", valid_21626830
  var valid_21626831 = query.getOrDefault("DBInstanceIdentifier")
  valid_21626831 = validateParameter(valid_21626831, JString, required = true,
                                   default = nil)
  if valid_21626831 != nil:
    section.add "DBInstanceIdentifier", valid_21626831
  var valid_21626832 = query.getOrDefault("MasterUsername")
  valid_21626832 = validateParameter(valid_21626832, JString, required = false,
                                   default = nil)
  if valid_21626832 != nil:
    section.add "MasterUsername", valid_21626832
  var valid_21626833 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_21626833 = validateParameter(valid_21626833, JString, required = false,
                                   default = nil)
  if valid_21626833 != nil:
    section.add "PreferredMaintenanceWindow", valid_21626833
  var valid_21626834 = query.getOrDefault("ProcessorFeatures")
  valid_21626834 = validateParameter(valid_21626834, JArray, required = false,
                                   default = nil)
  if valid_21626834 != nil:
    section.add "ProcessorFeatures", valid_21626834
  var valid_21626835 = query.getOrDefault("OptionGroupName")
  valid_21626835 = validateParameter(valid_21626835, JString, required = false,
                                   default = nil)
  if valid_21626835 != nil:
    section.add "OptionGroupName", valid_21626835
  var valid_21626836 = query.getOrDefault("AvailabilityZone")
  valid_21626836 = validateParameter(valid_21626836, JString, required = false,
                                   default = nil)
  if valid_21626836 != nil:
    section.add "AvailabilityZone", valid_21626836
  var valid_21626837 = query.getOrDefault("Iops")
  valid_21626837 = validateParameter(valid_21626837, JInt, required = false,
                                   default = nil)
  if valid_21626837 != nil:
    section.add "Iops", valid_21626837
  var valid_21626838 = query.getOrDefault("VpcSecurityGroupIds")
  valid_21626838 = validateParameter(valid_21626838, JArray, required = false,
                                   default = nil)
  if valid_21626838 != nil:
    section.add "VpcSecurityGroupIds", valid_21626838
  var valid_21626839 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_21626839 = validateParameter(valid_21626839, JArray, required = false,
                                   default = nil)
  if valid_21626839 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21626839
  var valid_21626840 = query.getOrDefault("LicenseModel")
  valid_21626840 = validateParameter(valid_21626840, JString, required = false,
                                   default = nil)
  if valid_21626840 != nil:
    section.add "LicenseModel", valid_21626840
  var valid_21626841 = query.getOrDefault("Tags")
  valid_21626841 = validateParameter(valid_21626841, JArray, required = false,
                                   default = nil)
  if valid_21626841 != nil:
    section.add "Tags", valid_21626841
  var valid_21626842 = query.getOrDefault("DBParameterGroupName")
  valid_21626842 = validateParameter(valid_21626842, JString, required = false,
                                   default = nil)
  if valid_21626842 != nil:
    section.add "DBParameterGroupName", valid_21626842
  var valid_21626843 = query.getOrDefault("DBInstanceClass")
  valid_21626843 = validateParameter(valid_21626843, JString, required = true,
                                   default = nil)
  if valid_21626843 != nil:
    section.add "DBInstanceClass", valid_21626843
  var valid_21626844 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_21626844 = validateParameter(valid_21626844, JString, required = false,
                                   default = nil)
  if valid_21626844 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_21626844
  var valid_21626845 = query.getOrDefault("Action")
  valid_21626845 = validateParameter(valid_21626845, JString, required = true,
                                   default = newJString("CreateDBInstance"))
  if valid_21626845 != nil:
    section.add "Action", valid_21626845
  var valid_21626846 = query.getOrDefault("CharacterSetName")
  valid_21626846 = validateParameter(valid_21626846, JString, required = false,
                                   default = nil)
  if valid_21626846 != nil:
    section.add "CharacterSetName", valid_21626846
  var valid_21626847 = query.getOrDefault("TdeCredentialArn")
  valid_21626847 = validateParameter(valid_21626847, JString, required = false,
                                   default = nil)
  if valid_21626847 != nil:
    section.add "TdeCredentialArn", valid_21626847
  var valid_21626848 = query.getOrDefault("PubliclyAccessible")
  valid_21626848 = validateParameter(valid_21626848, JBool, required = false,
                                   default = nil)
  if valid_21626848 != nil:
    section.add "PubliclyAccessible", valid_21626848
  var valid_21626849 = query.getOrDefault("Timezone")
  valid_21626849 = validateParameter(valid_21626849, JString, required = false,
                                   default = nil)
  if valid_21626849 != nil:
    section.add "Timezone", valid_21626849
  var valid_21626850 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_21626850 = validateParameter(valid_21626850, JBool, required = false,
                                   default = nil)
  if valid_21626850 != nil:
    section.add "AutoMinorVersionUpgrade", valid_21626850
  var valid_21626851 = query.getOrDefault("Port")
  valid_21626851 = validateParameter(valid_21626851, JInt, required = false,
                                   default = nil)
  if valid_21626851 != nil:
    section.add "Port", valid_21626851
  var valid_21626852 = query.getOrDefault("EnablePerformanceInsights")
  valid_21626852 = validateParameter(valid_21626852, JBool, required = false,
                                   default = nil)
  if valid_21626852 != nil:
    section.add "EnablePerformanceInsights", valid_21626852
  var valid_21626853 = query.getOrDefault("Version")
  valid_21626853 = validateParameter(valid_21626853, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626853 != nil:
    section.add "Version", valid_21626853
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626854 = header.getOrDefault("X-Amz-Date")
  valid_21626854 = validateParameter(valid_21626854, JString, required = false,
                                   default = nil)
  if valid_21626854 != nil:
    section.add "X-Amz-Date", valid_21626854
  var valid_21626855 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626855 = validateParameter(valid_21626855, JString, required = false,
                                   default = nil)
  if valid_21626855 != nil:
    section.add "X-Amz-Security-Token", valid_21626855
  var valid_21626856 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626856 = validateParameter(valid_21626856, JString, required = false,
                                   default = nil)
  if valid_21626856 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626856
  var valid_21626857 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626857 = validateParameter(valid_21626857, JString, required = false,
                                   default = nil)
  if valid_21626857 != nil:
    section.add "X-Amz-Algorithm", valid_21626857
  var valid_21626858 = header.getOrDefault("X-Amz-Signature")
  valid_21626858 = validateParameter(valid_21626858, JString, required = false,
                                   default = nil)
  if valid_21626858 != nil:
    section.add "X-Amz-Signature", valid_21626858
  var valid_21626859 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626859 = validateParameter(valid_21626859, JString, required = false,
                                   default = nil)
  if valid_21626859 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626859
  var valid_21626860 = header.getOrDefault("X-Amz-Credential")
  valid_21626860 = validateParameter(valid_21626860, JString, required = false,
                                   default = nil)
  if valid_21626860 != nil:
    section.add "X-Amz-Credential", valid_21626860
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626861: Call_GetCreateDBInstance_21626803; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new DB instance.
  ## 
  let valid = call_21626861.validator(path, query, header, formData, body, _)
  let scheme = call_21626861.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626861.makeUrl(scheme.get, call_21626861.host, call_21626861.base,
                               call_21626861.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626861, uri, valid, _)

proc call*(call_21626862: Call_GetCreateDBInstance_21626803; Engine: string;
          DBInstanceIdentifier: string; DBInstanceClass: string;
          MonitoringInterval: int = 0; PromotionTier: int = 0;
          MaxAllocatedStorage: int = 0; PerformanceInsightsRetentionPeriod: int = 0;
          StorageEncrypted: bool = false; AllocatedStorage: int = 0;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          DBClusterIdentifier: string = ""; DBSecurityGroups: JsonNode = nil;
          MasterUserPassword: string = ""; MonitoringRoleArn: string = "";
          MultiAZ: bool = false; TdeCredentialPassword: string = "";
          DomainIAMRoleName: string = ""; BackupRetentionPeriod: int = 0;
          DBName: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          KmsKeyId: string = ""; Domain: string = ""; EngineVersion: string = "";
          PreferredBackupWindow: string = ""; MasterUsername: string = "";
          PreferredMaintenanceWindow: string = "";
          ProcessorFeatures: JsonNode = nil; OptionGroupName: string = "";
          AvailabilityZone: string = ""; Iops: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; LicenseModel: string = "";
          Tags: JsonNode = nil; DBParameterGroupName: string = "";
          PerformanceInsightsKMSKeyId: string = "";
          Action: string = "CreateDBInstance"; CharacterSetName: string = "";
          TdeCredentialArn: string = ""; PubliclyAccessible: bool = false;
          Timezone: string = ""; AutoMinorVersionUpgrade: bool = false; Port: int = 0;
          EnablePerformanceInsights: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBInstance
  ## Creates a new DB instance.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Not every database engine is available for every AWS Region. </p> <p>Valid Values: </p> <ul> <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li> <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p> </li> <li> <p> <code>aurora-postgresql</code> </p> </li> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   StorageEncrypted: bool
  ##                   : <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p> <p>Type: Integer</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p> <p> <b>MySQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p> </li> <li> <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p> </li> <li> <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Constraints to the amount of storage for each storage type are the following: </p> <ul> <li> <p>General Purpose (SSD) storage (gp2):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 16384.</p> </li> </ul> </li> <li> <p>Provisioned IOPS storage (io1):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p> </li> <li> <p>Web and Express editions: Must be an integer from 100 to 16384.</p> </li> </ul> </li> <li> <p>Magnetic storage (standard):</p> <ul> <li> <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p> </li> <li> <p>Web and Express editions: Must be an integer from 20 to 1024.</p> </li> </ul> </li> </ul>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>You can enable IAM database authentication for the following database engines:</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster.</p> <p> <b>MySQL</b> </p> <ul> <li> <p>For MySQL 5.6, minor version 5.6.34 or higher</p> </li> <li> <p>For MySQL 5.7, minor version 5.7.16 or higher</p> </li> <li> <p>For MySQL 8.0, minor version 8.0.16 or higher</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <ul> <li> <p>For PostgreSQL 9.5, minor version 9.5.15 or higher</p> </li> <li> <p>For PostgreSQL 9.6, minor version 9.6.11 or higher</p> </li> <li> <p>PostgreSQL 10.6, 10.7, and 10.9</p> </li> </ul> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   DBClusterIdentifier: string
  ##                      : The identifier of the DB cluster that the instance will belong to.
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   DBName: string
  ##         : <p>The meaning of this parameter differs according to the database engine you use.</p> <p> <b>MySQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>MariaDB</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, the default "postgres" database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 63 letters, numbers, or underscores.</p> </li> <li> <p>Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul> <p> <b>Oracle</b> </p> <p>The Oracle System ID (SID) of the created DB instance. If you specify <code>null</code>, the default value <code>ORCL</code> is used. You can't specify the string NULL, or any other reserved word, for <code>DBName</code>. </p> <p>Default: <code>ORCL</code> </p> <p>Constraints:</p> <ul> <li> <p>Can't be longer than 8 characters</p> </li> </ul> <p> <b>SQL Server</b> </p> <p>Not applicable. Must be null.</p> <p> <b>Amazon Aurora</b> </p> <p>The name of the database to create when the primary instance of the DB cluster is created. If this parameter isn't specified, no database is created in the DB instance.</p> <p>Constraints:</p> <ul> <li> <p>Must contain 1 to 64 letters or numbers.</p> </li> <li> <p>Can't be a word reserved by the specified database engine</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
  ##   DeletionProtection: bool
  ##                     : <p>A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster. </p>
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with this DB instance.</p> <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p> <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain.</p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instance, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> <p/>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> action.</p> <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster.</p> <p> <b>MariaDB</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>MySQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>Oracle</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the <i>Amazon RDS User Guide.</i> </p> <p> <b>PostgreSQL</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts.General.DBVersions">Supported PostgreSQL Database Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster.</p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow"> Adjusting the Preferred DB Instance Maintenance Window</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   MasterUsername: string
  ##                 : <p>The name for the master user.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The name for the master user is managed by the DB cluster. </p> <p> <b>MariaDB</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MariaDB.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for SQL Server.</p> </li> <li> <p>Must be 1 to 128 letters or numbers.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>MySQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for MySQL.</p> </li> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>Oracle</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for Oracle.</p> </li> <li> <p>Must be 1 to 30 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>Constraints:</p> <ul> <li> <p>Required for PostgreSQL.</p> </li> <li> <p>Must be 1 to 63 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>. </p> <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   OptionGroupName: string
  ##                  : <p>Indicates that the DB instance should be associated with the specified option group.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group. Also, that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   AvailabilityZone: string
  ##                   : <p> The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>. </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p> <p> Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p> <note> <p>If you're creating a DB instance in an RDS on VMware environment, specify the identifier of the custom Availability Zone to create the DB instance in.</p> <p>For more information about RDS on VMware, see the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p> </note>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance. </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster.</p> <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database Service User Guide</i>.
  ##   LicenseModel: string
  ##               : <p>License model information for this DB instance.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then the default DB parameter group for the specified DB engine and version is used.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> 
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Action: string (required)
  ##   CharacterSetName: string
  ##                   : <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address.</p> <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p> <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul> <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p> <ul> <li> <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p> </li> <li> <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p> </li> </ul>
  ##   Timezone: string
  ##           : The time zone of the DB instance. The time zone parameter is currently supported only by <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>. 
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Version: string (required)
  var query_21626863 = newJObject()
  add(query_21626863, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_21626863, "Engine", newJString(Engine))
  add(query_21626863, "PromotionTier", newJInt(PromotionTier))
  add(query_21626863, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(query_21626863, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_21626863, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_21626863, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_21626863, "StorageType", newJString(StorageType))
  add(query_21626863, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_21626863, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  if DBSecurityGroups != nil:
    query_21626863.add "DBSecurityGroups", DBSecurityGroups
  add(query_21626863, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_21626863, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_21626863, "MultiAZ", newJBool(MultiAZ))
  add(query_21626863, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_21626863, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_21626863, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_21626863, "DBName", newJString(DBName))
  add(query_21626863, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_21626863, "DeletionProtection", newJBool(DeletionProtection))
  add(query_21626863, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21626863, "KmsKeyId", newJString(KmsKeyId))
  add(query_21626863, "Domain", newJString(Domain))
  add(query_21626863, "EngineVersion", newJString(EngineVersion))
  add(query_21626863, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_21626863, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_21626863, "MasterUsername", newJString(MasterUsername))
  add(query_21626863, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  if ProcessorFeatures != nil:
    query_21626863.add "ProcessorFeatures", ProcessorFeatures
  add(query_21626863, "OptionGroupName", newJString(OptionGroupName))
  add(query_21626863, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_21626863, "Iops", newJInt(Iops))
  if VpcSecurityGroupIds != nil:
    query_21626863.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_21626863.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_21626863, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    query_21626863.add "Tags", Tags
  add(query_21626863, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_21626863, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_21626863, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_21626863, "Action", newJString(Action))
  add(query_21626863, "CharacterSetName", newJString(CharacterSetName))
  add(query_21626863, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_21626863, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_21626863, "Timezone", newJString(Timezone))
  add(query_21626863, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_21626863, "Port", newJInt(Port))
  add(query_21626863, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_21626863, "Version", newJString(Version))
  result = call_21626862.call(nil, query_21626863, nil, nil, nil)

var getCreateDBInstance* = Call_GetCreateDBInstance_21626803(
    name: "getCreateDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstance",
    validator: validate_GetCreateDBInstance_21626804, base: "/",
    makeUrl: url_GetCreateDBInstance_21626805,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBInstanceReadReplica_21626972 = ref object of OpenApiRestCall_21625435
proc url_PostCreateDBInstanceReadReplica_21626974(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBInstanceReadReplica_21626973(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21626975 = query.getOrDefault("Action")
  valid_21626975 = validateParameter(valid_21626975, JString, required = true, default = newJString(
      "CreateDBInstanceReadReplica"))
  if valid_21626975 != nil:
    section.add "Action", valid_21626975
  var valid_21626976 = query.getOrDefault("Version")
  valid_21626976 = validateParameter(valid_21626976, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626976 != nil:
    section.add "Version", valid_21626976
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626977 = header.getOrDefault("X-Amz-Date")
  valid_21626977 = validateParameter(valid_21626977, JString, required = false,
                                   default = nil)
  if valid_21626977 != nil:
    section.add "X-Amz-Date", valid_21626977
  var valid_21626978 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626978 = validateParameter(valid_21626978, JString, required = false,
                                   default = nil)
  if valid_21626978 != nil:
    section.add "X-Amz-Security-Token", valid_21626978
  var valid_21626979 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626979 = validateParameter(valid_21626979, JString, required = false,
                                   default = nil)
  if valid_21626979 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626979
  var valid_21626980 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626980 = validateParameter(valid_21626980, JString, required = false,
                                   default = nil)
  if valid_21626980 != nil:
    section.add "X-Amz-Algorithm", valid_21626980
  var valid_21626981 = header.getOrDefault("X-Amz-Signature")
  valid_21626981 = validateParameter(valid_21626981, JString, required = false,
                                   default = nil)
  if valid_21626981 != nil:
    section.add "X-Amz-Signature", valid_21626981
  var valid_21626982 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626982 = validateParameter(valid_21626982, JString, required = false,
                                   default = nil)
  if valid_21626982 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626982
  var valid_21626983 = header.getOrDefault("X-Amz-Credential")
  valid_21626983 = validateParameter(valid_21626983, JString, required = false,
                                   default = nil)
  if valid_21626983 != nil:
    section.add "X-Amz-Credential", valid_21626983
  result.add "header", section
  ## parameters in `formData` object:
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   Port: JInt
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   OptionGroupName: JString
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   SourceDBInstanceIdentifier: JString (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  section = newJObject()
  var valid_21626984 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_21626984 = validateParameter(valid_21626984, JString, required = false,
                                   default = nil)
  if valid_21626984 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_21626984
  var valid_21626985 = formData.getOrDefault("ProcessorFeatures")
  valid_21626985 = validateParameter(valid_21626985, JArray, required = false,
                                   default = nil)
  if valid_21626985 != nil:
    section.add "ProcessorFeatures", valid_21626985
  var valid_21626986 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_21626986 = validateParameter(valid_21626986, JBool, required = false,
                                   default = nil)
  if valid_21626986 != nil:
    section.add "CopyTagsToSnapshot", valid_21626986
  var valid_21626987 = formData.getOrDefault("Port")
  valid_21626987 = validateParameter(valid_21626987, JInt, required = false,
                                   default = nil)
  if valid_21626987 != nil:
    section.add "Port", valid_21626987
  var valid_21626988 = formData.getOrDefault("EnablePerformanceInsights")
  valid_21626988 = validateParameter(valid_21626988, JBool, required = false,
                                   default = nil)
  if valid_21626988 != nil:
    section.add "EnablePerformanceInsights", valid_21626988
  var valid_21626989 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_21626989 = validateParameter(valid_21626989, JArray, required = false,
                                   default = nil)
  if valid_21626989 != nil:
    section.add "VpcSecurityGroupIds", valid_21626989
  var valid_21626990 = formData.getOrDefault("Iops")
  valid_21626990 = validateParameter(valid_21626990, JInt, required = false,
                                   default = nil)
  if valid_21626990 != nil:
    section.add "Iops", valid_21626990
  var valid_21626991 = formData.getOrDefault("PreSignedUrl")
  valid_21626991 = validateParameter(valid_21626991, JString, required = false,
                                   default = nil)
  if valid_21626991 != nil:
    section.add "PreSignedUrl", valid_21626991
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_21626992 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21626992 = validateParameter(valid_21626992, JString, required = true,
                                   default = nil)
  if valid_21626992 != nil:
    section.add "DBInstanceIdentifier", valid_21626992
  var valid_21626993 = formData.getOrDefault("OptionGroupName")
  valid_21626993 = validateParameter(valid_21626993, JString, required = false,
                                   default = nil)
  if valid_21626993 != nil:
    section.add "OptionGroupName", valid_21626993
  var valid_21626994 = formData.getOrDefault("DBParameterGroupName")
  valid_21626994 = validateParameter(valid_21626994, JString, required = false,
                                   default = nil)
  if valid_21626994 != nil:
    section.add "DBParameterGroupName", valid_21626994
  var valid_21626995 = formData.getOrDefault("Tags")
  valid_21626995 = validateParameter(valid_21626995, JArray, required = false,
                                   default = nil)
  if valid_21626995 != nil:
    section.add "Tags", valid_21626995
  var valid_21626996 = formData.getOrDefault("SourceRegion")
  valid_21626996 = validateParameter(valid_21626996, JString, required = false,
                                   default = nil)
  if valid_21626996 != nil:
    section.add "SourceRegion", valid_21626996
  var valid_21626997 = formData.getOrDefault("DeletionProtection")
  valid_21626997 = validateParameter(valid_21626997, JBool, required = false,
                                   default = nil)
  if valid_21626997 != nil:
    section.add "DeletionProtection", valid_21626997
  var valid_21626998 = formData.getOrDefault("DBSubnetGroupName")
  valid_21626998 = validateParameter(valid_21626998, JString, required = false,
                                   default = nil)
  if valid_21626998 != nil:
    section.add "DBSubnetGroupName", valid_21626998
  var valid_21626999 = formData.getOrDefault("AvailabilityZone")
  valid_21626999 = validateParameter(valid_21626999, JString, required = false,
                                   default = nil)
  if valid_21626999 != nil:
    section.add "AvailabilityZone", valid_21626999
  var valid_21627000 = formData.getOrDefault("MonitoringInterval")
  valid_21627000 = validateParameter(valid_21627000, JInt, required = false,
                                   default = nil)
  if valid_21627000 != nil:
    section.add "MonitoringInterval", valid_21627000
  var valid_21627001 = formData.getOrDefault("MultiAZ")
  valid_21627001 = validateParameter(valid_21627001, JBool, required = false,
                                   default = nil)
  if valid_21627001 != nil:
    section.add "MultiAZ", valid_21627001
  var valid_21627002 = formData.getOrDefault("DomainIAMRoleName")
  valid_21627002 = validateParameter(valid_21627002, JString, required = false,
                                   default = nil)
  if valid_21627002 != nil:
    section.add "DomainIAMRoleName", valid_21627002
  var valid_21627003 = formData.getOrDefault("PubliclyAccessible")
  valid_21627003 = validateParameter(valid_21627003, JBool, required = false,
                                   default = nil)
  if valid_21627003 != nil:
    section.add "PubliclyAccessible", valid_21627003
  var valid_21627004 = formData.getOrDefault("StorageType")
  valid_21627004 = validateParameter(valid_21627004, JString, required = false,
                                   default = nil)
  if valid_21627004 != nil:
    section.add "StorageType", valid_21627004
  var valid_21627005 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_21627005 = validateParameter(valid_21627005, JArray, required = false,
                                   default = nil)
  if valid_21627005 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21627005
  var valid_21627006 = formData.getOrDefault("DBInstanceClass")
  valid_21627006 = validateParameter(valid_21627006, JString, required = false,
                                   default = nil)
  if valid_21627006 != nil:
    section.add "DBInstanceClass", valid_21627006
  var valid_21627007 = formData.getOrDefault("SourceDBInstanceIdentifier")
  valid_21627007 = validateParameter(valid_21627007, JString, required = true,
                                   default = nil)
  if valid_21627007 != nil:
    section.add "SourceDBInstanceIdentifier", valid_21627007
  var valid_21627008 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21627008 = validateParameter(valid_21627008, JBool, required = false,
                                   default = nil)
  if valid_21627008 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21627008
  var valid_21627009 = formData.getOrDefault("KmsKeyId")
  valid_21627009 = validateParameter(valid_21627009, JString, required = false,
                                   default = nil)
  if valid_21627009 != nil:
    section.add "KmsKeyId", valid_21627009
  var valid_21627010 = formData.getOrDefault("Domain")
  valid_21627010 = validateParameter(valid_21627010, JString, required = false,
                                   default = nil)
  if valid_21627010 != nil:
    section.add "Domain", valid_21627010
  var valid_21627011 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_21627011 = validateParameter(valid_21627011, JBool, required = false,
                                   default = nil)
  if valid_21627011 != nil:
    section.add "AutoMinorVersionUpgrade", valid_21627011
  var valid_21627012 = formData.getOrDefault("MonitoringRoleArn")
  valid_21627012 = validateParameter(valid_21627012, JString, required = false,
                                   default = nil)
  if valid_21627012 != nil:
    section.add "MonitoringRoleArn", valid_21627012
  var valid_21627013 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_21627013 = validateParameter(valid_21627013, JInt, required = false,
                                   default = nil)
  if valid_21627013 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_21627013
  var valid_21627014 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_21627014 = validateParameter(valid_21627014, JBool, required = false,
                                   default = nil)
  if valid_21627014 != nil:
    section.add "UseDefaultProcessorFeatures", valid_21627014
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627015: Call_PostCreateDBInstanceReadReplica_21626972;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  let valid = call_21627015.validator(path, query, header, formData, body, _)
  let scheme = call_21627015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627015.makeUrl(scheme.get, call_21627015.host, call_21627015.base,
                               call_21627015.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627015, uri, valid, _)

proc call*(call_21627016: Call_PostCreateDBInstanceReadReplica_21626972;
          DBInstanceIdentifier: string; SourceDBInstanceIdentifier: string;
          PerformanceInsightsKMSKeyId: string = "";
          ProcessorFeatures: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          Port: int = 0; EnablePerformanceInsights: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; Iops: int = 0; PreSignedUrl: string = "";
          OptionGroupName: string = ""; DBParameterGroupName: string = "";
          Tags: JsonNode = nil; SourceRegion: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          AvailabilityZone: string = ""; MonitoringInterval: int = 0;
          MultiAZ: bool = false; DomainIAMRoleName: string = "";
          Action: string = "CreateDBInstanceReadReplica";
          PubliclyAccessible: bool = false; StorageType: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil; DBInstanceClass: string = "";
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          Domain: string = ""; AutoMinorVersionUpgrade: bool = false;
          MonitoringRoleArn: string = ""; Version: string = "2014-10-31";
          PerformanceInsightsRetentionPeriod: int = 0;
          UseDefaultProcessorFeatures: bool = false): Recallable =
  ## postCreateDBInstanceReadReplica
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   Port: int
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  ##   OptionGroupName: string
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Action: string (required)
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   SourceDBInstanceIdentifier: string (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   Version: string (required)
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  var query_21627017 = newJObject()
  var formData_21627018 = newJObject()
  add(formData_21627018, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  if ProcessorFeatures != nil:
    formData_21627018.add "ProcessorFeatures", ProcessorFeatures
  add(formData_21627018, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_21627018, "Port", newJInt(Port))
  add(formData_21627018, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  if VpcSecurityGroupIds != nil:
    formData_21627018.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_21627018, "Iops", newJInt(Iops))
  add(formData_21627018, "PreSignedUrl", newJString(PreSignedUrl))
  add(formData_21627018, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_21627018, "OptionGroupName", newJString(OptionGroupName))
  add(formData_21627018, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    formData_21627018.add "Tags", Tags
  add(formData_21627018, "SourceRegion", newJString(SourceRegion))
  add(formData_21627018, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_21627018, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_21627018, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_21627018, "MonitoringInterval", newJInt(MonitoringInterval))
  add(formData_21627018, "MultiAZ", newJBool(MultiAZ))
  add(formData_21627018, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_21627017, "Action", newJString(Action))
  add(formData_21627018, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_21627018, "StorageType", newJString(StorageType))
  if EnableCloudwatchLogsExports != nil:
    formData_21627018.add "EnableCloudwatchLogsExports",
                         EnableCloudwatchLogsExports
  add(formData_21627018, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_21627018, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(formData_21627018, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_21627018, "KmsKeyId", newJString(KmsKeyId))
  add(formData_21627018, "Domain", newJString(Domain))
  add(formData_21627018, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_21627018, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_21627017, "Version", newJString(Version))
  add(formData_21627018, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_21627018, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  result = call_21627016.call(nil, query_21627017, nil, formData_21627018, nil)

var postCreateDBInstanceReadReplica* = Call_PostCreateDBInstanceReadReplica_21626972(
    name: "postCreateDBInstanceReadReplica", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstanceReadReplica",
    validator: validate_PostCreateDBInstanceReadReplica_21626973, base: "/",
    makeUrl: url_PostCreateDBInstanceReadReplica_21626974,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBInstanceReadReplica_21626926 = ref object of OpenApiRestCall_21625435
proc url_GetCreateDBInstanceReadReplica_21626928(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBInstanceReadReplica_21626927(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   SourceDBInstanceIdentifier: JString (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   SourceRegion: JString
  ##               : The ID of the region that contains the source for the read replica.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   OptionGroupName: JString
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PreSignedUrl: JString
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   Port: JInt
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  section = newJObject()
  var valid_21626929 = query.getOrDefault("MonitoringInterval")
  valid_21626929 = validateParameter(valid_21626929, JInt, required = false,
                                   default = nil)
  if valid_21626929 != nil:
    section.add "MonitoringInterval", valid_21626929
  var valid_21626930 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_21626930 = validateParameter(valid_21626930, JBool, required = false,
                                   default = nil)
  if valid_21626930 != nil:
    section.add "UseDefaultProcessorFeatures", valid_21626930
  var valid_21626931 = query.getOrDefault("ProcessorFeatures")
  valid_21626931 = validateParameter(valid_21626931, JArray, required = false,
                                   default = nil)
  if valid_21626931 != nil:
    section.add "ProcessorFeatures", valid_21626931
  assert query != nil, "query argument is necessary due to required `SourceDBInstanceIdentifier` field"
  var valid_21626932 = query.getOrDefault("SourceDBInstanceIdentifier")
  valid_21626932 = validateParameter(valid_21626932, JString, required = true,
                                   default = nil)
  if valid_21626932 != nil:
    section.add "SourceDBInstanceIdentifier", valid_21626932
  var valid_21626933 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_21626933 = validateParameter(valid_21626933, JInt, required = false,
                                   default = nil)
  if valid_21626933 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_21626933
  var valid_21626934 = query.getOrDefault("SourceRegion")
  valid_21626934 = validateParameter(valid_21626934, JString, required = false,
                                   default = nil)
  if valid_21626934 != nil:
    section.add "SourceRegion", valid_21626934
  var valid_21626935 = query.getOrDefault("StorageType")
  valid_21626935 = validateParameter(valid_21626935, JString, required = false,
                                   default = nil)
  if valid_21626935 != nil:
    section.add "StorageType", valid_21626935
  var valid_21626936 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21626936 = validateParameter(valid_21626936, JBool, required = false,
                                   default = nil)
  if valid_21626936 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21626936
  var valid_21626937 = query.getOrDefault("OptionGroupName")
  valid_21626937 = validateParameter(valid_21626937, JString, required = false,
                                   default = nil)
  if valid_21626937 != nil:
    section.add "OptionGroupName", valid_21626937
  var valid_21626938 = query.getOrDefault("AvailabilityZone")
  valid_21626938 = validateParameter(valid_21626938, JString, required = false,
                                   default = nil)
  if valid_21626938 != nil:
    section.add "AvailabilityZone", valid_21626938
  var valid_21626939 = query.getOrDefault("Iops")
  valid_21626939 = validateParameter(valid_21626939, JInt, required = false,
                                   default = nil)
  if valid_21626939 != nil:
    section.add "Iops", valid_21626939
  var valid_21626940 = query.getOrDefault("MonitoringRoleArn")
  valid_21626940 = validateParameter(valid_21626940, JString, required = false,
                                   default = nil)
  if valid_21626940 != nil:
    section.add "MonitoringRoleArn", valid_21626940
  var valid_21626941 = query.getOrDefault("PreSignedUrl")
  valid_21626941 = validateParameter(valid_21626941, JString, required = false,
                                   default = nil)
  if valid_21626941 != nil:
    section.add "PreSignedUrl", valid_21626941
  var valid_21626942 = query.getOrDefault("VpcSecurityGroupIds")
  valid_21626942 = validateParameter(valid_21626942, JArray, required = false,
                                   default = nil)
  if valid_21626942 != nil:
    section.add "VpcSecurityGroupIds", valid_21626942
  var valid_21626943 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_21626943 = validateParameter(valid_21626943, JArray, required = false,
                                   default = nil)
  if valid_21626943 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21626943
  var valid_21626944 = query.getOrDefault("MultiAZ")
  valid_21626944 = validateParameter(valid_21626944, JBool, required = false,
                                   default = nil)
  if valid_21626944 != nil:
    section.add "MultiAZ", valid_21626944
  var valid_21626945 = query.getOrDefault("DomainIAMRoleName")
  valid_21626945 = validateParameter(valid_21626945, JString, required = false,
                                   default = nil)
  if valid_21626945 != nil:
    section.add "DomainIAMRoleName", valid_21626945
  var valid_21626946 = query.getOrDefault("Tags")
  valid_21626946 = validateParameter(valid_21626946, JArray, required = false,
                                   default = nil)
  if valid_21626946 != nil:
    section.add "Tags", valid_21626946
  var valid_21626947 = query.getOrDefault("CopyTagsToSnapshot")
  valid_21626947 = validateParameter(valid_21626947, JBool, required = false,
                                   default = nil)
  if valid_21626947 != nil:
    section.add "CopyTagsToSnapshot", valid_21626947
  var valid_21626948 = query.getOrDefault("DBParameterGroupName")
  valid_21626948 = validateParameter(valid_21626948, JString, required = false,
                                   default = nil)
  if valid_21626948 != nil:
    section.add "DBParameterGroupName", valid_21626948
  var valid_21626949 = query.getOrDefault("DBInstanceClass")
  valid_21626949 = validateParameter(valid_21626949, JString, required = false,
                                   default = nil)
  if valid_21626949 != nil:
    section.add "DBInstanceClass", valid_21626949
  var valid_21626950 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_21626950 = validateParameter(valid_21626950, JString, required = false,
                                   default = nil)
  if valid_21626950 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_21626950
  var valid_21626951 = query.getOrDefault("DeletionProtection")
  valid_21626951 = validateParameter(valid_21626951, JBool, required = false,
                                   default = nil)
  if valid_21626951 != nil:
    section.add "DeletionProtection", valid_21626951
  var valid_21626952 = query.getOrDefault("Action")
  valid_21626952 = validateParameter(valid_21626952, JString, required = true, default = newJString(
      "CreateDBInstanceReadReplica"))
  if valid_21626952 != nil:
    section.add "Action", valid_21626952
  var valid_21626953 = query.getOrDefault("DBSubnetGroupName")
  valid_21626953 = validateParameter(valid_21626953, JString, required = false,
                                   default = nil)
  if valid_21626953 != nil:
    section.add "DBSubnetGroupName", valid_21626953
  var valid_21626954 = query.getOrDefault("KmsKeyId")
  valid_21626954 = validateParameter(valid_21626954, JString, required = false,
                                   default = nil)
  if valid_21626954 != nil:
    section.add "KmsKeyId", valid_21626954
  var valid_21626955 = query.getOrDefault("Domain")
  valid_21626955 = validateParameter(valid_21626955, JString, required = false,
                                   default = nil)
  if valid_21626955 != nil:
    section.add "Domain", valid_21626955
  var valid_21626956 = query.getOrDefault("PubliclyAccessible")
  valid_21626956 = validateParameter(valid_21626956, JBool, required = false,
                                   default = nil)
  if valid_21626956 != nil:
    section.add "PubliclyAccessible", valid_21626956
  var valid_21626957 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_21626957 = validateParameter(valid_21626957, JBool, required = false,
                                   default = nil)
  if valid_21626957 != nil:
    section.add "AutoMinorVersionUpgrade", valid_21626957
  var valid_21626958 = query.getOrDefault("Port")
  valid_21626958 = validateParameter(valid_21626958, JInt, required = false,
                                   default = nil)
  if valid_21626958 != nil:
    section.add "Port", valid_21626958
  var valid_21626959 = query.getOrDefault("EnablePerformanceInsights")
  valid_21626959 = validateParameter(valid_21626959, JBool, required = false,
                                   default = nil)
  if valid_21626959 != nil:
    section.add "EnablePerformanceInsights", valid_21626959
  var valid_21626960 = query.getOrDefault("Version")
  valid_21626960 = validateParameter(valid_21626960, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21626960 != nil:
    section.add "Version", valid_21626960
  var valid_21626961 = query.getOrDefault("DBInstanceIdentifier")
  valid_21626961 = validateParameter(valid_21626961, JString, required = true,
                                   default = nil)
  if valid_21626961 != nil:
    section.add "DBInstanceIdentifier", valid_21626961
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21626962 = header.getOrDefault("X-Amz-Date")
  valid_21626962 = validateParameter(valid_21626962, JString, required = false,
                                   default = nil)
  if valid_21626962 != nil:
    section.add "X-Amz-Date", valid_21626962
  var valid_21626963 = header.getOrDefault("X-Amz-Security-Token")
  valid_21626963 = validateParameter(valid_21626963, JString, required = false,
                                   default = nil)
  if valid_21626963 != nil:
    section.add "X-Amz-Security-Token", valid_21626963
  var valid_21626964 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21626964 = validateParameter(valid_21626964, JString, required = false,
                                   default = nil)
  if valid_21626964 != nil:
    section.add "X-Amz-Content-Sha256", valid_21626964
  var valid_21626965 = header.getOrDefault("X-Amz-Algorithm")
  valid_21626965 = validateParameter(valid_21626965, JString, required = false,
                                   default = nil)
  if valid_21626965 != nil:
    section.add "X-Amz-Algorithm", valid_21626965
  var valid_21626966 = header.getOrDefault("X-Amz-Signature")
  valid_21626966 = validateParameter(valid_21626966, JString, required = false,
                                   default = nil)
  if valid_21626966 != nil:
    section.add "X-Amz-Signature", valid_21626966
  var valid_21626967 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21626967 = validateParameter(valid_21626967, JString, required = false,
                                   default = nil)
  if valid_21626967 != nil:
    section.add "X-Amz-SignedHeaders", valid_21626967
  var valid_21626968 = header.getOrDefault("X-Amz-Credential")
  valid_21626968 = validateParameter(valid_21626968, JString, required = false,
                                   default = nil)
  if valid_21626968 != nil:
    section.add "X-Amz-Credential", valid_21626968
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21626969: Call_GetCreateDBInstanceReadReplica_21626926;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ## 
  let valid = call_21626969.validator(path, query, header, formData, body, _)
  let scheme = call_21626969.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21626969.makeUrl(scheme.get, call_21626969.host, call_21626969.base,
                               call_21626969.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21626969, uri, valid, _)

proc call*(call_21626970: Call_GetCreateDBInstanceReadReplica_21626926;
          SourceDBInstanceIdentifier: string; DBInstanceIdentifier: string;
          MonitoringInterval: int = 0; UseDefaultProcessorFeatures: bool = false;
          ProcessorFeatures: JsonNode = nil;
          PerformanceInsightsRetentionPeriod: int = 0; SourceRegion: string = "";
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          OptionGroupName: string = ""; AvailabilityZone: string = ""; Iops: int = 0;
          MonitoringRoleArn: string = ""; PreSignedUrl: string = "";
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; MultiAZ: bool = false;
          DomainIAMRoleName: string = ""; Tags: JsonNode = nil;
          CopyTagsToSnapshot: bool = false; DBParameterGroupName: string = "";
          DBInstanceClass: string = ""; PerformanceInsightsKMSKeyId: string = "";
          DeletionProtection: bool = false;
          Action: string = "CreateDBInstanceReadReplica";
          DBSubnetGroupName: string = ""; KmsKeyId: string = ""; Domain: string = "";
          PubliclyAccessible: bool = false; AutoMinorVersionUpgrade: bool = false;
          Port: int = 0; EnablePerformanceInsights: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBInstanceReadReplica
  ## <p>Creates a new DB instance that acts as a Read Replica for an existing source DB instance. You can create a Read Replica for a DB instance running MySQL, MariaDB, Oracle, or PostgreSQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read Replicas</a> in the <i>Amazon RDS User Guide</i>. </p> <p>Amazon Aurora doesn't support this action. You must call the <code>CreateDBInstance</code> action to create a DB instance for an Aurora DB cluster. </p> <p>All Read Replica DB instances are created with backups disabled. All other DB instance attributes (including DB security groups and DB parameter groups) are inherited from the source DB instance, except as specified following. </p> <important> <p>Your source DB instance must have backup retention enabled. </p> </important>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   SourceDBInstanceIdentifier: string (required)
  ##                             : <p>The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas.</p> <p>Constraints:</p> <ul> <li> <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, or PostgreSQL DB instance.</p> </li> <li> <p>Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.</p> </li> <li> <p>For the limitations of Oracle Read Replicas, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the <i>Amazon RDS User Guide</i>.</p> </li> <li> <p>Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).</p> </li> <li> <p>The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.</p> </li> <li> <p>If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.</p> </li> <li> <p>If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> </li> </ul>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   SourceRegion: string
  ##               : The ID of the region that contains the source for the read replica.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the Read Replica.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   OptionGroupName: string
  ##                  : The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the Read Replica will be created.</p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p> <p> Example: <code>us-east-1d</code> </p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PreSignedUrl: string
  ##               : <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action in the source AWS Region that contains the source DB instance. </p> <p>You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are creating an encrypted Read Replica in the same AWS Region. </p> <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values: </p> <ul> <li> <p> <code>DestinationRegion</code> - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL. </p> <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the <code>CreateDBInstanceReadReplica</code> action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this example, the <code>DestinationRegion</code> in the presigned URL must be set to the us-east-1 AWS Region. </p> </li> <li> <p> <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the <code>CreateDBInstanceReadReplica</code> action that is called in the destination AWS Region, and the action contained in the presigned URL. </p> </li> <li> <p> <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your <code>SourceDBInstanceIdentifier</code> looks like the following example: 
  ## <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p> </li> </ul> <p>To learn how to generate a Signature Version 4 signed request, see <a 
  ## href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and <a 
  ## href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>. </p> <note> <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid request for the operation that can be executed in the source AWS Region.</p> </note><note><p>If you supply a value for this operation's <code>SourceRegion</code> parameter, a pre-signed URL will be calculated on your behalf.</p></note>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with the Read Replica. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the Read Replica is in a Multi-AZ deployment. </p> <p>You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the Read Replica to snapshots of the Read Replica. By default, tags are not copied.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS uses the <code>DBParameterGroup</code> of source DB instance for a same region Read Replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a cross region Read Replica.</p> <note> <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Read Replica, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: Inherits from the source DB instance.</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p> <p>Constraints:</p> <ul> <li> <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p> </li> <li> <p>If supplied, must match the name of an existing DBSubnetGroup.</p> </li> <li> <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p> </li> <li> <p>All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;</p> <ul> <li> <p>Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.</p> </li> <li> <p>Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.</p> </li> </ul> </li> </ul> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance. </p> <p>If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. </p> <p>You can't create an encrypted Read Replica from an unencrypted DB instance. </p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to create the DB instance in.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : <p>A value that indicates whether minor engine upgrades are applied automatically to the Read Replica during the maintenance window.</p> <p>Default: Inherits from the source DB instance</p>
  ##   Port: int
  ##       : <p>The port number that the DB instance uses for connections.</p> <p>Default: Inherits from the source DB instance</p> <p>Valid Values: <code>1150-65535</code> </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the Read Replica. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>. </p>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
  var query_21626971 = newJObject()
  add(query_21626971, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_21626971, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  if ProcessorFeatures != nil:
    query_21626971.add "ProcessorFeatures", ProcessorFeatures
  add(query_21626971, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(query_21626971, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_21626971, "SourceRegion", newJString(SourceRegion))
  add(query_21626971, "StorageType", newJString(StorageType))
  add(query_21626971, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_21626971, "OptionGroupName", newJString(OptionGroupName))
  add(query_21626971, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_21626971, "Iops", newJInt(Iops))
  add(query_21626971, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_21626971, "PreSignedUrl", newJString(PreSignedUrl))
  if VpcSecurityGroupIds != nil:
    query_21626971.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_21626971.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_21626971, "MultiAZ", newJBool(MultiAZ))
  add(query_21626971, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  if Tags != nil:
    query_21626971.add "Tags", Tags
  add(query_21626971, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_21626971, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_21626971, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_21626971, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_21626971, "DeletionProtection", newJBool(DeletionProtection))
  add(query_21626971, "Action", newJString(Action))
  add(query_21626971, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21626971, "KmsKeyId", newJString(KmsKeyId))
  add(query_21626971, "Domain", newJString(Domain))
  add(query_21626971, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_21626971, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_21626971, "Port", newJInt(Port))
  add(query_21626971, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_21626971, "Version", newJString(Version))
  add(query_21626971, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_21626970.call(nil, query_21626971, nil, nil, nil)

var getCreateDBInstanceReadReplica* = Call_GetCreateDBInstanceReadReplica_21626926(
    name: "getCreateDBInstanceReadReplica", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBInstanceReadReplica",
    validator: validate_GetCreateDBInstanceReadReplica_21626927, base: "/",
    makeUrl: url_GetCreateDBInstanceReadReplica_21626928,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBParameterGroup_21627038 = ref object of OpenApiRestCall_21625435
proc url_PostCreateDBParameterGroup_21627040(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBParameterGroup_21627039(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627041 = query.getOrDefault("Action")
  valid_21627041 = validateParameter(valid_21627041, JString, required = true, default = newJString(
      "CreateDBParameterGroup"))
  if valid_21627041 != nil:
    section.add "Action", valid_21627041
  var valid_21627042 = query.getOrDefault("Version")
  valid_21627042 = validateParameter(valid_21627042, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627042 != nil:
    section.add "Version", valid_21627042
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627043 = header.getOrDefault("X-Amz-Date")
  valid_21627043 = validateParameter(valid_21627043, JString, required = false,
                                   default = nil)
  if valid_21627043 != nil:
    section.add "X-Amz-Date", valid_21627043
  var valid_21627044 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627044 = validateParameter(valid_21627044, JString, required = false,
                                   default = nil)
  if valid_21627044 != nil:
    section.add "X-Amz-Security-Token", valid_21627044
  var valid_21627045 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627045 = validateParameter(valid_21627045, JString, required = false,
                                   default = nil)
  if valid_21627045 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627045
  var valid_21627046 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627046 = validateParameter(valid_21627046, JString, required = false,
                                   default = nil)
  if valid_21627046 != nil:
    section.add "X-Amz-Algorithm", valid_21627046
  var valid_21627047 = header.getOrDefault("X-Amz-Signature")
  valid_21627047 = validateParameter(valid_21627047, JString, required = false,
                                   default = nil)
  if valid_21627047 != nil:
    section.add "X-Amz-Signature", valid_21627047
  var valid_21627048 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627048 = validateParameter(valid_21627048, JString, required = false,
                                   default = nil)
  if valid_21627048 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627048
  var valid_21627049 = header.getOrDefault("X-Amz-Credential")
  valid_21627049 = validateParameter(valid_21627049, JString, required = false,
                                   default = nil)
  if valid_21627049 != nil:
    section.add "X-Amz-Credential", valid_21627049
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_21627050 = formData.getOrDefault("DBParameterGroupName")
  valid_21627050 = validateParameter(valid_21627050, JString, required = true,
                                   default = nil)
  if valid_21627050 != nil:
    section.add "DBParameterGroupName", valid_21627050
  var valid_21627051 = formData.getOrDefault("Tags")
  valid_21627051 = validateParameter(valid_21627051, JArray, required = false,
                                   default = nil)
  if valid_21627051 != nil:
    section.add "Tags", valid_21627051
  var valid_21627052 = formData.getOrDefault("DBParameterGroupFamily")
  valid_21627052 = validateParameter(valid_21627052, JString, required = true,
                                   default = nil)
  if valid_21627052 != nil:
    section.add "DBParameterGroupFamily", valid_21627052
  var valid_21627053 = formData.getOrDefault("Description")
  valid_21627053 = validateParameter(valid_21627053, JString, required = true,
                                   default = nil)
  if valid_21627053 != nil:
    section.add "Description", valid_21627053
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627054: Call_PostCreateDBParameterGroup_21627038;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_21627054.validator(path, query, header, formData, body, _)
  let scheme = call_21627054.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627054.makeUrl(scheme.get, call_21627054.host, call_21627054.base,
                               call_21627054.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627054, uri, valid, _)

proc call*(call_21627055: Call_PostCreateDBParameterGroup_21627038;
          DBParameterGroupName: string; DBParameterGroupFamily: string;
          Description: string; Tags: JsonNode = nil;
          Action: string = "CreateDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   Version: string (required)
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  var query_21627056 = newJObject()
  var formData_21627057 = newJObject()
  add(formData_21627057, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    formData_21627057.add "Tags", Tags
  add(query_21627056, "Action", newJString(Action))
  add(formData_21627057, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  add(query_21627056, "Version", newJString(Version))
  add(formData_21627057, "Description", newJString(Description))
  result = call_21627055.call(nil, query_21627056, nil, formData_21627057, nil)

var postCreateDBParameterGroup* = Call_PostCreateDBParameterGroup_21627038(
    name: "postCreateDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_PostCreateDBParameterGroup_21627039, base: "/",
    makeUrl: url_PostCreateDBParameterGroup_21627040,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBParameterGroup_21627019 = ref object of OpenApiRestCall_21625435
proc url_GetCreateDBParameterGroup_21627021(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBParameterGroup_21627020(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Description: JString (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupFamily: JString (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `Description` field"
  var valid_21627022 = query.getOrDefault("Description")
  valid_21627022 = validateParameter(valid_21627022, JString, required = true,
                                   default = nil)
  if valid_21627022 != nil:
    section.add "Description", valid_21627022
  var valid_21627023 = query.getOrDefault("DBParameterGroupFamily")
  valid_21627023 = validateParameter(valid_21627023, JString, required = true,
                                   default = nil)
  if valid_21627023 != nil:
    section.add "DBParameterGroupFamily", valid_21627023
  var valid_21627024 = query.getOrDefault("Tags")
  valid_21627024 = validateParameter(valid_21627024, JArray, required = false,
                                   default = nil)
  if valid_21627024 != nil:
    section.add "Tags", valid_21627024
  var valid_21627025 = query.getOrDefault("DBParameterGroupName")
  valid_21627025 = validateParameter(valid_21627025, JString, required = true,
                                   default = nil)
  if valid_21627025 != nil:
    section.add "DBParameterGroupName", valid_21627025
  var valid_21627026 = query.getOrDefault("Action")
  valid_21627026 = validateParameter(valid_21627026, JString, required = true, default = newJString(
      "CreateDBParameterGroup"))
  if valid_21627026 != nil:
    section.add "Action", valid_21627026
  var valid_21627027 = query.getOrDefault("Version")
  valid_21627027 = validateParameter(valid_21627027, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627027 != nil:
    section.add "Version", valid_21627027
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627028 = header.getOrDefault("X-Amz-Date")
  valid_21627028 = validateParameter(valid_21627028, JString, required = false,
                                   default = nil)
  if valid_21627028 != nil:
    section.add "X-Amz-Date", valid_21627028
  var valid_21627029 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627029 = validateParameter(valid_21627029, JString, required = false,
                                   default = nil)
  if valid_21627029 != nil:
    section.add "X-Amz-Security-Token", valid_21627029
  var valid_21627030 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627030 = validateParameter(valid_21627030, JString, required = false,
                                   default = nil)
  if valid_21627030 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627030
  var valid_21627031 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627031 = validateParameter(valid_21627031, JString, required = false,
                                   default = nil)
  if valid_21627031 != nil:
    section.add "X-Amz-Algorithm", valid_21627031
  var valid_21627032 = header.getOrDefault("X-Amz-Signature")
  valid_21627032 = validateParameter(valid_21627032, JString, required = false,
                                   default = nil)
  if valid_21627032 != nil:
    section.add "X-Amz-Signature", valid_21627032
  var valid_21627033 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627033 = validateParameter(valid_21627033, JString, required = false,
                                   default = nil)
  if valid_21627033 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627033
  var valid_21627034 = header.getOrDefault("X-Amz-Credential")
  valid_21627034 = validateParameter(valid_21627034, JString, required = false,
                                   default = nil)
  if valid_21627034 != nil:
    section.add "X-Amz-Credential", valid_21627034
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627035: Call_GetCreateDBParameterGroup_21627019;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_21627035.validator(path, query, header, formData, body, _)
  let scheme = call_21627035.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627035.makeUrl(scheme.get, call_21627035.host, call_21627035.base,
                               call_21627035.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627035, uri, valid, _)

proc call*(call_21627036: Call_GetCreateDBParameterGroup_21627019;
          Description: string; DBParameterGroupFamily: string;
          DBParameterGroupName: string; Tags: JsonNode = nil;
          Action: string = "CreateDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBParameterGroup
  ## <p>Creates a new DB parameter group.</p> <p> A DB parameter group is initially created with the default parameters for the database engine used by the DB instance. To provide custom values for any of the parameters, you must modify the group after creating it using <i>ModifyDBParameterGroup</i>. Once you've created a DB parameter group, you need to associate it with your DB instance using <i>ModifyDBInstance</i>. When you associate a new DB parameter group with a running DB instance, you need to reboot the DB instance without failover for the new DB parameter group and associated settings to take effect. </p> <important> <p>After you create a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   Description: string (required)
  ##              : The description for the DB parameter group.
  ##   DBParameterGroupFamily: string (required)
  ##                         : <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p> <p>To list all of the available parameter group families, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"</code> </p> <note> <p>The output contains duplicates.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <note> <p>This value is stored as a lowercase string.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627037 = newJObject()
  add(query_21627037, "Description", newJString(Description))
  add(query_21627037, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Tags != nil:
    query_21627037.add "Tags", Tags
  add(query_21627037, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_21627037, "Action", newJString(Action))
  add(query_21627037, "Version", newJString(Version))
  result = call_21627036.call(nil, query_21627037, nil, nil, nil)

var getCreateDBParameterGroup* = Call_GetCreateDBParameterGroup_21627019(
    name: "getCreateDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBParameterGroup",
    validator: validate_GetCreateDBParameterGroup_21627020, base: "/",
    makeUrl: url_GetCreateDBParameterGroup_21627021,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBProxy_21627083 = ref object of OpenApiRestCall_21625435
proc url_PostCreateDBProxy_21627085(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBProxy_21627084(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627086 = query.getOrDefault("Action")
  valid_21627086 = validateParameter(valid_21627086, JString, required = true,
                                   default = newJString("CreateDBProxy"))
  if valid_21627086 != nil:
    section.add "Action", valid_21627086
  var valid_21627087 = query.getOrDefault("Version")
  valid_21627087 = validateParameter(valid_21627087, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627087 != nil:
    section.add "Version", valid_21627087
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627088 = header.getOrDefault("X-Amz-Date")
  valid_21627088 = validateParameter(valid_21627088, JString, required = false,
                                   default = nil)
  if valid_21627088 != nil:
    section.add "X-Amz-Date", valid_21627088
  var valid_21627089 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627089 = validateParameter(valid_21627089, JString, required = false,
                                   default = nil)
  if valid_21627089 != nil:
    section.add "X-Amz-Security-Token", valid_21627089
  var valid_21627090 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627090 = validateParameter(valid_21627090, JString, required = false,
                                   default = nil)
  if valid_21627090 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627090
  var valid_21627091 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627091 = validateParameter(valid_21627091, JString, required = false,
                                   default = nil)
  if valid_21627091 != nil:
    section.add "X-Amz-Algorithm", valid_21627091
  var valid_21627092 = header.getOrDefault("X-Amz-Signature")
  valid_21627092 = validateParameter(valid_21627092, JString, required = false,
                                   default = nil)
  if valid_21627092 != nil:
    section.add "X-Amz-Signature", valid_21627092
  var valid_21627093 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627093 = validateParameter(valid_21627093, JString, required = false,
                                   default = nil)
  if valid_21627093 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627093
  var valid_21627094 = header.getOrDefault("X-Amz-Credential")
  valid_21627094 = validateParameter(valid_21627094, JString, required = false,
                                   default = nil)
  if valid_21627094 != nil:
    section.add "X-Amz-Credential", valid_21627094
  result.add "header", section
  ## parameters in `formData` object:
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RequireTLS: JBool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   EngineFamily: JString (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  section = newJObject()
  var valid_21627095 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_21627095 = validateParameter(valid_21627095, JArray, required = false,
                                   default = nil)
  if valid_21627095 != nil:
    section.add "VpcSecurityGroupIds", valid_21627095
  assert formData != nil,
        "formData argument is necessary due to required `VpcSubnetIds` field"
  var valid_21627096 = formData.getOrDefault("VpcSubnetIds")
  valid_21627096 = validateParameter(valid_21627096, JArray, required = true,
                                   default = nil)
  if valid_21627096 != nil:
    section.add "VpcSubnetIds", valid_21627096
  var valid_21627097 = formData.getOrDefault("Tags")
  valid_21627097 = validateParameter(valid_21627097, JArray, required = false,
                                   default = nil)
  if valid_21627097 != nil:
    section.add "Tags", valid_21627097
  var valid_21627098 = formData.getOrDefault("RoleArn")
  valid_21627098 = validateParameter(valid_21627098, JString, required = true,
                                   default = nil)
  if valid_21627098 != nil:
    section.add "RoleArn", valid_21627098
  var valid_21627099 = formData.getOrDefault("IdleClientTimeout")
  valid_21627099 = validateParameter(valid_21627099, JInt, required = false,
                                   default = nil)
  if valid_21627099 != nil:
    section.add "IdleClientTimeout", valid_21627099
  var valid_21627100 = formData.getOrDefault("DebugLogging")
  valid_21627100 = validateParameter(valid_21627100, JBool, required = false,
                                   default = nil)
  if valid_21627100 != nil:
    section.add "DebugLogging", valid_21627100
  var valid_21627101 = formData.getOrDefault("RequireTLS")
  valid_21627101 = validateParameter(valid_21627101, JBool, required = false,
                                   default = nil)
  if valid_21627101 != nil:
    section.add "RequireTLS", valid_21627101
  var valid_21627102 = formData.getOrDefault("DBProxyName")
  valid_21627102 = validateParameter(valid_21627102, JString, required = true,
                                   default = nil)
  if valid_21627102 != nil:
    section.add "DBProxyName", valid_21627102
  var valid_21627103 = formData.getOrDefault("Auth")
  valid_21627103 = validateParameter(valid_21627103, JArray, required = true,
                                   default = nil)
  if valid_21627103 != nil:
    section.add "Auth", valid_21627103
  var valid_21627104 = formData.getOrDefault("EngineFamily")
  valid_21627104 = validateParameter(valid_21627104, JString, required = true,
                                   default = newJString("MYSQL"))
  if valid_21627104 != nil:
    section.add "EngineFamily", valid_21627104
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627105: Call_PostCreateDBProxy_21627083; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  let valid = call_21627105.validator(path, query, header, formData, body, _)
  let scheme = call_21627105.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627105.makeUrl(scheme.get, call_21627105.host, call_21627105.base,
                               call_21627105.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627105, uri, valid, _)

proc call*(call_21627106: Call_PostCreateDBProxy_21627083; VpcSubnetIds: JsonNode;
          RoleArn: string; DBProxyName: string; Auth: JsonNode;
          VpcSecurityGroupIds: JsonNode = nil; Tags: JsonNode = nil;
          Action: string = "CreateDBProxy"; IdleClientTimeout: int = 0;
          DebugLogging: bool = false; RequireTLS: bool = false;
          Version: string = "2014-10-31"; EngineFamily: string = "MYSQL"): Recallable =
  ## postCreateDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Action: string (required)
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RequireTLS: bool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   DBProxyName: string (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   Version: string (required)
  ##   EngineFamily: string (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  var query_21627107 = newJObject()
  var formData_21627108 = newJObject()
  if VpcSecurityGroupIds != nil:
    formData_21627108.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if VpcSubnetIds != nil:
    formData_21627108.add "VpcSubnetIds", VpcSubnetIds
  if Tags != nil:
    formData_21627108.add "Tags", Tags
  add(formData_21627108, "RoleArn", newJString(RoleArn))
  add(query_21627107, "Action", newJString(Action))
  add(formData_21627108, "IdleClientTimeout", newJInt(IdleClientTimeout))
  add(formData_21627108, "DebugLogging", newJBool(DebugLogging))
  add(formData_21627108, "RequireTLS", newJBool(RequireTLS))
  add(formData_21627108, "DBProxyName", newJString(DBProxyName))
  if Auth != nil:
    formData_21627108.add "Auth", Auth
  add(query_21627107, "Version", newJString(Version))
  add(formData_21627108, "EngineFamily", newJString(EngineFamily))
  result = call_21627106.call(nil, query_21627107, nil, formData_21627108, nil)

var postCreateDBProxy* = Call_PostCreateDBProxy_21627083(name: "postCreateDBProxy",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBProxy", validator: validate_PostCreateDBProxy_21627084,
    base: "/", makeUrl: url_PostCreateDBProxy_21627085,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBProxy_21627058 = ref object of OpenApiRestCall_21625435
proc url_GetCreateDBProxy_21627060(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBProxy_21627059(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EngineFamily: JString (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Action: JString (required)
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   RequireTLS: JBool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_21627061 = query.getOrDefault("RoleArn")
  valid_21627061 = validateParameter(valid_21627061, JString, required = true,
                                   default = nil)
  if valid_21627061 != nil:
    section.add "RoleArn", valid_21627061
  var valid_21627062 = query.getOrDefault("VpcSecurityGroupIds")
  valid_21627062 = validateParameter(valid_21627062, JArray, required = false,
                                   default = nil)
  if valid_21627062 != nil:
    section.add "VpcSecurityGroupIds", valid_21627062
  var valid_21627063 = query.getOrDefault("Auth")
  valid_21627063 = validateParameter(valid_21627063, JArray, required = true,
                                   default = nil)
  if valid_21627063 != nil:
    section.add "Auth", valid_21627063
  var valid_21627064 = query.getOrDefault("Tags")
  valid_21627064 = validateParameter(valid_21627064, JArray, required = false,
                                   default = nil)
  if valid_21627064 != nil:
    section.add "Tags", valid_21627064
  var valid_21627065 = query.getOrDefault("EngineFamily")
  valid_21627065 = validateParameter(valid_21627065, JString, required = true,
                                   default = newJString("MYSQL"))
  if valid_21627065 != nil:
    section.add "EngineFamily", valid_21627065
  var valid_21627066 = query.getOrDefault("Action")
  valid_21627066 = validateParameter(valid_21627066, JString, required = true,
                                   default = newJString("CreateDBProxy"))
  if valid_21627066 != nil:
    section.add "Action", valid_21627066
  var valid_21627067 = query.getOrDefault("DebugLogging")
  valid_21627067 = validateParameter(valid_21627067, JBool, required = false,
                                   default = nil)
  if valid_21627067 != nil:
    section.add "DebugLogging", valid_21627067
  var valid_21627068 = query.getOrDefault("DBProxyName")
  valid_21627068 = validateParameter(valid_21627068, JString, required = true,
                                   default = nil)
  if valid_21627068 != nil:
    section.add "DBProxyName", valid_21627068
  var valid_21627069 = query.getOrDefault("VpcSubnetIds")
  valid_21627069 = validateParameter(valid_21627069, JArray, required = true,
                                   default = nil)
  if valid_21627069 != nil:
    section.add "VpcSubnetIds", valid_21627069
  var valid_21627070 = query.getOrDefault("RequireTLS")
  valid_21627070 = validateParameter(valid_21627070, JBool, required = false,
                                   default = nil)
  if valid_21627070 != nil:
    section.add "RequireTLS", valid_21627070
  var valid_21627071 = query.getOrDefault("IdleClientTimeout")
  valid_21627071 = validateParameter(valid_21627071, JInt, required = false,
                                   default = nil)
  if valid_21627071 != nil:
    section.add "IdleClientTimeout", valid_21627071
  var valid_21627072 = query.getOrDefault("Version")
  valid_21627072 = validateParameter(valid_21627072, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627072 != nil:
    section.add "Version", valid_21627072
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627073 = header.getOrDefault("X-Amz-Date")
  valid_21627073 = validateParameter(valid_21627073, JString, required = false,
                                   default = nil)
  if valid_21627073 != nil:
    section.add "X-Amz-Date", valid_21627073
  var valid_21627074 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627074 = validateParameter(valid_21627074, JString, required = false,
                                   default = nil)
  if valid_21627074 != nil:
    section.add "X-Amz-Security-Token", valid_21627074
  var valid_21627075 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627075 = validateParameter(valid_21627075, JString, required = false,
                                   default = nil)
  if valid_21627075 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627075
  var valid_21627076 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627076 = validateParameter(valid_21627076, JString, required = false,
                                   default = nil)
  if valid_21627076 != nil:
    section.add "X-Amz-Algorithm", valid_21627076
  var valid_21627077 = header.getOrDefault("X-Amz-Signature")
  valid_21627077 = validateParameter(valid_21627077, JString, required = false,
                                   default = nil)
  if valid_21627077 != nil:
    section.add "X-Amz-Signature", valid_21627077
  var valid_21627078 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627078 = validateParameter(valid_21627078, JString, required = false,
                                   default = nil)
  if valid_21627078 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627078
  var valid_21627079 = header.getOrDefault("X-Amz-Credential")
  valid_21627079 = validateParameter(valid_21627079, JString, required = false,
                                   default = nil)
  if valid_21627079 != nil:
    section.add "X-Amz-Credential", valid_21627079
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627080: Call_GetCreateDBProxy_21627058; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ## 
  let valid = call_21627080.validator(path, query, header, formData, body, _)
  let scheme = call_21627080.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627080.makeUrl(scheme.get, call_21627080.host, call_21627080.base,
                               call_21627080.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627080, uri, valid, _)

proc call*(call_21627081: Call_GetCreateDBProxy_21627058; RoleArn: string;
          Auth: JsonNode; DBProxyName: string; VpcSubnetIds: JsonNode;
          VpcSecurityGroupIds: JsonNode = nil; Tags: JsonNode = nil;
          EngineFamily: string = "MYSQL"; Action: string = "CreateDBProxy";
          DebugLogging: bool = false; RequireTLS: bool = false;
          IdleClientTimeout: int = 0; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Creates a new DB proxy.</p>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   VpcSecurityGroupIds: JArray
  ##                      : One or more VPC security group IDs to associate with the new proxy.
  ##   Auth: JArray (required)
  ##       : The authorization mechanism that the proxy uses.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EngineFamily: string (required)
  ##               : The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. Currently, this value is always <code>MYSQL</code>. The engine family applies to both RDS MySQL and Aurora MySQL.
  ##   Action: string (required)
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   DBProxyName: string (required)
  ##              : The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   VpcSubnetIds: JArray (required)
  ##               : One or more VPC subnet IDs to associate with the new proxy.
  ##   RequireTLS: bool
  ##             : A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   Version: string (required)
  var query_21627082 = newJObject()
  add(query_21627082, "RoleArn", newJString(RoleArn))
  if VpcSecurityGroupIds != nil:
    query_21627082.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if Auth != nil:
    query_21627082.add "Auth", Auth
  if Tags != nil:
    query_21627082.add "Tags", Tags
  add(query_21627082, "EngineFamily", newJString(EngineFamily))
  add(query_21627082, "Action", newJString(Action))
  add(query_21627082, "DebugLogging", newJBool(DebugLogging))
  add(query_21627082, "DBProxyName", newJString(DBProxyName))
  if VpcSubnetIds != nil:
    query_21627082.add "VpcSubnetIds", VpcSubnetIds
  add(query_21627082, "RequireTLS", newJBool(RequireTLS))
  add(query_21627082, "IdleClientTimeout", newJInt(IdleClientTimeout))
  add(query_21627082, "Version", newJString(Version))
  result = call_21627081.call(nil, query_21627082, nil, nil, nil)

var getCreateDBProxy* = Call_GetCreateDBProxy_21627058(name: "getCreateDBProxy",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=CreateDBProxy", validator: validate_GetCreateDBProxy_21627059,
    base: "/", makeUrl: url_GetCreateDBProxy_21627060,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSecurityGroup_21627127 = ref object of OpenApiRestCall_21625435
proc url_PostCreateDBSecurityGroup_21627129(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSecurityGroup_21627128(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627130 = query.getOrDefault("Action")
  valid_21627130 = validateParameter(valid_21627130, JString, required = true, default = newJString(
      "CreateDBSecurityGroup"))
  if valid_21627130 != nil:
    section.add "Action", valid_21627130
  var valid_21627131 = query.getOrDefault("Version")
  valid_21627131 = validateParameter(valid_21627131, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627131 != nil:
    section.add "Version", valid_21627131
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627132 = header.getOrDefault("X-Amz-Date")
  valid_21627132 = validateParameter(valid_21627132, JString, required = false,
                                   default = nil)
  if valid_21627132 != nil:
    section.add "X-Amz-Date", valid_21627132
  var valid_21627133 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627133 = validateParameter(valid_21627133, JString, required = false,
                                   default = nil)
  if valid_21627133 != nil:
    section.add "X-Amz-Security-Token", valid_21627133
  var valid_21627134 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627134 = validateParameter(valid_21627134, JString, required = false,
                                   default = nil)
  if valid_21627134 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627134
  var valid_21627135 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627135 = validateParameter(valid_21627135, JString, required = false,
                                   default = nil)
  if valid_21627135 != nil:
    section.add "X-Amz-Algorithm", valid_21627135
  var valid_21627136 = header.getOrDefault("X-Amz-Signature")
  valid_21627136 = validateParameter(valid_21627136, JString, required = false,
                                   default = nil)
  if valid_21627136 != nil:
    section.add "X-Amz-Signature", valid_21627136
  var valid_21627137 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627137 = validateParameter(valid_21627137, JString, required = false,
                                   default = nil)
  if valid_21627137 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627137
  var valid_21627138 = header.getOrDefault("X-Amz-Credential")
  valid_21627138 = validateParameter(valid_21627138, JString, required = false,
                                   default = nil)
  if valid_21627138 != nil:
    section.add "X-Amz-Credential", valid_21627138
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSecurityGroupDescription: JString (required)
  ##                             : The description for the DB security group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_21627139 = formData.getOrDefault("DBSecurityGroupName")
  valid_21627139 = validateParameter(valid_21627139, JString, required = true,
                                   default = nil)
  if valid_21627139 != nil:
    section.add "DBSecurityGroupName", valid_21627139
  var valid_21627140 = formData.getOrDefault("Tags")
  valid_21627140 = validateParameter(valid_21627140, JArray, required = false,
                                   default = nil)
  if valid_21627140 != nil:
    section.add "Tags", valid_21627140
  var valid_21627141 = formData.getOrDefault("DBSecurityGroupDescription")
  valid_21627141 = validateParameter(valid_21627141, JString, required = true,
                                   default = nil)
  if valid_21627141 != nil:
    section.add "DBSecurityGroupDescription", valid_21627141
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627142: Call_PostCreateDBSecurityGroup_21627127;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  let valid = call_21627142.validator(path, query, header, formData, body, _)
  let scheme = call_21627142.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627142.makeUrl(scheme.get, call_21627142.host, call_21627142.base,
                               call_21627142.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627142, uri, valid, _)

proc call*(call_21627143: Call_PostCreateDBSecurityGroup_21627127;
          DBSecurityGroupName: string; DBSecurityGroupDescription: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSecurityGroup
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   DBSecurityGroupDescription: string (required)
  ##                             : The description for the DB security group.
  ##   Version: string (required)
  var query_21627144 = newJObject()
  var formData_21627145 = newJObject()
  add(formData_21627145, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  if Tags != nil:
    formData_21627145.add "Tags", Tags
  add(query_21627144, "Action", newJString(Action))
  add(formData_21627145, "DBSecurityGroupDescription",
      newJString(DBSecurityGroupDescription))
  add(query_21627144, "Version", newJString(Version))
  result = call_21627143.call(nil, query_21627144, nil, formData_21627145, nil)

var postCreateDBSecurityGroup* = Call_PostCreateDBSecurityGroup_21627127(
    name: "postCreateDBSecurityGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSecurityGroup",
    validator: validate_PostCreateDBSecurityGroup_21627128, base: "/",
    makeUrl: url_PostCreateDBSecurityGroup_21627129,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSecurityGroup_21627109 = ref object of OpenApiRestCall_21625435
proc url_GetCreateDBSecurityGroup_21627111(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSecurityGroup_21627110(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   DBSecurityGroupDescription: JString (required)
  ##                             : The description for the DB security group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_21627112 = query.getOrDefault("DBSecurityGroupName")
  valid_21627112 = validateParameter(valid_21627112, JString, required = true,
                                   default = nil)
  if valid_21627112 != nil:
    section.add "DBSecurityGroupName", valid_21627112
  var valid_21627113 = query.getOrDefault("DBSecurityGroupDescription")
  valid_21627113 = validateParameter(valid_21627113, JString, required = true,
                                   default = nil)
  if valid_21627113 != nil:
    section.add "DBSecurityGroupDescription", valid_21627113
  var valid_21627114 = query.getOrDefault("Tags")
  valid_21627114 = validateParameter(valid_21627114, JArray, required = false,
                                   default = nil)
  if valid_21627114 != nil:
    section.add "Tags", valid_21627114
  var valid_21627115 = query.getOrDefault("Action")
  valid_21627115 = validateParameter(valid_21627115, JString, required = true, default = newJString(
      "CreateDBSecurityGroup"))
  if valid_21627115 != nil:
    section.add "Action", valid_21627115
  var valid_21627116 = query.getOrDefault("Version")
  valid_21627116 = validateParameter(valid_21627116, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627116 != nil:
    section.add "Version", valid_21627116
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627117 = header.getOrDefault("X-Amz-Date")
  valid_21627117 = validateParameter(valid_21627117, JString, required = false,
                                   default = nil)
  if valid_21627117 != nil:
    section.add "X-Amz-Date", valid_21627117
  var valid_21627118 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627118 = validateParameter(valid_21627118, JString, required = false,
                                   default = nil)
  if valid_21627118 != nil:
    section.add "X-Amz-Security-Token", valid_21627118
  var valid_21627119 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627119 = validateParameter(valid_21627119, JString, required = false,
                                   default = nil)
  if valid_21627119 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627119
  var valid_21627120 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627120 = validateParameter(valid_21627120, JString, required = false,
                                   default = nil)
  if valid_21627120 != nil:
    section.add "X-Amz-Algorithm", valid_21627120
  var valid_21627121 = header.getOrDefault("X-Amz-Signature")
  valid_21627121 = validateParameter(valid_21627121, JString, required = false,
                                   default = nil)
  if valid_21627121 != nil:
    section.add "X-Amz-Signature", valid_21627121
  var valid_21627122 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627122 = validateParameter(valid_21627122, JString, required = false,
                                   default = nil)
  if valid_21627122 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627122
  var valid_21627123 = header.getOrDefault("X-Amz-Credential")
  valid_21627123 = validateParameter(valid_21627123, JString, required = false,
                                   default = nil)
  if valid_21627123 != nil:
    section.add "X-Amz-Credential", valid_21627123
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627124: Call_GetCreateDBSecurityGroup_21627109;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ## 
  let valid = call_21627124.validator(path, query, header, formData, body, _)
  let scheme = call_21627124.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627124.makeUrl(scheme.get, call_21627124.host, call_21627124.base,
                               call_21627124.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627124, uri, valid, _)

proc call*(call_21627125: Call_GetCreateDBSecurityGroup_21627109;
          DBSecurityGroupName: string; DBSecurityGroupDescription: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSecurityGroup
  ## <p>Creates a new DB security group. DB security groups control access to a DB instance.</p> <note> <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name for the DB security group. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul> <p>Example: <code>mysecuritygroup</code> </p>
  ##   DBSecurityGroupDescription: string (required)
  ##                             : The description for the DB security group.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627126 = newJObject()
  add(query_21627126, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_21627126, "DBSecurityGroupDescription",
      newJString(DBSecurityGroupDescription))
  if Tags != nil:
    query_21627126.add "Tags", Tags
  add(query_21627126, "Action", newJString(Action))
  add(query_21627126, "Version", newJString(Version))
  result = call_21627125.call(nil, query_21627126, nil, nil, nil)

var getCreateDBSecurityGroup* = Call_GetCreateDBSecurityGroup_21627109(
    name: "getCreateDBSecurityGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSecurityGroup",
    validator: validate_GetCreateDBSecurityGroup_21627110, base: "/",
    makeUrl: url_GetCreateDBSecurityGroup_21627111,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSnapshot_21627164 = ref object of OpenApiRestCall_21625435
proc url_PostCreateDBSnapshot_21627166(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSnapshot_21627165(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627167 = query.getOrDefault("Action")
  valid_21627167 = validateParameter(valid_21627167, JString, required = true,
                                   default = newJString("CreateDBSnapshot"))
  if valid_21627167 != nil:
    section.add "Action", valid_21627167
  var valid_21627168 = query.getOrDefault("Version")
  valid_21627168 = validateParameter(valid_21627168, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627168 != nil:
    section.add "Version", valid_21627168
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627169 = header.getOrDefault("X-Amz-Date")
  valid_21627169 = validateParameter(valid_21627169, JString, required = false,
                                   default = nil)
  if valid_21627169 != nil:
    section.add "X-Amz-Date", valid_21627169
  var valid_21627170 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627170 = validateParameter(valid_21627170, JString, required = false,
                                   default = nil)
  if valid_21627170 != nil:
    section.add "X-Amz-Security-Token", valid_21627170
  var valid_21627171 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627171 = validateParameter(valid_21627171, JString, required = false,
                                   default = nil)
  if valid_21627171 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627171
  var valid_21627172 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627172 = validateParameter(valid_21627172, JString, required = false,
                                   default = nil)
  if valid_21627172 != nil:
    section.add "X-Amz-Algorithm", valid_21627172
  var valid_21627173 = header.getOrDefault("X-Amz-Signature")
  valid_21627173 = validateParameter(valid_21627173, JString, required = false,
                                   default = nil)
  if valid_21627173 != nil:
    section.add "X-Amz-Signature", valid_21627173
  var valid_21627174 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627174 = validateParameter(valid_21627174, JString, required = false,
                                   default = nil)
  if valid_21627174 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627174
  var valid_21627175 = header.getOrDefault("X-Amz-Credential")
  valid_21627175 = validateParameter(valid_21627175, JString, required = false,
                                   default = nil)
  if valid_21627175 != nil:
    section.add "X-Amz-Credential", valid_21627175
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_21627176 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21627176 = validateParameter(valid_21627176, JString, required = true,
                                   default = nil)
  if valid_21627176 != nil:
    section.add "DBInstanceIdentifier", valid_21627176
  var valid_21627177 = formData.getOrDefault("Tags")
  valid_21627177 = validateParameter(valid_21627177, JArray, required = false,
                                   default = nil)
  if valid_21627177 != nil:
    section.add "Tags", valid_21627177
  var valid_21627178 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_21627178 = validateParameter(valid_21627178, JString, required = true,
                                   default = nil)
  if valid_21627178 != nil:
    section.add "DBSnapshotIdentifier", valid_21627178
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627179: Call_PostCreateDBSnapshot_21627164; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  let valid = call_21627179.validator(path, query, header, formData, body, _)
  let scheme = call_21627179.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627179.makeUrl(scheme.get, call_21627179.host, call_21627179.base,
                               call_21627179.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627179, uri, valid, _)

proc call*(call_21627180: Call_PostCreateDBSnapshot_21627164;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSnapshot
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627181 = newJObject()
  var formData_21627182 = newJObject()
  add(formData_21627182, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  if Tags != nil:
    formData_21627182.add "Tags", Tags
  add(formData_21627182, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_21627181, "Action", newJString(Action))
  add(query_21627181, "Version", newJString(Version))
  result = call_21627180.call(nil, query_21627181, nil, formData_21627182, nil)

var postCreateDBSnapshot* = Call_PostCreateDBSnapshot_21627164(
    name: "postCreateDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSnapshot",
    validator: validate_PostCreateDBSnapshot_21627165, base: "/",
    makeUrl: url_PostCreateDBSnapshot_21627166,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSnapshot_21627146 = ref object of OpenApiRestCall_21625435
proc url_GetCreateDBSnapshot_21627148(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSnapshot_21627147(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  section = newJObject()
  var valid_21627149 = query.getOrDefault("Tags")
  valid_21627149 = validateParameter(valid_21627149, JArray, required = false,
                                   default = nil)
  if valid_21627149 != nil:
    section.add "Tags", valid_21627149
  var valid_21627150 = query.getOrDefault("Action")
  valid_21627150 = validateParameter(valid_21627150, JString, required = true,
                                   default = newJString("CreateDBSnapshot"))
  if valid_21627150 != nil:
    section.add "Action", valid_21627150
  var valid_21627151 = query.getOrDefault("Version")
  valid_21627151 = validateParameter(valid_21627151, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627151 != nil:
    section.add "Version", valid_21627151
  var valid_21627152 = query.getOrDefault("DBInstanceIdentifier")
  valid_21627152 = validateParameter(valid_21627152, JString, required = true,
                                   default = nil)
  if valid_21627152 != nil:
    section.add "DBInstanceIdentifier", valid_21627152
  var valid_21627153 = query.getOrDefault("DBSnapshotIdentifier")
  valid_21627153 = validateParameter(valid_21627153, JString, required = true,
                                   default = nil)
  if valid_21627153 != nil:
    section.add "DBSnapshotIdentifier", valid_21627153
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627154 = header.getOrDefault("X-Amz-Date")
  valid_21627154 = validateParameter(valid_21627154, JString, required = false,
                                   default = nil)
  if valid_21627154 != nil:
    section.add "X-Amz-Date", valid_21627154
  var valid_21627155 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627155 = validateParameter(valid_21627155, JString, required = false,
                                   default = nil)
  if valid_21627155 != nil:
    section.add "X-Amz-Security-Token", valid_21627155
  var valid_21627156 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627156 = validateParameter(valid_21627156, JString, required = false,
                                   default = nil)
  if valid_21627156 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627156
  var valid_21627157 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627157 = validateParameter(valid_21627157, JString, required = false,
                                   default = nil)
  if valid_21627157 != nil:
    section.add "X-Amz-Algorithm", valid_21627157
  var valid_21627158 = header.getOrDefault("X-Amz-Signature")
  valid_21627158 = validateParameter(valid_21627158, JString, required = false,
                                   default = nil)
  if valid_21627158 != nil:
    section.add "X-Amz-Signature", valid_21627158
  var valid_21627159 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627159 = validateParameter(valid_21627159, JString, required = false,
                                   default = nil)
  if valid_21627159 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627159
  var valid_21627160 = header.getOrDefault("X-Amz-Credential")
  valid_21627160 = validateParameter(valid_21627160, JString, required = false,
                                   default = nil)
  if valid_21627160 != nil:
    section.add "X-Amz-Credential", valid_21627160
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627161: Call_GetCreateDBSnapshot_21627146; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ## 
  let valid = call_21627161.validator(path, query, header, formData, body, _)
  let scheme = call_21627161.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627161.makeUrl(scheme.get, call_21627161.host, call_21627161.base,
                               call_21627161.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627161, uri, valid, _)

proc call*(call_21627162: Call_GetCreateDBSnapshot_21627146;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Tags: JsonNode = nil; Action: string = "CreateDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSnapshot
  ## Creates a DBSnapshot. The source DBInstance must be in "available" state.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The identifier of the DB instance that you want to create the snapshot of.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Can't be null, empty, or blank</p> </li> <li> <p>Must contain from 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  var query_21627163 = newJObject()
  if Tags != nil:
    query_21627163.add "Tags", Tags
  add(query_21627163, "Action", newJString(Action))
  add(query_21627163, "Version", newJString(Version))
  add(query_21627163, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_21627163, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_21627162.call(nil, query_21627163, nil, nil, nil)

var getCreateDBSnapshot* = Call_GetCreateDBSnapshot_21627146(
    name: "getCreateDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSnapshot",
    validator: validate_GetCreateDBSnapshot_21627147, base: "/",
    makeUrl: url_GetCreateDBSnapshot_21627148,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateDBSubnetGroup_21627202 = ref object of OpenApiRestCall_21625435
proc url_PostCreateDBSubnetGroup_21627204(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateDBSubnetGroup_21627203(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627205 = query.getOrDefault("Action")
  valid_21627205 = validateParameter(valid_21627205, JString, required = true,
                                   default = newJString("CreateDBSubnetGroup"))
  if valid_21627205 != nil:
    section.add "Action", valid_21627205
  var valid_21627206 = query.getOrDefault("Version")
  valid_21627206 = validateParameter(valid_21627206, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627206 != nil:
    section.add "Version", valid_21627206
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627207 = header.getOrDefault("X-Amz-Date")
  valid_21627207 = validateParameter(valid_21627207, JString, required = false,
                                   default = nil)
  if valid_21627207 != nil:
    section.add "X-Amz-Date", valid_21627207
  var valid_21627208 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627208 = validateParameter(valid_21627208, JString, required = false,
                                   default = nil)
  if valid_21627208 != nil:
    section.add "X-Amz-Security-Token", valid_21627208
  var valid_21627209 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627209 = validateParameter(valid_21627209, JString, required = false,
                                   default = nil)
  if valid_21627209 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627209
  var valid_21627210 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627210 = validateParameter(valid_21627210, JString, required = false,
                                   default = nil)
  if valid_21627210 != nil:
    section.add "X-Amz-Algorithm", valid_21627210
  var valid_21627211 = header.getOrDefault("X-Amz-Signature")
  valid_21627211 = validateParameter(valid_21627211, JString, required = false,
                                   default = nil)
  if valid_21627211 != nil:
    section.add "X-Amz-Signature", valid_21627211
  var valid_21627212 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627212 = validateParameter(valid_21627212, JString, required = false,
                                   default = nil)
  if valid_21627212 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627212
  var valid_21627213 = header.getOrDefault("X-Amz-Credential")
  valid_21627213 = validateParameter(valid_21627213, JString, required = false,
                                   default = nil)
  if valid_21627213 != nil:
    section.add "X-Amz-Credential", valid_21627213
  result.add "header", section
  ## parameters in `formData` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  section = newJObject()
  var valid_21627214 = formData.getOrDefault("Tags")
  valid_21627214 = validateParameter(valid_21627214, JArray, required = false,
                                   default = nil)
  if valid_21627214 != nil:
    section.add "Tags", valid_21627214
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_21627215 = formData.getOrDefault("DBSubnetGroupName")
  valid_21627215 = validateParameter(valid_21627215, JString, required = true,
                                   default = nil)
  if valid_21627215 != nil:
    section.add "DBSubnetGroupName", valid_21627215
  var valid_21627216 = formData.getOrDefault("SubnetIds")
  valid_21627216 = validateParameter(valid_21627216, JArray, required = true,
                                   default = nil)
  if valid_21627216 != nil:
    section.add "SubnetIds", valid_21627216
  var valid_21627217 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_21627217 = validateParameter(valid_21627217, JString, required = true,
                                   default = nil)
  if valid_21627217 != nil:
    section.add "DBSubnetGroupDescription", valid_21627217
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627218: Call_PostCreateDBSubnetGroup_21627202;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_21627218.validator(path, query, header, formData, body, _)
  let scheme = call_21627218.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627218.makeUrl(scheme.get, call_21627218.host, call_21627218.base,
                               call_21627218.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627218, uri, valid, _)

proc call*(call_21627219: Call_PostCreateDBSubnetGroup_21627202;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; Tags: JsonNode = nil;
          Action: string = "CreateDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_21627220 = newJObject()
  var formData_21627221 = newJObject()
  if Tags != nil:
    formData_21627221.add "Tags", Tags
  add(formData_21627221, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    formData_21627221.add "SubnetIds", SubnetIds
  add(query_21627220, "Action", newJString(Action))
  add(formData_21627221, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_21627220, "Version", newJString(Version))
  result = call_21627219.call(nil, query_21627220, nil, formData_21627221, nil)

var postCreateDBSubnetGroup* = Call_PostCreateDBSubnetGroup_21627202(
    name: "postCreateDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_PostCreateDBSubnetGroup_21627203, base: "/",
    makeUrl: url_PostCreateDBSubnetGroup_21627204,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateDBSubnetGroup_21627183 = ref object of OpenApiRestCall_21625435
proc url_GetCreateDBSubnetGroup_21627185(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateDBSubnetGroup_21627184(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString (required)
  ##                           : The description for the DB subnet group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627186 = query.getOrDefault("Tags")
  valid_21627186 = validateParameter(valid_21627186, JArray, required = false,
                                   default = nil)
  if valid_21627186 != nil:
    section.add "Tags", valid_21627186
  var valid_21627187 = query.getOrDefault("Action")
  valid_21627187 = validateParameter(valid_21627187, JString, required = true,
                                   default = newJString("CreateDBSubnetGroup"))
  if valid_21627187 != nil:
    section.add "Action", valid_21627187
  var valid_21627188 = query.getOrDefault("DBSubnetGroupName")
  valid_21627188 = validateParameter(valid_21627188, JString, required = true,
                                   default = nil)
  if valid_21627188 != nil:
    section.add "DBSubnetGroupName", valid_21627188
  var valid_21627189 = query.getOrDefault("SubnetIds")
  valid_21627189 = validateParameter(valid_21627189, JArray, required = true,
                                   default = nil)
  if valid_21627189 != nil:
    section.add "SubnetIds", valid_21627189
  var valid_21627190 = query.getOrDefault("DBSubnetGroupDescription")
  valid_21627190 = validateParameter(valid_21627190, JString, required = true,
                                   default = nil)
  if valid_21627190 != nil:
    section.add "DBSubnetGroupDescription", valid_21627190
  var valid_21627191 = query.getOrDefault("Version")
  valid_21627191 = validateParameter(valid_21627191, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627191 != nil:
    section.add "Version", valid_21627191
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627192 = header.getOrDefault("X-Amz-Date")
  valid_21627192 = validateParameter(valid_21627192, JString, required = false,
                                   default = nil)
  if valid_21627192 != nil:
    section.add "X-Amz-Date", valid_21627192
  var valid_21627193 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627193 = validateParameter(valid_21627193, JString, required = false,
                                   default = nil)
  if valid_21627193 != nil:
    section.add "X-Amz-Security-Token", valid_21627193
  var valid_21627194 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627194 = validateParameter(valid_21627194, JString, required = false,
                                   default = nil)
  if valid_21627194 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627194
  var valid_21627195 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627195 = validateParameter(valid_21627195, JString, required = false,
                                   default = nil)
  if valid_21627195 != nil:
    section.add "X-Amz-Algorithm", valid_21627195
  var valid_21627196 = header.getOrDefault("X-Amz-Signature")
  valid_21627196 = validateParameter(valid_21627196, JString, required = false,
                                   default = nil)
  if valid_21627196 != nil:
    section.add "X-Amz-Signature", valid_21627196
  var valid_21627197 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627197 = validateParameter(valid_21627197, JString, required = false,
                                   default = nil)
  if valid_21627197 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627197
  var valid_21627198 = header.getOrDefault("X-Amz-Credential")
  valid_21627198 = validateParameter(valid_21627198, JString, required = false,
                                   default = nil)
  if valid_21627198 != nil:
    section.add "X-Amz-Credential", valid_21627198
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627199: Call_GetCreateDBSubnetGroup_21627183;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_21627199.validator(path, query, header, formData, body, _)
  let scheme = call_21627199.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627199.makeUrl(scheme.get, call_21627199.host, call_21627199.base,
                               call_21627199.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627199, uri, valid, _)

proc call*(call_21627200: Call_GetCreateDBSubnetGroup_21627183;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          DBSubnetGroupDescription: string; Tags: JsonNode = nil;
          Action: string = "CreateDBSubnetGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateDBSubnetGroup
  ## Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string.</p> <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 Subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: string (required)
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_21627201 = newJObject()
  if Tags != nil:
    query_21627201.add "Tags", Tags
  add(query_21627201, "Action", newJString(Action))
  add(query_21627201, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    query_21627201.add "SubnetIds", SubnetIds
  add(query_21627201, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_21627201, "Version", newJString(Version))
  result = call_21627200.call(nil, query_21627201, nil, nil, nil)

var getCreateDBSubnetGroup* = Call_GetCreateDBSubnetGroup_21627183(
    name: "getCreateDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateDBSubnetGroup",
    validator: validate_GetCreateDBSubnetGroup_21627184, base: "/",
    makeUrl: url_GetCreateDBSubnetGroup_21627185,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateEventSubscription_21627244 = ref object of OpenApiRestCall_21625435
proc url_PostCreateEventSubscription_21627246(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateEventSubscription_21627245(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates an RDS event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you don't specify either the SourceType or the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627247 = query.getOrDefault("Action")
  valid_21627247 = validateParameter(valid_21627247, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_21627247 != nil:
    section.add "Action", valid_21627247
  var valid_21627248 = query.getOrDefault("Version")
  valid_21627248 = validateParameter(valid_21627248, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627248 != nil:
    section.add "Version", valid_21627248
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627249 = header.getOrDefault("X-Amz-Date")
  valid_21627249 = validateParameter(valid_21627249, JString, required = false,
                                   default = nil)
  if valid_21627249 != nil:
    section.add "X-Amz-Date", valid_21627249
  var valid_21627250 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627250 = validateParameter(valid_21627250, JString, required = false,
                                   default = nil)
  if valid_21627250 != nil:
    section.add "X-Amz-Security-Token", valid_21627250
  var valid_21627251 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627251 = validateParameter(valid_21627251, JString, required = false,
                                   default = nil)
  if valid_21627251 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627251
  var valid_21627252 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627252 = validateParameter(valid_21627252, JString, required = false,
                                   default = nil)
  if valid_21627252 != nil:
    section.add "X-Amz-Algorithm", valid_21627252
  var valid_21627253 = header.getOrDefault("X-Amz-Signature")
  valid_21627253 = validateParameter(valid_21627253, JString, required = false,
                                   default = nil)
  if valid_21627253 != nil:
    section.add "X-Amz-Signature", valid_21627253
  var valid_21627254 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627254 = validateParameter(valid_21627254, JString, required = false,
                                   default = nil)
  if valid_21627254 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627254
  var valid_21627255 = header.getOrDefault("X-Amz-Credential")
  valid_21627255 = validateParameter(valid_21627255, JString, required = false,
                                   default = nil)
  if valid_21627255 != nil:
    section.add "X-Amz-Credential", valid_21627255
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  section = newJObject()
  var valid_21627256 = formData.getOrDefault("Enabled")
  valid_21627256 = validateParameter(valid_21627256, JBool, required = false,
                                   default = nil)
  if valid_21627256 != nil:
    section.add "Enabled", valid_21627256
  var valid_21627257 = formData.getOrDefault("EventCategories")
  valid_21627257 = validateParameter(valid_21627257, JArray, required = false,
                                   default = nil)
  if valid_21627257 != nil:
    section.add "EventCategories", valid_21627257
  assert formData != nil,
        "formData argument is necessary due to required `SnsTopicArn` field"
  var valid_21627258 = formData.getOrDefault("SnsTopicArn")
  valid_21627258 = validateParameter(valid_21627258, JString, required = true,
                                   default = nil)
  if valid_21627258 != nil:
    section.add "SnsTopicArn", valid_21627258
  var valid_21627259 = formData.getOrDefault("SourceIds")
  valid_21627259 = validateParameter(valid_21627259, JArray, required = false,
                                   default = nil)
  if valid_21627259 != nil:
    section.add "SourceIds", valid_21627259
  var valid_21627260 = formData.getOrDefault("Tags")
  valid_21627260 = validateParameter(valid_21627260, JArray, required = false,
                                   default = nil)
  if valid_21627260 != nil:
    section.add "Tags", valid_21627260
  var valid_21627261 = formData.getOrDefault("SubscriptionName")
  valid_21627261 = validateParameter(valid_21627261, JString, required = true,
                                   default = nil)
  if valid_21627261 != nil:
    section.add "SubscriptionName", valid_21627261
  var valid_21627262 = formData.getOrDefault("SourceType")
  valid_21627262 = validateParameter(valid_21627262, JString, required = false,
                                   default = nil)
  if valid_21627262 != nil:
    section.add "SourceType", valid_21627262
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627263: Call_PostCreateEventSubscription_21627244;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an RDS event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you don't specify either the SourceType or the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  let valid = call_21627263.validator(path, query, header, formData, body, _)
  let scheme = call_21627263.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627263.makeUrl(scheme.get, call_21627263.host, call_21627263.base,
                               call_21627263.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627263, uri, valid, _)

proc call*(call_21627264: Call_PostCreateEventSubscription_21627244;
          SnsTopicArn: string; SubscriptionName: string; Enabled: bool = false;
          EventCategories: JsonNode = nil; SourceIds: JsonNode = nil;
          Tags: JsonNode = nil; Action: string = "CreateEventSubscription";
          Version: string = "2014-10-31"; SourceType: string = ""): Recallable =
  ## postCreateEventSubscription
  ## <p>Creates an RDS event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you don't specify either the SourceType or the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  var query_21627265 = newJObject()
  var formData_21627266 = newJObject()
  add(formData_21627266, "Enabled", newJBool(Enabled))
  if EventCategories != nil:
    formData_21627266.add "EventCategories", EventCategories
  add(formData_21627266, "SnsTopicArn", newJString(SnsTopicArn))
  if SourceIds != nil:
    formData_21627266.add "SourceIds", SourceIds
  if Tags != nil:
    formData_21627266.add "Tags", Tags
  add(formData_21627266, "SubscriptionName", newJString(SubscriptionName))
  add(query_21627265, "Action", newJString(Action))
  add(query_21627265, "Version", newJString(Version))
  add(formData_21627266, "SourceType", newJString(SourceType))
  result = call_21627264.call(nil, query_21627265, nil, formData_21627266, nil)

var postCreateEventSubscription* = Call_PostCreateEventSubscription_21627244(
    name: "postCreateEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_PostCreateEventSubscription_21627245, base: "/",
    makeUrl: url_PostCreateEventSubscription_21627246,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateEventSubscription_21627222 = ref object of OpenApiRestCall_21625435
proc url_GetCreateEventSubscription_21627224(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateEventSubscription_21627223(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates an RDS event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you don't specify either the SourceType or the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   SnsTopicArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SubscriptionName: JString (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627225 = query.getOrDefault("SourceType")
  valid_21627225 = validateParameter(valid_21627225, JString, required = false,
                                   default = nil)
  if valid_21627225 != nil:
    section.add "SourceType", valid_21627225
  var valid_21627226 = query.getOrDefault("SourceIds")
  valid_21627226 = validateParameter(valid_21627226, JArray, required = false,
                                   default = nil)
  if valid_21627226 != nil:
    section.add "SourceIds", valid_21627226
  var valid_21627227 = query.getOrDefault("Enabled")
  valid_21627227 = validateParameter(valid_21627227, JBool, required = false,
                                   default = nil)
  if valid_21627227 != nil:
    section.add "Enabled", valid_21627227
  var valid_21627228 = query.getOrDefault("Tags")
  valid_21627228 = validateParameter(valid_21627228, JArray, required = false,
                                   default = nil)
  if valid_21627228 != nil:
    section.add "Tags", valid_21627228
  var valid_21627229 = query.getOrDefault("Action")
  valid_21627229 = validateParameter(valid_21627229, JString, required = true, default = newJString(
      "CreateEventSubscription"))
  if valid_21627229 != nil:
    section.add "Action", valid_21627229
  var valid_21627230 = query.getOrDefault("SnsTopicArn")
  valid_21627230 = validateParameter(valid_21627230, JString, required = true,
                                   default = nil)
  if valid_21627230 != nil:
    section.add "SnsTopicArn", valid_21627230
  var valid_21627231 = query.getOrDefault("EventCategories")
  valid_21627231 = validateParameter(valid_21627231, JArray, required = false,
                                   default = nil)
  if valid_21627231 != nil:
    section.add "EventCategories", valid_21627231
  var valid_21627232 = query.getOrDefault("SubscriptionName")
  valid_21627232 = validateParameter(valid_21627232, JString, required = true,
                                   default = nil)
  if valid_21627232 != nil:
    section.add "SubscriptionName", valid_21627232
  var valid_21627233 = query.getOrDefault("Version")
  valid_21627233 = validateParameter(valid_21627233, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627233 != nil:
    section.add "Version", valid_21627233
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627234 = header.getOrDefault("X-Amz-Date")
  valid_21627234 = validateParameter(valid_21627234, JString, required = false,
                                   default = nil)
  if valid_21627234 != nil:
    section.add "X-Amz-Date", valid_21627234
  var valid_21627235 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627235 = validateParameter(valid_21627235, JString, required = false,
                                   default = nil)
  if valid_21627235 != nil:
    section.add "X-Amz-Security-Token", valid_21627235
  var valid_21627236 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627236 = validateParameter(valid_21627236, JString, required = false,
                                   default = nil)
  if valid_21627236 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627236
  var valid_21627237 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627237 = validateParameter(valid_21627237, JString, required = false,
                                   default = nil)
  if valid_21627237 != nil:
    section.add "X-Amz-Algorithm", valid_21627237
  var valid_21627238 = header.getOrDefault("X-Amz-Signature")
  valid_21627238 = validateParameter(valid_21627238, JString, required = false,
                                   default = nil)
  if valid_21627238 != nil:
    section.add "X-Amz-Signature", valid_21627238
  var valid_21627239 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627239 = validateParameter(valid_21627239, JString, required = false,
                                   default = nil)
  if valid_21627239 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627239
  var valid_21627240 = header.getOrDefault("X-Amz-Credential")
  valid_21627240 = validateParameter(valid_21627240, JString, required = false,
                                   default = nil)
  if valid_21627240 != nil:
    section.add "X-Amz-Credential", valid_21627240
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627241: Call_GetCreateEventSubscription_21627222;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an RDS event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you don't specify either the SourceType or the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ## 
  let valid = call_21627241.validator(path, query, header, formData, body, _)
  let scheme = call_21627241.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627241.makeUrl(scheme.get, call_21627241.host, call_21627241.base,
                               call_21627241.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627241, uri, valid, _)

proc call*(call_21627242: Call_GetCreateEventSubscription_21627222;
          SnsTopicArn: string; SubscriptionName: string; SourceType: string = "";
          SourceIds: JsonNode = nil; Enabled: bool = false; Tags: JsonNode = nil;
          Action: string = "CreateEventSubscription";
          EventCategories: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getCreateEventSubscription
  ## <p>Creates an RDS event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API. To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the SNS console.</p> <p>You can specify the type of source (SourceType) you want to be notified of, provide a list of RDS sources (SourceIds) that triggers the events, and provide a list of event categories (EventCategories) for events you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup.</p> <p>If you specify both the SourceType and SourceIds, such as SourceType = db-instance and SourceIdentifier = myDBInstance1, you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your RDS sources. If you don't specify either the SourceType or the SourceIdentifier, you are notified of events generated from all RDS sources belonging to your customer account.</p> <note> <p>RDS event notification is only available for unencrypted SNS topics. If you specify an encrypted SNS topic, event notifications aren't sent for the topic.</p> </note>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value isn't specified, all events are returned.</p> <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> </p>
  ##   SourceIds: JArray
  ##            : <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIds are supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is a DB instance, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> </ul>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   SnsTopicArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SubscriptionName: string (required)
  ##                   : <p>The name of the subscription.</p> <p>Constraints: The name must be less than 255 characters.</p>
  ##   Version: string (required)
  var query_21627243 = newJObject()
  add(query_21627243, "SourceType", newJString(SourceType))
  if SourceIds != nil:
    query_21627243.add "SourceIds", SourceIds
  add(query_21627243, "Enabled", newJBool(Enabled))
  if Tags != nil:
    query_21627243.add "Tags", Tags
  add(query_21627243, "Action", newJString(Action))
  add(query_21627243, "SnsTopicArn", newJString(SnsTopicArn))
  if EventCategories != nil:
    query_21627243.add "EventCategories", EventCategories
  add(query_21627243, "SubscriptionName", newJString(SubscriptionName))
  add(query_21627243, "Version", newJString(Version))
  result = call_21627242.call(nil, query_21627243, nil, nil, nil)

var getCreateEventSubscription* = Call_GetCreateEventSubscription_21627222(
    name: "getCreateEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateEventSubscription",
    validator: validate_GetCreateEventSubscription_21627223, base: "/",
    makeUrl: url_GetCreateEventSubscription_21627224,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateGlobalCluster_21627289 = ref object of OpenApiRestCall_21625435
proc url_PostCreateGlobalCluster_21627291(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateGlobalCluster_21627290(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627292 = query.getOrDefault("Action")
  valid_21627292 = validateParameter(valid_21627292, JString, required = true,
                                   default = newJString("CreateGlobalCluster"))
  if valid_21627292 != nil:
    section.add "Action", valid_21627292
  var valid_21627293 = query.getOrDefault("Version")
  valid_21627293 = validateParameter(valid_21627293, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627293 != nil:
    section.add "Version", valid_21627293
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627294 = header.getOrDefault("X-Amz-Date")
  valid_21627294 = validateParameter(valid_21627294, JString, required = false,
                                   default = nil)
  if valid_21627294 != nil:
    section.add "X-Amz-Date", valid_21627294
  var valid_21627295 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627295 = validateParameter(valid_21627295, JString, required = false,
                                   default = nil)
  if valid_21627295 != nil:
    section.add "X-Amz-Security-Token", valid_21627295
  var valid_21627296 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627296 = validateParameter(valid_21627296, JString, required = false,
                                   default = nil)
  if valid_21627296 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627296
  var valid_21627297 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627297 = validateParameter(valid_21627297, JString, required = false,
                                   default = nil)
  if valid_21627297 != nil:
    section.add "X-Amz-Algorithm", valid_21627297
  var valid_21627298 = header.getOrDefault("X-Amz-Signature")
  valid_21627298 = validateParameter(valid_21627298, JString, required = false,
                                   default = nil)
  if valid_21627298 != nil:
    section.add "X-Amz-Signature", valid_21627298
  var valid_21627299 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627299 = validateParameter(valid_21627299, JString, required = false,
                                   default = nil)
  if valid_21627299 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627299
  var valid_21627300 = header.getOrDefault("X-Amz-Credential")
  valid_21627300 = validateParameter(valid_21627300, JString, required = false,
                                   default = nil)
  if valid_21627300 != nil:
    section.add "X-Amz-Credential", valid_21627300
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBClusterIdentifier: JString
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   GlobalClusterIdentifier: JString
  ##                          : The cluster identifier of the new global database cluster.
  ##   Engine: JString
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   DeletionProtection: JBool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   DatabaseName: JString
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   StorageEncrypted: JBool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   EngineVersion: JString
  ##                : The engine version of the Aurora global database.
  section = newJObject()
  var valid_21627301 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_21627301 = validateParameter(valid_21627301, JString, required = false,
                                   default = nil)
  if valid_21627301 != nil:
    section.add "SourceDBClusterIdentifier", valid_21627301
  var valid_21627302 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_21627302 = validateParameter(valid_21627302, JString, required = false,
                                   default = nil)
  if valid_21627302 != nil:
    section.add "GlobalClusterIdentifier", valid_21627302
  var valid_21627303 = formData.getOrDefault("Engine")
  valid_21627303 = validateParameter(valid_21627303, JString, required = false,
                                   default = nil)
  if valid_21627303 != nil:
    section.add "Engine", valid_21627303
  var valid_21627304 = formData.getOrDefault("DeletionProtection")
  valid_21627304 = validateParameter(valid_21627304, JBool, required = false,
                                   default = nil)
  if valid_21627304 != nil:
    section.add "DeletionProtection", valid_21627304
  var valid_21627305 = formData.getOrDefault("DatabaseName")
  valid_21627305 = validateParameter(valid_21627305, JString, required = false,
                                   default = nil)
  if valid_21627305 != nil:
    section.add "DatabaseName", valid_21627305
  var valid_21627306 = formData.getOrDefault("StorageEncrypted")
  valid_21627306 = validateParameter(valid_21627306, JBool, required = false,
                                   default = nil)
  if valid_21627306 != nil:
    section.add "StorageEncrypted", valid_21627306
  var valid_21627307 = formData.getOrDefault("EngineVersion")
  valid_21627307 = validateParameter(valid_21627307, JString, required = false,
                                   default = nil)
  if valid_21627307 != nil:
    section.add "EngineVersion", valid_21627307
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627308: Call_PostCreateGlobalCluster_21627289;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21627308.validator(path, query, header, formData, body, _)
  let scheme = call_21627308.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627308.makeUrl(scheme.get, call_21627308.host, call_21627308.base,
                               call_21627308.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627308, uri, valid, _)

proc call*(call_21627309: Call_PostCreateGlobalCluster_21627289;
          SourceDBClusterIdentifier: string = "";
          GlobalClusterIdentifier: string = ""; Engine: string = "";
          DeletionProtection: bool = false; Action: string = "CreateGlobalCluster";
          DatabaseName: string = ""; StorageEncrypted: bool = false;
          EngineVersion: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postCreateGlobalCluster
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SourceDBClusterIdentifier: string
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   GlobalClusterIdentifier: string
  ##                          : The cluster identifier of the new global database cluster.
  ##   Engine: string
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   DeletionProtection: bool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Action: string (required)
  ##   DatabaseName: string
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   StorageEncrypted: bool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   EngineVersion: string
  ##                : The engine version of the Aurora global database.
  ##   Version: string (required)
  var query_21627310 = newJObject()
  var formData_21627311 = newJObject()
  add(formData_21627311, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_21627311, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_21627311, "Engine", newJString(Engine))
  add(formData_21627311, "DeletionProtection", newJBool(DeletionProtection))
  add(query_21627310, "Action", newJString(Action))
  add(formData_21627311, "DatabaseName", newJString(DatabaseName))
  add(formData_21627311, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_21627311, "EngineVersion", newJString(EngineVersion))
  add(query_21627310, "Version", newJString(Version))
  result = call_21627309.call(nil, query_21627310, nil, formData_21627311, nil)

var postCreateGlobalCluster* = Call_PostCreateGlobalCluster_21627289(
    name: "postCreateGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateGlobalCluster",
    validator: validate_PostCreateGlobalCluster_21627290, base: "/",
    makeUrl: url_PostCreateGlobalCluster_21627291,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateGlobalCluster_21627267 = ref object of OpenApiRestCall_21625435
proc url_GetCreateGlobalCluster_21627269(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateGlobalCluster_21627268(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: JBool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   DatabaseName: JString
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   DeletionProtection: JBool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Action: JString (required)
  ##   GlobalClusterIdentifier: JString
  ##                          : The cluster identifier of the new global database cluster.
  ##   EngineVersion: JString
  ##                : The engine version of the Aurora global database.
  ##   SourceDBClusterIdentifier: JString
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627270 = query.getOrDefault("Engine")
  valid_21627270 = validateParameter(valid_21627270, JString, required = false,
                                   default = nil)
  if valid_21627270 != nil:
    section.add "Engine", valid_21627270
  var valid_21627271 = query.getOrDefault("StorageEncrypted")
  valid_21627271 = validateParameter(valid_21627271, JBool, required = false,
                                   default = nil)
  if valid_21627271 != nil:
    section.add "StorageEncrypted", valid_21627271
  var valid_21627272 = query.getOrDefault("DatabaseName")
  valid_21627272 = validateParameter(valid_21627272, JString, required = false,
                                   default = nil)
  if valid_21627272 != nil:
    section.add "DatabaseName", valid_21627272
  var valid_21627273 = query.getOrDefault("DeletionProtection")
  valid_21627273 = validateParameter(valid_21627273, JBool, required = false,
                                   default = nil)
  if valid_21627273 != nil:
    section.add "DeletionProtection", valid_21627273
  var valid_21627274 = query.getOrDefault("Action")
  valid_21627274 = validateParameter(valid_21627274, JString, required = true,
                                   default = newJString("CreateGlobalCluster"))
  if valid_21627274 != nil:
    section.add "Action", valid_21627274
  var valid_21627275 = query.getOrDefault("GlobalClusterIdentifier")
  valid_21627275 = validateParameter(valid_21627275, JString, required = false,
                                   default = nil)
  if valid_21627275 != nil:
    section.add "GlobalClusterIdentifier", valid_21627275
  var valid_21627276 = query.getOrDefault("EngineVersion")
  valid_21627276 = validateParameter(valid_21627276, JString, required = false,
                                   default = nil)
  if valid_21627276 != nil:
    section.add "EngineVersion", valid_21627276
  var valid_21627277 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_21627277 = validateParameter(valid_21627277, JString, required = false,
                                   default = nil)
  if valid_21627277 != nil:
    section.add "SourceDBClusterIdentifier", valid_21627277
  var valid_21627278 = query.getOrDefault("Version")
  valid_21627278 = validateParameter(valid_21627278, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627278 != nil:
    section.add "Version", valid_21627278
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627279 = header.getOrDefault("X-Amz-Date")
  valid_21627279 = validateParameter(valid_21627279, JString, required = false,
                                   default = nil)
  if valid_21627279 != nil:
    section.add "X-Amz-Date", valid_21627279
  var valid_21627280 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627280 = validateParameter(valid_21627280, JString, required = false,
                                   default = nil)
  if valid_21627280 != nil:
    section.add "X-Amz-Security-Token", valid_21627280
  var valid_21627281 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627281 = validateParameter(valid_21627281, JString, required = false,
                                   default = nil)
  if valid_21627281 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627281
  var valid_21627282 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627282 = validateParameter(valid_21627282, JString, required = false,
                                   default = nil)
  if valid_21627282 != nil:
    section.add "X-Amz-Algorithm", valid_21627282
  var valid_21627283 = header.getOrDefault("X-Amz-Signature")
  valid_21627283 = validateParameter(valid_21627283, JString, required = false,
                                   default = nil)
  if valid_21627283 != nil:
    section.add "X-Amz-Signature", valid_21627283
  var valid_21627284 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627284 = validateParameter(valid_21627284, JString, required = false,
                                   default = nil)
  if valid_21627284 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627284
  var valid_21627285 = header.getOrDefault("X-Amz-Credential")
  valid_21627285 = validateParameter(valid_21627285, JString, required = false,
                                   default = nil)
  if valid_21627285 != nil:
    section.add "X-Amz-Credential", valid_21627285
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627286: Call_GetCreateGlobalCluster_21627267;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21627286.validator(path, query, header, formData, body, _)
  let scheme = call_21627286.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627286.makeUrl(scheme.get, call_21627286.host, call_21627286.base,
                               call_21627286.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627286, uri, valid, _)

proc call*(call_21627287: Call_GetCreateGlobalCluster_21627267;
          Engine: string = ""; StorageEncrypted: bool = false;
          DatabaseName: string = ""; DeletionProtection: bool = false;
          Action: string = "CreateGlobalCluster";
          GlobalClusterIdentifier: string = ""; EngineVersion: string = "";
          SourceDBClusterIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getCreateGlobalCluster
  ## <p> </p> <p> Creates an Aurora global database spread across multiple regions. The global database contains a single primary cluster with read-write capability, and a read-only secondary cluster that receives data from the primary cluster through high-speed replication performed by the Aurora storage subsystem. </p> <p> You can create a global database that is initially empty, and then add a primary cluster and a secondary cluster to it. Or you can specify an existing Aurora cluster during the create operation, and this cluster becomes the primary cluster of the global database. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Engine: string
  ##         : Provides the name of the database engine to be used for this DB cluster.
  ##   StorageEncrypted: bool
  ##                   :  The storage encryption setting for the new global database cluster. 
  ##   DatabaseName: string
  ##               :  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
  ##   DeletionProtection: bool
  ##                     :  The deletion protection setting for the new global database. The global database can't be deleted when deletion protection is enabled. 
  ##   Action: string (required)
  ##   GlobalClusterIdentifier: string
  ##                          : The cluster identifier of the new global database cluster.
  ##   EngineVersion: string
  ##                : The engine version of the Aurora global database.
  ##   SourceDBClusterIdentifier: string
  ##                            :  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
  ##   Version: string (required)
  var query_21627288 = newJObject()
  add(query_21627288, "Engine", newJString(Engine))
  add(query_21627288, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_21627288, "DatabaseName", newJString(DatabaseName))
  add(query_21627288, "DeletionProtection", newJBool(DeletionProtection))
  add(query_21627288, "Action", newJString(Action))
  add(query_21627288, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_21627288, "EngineVersion", newJString(EngineVersion))
  add(query_21627288, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_21627288, "Version", newJString(Version))
  result = call_21627287.call(nil, query_21627288, nil, nil, nil)

var getCreateGlobalCluster* = Call_GetCreateGlobalCluster_21627267(
    name: "getCreateGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateGlobalCluster",
    validator: validate_GetCreateGlobalCluster_21627268, base: "/",
    makeUrl: url_GetCreateGlobalCluster_21627269,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostCreateOptionGroup_21627332 = ref object of OpenApiRestCall_21625435
proc url_PostCreateOptionGroup_21627334(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostCreateOptionGroup_21627333(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627335 = query.getOrDefault("Action")
  valid_21627335 = validateParameter(valid_21627335, JString, required = true,
                                   default = newJString("CreateOptionGroup"))
  if valid_21627335 != nil:
    section.add "Action", valid_21627335
  var valid_21627336 = query.getOrDefault("Version")
  valid_21627336 = validateParameter(valid_21627336, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627336 != nil:
    section.add "Version", valid_21627336
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627337 = header.getOrDefault("X-Amz-Date")
  valid_21627337 = validateParameter(valid_21627337, JString, required = false,
                                   default = nil)
  if valid_21627337 != nil:
    section.add "X-Amz-Date", valid_21627337
  var valid_21627338 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627338 = validateParameter(valid_21627338, JString, required = false,
                                   default = nil)
  if valid_21627338 != nil:
    section.add "X-Amz-Security-Token", valid_21627338
  var valid_21627339 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627339 = validateParameter(valid_21627339, JString, required = false,
                                   default = nil)
  if valid_21627339 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627339
  var valid_21627340 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627340 = validateParameter(valid_21627340, JString, required = false,
                                   default = nil)
  if valid_21627340 != nil:
    section.add "X-Amz-Algorithm", valid_21627340
  var valid_21627341 = header.getOrDefault("X-Amz-Signature")
  valid_21627341 = validateParameter(valid_21627341, JString, required = false,
                                   default = nil)
  if valid_21627341 != nil:
    section.add "X-Amz-Signature", valid_21627341
  var valid_21627342 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627342 = validateParameter(valid_21627342, JString, required = false,
                                   default = nil)
  if valid_21627342 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627342
  var valid_21627343 = header.getOrDefault("X-Amz-Credential")
  valid_21627343 = validateParameter(valid_21627343, JString, required = false,
                                   default = nil)
  if valid_21627343 != nil:
    section.add "X-Amz-Credential", valid_21627343
  result.add "header", section
  ## parameters in `formData` object:
  ##   MajorEngineVersion: JString (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  ##   OptionGroupName: JString (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   EngineName: JString (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   OptionGroupDescription: JString (required)
  ##                         : The description of the option group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `MajorEngineVersion` field"
  var valid_21627344 = formData.getOrDefault("MajorEngineVersion")
  valid_21627344 = validateParameter(valid_21627344, JString, required = true,
                                   default = nil)
  if valid_21627344 != nil:
    section.add "MajorEngineVersion", valid_21627344
  var valid_21627345 = formData.getOrDefault("OptionGroupName")
  valid_21627345 = validateParameter(valid_21627345, JString, required = true,
                                   default = nil)
  if valid_21627345 != nil:
    section.add "OptionGroupName", valid_21627345
  var valid_21627346 = formData.getOrDefault("Tags")
  valid_21627346 = validateParameter(valid_21627346, JArray, required = false,
                                   default = nil)
  if valid_21627346 != nil:
    section.add "Tags", valid_21627346
  var valid_21627347 = formData.getOrDefault("EngineName")
  valid_21627347 = validateParameter(valid_21627347, JString, required = true,
                                   default = nil)
  if valid_21627347 != nil:
    section.add "EngineName", valid_21627347
  var valid_21627348 = formData.getOrDefault("OptionGroupDescription")
  valid_21627348 = validateParameter(valid_21627348, JString, required = true,
                                   default = nil)
  if valid_21627348 != nil:
    section.add "OptionGroupDescription", valid_21627348
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627349: Call_PostCreateOptionGroup_21627332;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  let valid = call_21627349.validator(path, query, header, formData, body, _)
  let scheme = call_21627349.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627349.makeUrl(scheme.get, call_21627349.host, call_21627349.base,
                               call_21627349.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627349, uri, valid, _)

proc call*(call_21627350: Call_PostCreateOptionGroup_21627332;
          MajorEngineVersion: string; OptionGroupName: string; EngineName: string;
          OptionGroupDescription: string; Tags: JsonNode = nil;
          Action: string = "CreateOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## postCreateOptionGroup
  ## Creates a new option group. You can create up to 20 option groups.
  ##   MajorEngineVersion: string (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  ##   OptionGroupName: string (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   EngineName: string (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   OptionGroupDescription: string (required)
  ##                         : The description of the option group.
  ##   Version: string (required)
  var query_21627351 = newJObject()
  var formData_21627352 = newJObject()
  add(formData_21627352, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(formData_21627352, "OptionGroupName", newJString(OptionGroupName))
  if Tags != nil:
    formData_21627352.add "Tags", Tags
  add(query_21627351, "Action", newJString(Action))
  add(formData_21627352, "EngineName", newJString(EngineName))
  add(formData_21627352, "OptionGroupDescription",
      newJString(OptionGroupDescription))
  add(query_21627351, "Version", newJString(Version))
  result = call_21627350.call(nil, query_21627351, nil, formData_21627352, nil)

var postCreateOptionGroup* = Call_PostCreateOptionGroup_21627332(
    name: "postCreateOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=CreateOptionGroup",
    validator: validate_PostCreateOptionGroup_21627333, base: "/",
    makeUrl: url_PostCreateOptionGroup_21627334,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetCreateOptionGroup_21627312 = ref object of OpenApiRestCall_21625435
proc url_GetCreateOptionGroup_21627314(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetCreateOptionGroup_21627313(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OptionGroupName: JString (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupDescription: JString (required)
  ##                         : The description of the option group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   EngineName: JString (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   MajorEngineVersion: JString (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OptionGroupName` field"
  var valid_21627315 = query.getOrDefault("OptionGroupName")
  valid_21627315 = validateParameter(valid_21627315, JString, required = true,
                                   default = nil)
  if valid_21627315 != nil:
    section.add "OptionGroupName", valid_21627315
  var valid_21627316 = query.getOrDefault("Tags")
  valid_21627316 = validateParameter(valid_21627316, JArray, required = false,
                                   default = nil)
  if valid_21627316 != nil:
    section.add "Tags", valid_21627316
  var valid_21627317 = query.getOrDefault("OptionGroupDescription")
  valid_21627317 = validateParameter(valid_21627317, JString, required = true,
                                   default = nil)
  if valid_21627317 != nil:
    section.add "OptionGroupDescription", valid_21627317
  var valid_21627318 = query.getOrDefault("Action")
  valid_21627318 = validateParameter(valid_21627318, JString, required = true,
                                   default = newJString("CreateOptionGroup"))
  if valid_21627318 != nil:
    section.add "Action", valid_21627318
  var valid_21627319 = query.getOrDefault("Version")
  valid_21627319 = validateParameter(valid_21627319, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627319 != nil:
    section.add "Version", valid_21627319
  var valid_21627320 = query.getOrDefault("EngineName")
  valid_21627320 = validateParameter(valid_21627320, JString, required = true,
                                   default = nil)
  if valid_21627320 != nil:
    section.add "EngineName", valid_21627320
  var valid_21627321 = query.getOrDefault("MajorEngineVersion")
  valid_21627321 = validateParameter(valid_21627321, JString, required = true,
                                   default = nil)
  if valid_21627321 != nil:
    section.add "MajorEngineVersion", valid_21627321
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627322 = header.getOrDefault("X-Amz-Date")
  valid_21627322 = validateParameter(valid_21627322, JString, required = false,
                                   default = nil)
  if valid_21627322 != nil:
    section.add "X-Amz-Date", valid_21627322
  var valid_21627323 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627323 = validateParameter(valid_21627323, JString, required = false,
                                   default = nil)
  if valid_21627323 != nil:
    section.add "X-Amz-Security-Token", valid_21627323
  var valid_21627324 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627324 = validateParameter(valid_21627324, JString, required = false,
                                   default = nil)
  if valid_21627324 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627324
  var valid_21627325 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627325 = validateParameter(valid_21627325, JString, required = false,
                                   default = nil)
  if valid_21627325 != nil:
    section.add "X-Amz-Algorithm", valid_21627325
  var valid_21627326 = header.getOrDefault("X-Amz-Signature")
  valid_21627326 = validateParameter(valid_21627326, JString, required = false,
                                   default = nil)
  if valid_21627326 != nil:
    section.add "X-Amz-Signature", valid_21627326
  var valid_21627327 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627327 = validateParameter(valid_21627327, JString, required = false,
                                   default = nil)
  if valid_21627327 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627327
  var valid_21627328 = header.getOrDefault("X-Amz-Credential")
  valid_21627328 = validateParameter(valid_21627328, JString, required = false,
                                   default = nil)
  if valid_21627328 != nil:
    section.add "X-Amz-Credential", valid_21627328
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627329: Call_GetCreateOptionGroup_21627312; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Creates a new option group. You can create up to 20 option groups.
  ## 
  let valid = call_21627329.validator(path, query, header, formData, body, _)
  let scheme = call_21627329.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627329.makeUrl(scheme.get, call_21627329.host, call_21627329.base,
                               call_21627329.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627329, uri, valid, _)

proc call*(call_21627330: Call_GetCreateOptionGroup_21627312;
          OptionGroupName: string; OptionGroupDescription: string;
          EngineName: string; MajorEngineVersion: string; Tags: JsonNode = nil;
          Action: string = "CreateOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## getCreateOptionGroup
  ## Creates a new option group. You can create up to 20 option groups.
  ##   OptionGroupName: string (required)
  ##                  : <p>Specifies the name of the option group to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>myoptiongroup</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   OptionGroupDescription: string (required)
  ##                         : The description of the option group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   EngineName: string (required)
  ##             : Specifies the name of the engine that this option group should be associated with.
  ##   MajorEngineVersion: string (required)
  ##                     : Specifies the major version of the engine that this option group should be associated with.
  var query_21627331 = newJObject()
  add(query_21627331, "OptionGroupName", newJString(OptionGroupName))
  if Tags != nil:
    query_21627331.add "Tags", Tags
  add(query_21627331, "OptionGroupDescription", newJString(OptionGroupDescription))
  add(query_21627331, "Action", newJString(Action))
  add(query_21627331, "Version", newJString(Version))
  add(query_21627331, "EngineName", newJString(EngineName))
  add(query_21627331, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_21627330.call(nil, query_21627331, nil, nil, nil)

var getCreateOptionGroup* = Call_GetCreateOptionGroup_21627312(
    name: "getCreateOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=CreateOptionGroup",
    validator: validate_GetCreateOptionGroup_21627313, base: "/",
    makeUrl: url_GetCreateOptionGroup_21627314,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteCustomAvailabilityZone_21627369 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteCustomAvailabilityZone_21627371(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteCustomAvailabilityZone_21627370(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627372 = query.getOrDefault("Action")
  valid_21627372 = validateParameter(valid_21627372, JString, required = true, default = newJString(
      "DeleteCustomAvailabilityZone"))
  if valid_21627372 != nil:
    section.add "Action", valid_21627372
  var valid_21627373 = query.getOrDefault("Version")
  valid_21627373 = validateParameter(valid_21627373, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627373 != nil:
    section.add "Version", valid_21627373
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627374 = header.getOrDefault("X-Amz-Date")
  valid_21627374 = validateParameter(valid_21627374, JString, required = false,
                                   default = nil)
  if valid_21627374 != nil:
    section.add "X-Amz-Date", valid_21627374
  var valid_21627375 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627375 = validateParameter(valid_21627375, JString, required = false,
                                   default = nil)
  if valid_21627375 != nil:
    section.add "X-Amz-Security-Token", valid_21627375
  var valid_21627376 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627376 = validateParameter(valid_21627376, JString, required = false,
                                   default = nil)
  if valid_21627376 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627376
  var valid_21627377 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627377 = validateParameter(valid_21627377, JString, required = false,
                                   default = nil)
  if valid_21627377 != nil:
    section.add "X-Amz-Algorithm", valid_21627377
  var valid_21627378 = header.getOrDefault("X-Amz-Signature")
  valid_21627378 = validateParameter(valid_21627378, JString, required = false,
                                   default = nil)
  if valid_21627378 != nil:
    section.add "X-Amz-Signature", valid_21627378
  var valid_21627379 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627379 = validateParameter(valid_21627379, JString, required = false,
                                   default = nil)
  if valid_21627379 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627379
  var valid_21627380 = header.getOrDefault("X-Amz-Credential")
  valid_21627380 = validateParameter(valid_21627380, JString, required = false,
                                   default = nil)
  if valid_21627380 != nil:
    section.add "X-Amz-Credential", valid_21627380
  result.add "header", section
  ## parameters in `formData` object:
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The custom AZ identifier.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `CustomAvailabilityZoneId` field"
  var valid_21627381 = formData.getOrDefault("CustomAvailabilityZoneId")
  valid_21627381 = validateParameter(valid_21627381, JString, required = true,
                                   default = nil)
  if valid_21627381 != nil:
    section.add "CustomAvailabilityZoneId", valid_21627381
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627382: Call_PostDeleteCustomAvailabilityZone_21627369;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_21627382.validator(path, query, header, formData, body, _)
  let scheme = call_21627382.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627382.makeUrl(scheme.get, call_21627382.host, call_21627382.base,
                               call_21627382.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627382, uri, valid, _)

proc call*(call_21627383: Call_PostDeleteCustomAvailabilityZone_21627369;
          CustomAvailabilityZoneId: string;
          Action: string = "DeleteCustomAvailabilityZone";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteCustomAvailabilityZone
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The custom AZ identifier.
  ##   Version: string (required)
  var query_21627384 = newJObject()
  var formData_21627385 = newJObject()
  add(query_21627384, "Action", newJString(Action))
  add(formData_21627385, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_21627384, "Version", newJString(Version))
  result = call_21627383.call(nil, query_21627384, nil, formData_21627385, nil)

var postDeleteCustomAvailabilityZone* = Call_PostDeleteCustomAvailabilityZone_21627369(
    name: "postDeleteCustomAvailabilityZone", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteCustomAvailabilityZone",
    validator: validate_PostDeleteCustomAvailabilityZone_21627370, base: "/",
    makeUrl: url_PostDeleteCustomAvailabilityZone_21627371,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteCustomAvailabilityZone_21627353 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteCustomAvailabilityZone_21627355(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteCustomAvailabilityZone_21627354(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The custom AZ identifier.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627356 = query.getOrDefault("Action")
  valid_21627356 = validateParameter(valid_21627356, JString, required = true, default = newJString(
      "DeleteCustomAvailabilityZone"))
  if valid_21627356 != nil:
    section.add "Action", valid_21627356
  var valid_21627357 = query.getOrDefault("CustomAvailabilityZoneId")
  valid_21627357 = validateParameter(valid_21627357, JString, required = true,
                                   default = nil)
  if valid_21627357 != nil:
    section.add "CustomAvailabilityZoneId", valid_21627357
  var valid_21627358 = query.getOrDefault("Version")
  valid_21627358 = validateParameter(valid_21627358, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627358 != nil:
    section.add "Version", valid_21627358
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627359 = header.getOrDefault("X-Amz-Date")
  valid_21627359 = validateParameter(valid_21627359, JString, required = false,
                                   default = nil)
  if valid_21627359 != nil:
    section.add "X-Amz-Date", valid_21627359
  var valid_21627360 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627360 = validateParameter(valid_21627360, JString, required = false,
                                   default = nil)
  if valid_21627360 != nil:
    section.add "X-Amz-Security-Token", valid_21627360
  var valid_21627361 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627361 = validateParameter(valid_21627361, JString, required = false,
                                   default = nil)
  if valid_21627361 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627361
  var valid_21627362 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627362 = validateParameter(valid_21627362, JString, required = false,
                                   default = nil)
  if valid_21627362 != nil:
    section.add "X-Amz-Algorithm", valid_21627362
  var valid_21627363 = header.getOrDefault("X-Amz-Signature")
  valid_21627363 = validateParameter(valid_21627363, JString, required = false,
                                   default = nil)
  if valid_21627363 != nil:
    section.add "X-Amz-Signature", valid_21627363
  var valid_21627364 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627364 = validateParameter(valid_21627364, JString, required = false,
                                   default = nil)
  if valid_21627364 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627364
  var valid_21627365 = header.getOrDefault("X-Amz-Credential")
  valid_21627365 = validateParameter(valid_21627365, JString, required = false,
                                   default = nil)
  if valid_21627365 != nil:
    section.add "X-Amz-Credential", valid_21627365
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627366: Call_GetDeleteCustomAvailabilityZone_21627353;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_21627366.validator(path, query, header, formData, body, _)
  let scheme = call_21627366.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627366.makeUrl(scheme.get, call_21627366.host, call_21627366.base,
                               call_21627366.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627366, uri, valid, _)

proc call*(call_21627367: Call_GetDeleteCustomAvailabilityZone_21627353;
          CustomAvailabilityZoneId: string;
          Action: string = "DeleteCustomAvailabilityZone";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteCustomAvailabilityZone
  ## <p>Deletes a custom Availability Zone (AZ).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The custom AZ identifier.
  ##   Version: string (required)
  var query_21627368 = newJObject()
  add(query_21627368, "Action", newJString(Action))
  add(query_21627368, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_21627368, "Version", newJString(Version))
  result = call_21627367.call(nil, query_21627368, nil, nil, nil)

var getDeleteCustomAvailabilityZone* = Call_GetDeleteCustomAvailabilityZone_21627353(
    name: "getDeleteCustomAvailabilityZone", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteCustomAvailabilityZone",
    validator: validate_GetDeleteCustomAvailabilityZone_21627354, base: "/",
    makeUrl: url_GetDeleteCustomAvailabilityZone_21627355,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBCluster_21627404 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteDBCluster_21627406(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBCluster_21627405(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627407 = query.getOrDefault("Action")
  valid_21627407 = validateParameter(valid_21627407, JString, required = true,
                                   default = newJString("DeleteDBCluster"))
  if valid_21627407 != nil:
    section.add "Action", valid_21627407
  var valid_21627408 = query.getOrDefault("Version")
  valid_21627408 = validateParameter(valid_21627408, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627408 != nil:
    section.add "Version", valid_21627408
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627409 = header.getOrDefault("X-Amz-Date")
  valid_21627409 = validateParameter(valid_21627409, JString, required = false,
                                   default = nil)
  if valid_21627409 != nil:
    section.add "X-Amz-Date", valid_21627409
  var valid_21627410 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627410 = validateParameter(valid_21627410, JString, required = false,
                                   default = nil)
  if valid_21627410 != nil:
    section.add "X-Amz-Security-Token", valid_21627410
  var valid_21627411 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627411 = validateParameter(valid_21627411, JString, required = false,
                                   default = nil)
  if valid_21627411 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627411
  var valid_21627412 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627412 = validateParameter(valid_21627412, JString, required = false,
                                   default = nil)
  if valid_21627412 != nil:
    section.add "X-Amz-Algorithm", valid_21627412
  var valid_21627413 = header.getOrDefault("X-Amz-Signature")
  valid_21627413 = validateParameter(valid_21627413, JString, required = false,
                                   default = nil)
  if valid_21627413 != nil:
    section.add "X-Amz-Signature", valid_21627413
  var valid_21627414 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627414 = validateParameter(valid_21627414, JString, required = false,
                                   default = nil)
  if valid_21627414 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627414
  var valid_21627415 = header.getOrDefault("X-Amz-Credential")
  valid_21627415 = validateParameter(valid_21627415, JString, required = false,
                                   default = nil)
  if valid_21627415 != nil:
    section.add "X-Amz-Credential", valid_21627415
  result.add "header", section
  ## parameters in `formData` object:
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  section = newJObject()
  var valid_21627416 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_21627416 = validateParameter(valid_21627416, JString, required = false,
                                   default = nil)
  if valid_21627416 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_21627416
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21627417 = formData.getOrDefault("DBClusterIdentifier")
  valid_21627417 = validateParameter(valid_21627417, JString, required = true,
                                   default = nil)
  if valid_21627417 != nil:
    section.add "DBClusterIdentifier", valid_21627417
  var valid_21627418 = formData.getOrDefault("SkipFinalSnapshot")
  valid_21627418 = validateParameter(valid_21627418, JBool, required = false,
                                   default = nil)
  if valid_21627418 != nil:
    section.add "SkipFinalSnapshot", valid_21627418
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627419: Call_PostDeleteDBCluster_21627404; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21627419.validator(path, query, header, formData, body, _)
  let scheme = call_21627419.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627419.makeUrl(scheme.get, call_21627419.host, call_21627419.base,
                               call_21627419.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627419, uri, valid, _)

proc call*(call_21627420: Call_PostDeleteDBCluster_21627404;
          DBClusterIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBCluster"; Version: string = "2014-10-31";
          SkipFinalSnapshot: bool = false): Recallable =
  ## postDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Version: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  var query_21627421 = newJObject()
  var formData_21627422 = newJObject()
  add(formData_21627422, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_21627421, "Action", newJString(Action))
  add(formData_21627422, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21627421, "Version", newJString(Version))
  add(formData_21627422, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  result = call_21627420.call(nil, query_21627421, nil, formData_21627422, nil)

var postDeleteDBCluster* = Call_PostDeleteDBCluster_21627404(
    name: "postDeleteDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBCluster",
    validator: validate_PostDeleteDBCluster_21627405, base: "/",
    makeUrl: url_PostDeleteDBCluster_21627406,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBCluster_21627386 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteDBCluster_21627388(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBCluster_21627387(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Action: JString (required)
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21627389 = query.getOrDefault("DBClusterIdentifier")
  valid_21627389 = validateParameter(valid_21627389, JString, required = true,
                                   default = nil)
  if valid_21627389 != nil:
    section.add "DBClusterIdentifier", valid_21627389
  var valid_21627390 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_21627390 = validateParameter(valid_21627390, JString, required = false,
                                   default = nil)
  if valid_21627390 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_21627390
  var valid_21627391 = query.getOrDefault("Action")
  valid_21627391 = validateParameter(valid_21627391, JString, required = true,
                                   default = newJString("DeleteDBCluster"))
  if valid_21627391 != nil:
    section.add "Action", valid_21627391
  var valid_21627392 = query.getOrDefault("SkipFinalSnapshot")
  valid_21627392 = validateParameter(valid_21627392, JBool, required = false,
                                   default = nil)
  if valid_21627392 != nil:
    section.add "SkipFinalSnapshot", valid_21627392
  var valid_21627393 = query.getOrDefault("Version")
  valid_21627393 = validateParameter(valid_21627393, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627393 != nil:
    section.add "Version", valid_21627393
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627394 = header.getOrDefault("X-Amz-Date")
  valid_21627394 = validateParameter(valid_21627394, JString, required = false,
                                   default = nil)
  if valid_21627394 != nil:
    section.add "X-Amz-Date", valid_21627394
  var valid_21627395 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627395 = validateParameter(valid_21627395, JString, required = false,
                                   default = nil)
  if valid_21627395 != nil:
    section.add "X-Amz-Security-Token", valid_21627395
  var valid_21627396 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627396 = validateParameter(valid_21627396, JString, required = false,
                                   default = nil)
  if valid_21627396 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627396
  var valid_21627397 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627397 = validateParameter(valid_21627397, JString, required = false,
                                   default = nil)
  if valid_21627397 != nil:
    section.add "X-Amz-Algorithm", valid_21627397
  var valid_21627398 = header.getOrDefault("X-Amz-Signature")
  valid_21627398 = validateParameter(valid_21627398, JString, required = false,
                                   default = nil)
  if valid_21627398 != nil:
    section.add "X-Amz-Signature", valid_21627398
  var valid_21627399 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627399 = validateParameter(valid_21627399, JString, required = false,
                                   default = nil)
  if valid_21627399 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627399
  var valid_21627400 = header.getOrDefault("X-Amz-Credential")
  valid_21627400 = validateParameter(valid_21627400, JString, required = false,
                                   default = nil)
  if valid_21627400 != nil:
    section.add "X-Amz-Credential", valid_21627400
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627401: Call_GetDeleteDBCluster_21627386; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21627401.validator(path, query, header, formData, body, _)
  let scheme = call_21627401.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627401.makeUrl(scheme.get, call_21627401.host, call_21627401.base,
                               call_21627401.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627401, uri, valid, _)

proc call*(call_21627402: Call_GetDeleteDBCluster_21627386;
          DBClusterIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBCluster"; SkipFinalSnapshot: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBCluster
  ## <p>The DeleteDBCluster action deletes a previously provisioned DB cluster. When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified DB cluster are not deleted.</p> <p/> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code> is disabled. </p> <note> <p> Specifying this parameter and also skipping the creation of a final DB cluster snapshot with the <code>SkipFinalShapshot</code> parameter results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Action: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted. If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created. By default, this parameter is disabled.</p> <note> <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p> </note>
  ##   Version: string (required)
  var query_21627403 = newJObject()
  add(query_21627403, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21627403, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_21627403, "Action", newJString(Action))
  add(query_21627403, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_21627403, "Version", newJString(Version))
  result = call_21627402.call(nil, query_21627403, nil, nil, nil)

var getDeleteDBCluster* = Call_GetDeleteDBCluster_21627386(
    name: "getDeleteDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBCluster", validator: validate_GetDeleteDBCluster_21627387,
    base: "/", makeUrl: url_GetDeleteDBCluster_21627388,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterEndpoint_21627439 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteDBClusterEndpoint_21627441(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterEndpoint_21627440(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627442 = query.getOrDefault("Action")
  valid_21627442 = validateParameter(valid_21627442, JString, required = true, default = newJString(
      "DeleteDBClusterEndpoint"))
  if valid_21627442 != nil:
    section.add "Action", valid_21627442
  var valid_21627443 = query.getOrDefault("Version")
  valid_21627443 = validateParameter(valid_21627443, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627443 != nil:
    section.add "Version", valid_21627443
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627444 = header.getOrDefault("X-Amz-Date")
  valid_21627444 = validateParameter(valid_21627444, JString, required = false,
                                   default = nil)
  if valid_21627444 != nil:
    section.add "X-Amz-Date", valid_21627444
  var valid_21627445 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627445 = validateParameter(valid_21627445, JString, required = false,
                                   default = nil)
  if valid_21627445 != nil:
    section.add "X-Amz-Security-Token", valid_21627445
  var valid_21627446 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627446 = validateParameter(valid_21627446, JString, required = false,
                                   default = nil)
  if valid_21627446 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627446
  var valid_21627447 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627447 = validateParameter(valid_21627447, JString, required = false,
                                   default = nil)
  if valid_21627447 != nil:
    section.add "X-Amz-Algorithm", valid_21627447
  var valid_21627448 = header.getOrDefault("X-Amz-Signature")
  valid_21627448 = validateParameter(valid_21627448, JString, required = false,
                                   default = nil)
  if valid_21627448 != nil:
    section.add "X-Amz-Signature", valid_21627448
  var valid_21627449 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627449 = validateParameter(valid_21627449, JString, required = false,
                                   default = nil)
  if valid_21627449 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627449
  var valid_21627450 = header.getOrDefault("X-Amz-Credential")
  valid_21627450 = validateParameter(valid_21627450, JString, required = false,
                                   default = nil)
  if valid_21627450 != nil:
    section.add "X-Amz-Credential", valid_21627450
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_21627451 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_21627451 = validateParameter(valid_21627451, JString, required = true,
                                   default = nil)
  if valid_21627451 != nil:
    section.add "DBClusterEndpointIdentifier", valid_21627451
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627452: Call_PostDeleteDBClusterEndpoint_21627439;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21627452.validator(path, query, header, formData, body, _)
  let scheme = call_21627452.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627452.makeUrl(scheme.get, call_21627452.host, call_21627452.base,
                               call_21627452.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627452, uri, valid, _)

proc call*(call_21627453: Call_PostDeleteDBClusterEndpoint_21627439;
          DBClusterEndpointIdentifier: string;
          Action: string = "DeleteDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterEndpoint
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Version: string (required)
  var query_21627454 = newJObject()
  var formData_21627455 = newJObject()
  add(query_21627454, "Action", newJString(Action))
  add(formData_21627455, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_21627454, "Version", newJString(Version))
  result = call_21627453.call(nil, query_21627454, nil, formData_21627455, nil)

var postDeleteDBClusterEndpoint* = Call_PostDeleteDBClusterEndpoint_21627439(
    name: "postDeleteDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterEndpoint",
    validator: validate_PostDeleteDBClusterEndpoint_21627440, base: "/",
    makeUrl: url_PostDeleteDBClusterEndpoint_21627441,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterEndpoint_21627423 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteDBClusterEndpoint_21627425(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterEndpoint_21627424(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627426 = query.getOrDefault("Action")
  valid_21627426 = validateParameter(valid_21627426, JString, required = true, default = newJString(
      "DeleteDBClusterEndpoint"))
  if valid_21627426 != nil:
    section.add "Action", valid_21627426
  var valid_21627427 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_21627427 = validateParameter(valid_21627427, JString, required = true,
                                   default = nil)
  if valid_21627427 != nil:
    section.add "DBClusterEndpointIdentifier", valid_21627427
  var valid_21627428 = query.getOrDefault("Version")
  valid_21627428 = validateParameter(valid_21627428, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627428 != nil:
    section.add "Version", valid_21627428
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627429 = header.getOrDefault("X-Amz-Date")
  valid_21627429 = validateParameter(valid_21627429, JString, required = false,
                                   default = nil)
  if valid_21627429 != nil:
    section.add "X-Amz-Date", valid_21627429
  var valid_21627430 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627430 = validateParameter(valid_21627430, JString, required = false,
                                   default = nil)
  if valid_21627430 != nil:
    section.add "X-Amz-Security-Token", valid_21627430
  var valid_21627431 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627431 = validateParameter(valid_21627431, JString, required = false,
                                   default = nil)
  if valid_21627431 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627431
  var valid_21627432 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627432 = validateParameter(valid_21627432, JString, required = false,
                                   default = nil)
  if valid_21627432 != nil:
    section.add "X-Amz-Algorithm", valid_21627432
  var valid_21627433 = header.getOrDefault("X-Amz-Signature")
  valid_21627433 = validateParameter(valid_21627433, JString, required = false,
                                   default = nil)
  if valid_21627433 != nil:
    section.add "X-Amz-Signature", valid_21627433
  var valid_21627434 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627434 = validateParameter(valid_21627434, JString, required = false,
                                   default = nil)
  if valid_21627434 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627434
  var valid_21627435 = header.getOrDefault("X-Amz-Credential")
  valid_21627435 = validateParameter(valid_21627435, JString, required = false,
                                   default = nil)
  if valid_21627435 != nil:
    section.add "X-Amz-Credential", valid_21627435
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627436: Call_GetDeleteDBClusterEndpoint_21627423;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21627436.validator(path, query, header, formData, body, _)
  let scheme = call_21627436.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627436.makeUrl(scheme.get, call_21627436.host, call_21627436.base,
                               call_21627436.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627436, uri, valid, _)

proc call*(call_21627437: Call_GetDeleteDBClusterEndpoint_21627423;
          DBClusterEndpointIdentifier: string;
          Action: string = "DeleteDBClusterEndpoint"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterEndpoint
  ## <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
  ##   Version: string (required)
  var query_21627438 = newJObject()
  add(query_21627438, "Action", newJString(Action))
  add(query_21627438, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_21627438, "Version", newJString(Version))
  result = call_21627437.call(nil, query_21627438, nil, nil, nil)

var getDeleteDBClusterEndpoint* = Call_GetDeleteDBClusterEndpoint_21627423(
    name: "getDeleteDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterEndpoint",
    validator: validate_GetDeleteDBClusterEndpoint_21627424, base: "/",
    makeUrl: url_GetDeleteDBClusterEndpoint_21627425,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterParameterGroup_21627472 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteDBClusterParameterGroup_21627474(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterParameterGroup_21627473(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627475 = query.getOrDefault("Action")
  valid_21627475 = validateParameter(valid_21627475, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_21627475 != nil:
    section.add "Action", valid_21627475
  var valid_21627476 = query.getOrDefault("Version")
  valid_21627476 = validateParameter(valid_21627476, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627476 != nil:
    section.add "Version", valid_21627476
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627477 = header.getOrDefault("X-Amz-Date")
  valid_21627477 = validateParameter(valid_21627477, JString, required = false,
                                   default = nil)
  if valid_21627477 != nil:
    section.add "X-Amz-Date", valid_21627477
  var valid_21627478 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627478 = validateParameter(valid_21627478, JString, required = false,
                                   default = nil)
  if valid_21627478 != nil:
    section.add "X-Amz-Security-Token", valid_21627478
  var valid_21627479 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627479 = validateParameter(valid_21627479, JString, required = false,
                                   default = nil)
  if valid_21627479 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627479
  var valid_21627480 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627480 = validateParameter(valid_21627480, JString, required = false,
                                   default = nil)
  if valid_21627480 != nil:
    section.add "X-Amz-Algorithm", valid_21627480
  var valid_21627481 = header.getOrDefault("X-Amz-Signature")
  valid_21627481 = validateParameter(valid_21627481, JString, required = false,
                                   default = nil)
  if valid_21627481 != nil:
    section.add "X-Amz-Signature", valid_21627481
  var valid_21627482 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627482 = validateParameter(valid_21627482, JString, required = false,
                                   default = nil)
  if valid_21627482 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627482
  var valid_21627483 = header.getOrDefault("X-Amz-Credential")
  valid_21627483 = validateParameter(valid_21627483, JString, required = false,
                                   default = nil)
  if valid_21627483 != nil:
    section.add "X-Amz-Credential", valid_21627483
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_21627484 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_21627484 = validateParameter(valid_21627484, JString, required = true,
                                   default = nil)
  if valid_21627484 != nil:
    section.add "DBClusterParameterGroupName", valid_21627484
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627485: Call_PostDeleteDBClusterParameterGroup_21627472;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21627485.validator(path, query, header, formData, body, _)
  let scheme = call_21627485.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627485.makeUrl(scheme.get, call_21627485.host, call_21627485.base,
                               call_21627485.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627485, uri, valid, _)

proc call*(call_21627486: Call_PostDeleteDBClusterParameterGroup_21627472;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterParameterGroup
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Version: string (required)
  var query_21627487 = newJObject()
  var formData_21627488 = newJObject()
  add(query_21627487, "Action", newJString(Action))
  add(formData_21627488, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_21627487, "Version", newJString(Version))
  result = call_21627486.call(nil, query_21627487, nil, formData_21627488, nil)

var postDeleteDBClusterParameterGroup* = Call_PostDeleteDBClusterParameterGroup_21627472(
    name: "postDeleteDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_PostDeleteDBClusterParameterGroup_21627473, base: "/",
    makeUrl: url_PostDeleteDBClusterParameterGroup_21627474,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterParameterGroup_21627456 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteDBClusterParameterGroup_21627458(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterParameterGroup_21627457(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_21627459 = query.getOrDefault("DBClusterParameterGroupName")
  valid_21627459 = validateParameter(valid_21627459, JString, required = true,
                                   default = nil)
  if valid_21627459 != nil:
    section.add "DBClusterParameterGroupName", valid_21627459
  var valid_21627460 = query.getOrDefault("Action")
  valid_21627460 = validateParameter(valid_21627460, JString, required = true, default = newJString(
      "DeleteDBClusterParameterGroup"))
  if valid_21627460 != nil:
    section.add "Action", valid_21627460
  var valid_21627461 = query.getOrDefault("Version")
  valid_21627461 = validateParameter(valid_21627461, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627461 != nil:
    section.add "Version", valid_21627461
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627462 = header.getOrDefault("X-Amz-Date")
  valid_21627462 = validateParameter(valid_21627462, JString, required = false,
                                   default = nil)
  if valid_21627462 != nil:
    section.add "X-Amz-Date", valid_21627462
  var valid_21627463 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627463 = validateParameter(valid_21627463, JString, required = false,
                                   default = nil)
  if valid_21627463 != nil:
    section.add "X-Amz-Security-Token", valid_21627463
  var valid_21627464 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627464 = validateParameter(valid_21627464, JString, required = false,
                                   default = nil)
  if valid_21627464 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627464
  var valid_21627465 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627465 = validateParameter(valid_21627465, JString, required = false,
                                   default = nil)
  if valid_21627465 != nil:
    section.add "X-Amz-Algorithm", valid_21627465
  var valid_21627466 = header.getOrDefault("X-Amz-Signature")
  valid_21627466 = validateParameter(valid_21627466, JString, required = false,
                                   default = nil)
  if valid_21627466 != nil:
    section.add "X-Amz-Signature", valid_21627466
  var valid_21627467 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627467 = validateParameter(valid_21627467, JString, required = false,
                                   default = nil)
  if valid_21627467 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627467
  var valid_21627468 = header.getOrDefault("X-Amz-Credential")
  valid_21627468 = validateParameter(valid_21627468, JString, required = false,
                                   default = nil)
  if valid_21627468 != nil:
    section.add "X-Amz-Credential", valid_21627468
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627469: Call_GetDeleteDBClusterParameterGroup_21627456;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21627469.validator(path, query, header, formData, body, _)
  let scheme = call_21627469.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627469.makeUrl(scheme.get, call_21627469.host, call_21627469.base,
                               call_21627469.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627469, uri, valid, _)

proc call*(call_21627470: Call_GetDeleteDBClusterParameterGroup_21627456;
          DBClusterParameterGroupName: string;
          Action: string = "DeleteDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterParameterGroup
  ## <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of the DB cluster parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB cluster parameter group.</p> </li> <li> <p>You can't delete a default DB cluster parameter group.</p> </li> <li> <p>Can't be associated with any DB clusters.</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627471 = newJObject()
  add(query_21627471, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_21627471, "Action", newJString(Action))
  add(query_21627471, "Version", newJString(Version))
  result = call_21627470.call(nil, query_21627471, nil, nil, nil)

var getDeleteDBClusterParameterGroup* = Call_GetDeleteDBClusterParameterGroup_21627456(
    name: "getDeleteDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterParameterGroup",
    validator: validate_GetDeleteDBClusterParameterGroup_21627457, base: "/",
    makeUrl: url_GetDeleteDBClusterParameterGroup_21627458,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBClusterSnapshot_21627505 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteDBClusterSnapshot_21627507(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBClusterSnapshot_21627506(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627508 = query.getOrDefault("Action")
  valid_21627508 = validateParameter(valid_21627508, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_21627508 != nil:
    section.add "Action", valid_21627508
  var valid_21627509 = query.getOrDefault("Version")
  valid_21627509 = validateParameter(valid_21627509, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627509 != nil:
    section.add "Version", valid_21627509
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627510 = header.getOrDefault("X-Amz-Date")
  valid_21627510 = validateParameter(valid_21627510, JString, required = false,
                                   default = nil)
  if valid_21627510 != nil:
    section.add "X-Amz-Date", valid_21627510
  var valid_21627511 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627511 = validateParameter(valid_21627511, JString, required = false,
                                   default = nil)
  if valid_21627511 != nil:
    section.add "X-Amz-Security-Token", valid_21627511
  var valid_21627512 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627512 = validateParameter(valid_21627512, JString, required = false,
                                   default = nil)
  if valid_21627512 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627512
  var valid_21627513 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627513 = validateParameter(valid_21627513, JString, required = false,
                                   default = nil)
  if valid_21627513 != nil:
    section.add "X-Amz-Algorithm", valid_21627513
  var valid_21627514 = header.getOrDefault("X-Amz-Signature")
  valid_21627514 = validateParameter(valid_21627514, JString, required = false,
                                   default = nil)
  if valid_21627514 != nil:
    section.add "X-Amz-Signature", valid_21627514
  var valid_21627515 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627515 = validateParameter(valid_21627515, JString, required = false,
                                   default = nil)
  if valid_21627515 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627515
  var valid_21627516 = header.getOrDefault("X-Amz-Credential")
  valid_21627516 = validateParameter(valid_21627516, JString, required = false,
                                   default = nil)
  if valid_21627516 != nil:
    section.add "X-Amz-Credential", valid_21627516
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_21627517 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_21627517 = validateParameter(valid_21627517, JString, required = true,
                                   default = nil)
  if valid_21627517 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_21627517
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627518: Call_PostDeleteDBClusterSnapshot_21627505;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21627518.validator(path, query, header, formData, body, _)
  let scheme = call_21627518.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627518.makeUrl(scheme.get, call_21627518.host, call_21627518.base,
                               call_21627518.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627518, uri, valid, _)

proc call*(call_21627519: Call_PostDeleteDBClusterSnapshot_21627505;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627520 = newJObject()
  var formData_21627521 = newJObject()
  add(formData_21627521, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_21627520, "Action", newJString(Action))
  add(query_21627520, "Version", newJString(Version))
  result = call_21627519.call(nil, query_21627520, nil, formData_21627521, nil)

var postDeleteDBClusterSnapshot* = Call_PostDeleteDBClusterSnapshot_21627505(
    name: "postDeleteDBClusterSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_PostDeleteDBClusterSnapshot_21627506, base: "/",
    makeUrl: url_PostDeleteDBClusterSnapshot_21627507,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBClusterSnapshot_21627489 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteDBClusterSnapshot_21627491(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBClusterSnapshot_21627490(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_21627492 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_21627492 = validateParameter(valid_21627492, JString, required = true,
                                   default = nil)
  if valid_21627492 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_21627492
  var valid_21627493 = query.getOrDefault("Action")
  valid_21627493 = validateParameter(valid_21627493, JString, required = true, default = newJString(
      "DeleteDBClusterSnapshot"))
  if valid_21627493 != nil:
    section.add "Action", valid_21627493
  var valid_21627494 = query.getOrDefault("Version")
  valid_21627494 = validateParameter(valid_21627494, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627494 != nil:
    section.add "Version", valid_21627494
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627495 = header.getOrDefault("X-Amz-Date")
  valid_21627495 = validateParameter(valid_21627495, JString, required = false,
                                   default = nil)
  if valid_21627495 != nil:
    section.add "X-Amz-Date", valid_21627495
  var valid_21627496 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627496 = validateParameter(valid_21627496, JString, required = false,
                                   default = nil)
  if valid_21627496 != nil:
    section.add "X-Amz-Security-Token", valid_21627496
  var valid_21627497 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627497 = validateParameter(valid_21627497, JString, required = false,
                                   default = nil)
  if valid_21627497 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627497
  var valid_21627498 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627498 = validateParameter(valid_21627498, JString, required = false,
                                   default = nil)
  if valid_21627498 != nil:
    section.add "X-Amz-Algorithm", valid_21627498
  var valid_21627499 = header.getOrDefault("X-Amz-Signature")
  valid_21627499 = validateParameter(valid_21627499, JString, required = false,
                                   default = nil)
  if valid_21627499 != nil:
    section.add "X-Amz-Signature", valid_21627499
  var valid_21627500 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627500 = validateParameter(valid_21627500, JString, required = false,
                                   default = nil)
  if valid_21627500 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627500
  var valid_21627501 = header.getOrDefault("X-Amz-Credential")
  valid_21627501 = validateParameter(valid_21627501, JString, required = false,
                                   default = nil)
  if valid_21627501 != nil:
    section.add "X-Amz-Credential", valid_21627501
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627502: Call_GetDeleteDBClusterSnapshot_21627489;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21627502.validator(path, query, header, formData, body, _)
  let scheme = call_21627502.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627502.makeUrl(scheme.get, call_21627502.host, call_21627502.base,
                               call_21627502.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627502, uri, valid, _)

proc call*(call_21627503: Call_GetDeleteDBClusterSnapshot_21627489;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DeleteDBClusterSnapshot"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBClusterSnapshot
  ## <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : <p>The identifier of the DB cluster snapshot to delete.</p> <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627504 = newJObject()
  add(query_21627504, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_21627504, "Action", newJString(Action))
  add(query_21627504, "Version", newJString(Version))
  result = call_21627503.call(nil, query_21627504, nil, nil, nil)

var getDeleteDBClusterSnapshot* = Call_GetDeleteDBClusterSnapshot_21627489(
    name: "getDeleteDBClusterSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBClusterSnapshot",
    validator: validate_GetDeleteDBClusterSnapshot_21627490, base: "/",
    makeUrl: url_GetDeleteDBClusterSnapshot_21627491,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstance_21627541 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteDBInstance_21627543(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBInstance_21627542(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627544 = query.getOrDefault("Action")
  valid_21627544 = validateParameter(valid_21627544, JString, required = true,
                                   default = newJString("DeleteDBInstance"))
  if valid_21627544 != nil:
    section.add "Action", valid_21627544
  var valid_21627545 = query.getOrDefault("Version")
  valid_21627545 = validateParameter(valid_21627545, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627545 != nil:
    section.add "Version", valid_21627545
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627546 = header.getOrDefault("X-Amz-Date")
  valid_21627546 = validateParameter(valid_21627546, JString, required = false,
                                   default = nil)
  if valid_21627546 != nil:
    section.add "X-Amz-Date", valid_21627546
  var valid_21627547 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627547 = validateParameter(valid_21627547, JString, required = false,
                                   default = nil)
  if valid_21627547 != nil:
    section.add "X-Amz-Security-Token", valid_21627547
  var valid_21627548 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627548 = validateParameter(valid_21627548, JString, required = false,
                                   default = nil)
  if valid_21627548 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627548
  var valid_21627549 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627549 = validateParameter(valid_21627549, JString, required = false,
                                   default = nil)
  if valid_21627549 != nil:
    section.add "X-Amz-Algorithm", valid_21627549
  var valid_21627550 = header.getOrDefault("X-Amz-Signature")
  valid_21627550 = validateParameter(valid_21627550, JString, required = false,
                                   default = nil)
  if valid_21627550 != nil:
    section.add "X-Amz-Signature", valid_21627550
  var valid_21627551 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627551 = validateParameter(valid_21627551, JString, required = false,
                                   default = nil)
  if valid_21627551 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627551
  var valid_21627552 = header.getOrDefault("X-Amz-Credential")
  valid_21627552 = validateParameter(valid_21627552, JString, required = false,
                                   default = nil)
  if valid_21627552 != nil:
    section.add "X-Amz-Credential", valid_21627552
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   DeleteAutomatedBackups: JBool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>When a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_21627553 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21627553 = validateParameter(valid_21627553, JString, required = true,
                                   default = nil)
  if valid_21627553 != nil:
    section.add "DBInstanceIdentifier", valid_21627553
  var valid_21627554 = formData.getOrDefault("FinalDBSnapshotIdentifier")
  valid_21627554 = validateParameter(valid_21627554, JString, required = false,
                                   default = nil)
  if valid_21627554 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_21627554
  var valid_21627555 = formData.getOrDefault("DeleteAutomatedBackups")
  valid_21627555 = validateParameter(valid_21627555, JBool, required = false,
                                   default = nil)
  if valid_21627555 != nil:
    section.add "DeleteAutomatedBackups", valid_21627555
  var valid_21627556 = formData.getOrDefault("SkipFinalSnapshot")
  valid_21627556 = validateParameter(valid_21627556, JBool, required = false,
                                   default = nil)
  if valid_21627556 != nil:
    section.add "SkipFinalSnapshot", valid_21627556
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627557: Call_PostDeleteDBInstance_21627541; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  let valid = call_21627557.validator(path, query, header, formData, body, _)
  let scheme = call_21627557.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627557.makeUrl(scheme.get, call_21627557.host, call_21627557.base,
                               call_21627557.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627557, uri, valid, _)

proc call*(call_21627558: Call_PostDeleteDBInstance_21627541;
          DBInstanceIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBInstance"; DeleteAutomatedBackups: bool = false;
          Version: string = "2014-10-31"; SkipFinalSnapshot: bool = false): Recallable =
  ## postDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Action: string (required)
  ##   DeleteAutomatedBackups: bool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   Version: string (required)
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>When a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  var query_21627559 = newJObject()
  var formData_21627560 = newJObject()
  add(formData_21627560, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_21627560, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_21627559, "Action", newJString(Action))
  add(formData_21627560, "DeleteAutomatedBackups",
      newJBool(DeleteAutomatedBackups))
  add(query_21627559, "Version", newJString(Version))
  add(formData_21627560, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  result = call_21627558.call(nil, query_21627559, nil, formData_21627560, nil)

var postDeleteDBInstance* = Call_PostDeleteDBInstance_21627541(
    name: "postDeleteDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_PostDeleteDBInstance_21627542, base: "/",
    makeUrl: url_PostDeleteDBInstance_21627543,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstance_21627522 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteDBInstance_21627524(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBInstance_21627523(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FinalDBSnapshotIdentifier: JString
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Action: JString (required)
  ##   DeleteAutomatedBackups: JBool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   SkipFinalSnapshot: JBool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>When a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  section = newJObject()
  var valid_21627525 = query.getOrDefault("FinalDBSnapshotIdentifier")
  valid_21627525 = validateParameter(valid_21627525, JString, required = false,
                                   default = nil)
  if valid_21627525 != nil:
    section.add "FinalDBSnapshotIdentifier", valid_21627525
  var valid_21627526 = query.getOrDefault("Action")
  valid_21627526 = validateParameter(valid_21627526, JString, required = true,
                                   default = newJString("DeleteDBInstance"))
  if valid_21627526 != nil:
    section.add "Action", valid_21627526
  var valid_21627527 = query.getOrDefault("DeleteAutomatedBackups")
  valid_21627527 = validateParameter(valid_21627527, JBool, required = false,
                                   default = nil)
  if valid_21627527 != nil:
    section.add "DeleteAutomatedBackups", valid_21627527
  var valid_21627528 = query.getOrDefault("SkipFinalSnapshot")
  valid_21627528 = validateParameter(valid_21627528, JBool, required = false,
                                   default = nil)
  if valid_21627528 != nil:
    section.add "SkipFinalSnapshot", valid_21627528
  var valid_21627529 = query.getOrDefault("Version")
  valid_21627529 = validateParameter(valid_21627529, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627529 != nil:
    section.add "Version", valid_21627529
  var valid_21627530 = query.getOrDefault("DBInstanceIdentifier")
  valid_21627530 = validateParameter(valid_21627530, JString, required = true,
                                   default = nil)
  if valid_21627530 != nil:
    section.add "DBInstanceIdentifier", valid_21627530
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627531 = header.getOrDefault("X-Amz-Date")
  valid_21627531 = validateParameter(valid_21627531, JString, required = false,
                                   default = nil)
  if valid_21627531 != nil:
    section.add "X-Amz-Date", valid_21627531
  var valid_21627532 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627532 = validateParameter(valid_21627532, JString, required = false,
                                   default = nil)
  if valid_21627532 != nil:
    section.add "X-Amz-Security-Token", valid_21627532
  var valid_21627533 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627533 = validateParameter(valid_21627533, JString, required = false,
                                   default = nil)
  if valid_21627533 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627533
  var valid_21627534 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627534 = validateParameter(valid_21627534, JString, required = false,
                                   default = nil)
  if valid_21627534 != nil:
    section.add "X-Amz-Algorithm", valid_21627534
  var valid_21627535 = header.getOrDefault("X-Amz-Signature")
  valid_21627535 = validateParameter(valid_21627535, JString, required = false,
                                   default = nil)
  if valid_21627535 != nil:
    section.add "X-Amz-Signature", valid_21627535
  var valid_21627536 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627536 = validateParameter(valid_21627536, JString, required = false,
                                   default = nil)
  if valid_21627536 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627536
  var valid_21627537 = header.getOrDefault("X-Amz-Credential")
  valid_21627537 = validateParameter(valid_21627537, JString, required = false,
                                   default = nil)
  if valid_21627537 != nil:
    section.add "X-Amz-Credential", valid_21627537
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627538: Call_GetDeleteDBInstance_21627522; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ## 
  let valid = call_21627538.validator(path, query, header, formData, body, _)
  let scheme = call_21627538.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627538.makeUrl(scheme.get, call_21627538.host, call_21627538.base,
                               call_21627538.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627538, uri, valid, _)

proc call*(call_21627539: Call_GetDeleteDBInstance_21627522;
          DBInstanceIdentifier: string; FinalDBSnapshotIdentifier: string = "";
          Action: string = "DeleteDBInstance"; DeleteAutomatedBackups: bool = false;
          SkipFinalSnapshot: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBInstance
  ## <p>The DeleteDBInstance action deletes a previously provisioned DB instance. When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered. Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p> <p> If you request a final DB snapshot the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code> is used to monitor the status of this operation. The action can't be canceled or reverted once submitted. </p> <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>, or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p> <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following conditions are true:</p> <ul> <li> <p>The DB cluster is a Read Replica of another Amazon Aurora DB cluster.</p> </li> <li> <p>The DB instance is the only instance in the DB cluster.</p> </li> </ul> <p>To delete a DB instance in this case, first call the <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so it's no longer a Read Replica. After the promotion completes, then call the <code>DeleteDBInstance</code> API action to delete the final instance in the DB cluster.</p>
  ##   FinalDBSnapshotIdentifier: string
  ##                            : <p> The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled. </p> <note> <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> <li> <p>Can't be specified when deleting a Read Replica.</p> </li> </ul>
  ##   Action: string (required)
  ##   DeleteAutomatedBackups: bool
  ##                         : A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
  ##   SkipFinalSnapshot: bool
  ##                    : <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted. If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p> <p>When a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p> <p>Specify skip when deleting a Read Replica.</p> <note> <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p> </note>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing DB instance.</p> </li> </ul>
  var query_21627540 = newJObject()
  add(query_21627540, "FinalDBSnapshotIdentifier",
      newJString(FinalDBSnapshotIdentifier))
  add(query_21627540, "Action", newJString(Action))
  add(query_21627540, "DeleteAutomatedBackups", newJBool(DeleteAutomatedBackups))
  add(query_21627540, "SkipFinalSnapshot", newJBool(SkipFinalSnapshot))
  add(query_21627540, "Version", newJString(Version))
  add(query_21627540, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_21627539.call(nil, query_21627540, nil, nil, nil)

var getDeleteDBInstance* = Call_GetDeleteDBInstance_21627522(
    name: "getDeleteDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstance",
    validator: validate_GetDeleteDBInstance_21627523, base: "/",
    makeUrl: url_GetDeleteDBInstance_21627524,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBInstanceAutomatedBackup_21627577 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteDBInstanceAutomatedBackup_21627579(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBInstanceAutomatedBackup_21627578(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627580 = query.getOrDefault("Action")
  valid_21627580 = validateParameter(valid_21627580, JString, required = true, default = newJString(
      "DeleteDBInstanceAutomatedBackup"))
  if valid_21627580 != nil:
    section.add "Action", valid_21627580
  var valid_21627581 = query.getOrDefault("Version")
  valid_21627581 = validateParameter(valid_21627581, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627581 != nil:
    section.add "Version", valid_21627581
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627582 = header.getOrDefault("X-Amz-Date")
  valid_21627582 = validateParameter(valid_21627582, JString, required = false,
                                   default = nil)
  if valid_21627582 != nil:
    section.add "X-Amz-Date", valid_21627582
  var valid_21627583 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627583 = validateParameter(valid_21627583, JString, required = false,
                                   default = nil)
  if valid_21627583 != nil:
    section.add "X-Amz-Security-Token", valid_21627583
  var valid_21627584 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627584 = validateParameter(valid_21627584, JString, required = false,
                                   default = nil)
  if valid_21627584 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627584
  var valid_21627585 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627585 = validateParameter(valid_21627585, JString, required = false,
                                   default = nil)
  if valid_21627585 != nil:
    section.add "X-Amz-Algorithm", valid_21627585
  var valid_21627586 = header.getOrDefault("X-Amz-Signature")
  valid_21627586 = validateParameter(valid_21627586, JString, required = false,
                                   default = nil)
  if valid_21627586 != nil:
    section.add "X-Amz-Signature", valid_21627586
  var valid_21627587 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627587 = validateParameter(valid_21627587, JString, required = false,
                                   default = nil)
  if valid_21627587 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627587
  var valid_21627588 = header.getOrDefault("X-Amz-Credential")
  valid_21627588 = validateParameter(valid_21627588, JString, required = false,
                                   default = nil)
  if valid_21627588 != nil:
    section.add "X-Amz-Credential", valid_21627588
  result.add "header", section
  ## parameters in `formData` object:
  ##   DbiResourceId: JString (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DbiResourceId` field"
  var valid_21627589 = formData.getOrDefault("DbiResourceId")
  valid_21627589 = validateParameter(valid_21627589, JString, required = true,
                                   default = nil)
  if valid_21627589 != nil:
    section.add "DbiResourceId", valid_21627589
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627590: Call_PostDeleteDBInstanceAutomatedBackup_21627577;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  let valid = call_21627590.validator(path, query, header, formData, body, _)
  let scheme = call_21627590.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627590.makeUrl(scheme.get, call_21627590.host, call_21627590.base,
                               call_21627590.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627590, uri, valid, _)

proc call*(call_21627591: Call_PostDeleteDBInstanceAutomatedBackup_21627577;
          DbiResourceId: string;
          Action: string = "DeleteDBInstanceAutomatedBackup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBInstanceAutomatedBackup
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ##   DbiResourceId: string (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627592 = newJObject()
  var formData_21627593 = newJObject()
  add(formData_21627593, "DbiResourceId", newJString(DbiResourceId))
  add(query_21627592, "Action", newJString(Action))
  add(query_21627592, "Version", newJString(Version))
  result = call_21627591.call(nil, query_21627592, nil, formData_21627593, nil)

var postDeleteDBInstanceAutomatedBackup* = Call_PostDeleteDBInstanceAutomatedBackup_21627577(
    name: "postDeleteDBInstanceAutomatedBackup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstanceAutomatedBackup",
    validator: validate_PostDeleteDBInstanceAutomatedBackup_21627578, base: "/",
    makeUrl: url_PostDeleteDBInstanceAutomatedBackup_21627579,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBInstanceAutomatedBackup_21627561 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteDBInstanceAutomatedBackup_21627563(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBInstanceAutomatedBackup_21627562(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbiResourceId: JString (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `DbiResourceId` field"
  var valid_21627564 = query.getOrDefault("DbiResourceId")
  valid_21627564 = validateParameter(valid_21627564, JString, required = true,
                                   default = nil)
  if valid_21627564 != nil:
    section.add "DbiResourceId", valid_21627564
  var valid_21627565 = query.getOrDefault("Action")
  valid_21627565 = validateParameter(valid_21627565, JString, required = true, default = newJString(
      "DeleteDBInstanceAutomatedBackup"))
  if valid_21627565 != nil:
    section.add "Action", valid_21627565
  var valid_21627566 = query.getOrDefault("Version")
  valid_21627566 = validateParameter(valid_21627566, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627566 != nil:
    section.add "Version", valid_21627566
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627567 = header.getOrDefault("X-Amz-Date")
  valid_21627567 = validateParameter(valid_21627567, JString, required = false,
                                   default = nil)
  if valid_21627567 != nil:
    section.add "X-Amz-Date", valid_21627567
  var valid_21627568 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627568 = validateParameter(valid_21627568, JString, required = false,
                                   default = nil)
  if valid_21627568 != nil:
    section.add "X-Amz-Security-Token", valid_21627568
  var valid_21627569 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627569 = validateParameter(valid_21627569, JString, required = false,
                                   default = nil)
  if valid_21627569 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627569
  var valid_21627570 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627570 = validateParameter(valid_21627570, JString, required = false,
                                   default = nil)
  if valid_21627570 != nil:
    section.add "X-Amz-Algorithm", valid_21627570
  var valid_21627571 = header.getOrDefault("X-Amz-Signature")
  valid_21627571 = validateParameter(valid_21627571, JString, required = false,
                                   default = nil)
  if valid_21627571 != nil:
    section.add "X-Amz-Signature", valid_21627571
  var valid_21627572 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627572 = validateParameter(valid_21627572, JString, required = false,
                                   default = nil)
  if valid_21627572 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627572
  var valid_21627573 = header.getOrDefault("X-Amz-Credential")
  valid_21627573 = validateParameter(valid_21627573, JString, required = false,
                                   default = nil)
  if valid_21627573 != nil:
    section.add "X-Amz-Credential", valid_21627573
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627574: Call_GetDeleteDBInstanceAutomatedBackup_21627561;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ## 
  let valid = call_21627574.validator(path, query, header, formData, body, _)
  let scheme = call_21627574.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627574.makeUrl(scheme.get, call_21627574.host, call_21627574.base,
                               call_21627574.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627574, uri, valid, _)

proc call*(call_21627575: Call_GetDeleteDBInstanceAutomatedBackup_21627561;
          DbiResourceId: string;
          Action: string = "DeleteDBInstanceAutomatedBackup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBInstanceAutomatedBackup
  ## Deletes automated backups based on the source instance's <code>DbiResourceId</code> value or the restorable instance's resource ID.
  ##   DbiResourceId: string (required)
  ##                : The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627576 = newJObject()
  add(query_21627576, "DbiResourceId", newJString(DbiResourceId))
  add(query_21627576, "Action", newJString(Action))
  add(query_21627576, "Version", newJString(Version))
  result = call_21627575.call(nil, query_21627576, nil, nil, nil)

var getDeleteDBInstanceAutomatedBackup* = Call_GetDeleteDBInstanceAutomatedBackup_21627561(
    name: "getDeleteDBInstanceAutomatedBackup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBInstanceAutomatedBackup",
    validator: validate_GetDeleteDBInstanceAutomatedBackup_21627562, base: "/",
    makeUrl: url_GetDeleteDBInstanceAutomatedBackup_21627563,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBParameterGroup_21627610 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteDBParameterGroup_21627612(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBParameterGroup_21627611(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627613 = query.getOrDefault("Action")
  valid_21627613 = validateParameter(valid_21627613, JString, required = true, default = newJString(
      "DeleteDBParameterGroup"))
  if valid_21627613 != nil:
    section.add "Action", valid_21627613
  var valid_21627614 = query.getOrDefault("Version")
  valid_21627614 = validateParameter(valid_21627614, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627614 != nil:
    section.add "Version", valid_21627614
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627615 = header.getOrDefault("X-Amz-Date")
  valid_21627615 = validateParameter(valid_21627615, JString, required = false,
                                   default = nil)
  if valid_21627615 != nil:
    section.add "X-Amz-Date", valid_21627615
  var valid_21627616 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627616 = validateParameter(valid_21627616, JString, required = false,
                                   default = nil)
  if valid_21627616 != nil:
    section.add "X-Amz-Security-Token", valid_21627616
  var valid_21627617 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627617 = validateParameter(valid_21627617, JString, required = false,
                                   default = nil)
  if valid_21627617 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627617
  var valid_21627618 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627618 = validateParameter(valid_21627618, JString, required = false,
                                   default = nil)
  if valid_21627618 != nil:
    section.add "X-Amz-Algorithm", valid_21627618
  var valid_21627619 = header.getOrDefault("X-Amz-Signature")
  valid_21627619 = validateParameter(valid_21627619, JString, required = false,
                                   default = nil)
  if valid_21627619 != nil:
    section.add "X-Amz-Signature", valid_21627619
  var valid_21627620 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627620 = validateParameter(valid_21627620, JString, required = false,
                                   default = nil)
  if valid_21627620 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627620
  var valid_21627621 = header.getOrDefault("X-Amz-Credential")
  valid_21627621 = validateParameter(valid_21627621, JString, required = false,
                                   default = nil)
  if valid_21627621 != nil:
    section.add "X-Amz-Credential", valid_21627621
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_21627622 = formData.getOrDefault("DBParameterGroupName")
  valid_21627622 = validateParameter(valid_21627622, JString, required = true,
                                   default = nil)
  if valid_21627622 != nil:
    section.add "DBParameterGroupName", valid_21627622
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627623: Call_PostDeleteDBParameterGroup_21627610;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_21627623.validator(path, query, header, formData, body, _)
  let scheme = call_21627623.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627623.makeUrl(scheme.get, call_21627623.host, call_21627623.base,
                               call_21627623.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627623, uri, valid, _)

proc call*(call_21627624: Call_PostDeleteDBParameterGroup_21627610;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBParameterGroup
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627625 = newJObject()
  var formData_21627626 = newJObject()
  add(formData_21627626, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_21627625, "Action", newJString(Action))
  add(query_21627625, "Version", newJString(Version))
  result = call_21627624.call(nil, query_21627625, nil, formData_21627626, nil)

var postDeleteDBParameterGroup* = Call_PostDeleteDBParameterGroup_21627610(
    name: "postDeleteDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_PostDeleteDBParameterGroup_21627611, base: "/",
    makeUrl: url_PostDeleteDBParameterGroup_21627612,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBParameterGroup_21627594 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteDBParameterGroup_21627596(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBParameterGroup_21627595(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_21627597 = query.getOrDefault("DBParameterGroupName")
  valid_21627597 = validateParameter(valid_21627597, JString, required = true,
                                   default = nil)
  if valid_21627597 != nil:
    section.add "DBParameterGroupName", valid_21627597
  var valid_21627598 = query.getOrDefault("Action")
  valid_21627598 = validateParameter(valid_21627598, JString, required = true, default = newJString(
      "DeleteDBParameterGroup"))
  if valid_21627598 != nil:
    section.add "Action", valid_21627598
  var valid_21627599 = query.getOrDefault("Version")
  valid_21627599 = validateParameter(valid_21627599, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627599 != nil:
    section.add "Version", valid_21627599
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627600 = header.getOrDefault("X-Amz-Date")
  valid_21627600 = validateParameter(valid_21627600, JString, required = false,
                                   default = nil)
  if valid_21627600 != nil:
    section.add "X-Amz-Date", valid_21627600
  var valid_21627601 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627601 = validateParameter(valid_21627601, JString, required = false,
                                   default = nil)
  if valid_21627601 != nil:
    section.add "X-Amz-Security-Token", valid_21627601
  var valid_21627602 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627602 = validateParameter(valid_21627602, JString, required = false,
                                   default = nil)
  if valid_21627602 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627602
  var valid_21627603 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627603 = validateParameter(valid_21627603, JString, required = false,
                                   default = nil)
  if valid_21627603 != nil:
    section.add "X-Amz-Algorithm", valid_21627603
  var valid_21627604 = header.getOrDefault("X-Amz-Signature")
  valid_21627604 = validateParameter(valid_21627604, JString, required = false,
                                   default = nil)
  if valid_21627604 != nil:
    section.add "X-Amz-Signature", valid_21627604
  var valid_21627605 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627605 = validateParameter(valid_21627605, JString, required = false,
                                   default = nil)
  if valid_21627605 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627605
  var valid_21627606 = header.getOrDefault("X-Amz-Credential")
  valid_21627606 = validateParameter(valid_21627606, JString, required = false,
                                   default = nil)
  if valid_21627606 != nil:
    section.add "X-Amz-Credential", valid_21627606
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627607: Call_GetDeleteDBParameterGroup_21627594;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ## 
  let valid = call_21627607.validator(path, query, header, formData, body, _)
  let scheme = call_21627607.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627607.makeUrl(scheme.get, call_21627607.host, call_21627607.base,
                               call_21627607.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627607, uri, valid, _)

proc call*(call_21627608: Call_GetDeleteDBParameterGroup_21627594;
          DBParameterGroupName: string; Action: string = "DeleteDBParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBParameterGroup
  ## Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must be the name of an existing DB parameter group</p> </li> <li> <p>You can't delete a default DB parameter group</p> </li> <li> <p>Can't be associated with any DB instances</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627609 = newJObject()
  add(query_21627609, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_21627609, "Action", newJString(Action))
  add(query_21627609, "Version", newJString(Version))
  result = call_21627608.call(nil, query_21627609, nil, nil, nil)

var getDeleteDBParameterGroup* = Call_GetDeleteDBParameterGroup_21627594(
    name: "getDeleteDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBParameterGroup",
    validator: validate_GetDeleteDBParameterGroup_21627595, base: "/",
    makeUrl: url_GetDeleteDBParameterGroup_21627596,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBProxy_21627643 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteDBProxy_21627645(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBProxy_21627644(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627646 = query.getOrDefault("Action")
  valid_21627646 = validateParameter(valid_21627646, JString, required = true,
                                   default = newJString("DeleteDBProxy"))
  if valid_21627646 != nil:
    section.add "Action", valid_21627646
  var valid_21627647 = query.getOrDefault("Version")
  valid_21627647 = validateParameter(valid_21627647, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627647 != nil:
    section.add "Version", valid_21627647
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627648 = header.getOrDefault("X-Amz-Date")
  valid_21627648 = validateParameter(valid_21627648, JString, required = false,
                                   default = nil)
  if valid_21627648 != nil:
    section.add "X-Amz-Date", valid_21627648
  var valid_21627649 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627649 = validateParameter(valid_21627649, JString, required = false,
                                   default = nil)
  if valid_21627649 != nil:
    section.add "X-Amz-Security-Token", valid_21627649
  var valid_21627650 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627650 = validateParameter(valid_21627650, JString, required = false,
                                   default = nil)
  if valid_21627650 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627650
  var valid_21627651 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627651 = validateParameter(valid_21627651, JString, required = false,
                                   default = nil)
  if valid_21627651 != nil:
    section.add "X-Amz-Algorithm", valid_21627651
  var valid_21627652 = header.getOrDefault("X-Amz-Signature")
  valid_21627652 = validateParameter(valid_21627652, JString, required = false,
                                   default = nil)
  if valid_21627652 != nil:
    section.add "X-Amz-Signature", valid_21627652
  var valid_21627653 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627653 = validateParameter(valid_21627653, JString, required = false,
                                   default = nil)
  if valid_21627653 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627653
  var valid_21627654 = header.getOrDefault("X-Amz-Credential")
  valid_21627654 = validateParameter(valid_21627654, JString, required = false,
                                   default = nil)
  if valid_21627654 != nil:
    section.add "X-Amz-Credential", valid_21627654
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBProxyName: JString (required)
  ##              : The name of the DB proxy to delete.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_21627655 = formData.getOrDefault("DBProxyName")
  valid_21627655 = validateParameter(valid_21627655, JString, required = true,
                                   default = nil)
  if valid_21627655 != nil:
    section.add "DBProxyName", valid_21627655
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627656: Call_PostDeleteDBProxy_21627643; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  let valid = call_21627656.validator(path, query, header, formData, body, _)
  let scheme = call_21627656.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627656.makeUrl(scheme.get, call_21627656.host, call_21627656.base,
                               call_21627656.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627656, uri, valid, _)

proc call*(call_21627657: Call_PostDeleteDBProxy_21627643; DBProxyName: string;
          Action: string = "DeleteDBProxy"; Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ##   Action: string (required)
  ##   DBProxyName: string (required)
  ##              : The name of the DB proxy to delete.
  ##   Version: string (required)
  var query_21627658 = newJObject()
  var formData_21627659 = newJObject()
  add(query_21627658, "Action", newJString(Action))
  add(formData_21627659, "DBProxyName", newJString(DBProxyName))
  add(query_21627658, "Version", newJString(Version))
  result = call_21627657.call(nil, query_21627658, nil, formData_21627659, nil)

var postDeleteDBProxy* = Call_PostDeleteDBProxy_21627643(name: "postDeleteDBProxy",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBProxy", validator: validate_PostDeleteDBProxy_21627644,
    base: "/", makeUrl: url_PostDeleteDBProxy_21627645,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBProxy_21627627 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteDBProxy_21627629(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBProxy_21627628(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The name of the DB proxy to delete.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627630 = query.getOrDefault("Action")
  valid_21627630 = validateParameter(valid_21627630, JString, required = true,
                                   default = newJString("DeleteDBProxy"))
  if valid_21627630 != nil:
    section.add "Action", valid_21627630
  var valid_21627631 = query.getOrDefault("DBProxyName")
  valid_21627631 = validateParameter(valid_21627631, JString, required = true,
                                   default = nil)
  if valid_21627631 != nil:
    section.add "DBProxyName", valid_21627631
  var valid_21627632 = query.getOrDefault("Version")
  valid_21627632 = validateParameter(valid_21627632, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627632 != nil:
    section.add "Version", valid_21627632
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627633 = header.getOrDefault("X-Amz-Date")
  valid_21627633 = validateParameter(valid_21627633, JString, required = false,
                                   default = nil)
  if valid_21627633 != nil:
    section.add "X-Amz-Date", valid_21627633
  var valid_21627634 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627634 = validateParameter(valid_21627634, JString, required = false,
                                   default = nil)
  if valid_21627634 != nil:
    section.add "X-Amz-Security-Token", valid_21627634
  var valid_21627635 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627635 = validateParameter(valid_21627635, JString, required = false,
                                   default = nil)
  if valid_21627635 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627635
  var valid_21627636 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627636 = validateParameter(valid_21627636, JString, required = false,
                                   default = nil)
  if valid_21627636 != nil:
    section.add "X-Amz-Algorithm", valid_21627636
  var valid_21627637 = header.getOrDefault("X-Amz-Signature")
  valid_21627637 = validateParameter(valid_21627637, JString, required = false,
                                   default = nil)
  if valid_21627637 != nil:
    section.add "X-Amz-Signature", valid_21627637
  var valid_21627638 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627638 = validateParameter(valid_21627638, JString, required = false,
                                   default = nil)
  if valid_21627638 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627638
  var valid_21627639 = header.getOrDefault("X-Amz-Credential")
  valid_21627639 = validateParameter(valid_21627639, JString, required = false,
                                   default = nil)
  if valid_21627639 != nil:
    section.add "X-Amz-Credential", valid_21627639
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627640: Call_GetDeleteDBProxy_21627627; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ## 
  let valid = call_21627640.validator(path, query, header, formData, body, _)
  let scheme = call_21627640.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627640.makeUrl(scheme.get, call_21627640.host, call_21627640.base,
                               call_21627640.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627640, uri, valid, _)

proc call*(call_21627641: Call_GetDeleteDBProxy_21627627; DBProxyName: string;
          Action: string = "DeleteDBProxy"; Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Deletes an existing proxy.</p>
  ##   Action: string (required)
  ##   DBProxyName: string (required)
  ##              : The name of the DB proxy to delete.
  ##   Version: string (required)
  var query_21627642 = newJObject()
  add(query_21627642, "Action", newJString(Action))
  add(query_21627642, "DBProxyName", newJString(DBProxyName))
  add(query_21627642, "Version", newJString(Version))
  result = call_21627641.call(nil, query_21627642, nil, nil, nil)

var getDeleteDBProxy* = Call_GetDeleteDBProxy_21627627(name: "getDeleteDBProxy",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DeleteDBProxy", validator: validate_GetDeleteDBProxy_21627628,
    base: "/", makeUrl: url_GetDeleteDBProxy_21627629,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSecurityGroup_21627676 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteDBSecurityGroup_21627678(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSecurityGroup_21627677(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627679 = query.getOrDefault("Action")
  valid_21627679 = validateParameter(valid_21627679, JString, required = true, default = newJString(
      "DeleteDBSecurityGroup"))
  if valid_21627679 != nil:
    section.add "Action", valid_21627679
  var valid_21627680 = query.getOrDefault("Version")
  valid_21627680 = validateParameter(valid_21627680, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627680 != nil:
    section.add "Version", valid_21627680
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627681 = header.getOrDefault("X-Amz-Date")
  valid_21627681 = validateParameter(valid_21627681, JString, required = false,
                                   default = nil)
  if valid_21627681 != nil:
    section.add "X-Amz-Date", valid_21627681
  var valid_21627682 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627682 = validateParameter(valid_21627682, JString, required = false,
                                   default = nil)
  if valid_21627682 != nil:
    section.add "X-Amz-Security-Token", valid_21627682
  var valid_21627683 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627683 = validateParameter(valid_21627683, JString, required = false,
                                   default = nil)
  if valid_21627683 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627683
  var valid_21627684 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627684 = validateParameter(valid_21627684, JString, required = false,
                                   default = nil)
  if valid_21627684 != nil:
    section.add "X-Amz-Algorithm", valid_21627684
  var valid_21627685 = header.getOrDefault("X-Amz-Signature")
  valid_21627685 = validateParameter(valid_21627685, JString, required = false,
                                   default = nil)
  if valid_21627685 != nil:
    section.add "X-Amz-Signature", valid_21627685
  var valid_21627686 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627686 = validateParameter(valid_21627686, JString, required = false,
                                   default = nil)
  if valid_21627686 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627686
  var valid_21627687 = header.getOrDefault("X-Amz-Credential")
  valid_21627687 = validateParameter(valid_21627687, JString, required = false,
                                   default = nil)
  if valid_21627687 != nil:
    section.add "X-Amz-Credential", valid_21627687
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_21627688 = formData.getOrDefault("DBSecurityGroupName")
  valid_21627688 = validateParameter(valid_21627688, JString, required = true,
                                   default = nil)
  if valid_21627688 != nil:
    section.add "DBSecurityGroupName", valid_21627688
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627689: Call_PostDeleteDBSecurityGroup_21627676;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_21627689.validator(path, query, header, formData, body, _)
  let scheme = call_21627689.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627689.makeUrl(scheme.get, call_21627689.host, call_21627689.base,
                               call_21627689.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627689, uri, valid, _)

proc call*(call_21627690: Call_PostDeleteDBSecurityGroup_21627676;
          DBSecurityGroupName: string; Action: string = "DeleteDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSecurityGroup
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627691 = newJObject()
  var formData_21627692 = newJObject()
  add(formData_21627692, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_21627691, "Action", newJString(Action))
  add(query_21627691, "Version", newJString(Version))
  result = call_21627690.call(nil, query_21627691, nil, formData_21627692, nil)

var postDeleteDBSecurityGroup* = Call_PostDeleteDBSecurityGroup_21627676(
    name: "postDeleteDBSecurityGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSecurityGroup",
    validator: validate_PostDeleteDBSecurityGroup_21627677, base: "/",
    makeUrl: url_PostDeleteDBSecurityGroup_21627678,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSecurityGroup_21627660 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteDBSecurityGroup_21627662(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSecurityGroup_21627661(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_21627663 = query.getOrDefault("DBSecurityGroupName")
  valid_21627663 = validateParameter(valid_21627663, JString, required = true,
                                   default = nil)
  if valid_21627663 != nil:
    section.add "DBSecurityGroupName", valid_21627663
  var valid_21627664 = query.getOrDefault("Action")
  valid_21627664 = validateParameter(valid_21627664, JString, required = true, default = newJString(
      "DeleteDBSecurityGroup"))
  if valid_21627664 != nil:
    section.add "Action", valid_21627664
  var valid_21627665 = query.getOrDefault("Version")
  valid_21627665 = validateParameter(valid_21627665, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627665 != nil:
    section.add "Version", valid_21627665
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627666 = header.getOrDefault("X-Amz-Date")
  valid_21627666 = validateParameter(valid_21627666, JString, required = false,
                                   default = nil)
  if valid_21627666 != nil:
    section.add "X-Amz-Date", valid_21627666
  var valid_21627667 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627667 = validateParameter(valid_21627667, JString, required = false,
                                   default = nil)
  if valid_21627667 != nil:
    section.add "X-Amz-Security-Token", valid_21627667
  var valid_21627668 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627668 = validateParameter(valid_21627668, JString, required = false,
                                   default = nil)
  if valid_21627668 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627668
  var valid_21627669 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627669 = validateParameter(valid_21627669, JString, required = false,
                                   default = nil)
  if valid_21627669 != nil:
    section.add "X-Amz-Algorithm", valid_21627669
  var valid_21627670 = header.getOrDefault("X-Amz-Signature")
  valid_21627670 = validateParameter(valid_21627670, JString, required = false,
                                   default = nil)
  if valid_21627670 != nil:
    section.add "X-Amz-Signature", valid_21627670
  var valid_21627671 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627671 = validateParameter(valid_21627671, JString, required = false,
                                   default = nil)
  if valid_21627671 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627671
  var valid_21627672 = header.getOrDefault("X-Amz-Credential")
  valid_21627672 = validateParameter(valid_21627672, JString, required = false,
                                   default = nil)
  if valid_21627672 != nil:
    section.add "X-Amz-Credential", valid_21627672
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627673: Call_GetDeleteDBSecurityGroup_21627660;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_21627673.validator(path, query, header, formData, body, _)
  let scheme = call_21627673.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627673.makeUrl(scheme.get, call_21627673.host, call_21627673.base,
                               call_21627673.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627673, uri, valid, _)

proc call*(call_21627674: Call_GetDeleteDBSecurityGroup_21627660;
          DBSecurityGroupName: string; Action: string = "DeleteDBSecurityGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSecurityGroup
  ## <p>Deletes a DB security group.</p> <note> <p>The specified DB security group must not be associated with any DB instances.</p> </note>
  ##   DBSecurityGroupName: string (required)
  ##                      : <p>The name of the DB security group to delete.</p> <note> <p>You can't delete the default DB security group.</p> </note> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> <li> <p>Must not be "Default"</p> </li> </ul>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627675 = newJObject()
  add(query_21627675, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_21627675, "Action", newJString(Action))
  add(query_21627675, "Version", newJString(Version))
  result = call_21627674.call(nil, query_21627675, nil, nil, nil)

var getDeleteDBSecurityGroup* = Call_GetDeleteDBSecurityGroup_21627660(
    name: "getDeleteDBSecurityGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSecurityGroup",
    validator: validate_GetDeleteDBSecurityGroup_21627661, base: "/",
    makeUrl: url_GetDeleteDBSecurityGroup_21627662,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSnapshot_21627709 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteDBSnapshot_21627711(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSnapshot_21627710(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627712 = query.getOrDefault("Action")
  valid_21627712 = validateParameter(valid_21627712, JString, required = true,
                                   default = newJString("DeleteDBSnapshot"))
  if valid_21627712 != nil:
    section.add "Action", valid_21627712
  var valid_21627713 = query.getOrDefault("Version")
  valid_21627713 = validateParameter(valid_21627713, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627713 != nil:
    section.add "Version", valid_21627713
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627714 = header.getOrDefault("X-Amz-Date")
  valid_21627714 = validateParameter(valid_21627714, JString, required = false,
                                   default = nil)
  if valid_21627714 != nil:
    section.add "X-Amz-Date", valid_21627714
  var valid_21627715 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627715 = validateParameter(valid_21627715, JString, required = false,
                                   default = nil)
  if valid_21627715 != nil:
    section.add "X-Amz-Security-Token", valid_21627715
  var valid_21627716 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627716 = validateParameter(valid_21627716, JString, required = false,
                                   default = nil)
  if valid_21627716 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627716
  var valid_21627717 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627717 = validateParameter(valid_21627717, JString, required = false,
                                   default = nil)
  if valid_21627717 != nil:
    section.add "X-Amz-Algorithm", valid_21627717
  var valid_21627718 = header.getOrDefault("X-Amz-Signature")
  valid_21627718 = validateParameter(valid_21627718, JString, required = false,
                                   default = nil)
  if valid_21627718 != nil:
    section.add "X-Amz-Signature", valid_21627718
  var valid_21627719 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627719 = validateParameter(valid_21627719, JString, required = false,
                                   default = nil)
  if valid_21627719 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627719
  var valid_21627720 = header.getOrDefault("X-Amz-Credential")
  valid_21627720 = validateParameter(valid_21627720, JString, required = false,
                                   default = nil)
  if valid_21627720 != nil:
    section.add "X-Amz-Credential", valid_21627720
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_21627721 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_21627721 = validateParameter(valid_21627721, JString, required = true,
                                   default = nil)
  if valid_21627721 != nil:
    section.add "DBSnapshotIdentifier", valid_21627721
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627722: Call_PostDeleteDBSnapshot_21627709; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_21627722.validator(path, query, header, formData, body, _)
  let scheme = call_21627722.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627722.makeUrl(scheme.get, call_21627722.host, call_21627722.base,
                               call_21627722.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627722, uri, valid, _)

proc call*(call_21627723: Call_PostDeleteDBSnapshot_21627709;
          DBSnapshotIdentifier: string; Action: string = "DeleteDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSnapshot
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627724 = newJObject()
  var formData_21627725 = newJObject()
  add(formData_21627725, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_21627724, "Action", newJString(Action))
  add(query_21627724, "Version", newJString(Version))
  result = call_21627723.call(nil, query_21627724, nil, formData_21627725, nil)

var postDeleteDBSnapshot* = Call_PostDeleteDBSnapshot_21627709(
    name: "postDeleteDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSnapshot",
    validator: validate_PostDeleteDBSnapshot_21627710, base: "/",
    makeUrl: url_PostDeleteDBSnapshot_21627711,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSnapshot_21627693 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteDBSnapshot_21627695(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSnapshot_21627694(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  section = newJObject()
  var valid_21627696 = query.getOrDefault("Action")
  valid_21627696 = validateParameter(valid_21627696, JString, required = true,
                                   default = newJString("DeleteDBSnapshot"))
  if valid_21627696 != nil:
    section.add "Action", valid_21627696
  var valid_21627697 = query.getOrDefault("Version")
  valid_21627697 = validateParameter(valid_21627697, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627697 != nil:
    section.add "Version", valid_21627697
  var valid_21627698 = query.getOrDefault("DBSnapshotIdentifier")
  valid_21627698 = validateParameter(valid_21627698, JString, required = true,
                                   default = nil)
  if valid_21627698 != nil:
    section.add "DBSnapshotIdentifier", valid_21627698
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627699 = header.getOrDefault("X-Amz-Date")
  valid_21627699 = validateParameter(valid_21627699, JString, required = false,
                                   default = nil)
  if valid_21627699 != nil:
    section.add "X-Amz-Date", valid_21627699
  var valid_21627700 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627700 = validateParameter(valid_21627700, JString, required = false,
                                   default = nil)
  if valid_21627700 != nil:
    section.add "X-Amz-Security-Token", valid_21627700
  var valid_21627701 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627701 = validateParameter(valid_21627701, JString, required = false,
                                   default = nil)
  if valid_21627701 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627701
  var valid_21627702 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627702 = validateParameter(valid_21627702, JString, required = false,
                                   default = nil)
  if valid_21627702 != nil:
    section.add "X-Amz-Algorithm", valid_21627702
  var valid_21627703 = header.getOrDefault("X-Amz-Signature")
  valid_21627703 = validateParameter(valid_21627703, JString, required = false,
                                   default = nil)
  if valid_21627703 != nil:
    section.add "X-Amz-Signature", valid_21627703
  var valid_21627704 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627704 = validateParameter(valid_21627704, JString, required = false,
                                   default = nil)
  if valid_21627704 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627704
  var valid_21627705 = header.getOrDefault("X-Amz-Credential")
  valid_21627705 = validateParameter(valid_21627705, JString, required = false,
                                   default = nil)
  if valid_21627705 != nil:
    section.add "X-Amz-Credential", valid_21627705
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627706: Call_GetDeleteDBSnapshot_21627693; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ## 
  let valid = call_21627706.validator(path, query, header, formData, body, _)
  let scheme = call_21627706.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627706.makeUrl(scheme.get, call_21627706.host, call_21627706.base,
                               call_21627706.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627706, uri, valid, _)

proc call*(call_21627707: Call_GetDeleteDBSnapshot_21627693;
          DBSnapshotIdentifier: string; Action: string = "DeleteDBSnapshot";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSnapshot
  ## <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The DB snapshot identifier.</p> <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
  var query_21627708 = newJObject()
  add(query_21627708, "Action", newJString(Action))
  add(query_21627708, "Version", newJString(Version))
  add(query_21627708, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_21627707.call(nil, query_21627708, nil, nil, nil)

var getDeleteDBSnapshot* = Call_GetDeleteDBSnapshot_21627693(
    name: "getDeleteDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSnapshot",
    validator: validate_GetDeleteDBSnapshot_21627694, base: "/",
    makeUrl: url_GetDeleteDBSnapshot_21627695,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteDBSubnetGroup_21627742 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteDBSubnetGroup_21627744(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteDBSubnetGroup_21627743(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627745 = query.getOrDefault("Action")
  valid_21627745 = validateParameter(valid_21627745, JString, required = true,
                                   default = newJString("DeleteDBSubnetGroup"))
  if valid_21627745 != nil:
    section.add "Action", valid_21627745
  var valid_21627746 = query.getOrDefault("Version")
  valid_21627746 = validateParameter(valid_21627746, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627746 != nil:
    section.add "Version", valid_21627746
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627747 = header.getOrDefault("X-Amz-Date")
  valid_21627747 = validateParameter(valid_21627747, JString, required = false,
                                   default = nil)
  if valid_21627747 != nil:
    section.add "X-Amz-Date", valid_21627747
  var valid_21627748 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627748 = validateParameter(valid_21627748, JString, required = false,
                                   default = nil)
  if valid_21627748 != nil:
    section.add "X-Amz-Security-Token", valid_21627748
  var valid_21627749 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627749 = validateParameter(valid_21627749, JString, required = false,
                                   default = nil)
  if valid_21627749 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627749
  var valid_21627750 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627750 = validateParameter(valid_21627750, JString, required = false,
                                   default = nil)
  if valid_21627750 != nil:
    section.add "X-Amz-Algorithm", valid_21627750
  var valid_21627751 = header.getOrDefault("X-Amz-Signature")
  valid_21627751 = validateParameter(valid_21627751, JString, required = false,
                                   default = nil)
  if valid_21627751 != nil:
    section.add "X-Amz-Signature", valid_21627751
  var valid_21627752 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627752 = validateParameter(valid_21627752, JString, required = false,
                                   default = nil)
  if valid_21627752 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627752
  var valid_21627753 = header.getOrDefault("X-Amz-Credential")
  valid_21627753 = validateParameter(valid_21627753, JString, required = false,
                                   default = nil)
  if valid_21627753 != nil:
    section.add "X-Amz-Credential", valid_21627753
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_21627754 = formData.getOrDefault("DBSubnetGroupName")
  valid_21627754 = validateParameter(valid_21627754, JString, required = true,
                                   default = nil)
  if valid_21627754 != nil:
    section.add "DBSubnetGroupName", valid_21627754
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627755: Call_PostDeleteDBSubnetGroup_21627742;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_21627755.validator(path, query, header, formData, body, _)
  let scheme = call_21627755.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627755.makeUrl(scheme.get, call_21627755.host, call_21627755.base,
                               call_21627755.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627755, uri, valid, _)

proc call*(call_21627756: Call_PostDeleteDBSubnetGroup_21627742;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627757 = newJObject()
  var formData_21627758 = newJObject()
  add(formData_21627758, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21627757, "Action", newJString(Action))
  add(query_21627757, "Version", newJString(Version))
  result = call_21627756.call(nil, query_21627757, nil, formData_21627758, nil)

var postDeleteDBSubnetGroup* = Call_PostDeleteDBSubnetGroup_21627742(
    name: "postDeleteDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_PostDeleteDBSubnetGroup_21627743, base: "/",
    makeUrl: url_PostDeleteDBSubnetGroup_21627744,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteDBSubnetGroup_21627726 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteDBSubnetGroup_21627728(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteDBSubnetGroup_21627727(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627729 = query.getOrDefault("Action")
  valid_21627729 = validateParameter(valid_21627729, JString, required = true,
                                   default = newJString("DeleteDBSubnetGroup"))
  if valid_21627729 != nil:
    section.add "Action", valid_21627729
  var valid_21627730 = query.getOrDefault("DBSubnetGroupName")
  valid_21627730 = validateParameter(valid_21627730, JString, required = true,
                                   default = nil)
  if valid_21627730 != nil:
    section.add "DBSubnetGroupName", valid_21627730
  var valid_21627731 = query.getOrDefault("Version")
  valid_21627731 = validateParameter(valid_21627731, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627731 != nil:
    section.add "Version", valid_21627731
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627732 = header.getOrDefault("X-Amz-Date")
  valid_21627732 = validateParameter(valid_21627732, JString, required = false,
                                   default = nil)
  if valid_21627732 != nil:
    section.add "X-Amz-Date", valid_21627732
  var valid_21627733 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627733 = validateParameter(valid_21627733, JString, required = false,
                                   default = nil)
  if valid_21627733 != nil:
    section.add "X-Amz-Security-Token", valid_21627733
  var valid_21627734 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627734 = validateParameter(valid_21627734, JString, required = false,
                                   default = nil)
  if valid_21627734 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627734
  var valid_21627735 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627735 = validateParameter(valid_21627735, JString, required = false,
                                   default = nil)
  if valid_21627735 != nil:
    section.add "X-Amz-Algorithm", valid_21627735
  var valid_21627736 = header.getOrDefault("X-Amz-Signature")
  valid_21627736 = validateParameter(valid_21627736, JString, required = false,
                                   default = nil)
  if valid_21627736 != nil:
    section.add "X-Amz-Signature", valid_21627736
  var valid_21627737 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627737 = validateParameter(valid_21627737, JString, required = false,
                                   default = nil)
  if valid_21627737 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627737
  var valid_21627738 = header.getOrDefault("X-Amz-Credential")
  valid_21627738 = validateParameter(valid_21627738, JString, required = false,
                                   default = nil)
  if valid_21627738 != nil:
    section.add "X-Amz-Credential", valid_21627738
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627739: Call_GetDeleteDBSubnetGroup_21627726;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ## 
  let valid = call_21627739.validator(path, query, header, formData, body, _)
  let scheme = call_21627739.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627739.makeUrl(scheme.get, call_21627739.host, call_21627739.base,
                               call_21627739.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627739, uri, valid, _)

proc call*(call_21627740: Call_GetDeleteDBSubnetGroup_21627726;
          DBSubnetGroupName: string; Action: string = "DeleteDBSubnetGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteDBSubnetGroup
  ## <p>Deletes a DB subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name of the database subnet group to delete.</p> <note> <p>You can't delete the default subnet group.</p> </note> <p>Constraints:</p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Version: string (required)
  var query_21627741 = newJObject()
  add(query_21627741, "Action", newJString(Action))
  add(query_21627741, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21627741, "Version", newJString(Version))
  result = call_21627740.call(nil, query_21627741, nil, nil, nil)

var getDeleteDBSubnetGroup* = Call_GetDeleteDBSubnetGroup_21627726(
    name: "getDeleteDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteDBSubnetGroup",
    validator: validate_GetDeleteDBSubnetGroup_21627727, base: "/",
    makeUrl: url_GetDeleteDBSubnetGroup_21627728,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteEventSubscription_21627775 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteEventSubscription_21627777(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteEventSubscription_21627776(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes an RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627778 = query.getOrDefault("Action")
  valid_21627778 = validateParameter(valid_21627778, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_21627778 != nil:
    section.add "Action", valid_21627778
  var valid_21627779 = query.getOrDefault("Version")
  valid_21627779 = validateParameter(valid_21627779, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627779 != nil:
    section.add "Version", valid_21627779
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627780 = header.getOrDefault("X-Amz-Date")
  valid_21627780 = validateParameter(valid_21627780, JString, required = false,
                                   default = nil)
  if valid_21627780 != nil:
    section.add "X-Amz-Date", valid_21627780
  var valid_21627781 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627781 = validateParameter(valid_21627781, JString, required = false,
                                   default = nil)
  if valid_21627781 != nil:
    section.add "X-Amz-Security-Token", valid_21627781
  var valid_21627782 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627782 = validateParameter(valid_21627782, JString, required = false,
                                   default = nil)
  if valid_21627782 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627782
  var valid_21627783 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627783 = validateParameter(valid_21627783, JString, required = false,
                                   default = nil)
  if valid_21627783 != nil:
    section.add "X-Amz-Algorithm", valid_21627783
  var valid_21627784 = header.getOrDefault("X-Amz-Signature")
  valid_21627784 = validateParameter(valid_21627784, JString, required = false,
                                   default = nil)
  if valid_21627784 != nil:
    section.add "X-Amz-Signature", valid_21627784
  var valid_21627785 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627785 = validateParameter(valid_21627785, JString, required = false,
                                   default = nil)
  if valid_21627785 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627785
  var valid_21627786 = header.getOrDefault("X-Amz-Credential")
  valid_21627786 = validateParameter(valid_21627786, JString, required = false,
                                   default = nil)
  if valid_21627786 != nil:
    section.add "X-Amz-Credential", valid_21627786
  result.add "header", section
  ## parameters in `formData` object:
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_21627787 = formData.getOrDefault("SubscriptionName")
  valid_21627787 = validateParameter(valid_21627787, JString, required = true,
                                   default = nil)
  if valid_21627787 != nil:
    section.add "SubscriptionName", valid_21627787
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627788: Call_PostDeleteEventSubscription_21627775;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes an RDS event notification subscription.
  ## 
  let valid = call_21627788.validator(path, query, header, formData, body, _)
  let scheme = call_21627788.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627788.makeUrl(scheme.get, call_21627788.host, call_21627788.base,
                               call_21627788.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627788, uri, valid, _)

proc call*(call_21627789: Call_PostDeleteEventSubscription_21627775;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteEventSubscription
  ## Deletes an RDS event notification subscription.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627790 = newJObject()
  var formData_21627791 = newJObject()
  add(formData_21627791, "SubscriptionName", newJString(SubscriptionName))
  add(query_21627790, "Action", newJString(Action))
  add(query_21627790, "Version", newJString(Version))
  result = call_21627789.call(nil, query_21627790, nil, formData_21627791, nil)

var postDeleteEventSubscription* = Call_PostDeleteEventSubscription_21627775(
    name: "postDeleteEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_PostDeleteEventSubscription_21627776, base: "/",
    makeUrl: url_PostDeleteEventSubscription_21627777,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteEventSubscription_21627759 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteEventSubscription_21627761(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteEventSubscription_21627760(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes an RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627762 = query.getOrDefault("Action")
  valid_21627762 = validateParameter(valid_21627762, JString, required = true, default = newJString(
      "DeleteEventSubscription"))
  if valid_21627762 != nil:
    section.add "Action", valid_21627762
  var valid_21627763 = query.getOrDefault("SubscriptionName")
  valid_21627763 = validateParameter(valid_21627763, JString, required = true,
                                   default = nil)
  if valid_21627763 != nil:
    section.add "SubscriptionName", valid_21627763
  var valid_21627764 = query.getOrDefault("Version")
  valid_21627764 = validateParameter(valid_21627764, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627764 != nil:
    section.add "Version", valid_21627764
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627765 = header.getOrDefault("X-Amz-Date")
  valid_21627765 = validateParameter(valid_21627765, JString, required = false,
                                   default = nil)
  if valid_21627765 != nil:
    section.add "X-Amz-Date", valid_21627765
  var valid_21627766 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627766 = validateParameter(valid_21627766, JString, required = false,
                                   default = nil)
  if valid_21627766 != nil:
    section.add "X-Amz-Security-Token", valid_21627766
  var valid_21627767 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627767 = validateParameter(valid_21627767, JString, required = false,
                                   default = nil)
  if valid_21627767 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627767
  var valid_21627768 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627768 = validateParameter(valid_21627768, JString, required = false,
                                   default = nil)
  if valid_21627768 != nil:
    section.add "X-Amz-Algorithm", valid_21627768
  var valid_21627769 = header.getOrDefault("X-Amz-Signature")
  valid_21627769 = validateParameter(valid_21627769, JString, required = false,
                                   default = nil)
  if valid_21627769 != nil:
    section.add "X-Amz-Signature", valid_21627769
  var valid_21627770 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627770 = validateParameter(valid_21627770, JString, required = false,
                                   default = nil)
  if valid_21627770 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627770
  var valid_21627771 = header.getOrDefault("X-Amz-Credential")
  valid_21627771 = validateParameter(valid_21627771, JString, required = false,
                                   default = nil)
  if valid_21627771 != nil:
    section.add "X-Amz-Credential", valid_21627771
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627772: Call_GetDeleteEventSubscription_21627759;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes an RDS event notification subscription.
  ## 
  let valid = call_21627772.validator(path, query, header, formData, body, _)
  let scheme = call_21627772.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627772.makeUrl(scheme.get, call_21627772.host, call_21627772.base,
                               call_21627772.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627772, uri, valid, _)

proc call*(call_21627773: Call_GetDeleteEventSubscription_21627759;
          SubscriptionName: string; Action: string = "DeleteEventSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteEventSubscription
  ## Deletes an RDS event notification subscription.
  ##   Action: string (required)
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to delete.
  ##   Version: string (required)
  var query_21627774 = newJObject()
  add(query_21627774, "Action", newJString(Action))
  add(query_21627774, "SubscriptionName", newJString(SubscriptionName))
  add(query_21627774, "Version", newJString(Version))
  result = call_21627773.call(nil, query_21627774, nil, nil, nil)

var getDeleteEventSubscription* = Call_GetDeleteEventSubscription_21627759(
    name: "getDeleteEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteEventSubscription",
    validator: validate_GetDeleteEventSubscription_21627760, base: "/",
    makeUrl: url_GetDeleteEventSubscription_21627761,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteGlobalCluster_21627808 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteGlobalCluster_21627810(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteGlobalCluster_21627809(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627811 = query.getOrDefault("Action")
  valid_21627811 = validateParameter(valid_21627811, JString, required = true,
                                   default = newJString("DeleteGlobalCluster"))
  if valid_21627811 != nil:
    section.add "Action", valid_21627811
  var valid_21627812 = query.getOrDefault("Version")
  valid_21627812 = validateParameter(valid_21627812, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627812 != nil:
    section.add "Version", valid_21627812
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627813 = header.getOrDefault("X-Amz-Date")
  valid_21627813 = validateParameter(valid_21627813, JString, required = false,
                                   default = nil)
  if valid_21627813 != nil:
    section.add "X-Amz-Date", valid_21627813
  var valid_21627814 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627814 = validateParameter(valid_21627814, JString, required = false,
                                   default = nil)
  if valid_21627814 != nil:
    section.add "X-Amz-Security-Token", valid_21627814
  var valid_21627815 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627815 = validateParameter(valid_21627815, JString, required = false,
                                   default = nil)
  if valid_21627815 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627815
  var valid_21627816 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627816 = validateParameter(valid_21627816, JString, required = false,
                                   default = nil)
  if valid_21627816 != nil:
    section.add "X-Amz-Algorithm", valid_21627816
  var valid_21627817 = header.getOrDefault("X-Amz-Signature")
  valid_21627817 = validateParameter(valid_21627817, JString, required = false,
                                   default = nil)
  if valid_21627817 != nil:
    section.add "X-Amz-Signature", valid_21627817
  var valid_21627818 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627818 = validateParameter(valid_21627818, JString, required = false,
                                   default = nil)
  if valid_21627818 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627818
  var valid_21627819 = header.getOrDefault("X-Amz-Credential")
  valid_21627819 = validateParameter(valid_21627819, JString, required = false,
                                   default = nil)
  if valid_21627819 != nil:
    section.add "X-Amz-Credential", valid_21627819
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `GlobalClusterIdentifier` field"
  var valid_21627820 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_21627820 = validateParameter(valid_21627820, JString, required = true,
                                   default = nil)
  if valid_21627820 != nil:
    section.add "GlobalClusterIdentifier", valid_21627820
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627821: Call_PostDeleteGlobalCluster_21627808;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21627821.validator(path, query, header, formData, body, _)
  let scheme = call_21627821.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627821.makeUrl(scheme.get, call_21627821.host, call_21627821.base,
                               call_21627821.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627821, uri, valid, _)

proc call*(call_21627822: Call_PostDeleteGlobalCluster_21627808;
          GlobalClusterIdentifier: string; Action: string = "DeleteGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteGlobalCluster
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627823 = newJObject()
  var formData_21627824 = newJObject()
  add(formData_21627824, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_21627823, "Action", newJString(Action))
  add(query_21627823, "Version", newJString(Version))
  result = call_21627822.call(nil, query_21627823, nil, formData_21627824, nil)

var postDeleteGlobalCluster* = Call_PostDeleteGlobalCluster_21627808(
    name: "postDeleteGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteGlobalCluster",
    validator: validate_PostDeleteGlobalCluster_21627809, base: "/",
    makeUrl: url_PostDeleteGlobalCluster_21627810,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteGlobalCluster_21627792 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteGlobalCluster_21627794(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteGlobalCluster_21627793(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   GlobalClusterIdentifier: JString (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627795 = query.getOrDefault("Action")
  valid_21627795 = validateParameter(valid_21627795, JString, required = true,
                                   default = newJString("DeleteGlobalCluster"))
  if valid_21627795 != nil:
    section.add "Action", valid_21627795
  var valid_21627796 = query.getOrDefault("GlobalClusterIdentifier")
  valid_21627796 = validateParameter(valid_21627796, JString, required = true,
                                   default = nil)
  if valid_21627796 != nil:
    section.add "GlobalClusterIdentifier", valid_21627796
  var valid_21627797 = query.getOrDefault("Version")
  valid_21627797 = validateParameter(valid_21627797, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627797 != nil:
    section.add "Version", valid_21627797
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627798 = header.getOrDefault("X-Amz-Date")
  valid_21627798 = validateParameter(valid_21627798, JString, required = false,
                                   default = nil)
  if valid_21627798 != nil:
    section.add "X-Amz-Date", valid_21627798
  var valid_21627799 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627799 = validateParameter(valid_21627799, JString, required = false,
                                   default = nil)
  if valid_21627799 != nil:
    section.add "X-Amz-Security-Token", valid_21627799
  var valid_21627800 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627800 = validateParameter(valid_21627800, JString, required = false,
                                   default = nil)
  if valid_21627800 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627800
  var valid_21627801 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627801 = validateParameter(valid_21627801, JString, required = false,
                                   default = nil)
  if valid_21627801 != nil:
    section.add "X-Amz-Algorithm", valid_21627801
  var valid_21627802 = header.getOrDefault("X-Amz-Signature")
  valid_21627802 = validateParameter(valid_21627802, JString, required = false,
                                   default = nil)
  if valid_21627802 != nil:
    section.add "X-Amz-Signature", valid_21627802
  var valid_21627803 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627803 = validateParameter(valid_21627803, JString, required = false,
                                   default = nil)
  if valid_21627803 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627803
  var valid_21627804 = header.getOrDefault("X-Amz-Credential")
  valid_21627804 = validateParameter(valid_21627804, JString, required = false,
                                   default = nil)
  if valid_21627804 != nil:
    section.add "X-Amz-Credential", valid_21627804
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627805: Call_GetDeleteGlobalCluster_21627792;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21627805.validator(path, query, header, formData, body, _)
  let scheme = call_21627805.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627805.makeUrl(scheme.get, call_21627805.host, call_21627805.base,
                               call_21627805.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627805, uri, valid, _)

proc call*(call_21627806: Call_GetDeleteGlobalCluster_21627792;
          GlobalClusterIdentifier: string; Action: string = "DeleteGlobalCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteGlobalCluster
  ## <p> Deletes a global database cluster. The primary and secondary clusters must already be detached or destroyed first. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   GlobalClusterIdentifier: string (required)
  ##                          :  The cluster identifier of the global database cluster being deleted. 
  ##   Version: string (required)
  var query_21627807 = newJObject()
  add(query_21627807, "Action", newJString(Action))
  add(query_21627807, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_21627807, "Version", newJString(Version))
  result = call_21627806.call(nil, query_21627807, nil, nil, nil)

var getDeleteGlobalCluster* = Call_GetDeleteGlobalCluster_21627792(
    name: "getDeleteGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteGlobalCluster",
    validator: validate_GetDeleteGlobalCluster_21627793, base: "/",
    makeUrl: url_GetDeleteGlobalCluster_21627794,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteInstallationMedia_21627841 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteInstallationMedia_21627843(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteInstallationMedia_21627842(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627844 = query.getOrDefault("Action")
  valid_21627844 = validateParameter(valid_21627844, JString, required = true, default = newJString(
      "DeleteInstallationMedia"))
  if valid_21627844 != nil:
    section.add "Action", valid_21627844
  var valid_21627845 = query.getOrDefault("Version")
  valid_21627845 = validateParameter(valid_21627845, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627845 != nil:
    section.add "Version", valid_21627845
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627846 = header.getOrDefault("X-Amz-Date")
  valid_21627846 = validateParameter(valid_21627846, JString, required = false,
                                   default = nil)
  if valid_21627846 != nil:
    section.add "X-Amz-Date", valid_21627846
  var valid_21627847 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627847 = validateParameter(valid_21627847, JString, required = false,
                                   default = nil)
  if valid_21627847 != nil:
    section.add "X-Amz-Security-Token", valid_21627847
  var valid_21627848 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627848 = validateParameter(valid_21627848, JString, required = false,
                                   default = nil)
  if valid_21627848 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627848
  var valid_21627849 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627849 = validateParameter(valid_21627849, JString, required = false,
                                   default = nil)
  if valid_21627849 != nil:
    section.add "X-Amz-Algorithm", valid_21627849
  var valid_21627850 = header.getOrDefault("X-Amz-Signature")
  valid_21627850 = validateParameter(valid_21627850, JString, required = false,
                                   default = nil)
  if valid_21627850 != nil:
    section.add "X-Amz-Signature", valid_21627850
  var valid_21627851 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627851 = validateParameter(valid_21627851, JString, required = false,
                                   default = nil)
  if valid_21627851 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627851
  var valid_21627852 = header.getOrDefault("X-Amz-Credential")
  valid_21627852 = validateParameter(valid_21627852, JString, required = false,
                                   default = nil)
  if valid_21627852 != nil:
    section.add "X-Amz-Credential", valid_21627852
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstallationMediaId: JString (required)
  ##                      : The installation medium ID.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `InstallationMediaId` field"
  var valid_21627853 = formData.getOrDefault("InstallationMediaId")
  valid_21627853 = validateParameter(valid_21627853, JString, required = true,
                                   default = nil)
  if valid_21627853 != nil:
    section.add "InstallationMediaId", valid_21627853
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627854: Call_PostDeleteInstallationMedia_21627841;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_21627854.validator(path, query, header, formData, body, _)
  let scheme = call_21627854.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627854.makeUrl(scheme.get, call_21627854.host, call_21627854.base,
                               call_21627854.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627854, uri, valid, _)

proc call*(call_21627855: Call_PostDeleteInstallationMedia_21627841;
          InstallationMediaId: string; Action: string = "DeleteInstallationMedia";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteInstallationMedia
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   InstallationMediaId: string (required)
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627856 = newJObject()
  var formData_21627857 = newJObject()
  add(formData_21627857, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_21627856, "Action", newJString(Action))
  add(query_21627856, "Version", newJString(Version))
  result = call_21627855.call(nil, query_21627856, nil, formData_21627857, nil)

var postDeleteInstallationMedia* = Call_PostDeleteInstallationMedia_21627841(
    name: "postDeleteInstallationMedia", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteInstallationMedia",
    validator: validate_PostDeleteInstallationMedia_21627842, base: "/",
    makeUrl: url_PostDeleteInstallationMedia_21627843,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteInstallationMedia_21627825 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteInstallationMedia_21627827(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteInstallationMedia_21627826(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   InstallationMediaId: JString (required)
  ##                      : The installation medium ID.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `InstallationMediaId` field"
  var valid_21627828 = query.getOrDefault("InstallationMediaId")
  valid_21627828 = validateParameter(valid_21627828, JString, required = true,
                                   default = nil)
  if valid_21627828 != nil:
    section.add "InstallationMediaId", valid_21627828
  var valid_21627829 = query.getOrDefault("Action")
  valid_21627829 = validateParameter(valid_21627829, JString, required = true, default = newJString(
      "DeleteInstallationMedia"))
  if valid_21627829 != nil:
    section.add "Action", valid_21627829
  var valid_21627830 = query.getOrDefault("Version")
  valid_21627830 = validateParameter(valid_21627830, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627830 != nil:
    section.add "Version", valid_21627830
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627831 = header.getOrDefault("X-Amz-Date")
  valid_21627831 = validateParameter(valid_21627831, JString, required = false,
                                   default = nil)
  if valid_21627831 != nil:
    section.add "X-Amz-Date", valid_21627831
  var valid_21627832 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627832 = validateParameter(valid_21627832, JString, required = false,
                                   default = nil)
  if valid_21627832 != nil:
    section.add "X-Amz-Security-Token", valid_21627832
  var valid_21627833 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627833 = validateParameter(valid_21627833, JString, required = false,
                                   default = nil)
  if valid_21627833 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627833
  var valid_21627834 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627834 = validateParameter(valid_21627834, JString, required = false,
                                   default = nil)
  if valid_21627834 != nil:
    section.add "X-Amz-Algorithm", valid_21627834
  var valid_21627835 = header.getOrDefault("X-Amz-Signature")
  valid_21627835 = validateParameter(valid_21627835, JString, required = false,
                                   default = nil)
  if valid_21627835 != nil:
    section.add "X-Amz-Signature", valid_21627835
  var valid_21627836 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627836 = validateParameter(valid_21627836, JString, required = false,
                                   default = nil)
  if valid_21627836 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627836
  var valid_21627837 = header.getOrDefault("X-Amz-Credential")
  valid_21627837 = validateParameter(valid_21627837, JString, required = false,
                                   default = nil)
  if valid_21627837 != nil:
    section.add "X-Amz-Credential", valid_21627837
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627838: Call_GetDeleteInstallationMedia_21627825;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_21627838.validator(path, query, header, formData, body, _)
  let scheme = call_21627838.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627838.makeUrl(scheme.get, call_21627838.host, call_21627838.base,
                               call_21627838.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627838, uri, valid, _)

proc call*(call_21627839: Call_GetDeleteInstallationMedia_21627825;
          InstallationMediaId: string; Action: string = "DeleteInstallationMedia";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteInstallationMedia
  ## Deletes the installation medium for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   InstallationMediaId: string (required)
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627840 = newJObject()
  add(query_21627840, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_21627840, "Action", newJString(Action))
  add(query_21627840, "Version", newJString(Version))
  result = call_21627839.call(nil, query_21627840, nil, nil, nil)

var getDeleteInstallationMedia* = Call_GetDeleteInstallationMedia_21627825(
    name: "getDeleteInstallationMedia", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteInstallationMedia",
    validator: validate_GetDeleteInstallationMedia_21627826, base: "/",
    makeUrl: url_GetDeleteInstallationMedia_21627827,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeleteOptionGroup_21627874 = ref object of OpenApiRestCall_21625435
proc url_PostDeleteOptionGroup_21627876(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeleteOptionGroup_21627875(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627877 = query.getOrDefault("Action")
  valid_21627877 = validateParameter(valid_21627877, JString, required = true,
                                   default = newJString("DeleteOptionGroup"))
  if valid_21627877 != nil:
    section.add "Action", valid_21627877
  var valid_21627878 = query.getOrDefault("Version")
  valid_21627878 = validateParameter(valid_21627878, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627878 != nil:
    section.add "Version", valid_21627878
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627879 = header.getOrDefault("X-Amz-Date")
  valid_21627879 = validateParameter(valid_21627879, JString, required = false,
                                   default = nil)
  if valid_21627879 != nil:
    section.add "X-Amz-Date", valid_21627879
  var valid_21627880 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627880 = validateParameter(valid_21627880, JString, required = false,
                                   default = nil)
  if valid_21627880 != nil:
    section.add "X-Amz-Security-Token", valid_21627880
  var valid_21627881 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627881 = validateParameter(valid_21627881, JString, required = false,
                                   default = nil)
  if valid_21627881 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627881
  var valid_21627882 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627882 = validateParameter(valid_21627882, JString, required = false,
                                   default = nil)
  if valid_21627882 != nil:
    section.add "X-Amz-Algorithm", valid_21627882
  var valid_21627883 = header.getOrDefault("X-Amz-Signature")
  valid_21627883 = validateParameter(valid_21627883, JString, required = false,
                                   default = nil)
  if valid_21627883 != nil:
    section.add "X-Amz-Signature", valid_21627883
  var valid_21627884 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627884 = validateParameter(valid_21627884, JString, required = false,
                                   default = nil)
  if valid_21627884 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627884
  var valid_21627885 = header.getOrDefault("X-Amz-Credential")
  valid_21627885 = validateParameter(valid_21627885, JString, required = false,
                                   default = nil)
  if valid_21627885 != nil:
    section.add "X-Amz-Credential", valid_21627885
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `OptionGroupName` field"
  var valid_21627886 = formData.getOrDefault("OptionGroupName")
  valid_21627886 = validateParameter(valid_21627886, JString, required = true,
                                   default = nil)
  if valid_21627886 != nil:
    section.add "OptionGroupName", valid_21627886
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627887: Call_PostDeleteOptionGroup_21627874;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes an existing option group.
  ## 
  let valid = call_21627887.validator(path, query, header, formData, body, _)
  let scheme = call_21627887.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627887.makeUrl(scheme.get, call_21627887.host, call_21627887.base,
                               call_21627887.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627887, uri, valid, _)

proc call*(call_21627888: Call_PostDeleteOptionGroup_21627874;
          OptionGroupName: string; Action: string = "DeleteOptionGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postDeleteOptionGroup
  ## Deletes an existing option group.
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627889 = newJObject()
  var formData_21627890 = newJObject()
  add(formData_21627890, "OptionGroupName", newJString(OptionGroupName))
  add(query_21627889, "Action", newJString(Action))
  add(query_21627889, "Version", newJString(Version))
  result = call_21627888.call(nil, query_21627889, nil, formData_21627890, nil)

var postDeleteOptionGroup* = Call_PostDeleteOptionGroup_21627874(
    name: "postDeleteOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeleteOptionGroup",
    validator: validate_PostDeleteOptionGroup_21627875, base: "/",
    makeUrl: url_PostDeleteOptionGroup_21627876,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeleteOptionGroup_21627858 = ref object of OpenApiRestCall_21625435
proc url_GetDeleteOptionGroup_21627860(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeleteOptionGroup_21627859(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Deletes an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OptionGroupName` field"
  var valid_21627861 = query.getOrDefault("OptionGroupName")
  valid_21627861 = validateParameter(valid_21627861, JString, required = true,
                                   default = nil)
  if valid_21627861 != nil:
    section.add "OptionGroupName", valid_21627861
  var valid_21627862 = query.getOrDefault("Action")
  valid_21627862 = validateParameter(valid_21627862, JString, required = true,
                                   default = newJString("DeleteOptionGroup"))
  if valid_21627862 != nil:
    section.add "Action", valid_21627862
  var valid_21627863 = query.getOrDefault("Version")
  valid_21627863 = validateParameter(valid_21627863, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627863 != nil:
    section.add "Version", valid_21627863
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627864 = header.getOrDefault("X-Amz-Date")
  valid_21627864 = validateParameter(valid_21627864, JString, required = false,
                                   default = nil)
  if valid_21627864 != nil:
    section.add "X-Amz-Date", valid_21627864
  var valid_21627865 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627865 = validateParameter(valid_21627865, JString, required = false,
                                   default = nil)
  if valid_21627865 != nil:
    section.add "X-Amz-Security-Token", valid_21627865
  var valid_21627866 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627866 = validateParameter(valid_21627866, JString, required = false,
                                   default = nil)
  if valid_21627866 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627866
  var valid_21627867 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627867 = validateParameter(valid_21627867, JString, required = false,
                                   default = nil)
  if valid_21627867 != nil:
    section.add "X-Amz-Algorithm", valid_21627867
  var valid_21627868 = header.getOrDefault("X-Amz-Signature")
  valid_21627868 = validateParameter(valid_21627868, JString, required = false,
                                   default = nil)
  if valid_21627868 != nil:
    section.add "X-Amz-Signature", valid_21627868
  var valid_21627869 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627869 = validateParameter(valid_21627869, JString, required = false,
                                   default = nil)
  if valid_21627869 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627869
  var valid_21627870 = header.getOrDefault("X-Amz-Credential")
  valid_21627870 = validateParameter(valid_21627870, JString, required = false,
                                   default = nil)
  if valid_21627870 != nil:
    section.add "X-Amz-Credential", valid_21627870
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627871: Call_GetDeleteOptionGroup_21627858; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Deletes an existing option group.
  ## 
  let valid = call_21627871.validator(path, query, header, formData, body, _)
  let scheme = call_21627871.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627871.makeUrl(scheme.get, call_21627871.host, call_21627871.base,
                               call_21627871.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627871, uri, valid, _)

proc call*(call_21627872: Call_GetDeleteOptionGroup_21627858;
          OptionGroupName: string; Action: string = "DeleteOptionGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getDeleteOptionGroup
  ## Deletes an existing option group.
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be deleted.</p> <note> <p>You can't delete default option groups.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627873 = newJObject()
  add(query_21627873, "OptionGroupName", newJString(OptionGroupName))
  add(query_21627873, "Action", newJString(Action))
  add(query_21627873, "Version", newJString(Version))
  result = call_21627872.call(nil, query_21627873, nil, nil, nil)

var getDeleteOptionGroup* = Call_GetDeleteOptionGroup_21627858(
    name: "getDeleteOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeleteOptionGroup",
    validator: validate_GetDeleteOptionGroup_21627859, base: "/",
    makeUrl: url_GetDeleteOptionGroup_21627860,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDeregisterDBProxyTargets_21627910 = ref object of OpenApiRestCall_21625435
proc url_PostDeregisterDBProxyTargets_21627912(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDeregisterDBProxyTargets_21627911(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627913 = query.getOrDefault("Action")
  valid_21627913 = validateParameter(valid_21627913, JString, required = true, default = newJString(
      "DeregisterDBProxyTargets"))
  if valid_21627913 != nil:
    section.add "Action", valid_21627913
  var valid_21627914 = query.getOrDefault("Version")
  valid_21627914 = validateParameter(valid_21627914, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627914 != nil:
    section.add "Version", valid_21627914
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627915 = header.getOrDefault("X-Amz-Date")
  valid_21627915 = validateParameter(valid_21627915, JString, required = false,
                                   default = nil)
  if valid_21627915 != nil:
    section.add "X-Amz-Date", valid_21627915
  var valid_21627916 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627916 = validateParameter(valid_21627916, JString, required = false,
                                   default = nil)
  if valid_21627916 != nil:
    section.add "X-Amz-Security-Token", valid_21627916
  var valid_21627917 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627917 = validateParameter(valid_21627917, JString, required = false,
                                   default = nil)
  if valid_21627917 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627917
  var valid_21627918 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627918 = validateParameter(valid_21627918, JString, required = false,
                                   default = nil)
  if valid_21627918 != nil:
    section.add "X-Amz-Algorithm", valid_21627918
  var valid_21627919 = header.getOrDefault("X-Amz-Signature")
  valid_21627919 = validateParameter(valid_21627919, JString, required = false,
                                   default = nil)
  if valid_21627919 != nil:
    section.add "X-Amz-Signature", valid_21627919
  var valid_21627920 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627920 = validateParameter(valid_21627920, JString, required = false,
                                   default = nil)
  if valid_21627920 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627920
  var valid_21627921 = header.getOrDefault("X-Amz-Credential")
  valid_21627921 = validateParameter(valid_21627921, JString, required = false,
                                   default = nil)
  if valid_21627921 != nil:
    section.add "X-Amz-Credential", valid_21627921
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  section = newJObject()
  var valid_21627922 = formData.getOrDefault("TargetGroupName")
  valid_21627922 = validateParameter(valid_21627922, JString, required = false,
                                   default = nil)
  if valid_21627922 != nil:
    section.add "TargetGroupName", valid_21627922
  var valid_21627923 = formData.getOrDefault("DBClusterIdentifiers")
  valid_21627923 = validateParameter(valid_21627923, JArray, required = false,
                                   default = nil)
  if valid_21627923 != nil:
    section.add "DBClusterIdentifiers", valid_21627923
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_21627924 = formData.getOrDefault("DBProxyName")
  valid_21627924 = validateParameter(valid_21627924, JString, required = true,
                                   default = nil)
  if valid_21627924 != nil:
    section.add "DBProxyName", valid_21627924
  var valid_21627925 = formData.getOrDefault("DBInstanceIdentifiers")
  valid_21627925 = validateParameter(valid_21627925, JArray, required = false,
                                   default = nil)
  if valid_21627925 != nil:
    section.add "DBInstanceIdentifiers", valid_21627925
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627926: Call_PostDeregisterDBProxyTargets_21627910;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_21627926.validator(path, query, header, formData, body, _)
  let scheme = call_21627926.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627926.makeUrl(scheme.get, call_21627926.host, call_21627926.base,
                               call_21627926.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627926, uri, valid, _)

proc call*(call_21627927: Call_PostDeregisterDBProxyTargets_21627910;
          DBProxyName: string; Action: string = "DeregisterDBProxyTargets";
          TargetGroupName: string = ""; DBClusterIdentifiers: JsonNode = nil;
          Version: string = "2014-10-31"; DBInstanceIdentifiers: JsonNode = nil): Recallable =
  ## postDeregisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ##   Action: string (required)
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  ##   Version: string (required)
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  var query_21627928 = newJObject()
  var formData_21627929 = newJObject()
  add(query_21627928, "Action", newJString(Action))
  add(formData_21627929, "TargetGroupName", newJString(TargetGroupName))
  if DBClusterIdentifiers != nil:
    formData_21627929.add "DBClusterIdentifiers", DBClusterIdentifiers
  add(formData_21627929, "DBProxyName", newJString(DBProxyName))
  add(query_21627928, "Version", newJString(Version))
  if DBInstanceIdentifiers != nil:
    formData_21627929.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  result = call_21627927.call(nil, query_21627928, nil, formData_21627929, nil)

var postDeregisterDBProxyTargets* = Call_PostDeregisterDBProxyTargets_21627910(
    name: "postDeregisterDBProxyTargets", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DeregisterDBProxyTargets",
    validator: validate_PostDeregisterDBProxyTargets_21627911, base: "/",
    makeUrl: url_PostDeregisterDBProxyTargets_21627912,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDeregisterDBProxyTargets_21627891 = ref object of OpenApiRestCall_21625435
proc url_GetDeregisterDBProxyTargets_21627893(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDeregisterDBProxyTargets_21627892(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   Action: JString (required)
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627894 = query.getOrDefault("TargetGroupName")
  valid_21627894 = validateParameter(valid_21627894, JString, required = false,
                                   default = nil)
  if valid_21627894 != nil:
    section.add "TargetGroupName", valid_21627894
  var valid_21627895 = query.getOrDefault("DBInstanceIdentifiers")
  valid_21627895 = validateParameter(valid_21627895, JArray, required = false,
                                   default = nil)
  if valid_21627895 != nil:
    section.add "DBInstanceIdentifiers", valid_21627895
  var valid_21627896 = query.getOrDefault("Action")
  valid_21627896 = validateParameter(valid_21627896, JString, required = true, default = newJString(
      "DeregisterDBProxyTargets"))
  if valid_21627896 != nil:
    section.add "Action", valid_21627896
  var valid_21627897 = query.getOrDefault("DBClusterIdentifiers")
  valid_21627897 = validateParameter(valid_21627897, JArray, required = false,
                                   default = nil)
  if valid_21627897 != nil:
    section.add "DBClusterIdentifiers", valid_21627897
  var valid_21627898 = query.getOrDefault("DBProxyName")
  valid_21627898 = validateParameter(valid_21627898, JString, required = true,
                                   default = nil)
  if valid_21627898 != nil:
    section.add "DBProxyName", valid_21627898
  var valid_21627899 = query.getOrDefault("Version")
  valid_21627899 = validateParameter(valid_21627899, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627899 != nil:
    section.add "Version", valid_21627899
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627900 = header.getOrDefault("X-Amz-Date")
  valid_21627900 = validateParameter(valid_21627900, JString, required = false,
                                   default = nil)
  if valid_21627900 != nil:
    section.add "X-Amz-Date", valid_21627900
  var valid_21627901 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627901 = validateParameter(valid_21627901, JString, required = false,
                                   default = nil)
  if valid_21627901 != nil:
    section.add "X-Amz-Security-Token", valid_21627901
  var valid_21627902 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627902 = validateParameter(valid_21627902, JString, required = false,
                                   default = nil)
  if valid_21627902 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627902
  var valid_21627903 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627903 = validateParameter(valid_21627903, JString, required = false,
                                   default = nil)
  if valid_21627903 != nil:
    section.add "X-Amz-Algorithm", valid_21627903
  var valid_21627904 = header.getOrDefault("X-Amz-Signature")
  valid_21627904 = validateParameter(valid_21627904, JString, required = false,
                                   default = nil)
  if valid_21627904 != nil:
    section.add "X-Amz-Signature", valid_21627904
  var valid_21627905 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627905 = validateParameter(valid_21627905, JString, required = false,
                                   default = nil)
  if valid_21627905 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627905
  var valid_21627906 = header.getOrDefault("X-Amz-Credential")
  valid_21627906 = validateParameter(valid_21627906, JString, required = false,
                                   default = nil)
  if valid_21627906 != nil:
    section.add "X-Amz-Credential", valid_21627906
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627907: Call_GetDeregisterDBProxyTargets_21627891;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_21627907.validator(path, query, header, formData, body, _)
  let scheme = call_21627907.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627907.makeUrl(scheme.get, call_21627907.host, call_21627907.base,
                               call_21627907.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627907, uri, valid, _)

proc call*(call_21627908: Call_GetDeregisterDBProxyTargets_21627891;
          DBProxyName: string; TargetGroupName: string = "";
          DBInstanceIdentifiers: JsonNode = nil;
          Action: string = "DeregisterDBProxyTargets";
          DBClusterIdentifiers: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getDeregisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   Action: string (required)
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  ##   Version: string (required)
  var query_21627909 = newJObject()
  add(query_21627909, "TargetGroupName", newJString(TargetGroupName))
  if DBInstanceIdentifiers != nil:
    query_21627909.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  add(query_21627909, "Action", newJString(Action))
  if DBClusterIdentifiers != nil:
    query_21627909.add "DBClusterIdentifiers", DBClusterIdentifiers
  add(query_21627909, "DBProxyName", newJString(DBProxyName))
  add(query_21627909, "Version", newJString(Version))
  result = call_21627908.call(nil, query_21627909, nil, nil, nil)

var getDeregisterDBProxyTargets* = Call_GetDeregisterDBProxyTargets_21627891(
    name: "getDeregisterDBProxyTargets", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DeregisterDBProxyTargets",
    validator: validate_GetDeregisterDBProxyTargets_21627892, base: "/",
    makeUrl: url_GetDeregisterDBProxyTargets_21627893,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeAccountAttributes_21627945 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeAccountAttributes_21627947(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeAccountAttributes_21627946(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627948 = query.getOrDefault("Action")
  valid_21627948 = validateParameter(valid_21627948, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_21627948 != nil:
    section.add "Action", valid_21627948
  var valid_21627949 = query.getOrDefault("Version")
  valid_21627949 = validateParameter(valid_21627949, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627949 != nil:
    section.add "Version", valid_21627949
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627950 = header.getOrDefault("X-Amz-Date")
  valid_21627950 = validateParameter(valid_21627950, JString, required = false,
                                   default = nil)
  if valid_21627950 != nil:
    section.add "X-Amz-Date", valid_21627950
  var valid_21627951 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627951 = validateParameter(valid_21627951, JString, required = false,
                                   default = nil)
  if valid_21627951 != nil:
    section.add "X-Amz-Security-Token", valid_21627951
  var valid_21627952 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627952 = validateParameter(valid_21627952, JString, required = false,
                                   default = nil)
  if valid_21627952 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627952
  var valid_21627953 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627953 = validateParameter(valid_21627953, JString, required = false,
                                   default = nil)
  if valid_21627953 != nil:
    section.add "X-Amz-Algorithm", valid_21627953
  var valid_21627954 = header.getOrDefault("X-Amz-Signature")
  valid_21627954 = validateParameter(valid_21627954, JString, required = false,
                                   default = nil)
  if valid_21627954 != nil:
    section.add "X-Amz-Signature", valid_21627954
  var valid_21627955 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627955 = validateParameter(valid_21627955, JString, required = false,
                                   default = nil)
  if valid_21627955 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627955
  var valid_21627956 = header.getOrDefault("X-Amz-Credential")
  valid_21627956 = validateParameter(valid_21627956, JString, required = false,
                                   default = nil)
  if valid_21627956 != nil:
    section.add "X-Amz-Credential", valid_21627956
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627957: Call_PostDescribeAccountAttributes_21627945;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  let valid = call_21627957.validator(path, query, header, formData, body, _)
  let scheme = call_21627957.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627957.makeUrl(scheme.get, call_21627957.host, call_21627957.base,
                               call_21627957.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627957, uri, valid, _)

proc call*(call_21627958: Call_PostDescribeAccountAttributes_21627945;
          Action: string = "DescribeAccountAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeAccountAttributes
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627959 = newJObject()
  add(query_21627959, "Action", newJString(Action))
  add(query_21627959, "Version", newJString(Version))
  result = call_21627958.call(nil, query_21627959, nil, nil, nil)

var postDescribeAccountAttributes* = Call_PostDescribeAccountAttributes_21627945(
    name: "postDescribeAccountAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_PostDescribeAccountAttributes_21627946, base: "/",
    makeUrl: url_PostDescribeAccountAttributes_21627947,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeAccountAttributes_21627930 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeAccountAttributes_21627932(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeAccountAttributes_21627931(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627933 = query.getOrDefault("Action")
  valid_21627933 = validateParameter(valid_21627933, JString, required = true, default = newJString(
      "DescribeAccountAttributes"))
  if valid_21627933 != nil:
    section.add "Action", valid_21627933
  var valid_21627934 = query.getOrDefault("Version")
  valid_21627934 = validateParameter(valid_21627934, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627934 != nil:
    section.add "Version", valid_21627934
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627935 = header.getOrDefault("X-Amz-Date")
  valid_21627935 = validateParameter(valid_21627935, JString, required = false,
                                   default = nil)
  if valid_21627935 != nil:
    section.add "X-Amz-Date", valid_21627935
  var valid_21627936 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627936 = validateParameter(valid_21627936, JString, required = false,
                                   default = nil)
  if valid_21627936 != nil:
    section.add "X-Amz-Security-Token", valid_21627936
  var valid_21627937 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627937 = validateParameter(valid_21627937, JString, required = false,
                                   default = nil)
  if valid_21627937 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627937
  var valid_21627938 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627938 = validateParameter(valid_21627938, JString, required = false,
                                   default = nil)
  if valid_21627938 != nil:
    section.add "X-Amz-Algorithm", valid_21627938
  var valid_21627939 = header.getOrDefault("X-Amz-Signature")
  valid_21627939 = validateParameter(valid_21627939, JString, required = false,
                                   default = nil)
  if valid_21627939 != nil:
    section.add "X-Amz-Signature", valid_21627939
  var valid_21627940 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627940 = validateParameter(valid_21627940, JString, required = false,
                                   default = nil)
  if valid_21627940 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627940
  var valid_21627941 = header.getOrDefault("X-Amz-Credential")
  valid_21627941 = validateParameter(valid_21627941, JString, required = false,
                                   default = nil)
  if valid_21627941 != nil:
    section.add "X-Amz-Credential", valid_21627941
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627942: Call_GetDescribeAccountAttributes_21627930;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ## 
  let valid = call_21627942.validator(path, query, header, formData, body, _)
  let scheme = call_21627942.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627942.makeUrl(scheme.get, call_21627942.host, call_21627942.base,
                               call_21627942.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627942, uri, valid, _)

proc call*(call_21627943: Call_GetDescribeAccountAttributes_21627930;
          Action: string = "DescribeAccountAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeAccountAttributes
  ## <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p> <p>This command doesn't take any parameters.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21627944 = newJObject()
  add(query_21627944, "Action", newJString(Action))
  add(query_21627944, "Version", newJString(Version))
  result = call_21627943.call(nil, query_21627944, nil, nil, nil)

var getDescribeAccountAttributes* = Call_GetDescribeAccountAttributes_21627930(
    name: "getDescribeAccountAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeAccountAttributes",
    validator: validate_GetDescribeAccountAttributes_21627931, base: "/",
    makeUrl: url_GetDescribeAccountAttributes_21627932,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCertificates_21627979 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeCertificates_21627981(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCertificates_21627980(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627982 = query.getOrDefault("Action")
  valid_21627982 = validateParameter(valid_21627982, JString, required = true,
                                   default = newJString("DescribeCertificates"))
  if valid_21627982 != nil:
    section.add "Action", valid_21627982
  var valid_21627983 = query.getOrDefault("Version")
  valid_21627983 = validateParameter(valid_21627983, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627983 != nil:
    section.add "Version", valid_21627983
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627984 = header.getOrDefault("X-Amz-Date")
  valid_21627984 = validateParameter(valid_21627984, JString, required = false,
                                   default = nil)
  if valid_21627984 != nil:
    section.add "X-Amz-Date", valid_21627984
  var valid_21627985 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627985 = validateParameter(valid_21627985, JString, required = false,
                                   default = nil)
  if valid_21627985 != nil:
    section.add "X-Amz-Security-Token", valid_21627985
  var valid_21627986 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627986 = validateParameter(valid_21627986, JString, required = false,
                                   default = nil)
  if valid_21627986 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627986
  var valid_21627987 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627987 = validateParameter(valid_21627987, JString, required = false,
                                   default = nil)
  if valid_21627987 != nil:
    section.add "X-Amz-Algorithm", valid_21627987
  var valid_21627988 = header.getOrDefault("X-Amz-Signature")
  valid_21627988 = validateParameter(valid_21627988, JString, required = false,
                                   default = nil)
  if valid_21627988 != nil:
    section.add "X-Amz-Signature", valid_21627988
  var valid_21627989 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627989 = validateParameter(valid_21627989, JString, required = false,
                                   default = nil)
  if valid_21627989 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627989
  var valid_21627990 = header.getOrDefault("X-Amz-Credential")
  valid_21627990 = validateParameter(valid_21627990, JString, required = false,
                                   default = nil)
  if valid_21627990 != nil:
    section.add "X-Amz-Credential", valid_21627990
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateIdentifier: JString
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21627991 = formData.getOrDefault("CertificateIdentifier")
  valid_21627991 = validateParameter(valid_21627991, JString, required = false,
                                   default = nil)
  if valid_21627991 != nil:
    section.add "CertificateIdentifier", valid_21627991
  var valid_21627992 = formData.getOrDefault("Marker")
  valid_21627992 = validateParameter(valid_21627992, JString, required = false,
                                   default = nil)
  if valid_21627992 != nil:
    section.add "Marker", valid_21627992
  var valid_21627993 = formData.getOrDefault("Filters")
  valid_21627993 = validateParameter(valid_21627993, JArray, required = false,
                                   default = nil)
  if valid_21627993 != nil:
    section.add "Filters", valid_21627993
  var valid_21627994 = formData.getOrDefault("MaxRecords")
  valid_21627994 = validateParameter(valid_21627994, JInt, required = false,
                                   default = nil)
  if valid_21627994 != nil:
    section.add "MaxRecords", valid_21627994
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627995: Call_PostDescribeCertificates_21627979;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  let valid = call_21627995.validator(path, query, header, formData, body, _)
  let scheme = call_21627995.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627995.makeUrl(scheme.get, call_21627995.host, call_21627995.base,
                               call_21627995.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627995, uri, valid, _)

proc call*(call_21627996: Call_PostDescribeCertificates_21627979;
          CertificateIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribeCertificates"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeCertificates
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ##   CertificateIdentifier: string
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21627997 = newJObject()
  var formData_21627998 = newJObject()
  add(formData_21627998, "CertificateIdentifier",
      newJString(CertificateIdentifier))
  add(formData_21627998, "Marker", newJString(Marker))
  add(query_21627997, "Action", newJString(Action))
  if Filters != nil:
    formData_21627998.add "Filters", Filters
  add(formData_21627998, "MaxRecords", newJInt(MaxRecords))
  add(query_21627997, "Version", newJString(Version))
  result = call_21627996.call(nil, query_21627997, nil, formData_21627998, nil)

var postDescribeCertificates* = Call_PostDescribeCertificates_21627979(
    name: "postDescribeCertificates", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCertificates",
    validator: validate_PostDescribeCertificates_21627980, base: "/",
    makeUrl: url_PostDescribeCertificates_21627981,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCertificates_21627960 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeCertificates_21627962(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCertificates_21627961(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   CertificateIdentifier: JString
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_21627963 = query.getOrDefault("MaxRecords")
  valid_21627963 = validateParameter(valid_21627963, JInt, required = false,
                                   default = nil)
  if valid_21627963 != nil:
    section.add "MaxRecords", valid_21627963
  var valid_21627964 = query.getOrDefault("CertificateIdentifier")
  valid_21627964 = validateParameter(valid_21627964, JString, required = false,
                                   default = nil)
  if valid_21627964 != nil:
    section.add "CertificateIdentifier", valid_21627964
  var valid_21627965 = query.getOrDefault("Filters")
  valid_21627965 = validateParameter(valid_21627965, JArray, required = false,
                                   default = nil)
  if valid_21627965 != nil:
    section.add "Filters", valid_21627965
  var valid_21627966 = query.getOrDefault("Action")
  valid_21627966 = validateParameter(valid_21627966, JString, required = true,
                                   default = newJString("DescribeCertificates"))
  if valid_21627966 != nil:
    section.add "Action", valid_21627966
  var valid_21627967 = query.getOrDefault("Marker")
  valid_21627967 = validateParameter(valid_21627967, JString, required = false,
                                   default = nil)
  if valid_21627967 != nil:
    section.add "Marker", valid_21627967
  var valid_21627968 = query.getOrDefault("Version")
  valid_21627968 = validateParameter(valid_21627968, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21627968 != nil:
    section.add "Version", valid_21627968
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21627969 = header.getOrDefault("X-Amz-Date")
  valid_21627969 = validateParameter(valid_21627969, JString, required = false,
                                   default = nil)
  if valid_21627969 != nil:
    section.add "X-Amz-Date", valid_21627969
  var valid_21627970 = header.getOrDefault("X-Amz-Security-Token")
  valid_21627970 = validateParameter(valid_21627970, JString, required = false,
                                   default = nil)
  if valid_21627970 != nil:
    section.add "X-Amz-Security-Token", valid_21627970
  var valid_21627971 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21627971 = validateParameter(valid_21627971, JString, required = false,
                                   default = nil)
  if valid_21627971 != nil:
    section.add "X-Amz-Content-Sha256", valid_21627971
  var valid_21627972 = header.getOrDefault("X-Amz-Algorithm")
  valid_21627972 = validateParameter(valid_21627972, JString, required = false,
                                   default = nil)
  if valid_21627972 != nil:
    section.add "X-Amz-Algorithm", valid_21627972
  var valid_21627973 = header.getOrDefault("X-Amz-Signature")
  valid_21627973 = validateParameter(valid_21627973, JString, required = false,
                                   default = nil)
  if valid_21627973 != nil:
    section.add "X-Amz-Signature", valid_21627973
  var valid_21627974 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21627974 = validateParameter(valid_21627974, JString, required = false,
                                   default = nil)
  if valid_21627974 != nil:
    section.add "X-Amz-SignedHeaders", valid_21627974
  var valid_21627975 = header.getOrDefault("X-Amz-Credential")
  valid_21627975 = validateParameter(valid_21627975, JString, required = false,
                                   default = nil)
  if valid_21627975 != nil:
    section.add "X-Amz-Credential", valid_21627975
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21627976: Call_GetDescribeCertificates_21627960;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ## 
  let valid = call_21627976.validator(path, query, header, formData, body, _)
  let scheme = call_21627976.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21627976.makeUrl(scheme.get, call_21627976.host, call_21627976.base,
                               call_21627976.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21627976, uri, valid, _)

proc call*(call_21627977: Call_GetDescribeCertificates_21627960;
          MaxRecords: int = 0; CertificateIdentifier: string = "";
          Filters: JsonNode = nil; Action: string = "DescribeCertificates";
          Marker: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeCertificates
  ## Lists the set of CA certificates provided by Amazon RDS for this AWS account.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   CertificateIdentifier: string
  ##                        : <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match an existing CertificateIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeCertificates</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_21627978 = newJObject()
  add(query_21627978, "MaxRecords", newJInt(MaxRecords))
  add(query_21627978, "CertificateIdentifier", newJString(CertificateIdentifier))
  if Filters != nil:
    query_21627978.add "Filters", Filters
  add(query_21627978, "Action", newJString(Action))
  add(query_21627978, "Marker", newJString(Marker))
  add(query_21627978, "Version", newJString(Version))
  result = call_21627977.call(nil, query_21627978, nil, nil, nil)

var getDescribeCertificates* = Call_GetDescribeCertificates_21627960(
    name: "getDescribeCertificates", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCertificates",
    validator: validate_GetDescribeCertificates_21627961, base: "/",
    makeUrl: url_GetDescribeCertificates_21627962,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeCustomAvailabilityZones_21628018 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeCustomAvailabilityZones_21628020(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeCustomAvailabilityZones_21628019(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628021 = query.getOrDefault("Action")
  valid_21628021 = validateParameter(valid_21628021, JString, required = true, default = newJString(
      "DescribeCustomAvailabilityZones"))
  if valid_21628021 != nil:
    section.add "Action", valid_21628021
  var valid_21628022 = query.getOrDefault("Version")
  valid_21628022 = validateParameter(valid_21628022, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628022 != nil:
    section.add "Version", valid_21628022
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628023 = header.getOrDefault("X-Amz-Date")
  valid_21628023 = validateParameter(valid_21628023, JString, required = false,
                                   default = nil)
  if valid_21628023 != nil:
    section.add "X-Amz-Date", valid_21628023
  var valid_21628024 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628024 = validateParameter(valid_21628024, JString, required = false,
                                   default = nil)
  if valid_21628024 != nil:
    section.add "X-Amz-Security-Token", valid_21628024
  var valid_21628025 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628025 = validateParameter(valid_21628025, JString, required = false,
                                   default = nil)
  if valid_21628025 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628025
  var valid_21628026 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628026 = validateParameter(valid_21628026, JString, required = false,
                                   default = nil)
  if valid_21628026 != nil:
    section.add "X-Amz-Algorithm", valid_21628026
  var valid_21628027 = header.getOrDefault("X-Amz-Signature")
  valid_21628027 = validateParameter(valid_21628027, JString, required = false,
                                   default = nil)
  if valid_21628027 != nil:
    section.add "X-Amz-Signature", valid_21628027
  var valid_21628028 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628028 = validateParameter(valid_21628028, JString, required = false,
                                   default = nil)
  if valid_21628028 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628028
  var valid_21628029 = header.getOrDefault("X-Amz-Credential")
  valid_21628029 = validateParameter(valid_21628029, JString, required = false,
                                   default = nil)
  if valid_21628029 != nil:
    section.add "X-Amz-Credential", valid_21628029
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   CustomAvailabilityZoneId: JString
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  section = newJObject()
  var valid_21628030 = formData.getOrDefault("Marker")
  valid_21628030 = validateParameter(valid_21628030, JString, required = false,
                                   default = nil)
  if valid_21628030 != nil:
    section.add "Marker", valid_21628030
  var valid_21628031 = formData.getOrDefault("Filters")
  valid_21628031 = validateParameter(valid_21628031, JArray, required = false,
                                   default = nil)
  if valid_21628031 != nil:
    section.add "Filters", valid_21628031
  var valid_21628032 = formData.getOrDefault("MaxRecords")
  valid_21628032 = validateParameter(valid_21628032, JInt, required = false,
                                   default = nil)
  if valid_21628032 != nil:
    section.add "MaxRecords", valid_21628032
  var valid_21628033 = formData.getOrDefault("CustomAvailabilityZoneId")
  valid_21628033 = validateParameter(valid_21628033, JString, required = false,
                                   default = nil)
  if valid_21628033 != nil:
    section.add "CustomAvailabilityZoneId", valid_21628033
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628034: Call_PostDescribeCustomAvailabilityZones_21628018;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_21628034.validator(path, query, header, formData, body, _)
  let scheme = call_21628034.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628034.makeUrl(scheme.get, call_21628034.host, call_21628034.base,
                               call_21628034.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628034, uri, valid, _)

proc call*(call_21628035: Call_PostDescribeCustomAvailabilityZones_21628018;
          Marker: string = ""; Action: string = "DescribeCustomAvailabilityZones";
          Filters: JsonNode = nil; MaxRecords: int = 0;
          CustomAvailabilityZoneId: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postDescribeCustomAvailabilityZones
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   CustomAvailabilityZoneId: string
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  ##   Version: string (required)
  var query_21628036 = newJObject()
  var formData_21628037 = newJObject()
  add(formData_21628037, "Marker", newJString(Marker))
  add(query_21628036, "Action", newJString(Action))
  if Filters != nil:
    formData_21628037.add "Filters", Filters
  add(formData_21628037, "MaxRecords", newJInt(MaxRecords))
  add(formData_21628037, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_21628036, "Version", newJString(Version))
  result = call_21628035.call(nil, query_21628036, nil, formData_21628037, nil)

var postDescribeCustomAvailabilityZones* = Call_PostDescribeCustomAvailabilityZones_21628018(
    name: "postDescribeCustomAvailabilityZones", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCustomAvailabilityZones",
    validator: validate_PostDescribeCustomAvailabilityZones_21628019, base: "/",
    makeUrl: url_PostDescribeCustomAvailabilityZones_21628020,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeCustomAvailabilityZones_21627999 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeCustomAvailabilityZones_21628001(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeCustomAvailabilityZones_21628000(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CustomAvailabilityZoneId: JString
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628002 = query.getOrDefault("MaxRecords")
  valid_21628002 = validateParameter(valid_21628002, JInt, required = false,
                                   default = nil)
  if valid_21628002 != nil:
    section.add "MaxRecords", valid_21628002
  var valid_21628003 = query.getOrDefault("Filters")
  valid_21628003 = validateParameter(valid_21628003, JArray, required = false,
                                   default = nil)
  if valid_21628003 != nil:
    section.add "Filters", valid_21628003
  var valid_21628004 = query.getOrDefault("Action")
  valid_21628004 = validateParameter(valid_21628004, JString, required = true, default = newJString(
      "DescribeCustomAvailabilityZones"))
  if valid_21628004 != nil:
    section.add "Action", valid_21628004
  var valid_21628005 = query.getOrDefault("Marker")
  valid_21628005 = validateParameter(valid_21628005, JString, required = false,
                                   default = nil)
  if valid_21628005 != nil:
    section.add "Marker", valid_21628005
  var valid_21628006 = query.getOrDefault("CustomAvailabilityZoneId")
  valid_21628006 = validateParameter(valid_21628006, JString, required = false,
                                   default = nil)
  if valid_21628006 != nil:
    section.add "CustomAvailabilityZoneId", valid_21628006
  var valid_21628007 = query.getOrDefault("Version")
  valid_21628007 = validateParameter(valid_21628007, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628007 != nil:
    section.add "Version", valid_21628007
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628008 = header.getOrDefault("X-Amz-Date")
  valid_21628008 = validateParameter(valid_21628008, JString, required = false,
                                   default = nil)
  if valid_21628008 != nil:
    section.add "X-Amz-Date", valid_21628008
  var valid_21628009 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628009 = validateParameter(valid_21628009, JString, required = false,
                                   default = nil)
  if valid_21628009 != nil:
    section.add "X-Amz-Security-Token", valid_21628009
  var valid_21628010 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628010 = validateParameter(valid_21628010, JString, required = false,
                                   default = nil)
  if valid_21628010 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628010
  var valid_21628011 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628011 = validateParameter(valid_21628011, JString, required = false,
                                   default = nil)
  if valid_21628011 != nil:
    section.add "X-Amz-Algorithm", valid_21628011
  var valid_21628012 = header.getOrDefault("X-Amz-Signature")
  valid_21628012 = validateParameter(valid_21628012, JString, required = false,
                                   default = nil)
  if valid_21628012 != nil:
    section.add "X-Amz-Signature", valid_21628012
  var valid_21628013 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628013 = validateParameter(valid_21628013, JString, required = false,
                                   default = nil)
  if valid_21628013 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628013
  var valid_21628014 = header.getOrDefault("X-Amz-Credential")
  valid_21628014 = validateParameter(valid_21628014, JString, required = false,
                                   default = nil)
  if valid_21628014 != nil:
    section.add "X-Amz-Credential", valid_21628014
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628015: Call_GetDescribeCustomAvailabilityZones_21627999;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ## 
  let valid = call_21628015.validator(path, query, header, formData, body, _)
  let scheme = call_21628015.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628015.makeUrl(scheme.get, call_21628015.host, call_21628015.base,
                               call_21628015.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628015, uri, valid, _)

proc call*(call_21628016: Call_GetDescribeCustomAvailabilityZones_21627999;
          MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeCustomAvailabilityZones"; Marker: string = "";
          CustomAvailabilityZoneId: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeCustomAvailabilityZones
  ## <p>Returns information about custom Availability Zones (AZs).</p> <p>A custom AZ is an on-premises AZ that is integrated with a VMware vSphere cluster.</p> <p>For more information about RDS on VMware, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html"> <i>RDS on VMware User Guide.</i> </a> </p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : A filter that specifies one or more custom AZs to describe.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeCustomAvailabilityZones</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   CustomAvailabilityZoneId: string
  ##                           : The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.
  ##   Version: string (required)
  var query_21628017 = newJObject()
  add(query_21628017, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21628017.add "Filters", Filters
  add(query_21628017, "Action", newJString(Action))
  add(query_21628017, "Marker", newJString(Marker))
  add(query_21628017, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_21628017, "Version", newJString(Version))
  result = call_21628016.call(nil, query_21628017, nil, nil, nil)

var getDescribeCustomAvailabilityZones* = Call_GetDescribeCustomAvailabilityZones_21627999(
    name: "getDescribeCustomAvailabilityZones", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeCustomAvailabilityZones",
    validator: validate_GetDescribeCustomAvailabilityZones_21628000, base: "/",
    makeUrl: url_GetDescribeCustomAvailabilityZones_21628001,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterBacktracks_21628058 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeDBClusterBacktracks_21628060(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterBacktracks_21628059(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628061 = query.getOrDefault("Action")
  valid_21628061 = validateParameter(valid_21628061, JString, required = true, default = newJString(
      "DescribeDBClusterBacktracks"))
  if valid_21628061 != nil:
    section.add "Action", valid_21628061
  var valid_21628062 = query.getOrDefault("Version")
  valid_21628062 = validateParameter(valid_21628062, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628062 != nil:
    section.add "Version", valid_21628062
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628063 = header.getOrDefault("X-Amz-Date")
  valid_21628063 = validateParameter(valid_21628063, JString, required = false,
                                   default = nil)
  if valid_21628063 != nil:
    section.add "X-Amz-Date", valid_21628063
  var valid_21628064 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628064 = validateParameter(valid_21628064, JString, required = false,
                                   default = nil)
  if valid_21628064 != nil:
    section.add "X-Amz-Security-Token", valid_21628064
  var valid_21628065 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628065 = validateParameter(valid_21628065, JString, required = false,
                                   default = nil)
  if valid_21628065 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628065
  var valid_21628066 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628066 = validateParameter(valid_21628066, JString, required = false,
                                   default = nil)
  if valid_21628066 != nil:
    section.add "X-Amz-Algorithm", valid_21628066
  var valid_21628067 = header.getOrDefault("X-Amz-Signature")
  valid_21628067 = validateParameter(valid_21628067, JString, required = false,
                                   default = nil)
  if valid_21628067 != nil:
    section.add "X-Amz-Signature", valid_21628067
  var valid_21628068 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628068 = validateParameter(valid_21628068, JString, required = false,
                                   default = nil)
  if valid_21628068 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628068
  var valid_21628069 = header.getOrDefault("X-Amz-Credential")
  valid_21628069 = validateParameter(valid_21628069, JString, required = false,
                                   default = nil)
  if valid_21628069 != nil:
    section.add "X-Amz-Credential", valid_21628069
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   BacktrackIdentifier: JString
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  section = newJObject()
  var valid_21628070 = formData.getOrDefault("Marker")
  valid_21628070 = validateParameter(valid_21628070, JString, required = false,
                                   default = nil)
  if valid_21628070 != nil:
    section.add "Marker", valid_21628070
  var valid_21628071 = formData.getOrDefault("BacktrackIdentifier")
  valid_21628071 = validateParameter(valid_21628071, JString, required = false,
                                   default = nil)
  if valid_21628071 != nil:
    section.add "BacktrackIdentifier", valid_21628071
  var valid_21628072 = formData.getOrDefault("Filters")
  valid_21628072 = validateParameter(valid_21628072, JArray, required = false,
                                   default = nil)
  if valid_21628072 != nil:
    section.add "Filters", valid_21628072
  var valid_21628073 = formData.getOrDefault("MaxRecords")
  valid_21628073 = validateParameter(valid_21628073, JInt, required = false,
                                   default = nil)
  if valid_21628073 != nil:
    section.add "MaxRecords", valid_21628073
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21628074 = formData.getOrDefault("DBClusterIdentifier")
  valid_21628074 = validateParameter(valid_21628074, JString, required = true,
                                   default = nil)
  if valid_21628074 != nil:
    section.add "DBClusterIdentifier", valid_21628074
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628075: Call_PostDescribeDBClusterBacktracks_21628058;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21628075.validator(path, query, header, formData, body, _)
  let scheme = call_21628075.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628075.makeUrl(scheme.get, call_21628075.host, call_21628075.base,
                               call_21628075.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628075, uri, valid, _)

proc call*(call_21628076: Call_PostDescribeDBClusterBacktracks_21628058;
          DBClusterIdentifier: string; Marker: string = "";
          Action: string = "DescribeDBClusterBacktracks";
          BacktrackIdentifier: string = ""; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterBacktracks
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   BacktrackIdentifier: string
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Version: string (required)
  var query_21628077 = newJObject()
  var formData_21628078 = newJObject()
  add(formData_21628078, "Marker", newJString(Marker))
  add(query_21628077, "Action", newJString(Action))
  add(formData_21628078, "BacktrackIdentifier", newJString(BacktrackIdentifier))
  if Filters != nil:
    formData_21628078.add "Filters", Filters
  add(formData_21628078, "MaxRecords", newJInt(MaxRecords))
  add(formData_21628078, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21628077, "Version", newJString(Version))
  result = call_21628076.call(nil, query_21628077, nil, formData_21628078, nil)

var postDescribeDBClusterBacktracks* = Call_PostDescribeDBClusterBacktracks_21628058(
    name: "postDescribeDBClusterBacktracks", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterBacktracks",
    validator: validate_PostDescribeDBClusterBacktracks_21628059, base: "/",
    makeUrl: url_PostDescribeDBClusterBacktracks_21628060,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterBacktracks_21628038 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeDBClusterBacktracks_21628040(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterBacktracks_21628039(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   BacktrackIdentifier: JString
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628041 = query.getOrDefault("MaxRecords")
  valid_21628041 = validateParameter(valid_21628041, JInt, required = false,
                                   default = nil)
  if valid_21628041 != nil:
    section.add "MaxRecords", valid_21628041
  var valid_21628042 = query.getOrDefault("BacktrackIdentifier")
  valid_21628042 = validateParameter(valid_21628042, JString, required = false,
                                   default = nil)
  if valid_21628042 != nil:
    section.add "BacktrackIdentifier", valid_21628042
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21628043 = query.getOrDefault("DBClusterIdentifier")
  valid_21628043 = validateParameter(valid_21628043, JString, required = true,
                                   default = nil)
  if valid_21628043 != nil:
    section.add "DBClusterIdentifier", valid_21628043
  var valid_21628044 = query.getOrDefault("Filters")
  valid_21628044 = validateParameter(valid_21628044, JArray, required = false,
                                   default = nil)
  if valid_21628044 != nil:
    section.add "Filters", valid_21628044
  var valid_21628045 = query.getOrDefault("Action")
  valid_21628045 = validateParameter(valid_21628045, JString, required = true, default = newJString(
      "DescribeDBClusterBacktracks"))
  if valid_21628045 != nil:
    section.add "Action", valid_21628045
  var valid_21628046 = query.getOrDefault("Marker")
  valid_21628046 = validateParameter(valid_21628046, JString, required = false,
                                   default = nil)
  if valid_21628046 != nil:
    section.add "Marker", valid_21628046
  var valid_21628047 = query.getOrDefault("Version")
  valid_21628047 = validateParameter(valid_21628047, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628047 != nil:
    section.add "Version", valid_21628047
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628048 = header.getOrDefault("X-Amz-Date")
  valid_21628048 = validateParameter(valid_21628048, JString, required = false,
                                   default = nil)
  if valid_21628048 != nil:
    section.add "X-Amz-Date", valid_21628048
  var valid_21628049 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628049 = validateParameter(valid_21628049, JString, required = false,
                                   default = nil)
  if valid_21628049 != nil:
    section.add "X-Amz-Security-Token", valid_21628049
  var valid_21628050 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628050 = validateParameter(valid_21628050, JString, required = false,
                                   default = nil)
  if valid_21628050 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628050
  var valid_21628051 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628051 = validateParameter(valid_21628051, JString, required = false,
                                   default = nil)
  if valid_21628051 != nil:
    section.add "X-Amz-Algorithm", valid_21628051
  var valid_21628052 = header.getOrDefault("X-Amz-Signature")
  valid_21628052 = validateParameter(valid_21628052, JString, required = false,
                                   default = nil)
  if valid_21628052 != nil:
    section.add "X-Amz-Signature", valid_21628052
  var valid_21628053 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628053 = validateParameter(valid_21628053, JString, required = false,
                                   default = nil)
  if valid_21628053 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628053
  var valid_21628054 = header.getOrDefault("X-Amz-Credential")
  valid_21628054 = validateParameter(valid_21628054, JString, required = false,
                                   default = nil)
  if valid_21628054 != nil:
    section.add "X-Amz-Credential", valid_21628054
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628055: Call_GetDescribeDBClusterBacktracks_21628038;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21628055.validator(path, query, header, formData, body, _)
  let scheme = call_21628055.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628055.makeUrl(scheme.get, call_21628055.host, call_21628055.base,
                               call_21628055.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628055, uri, valid, _)

proc call*(call_21628056: Call_GetDescribeDBClusterBacktracks_21628038;
          DBClusterIdentifier: string; MaxRecords: int = 0;
          BacktrackIdentifier: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeDBClusterBacktracks"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterBacktracks
  ## <p>Returns information about backtracks for a DB cluster.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   BacktrackIdentifier: string
  ##                      : <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p> <p>Constraints:</p> <ul> <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li> </ul> <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p> <ul> <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li> <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p> <ul> <li> <p> <code>applying</code> </p> </li> <li> <p> <code>completed</code> </p> </li> <li> <p> <code>failed</code> </p> </li> <li> <p> <code>pending</code> </p> </li> </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_21628057 = newJObject()
  add(query_21628057, "MaxRecords", newJInt(MaxRecords))
  add(query_21628057, "BacktrackIdentifier", newJString(BacktrackIdentifier))
  add(query_21628057, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  if Filters != nil:
    query_21628057.add "Filters", Filters
  add(query_21628057, "Action", newJString(Action))
  add(query_21628057, "Marker", newJString(Marker))
  add(query_21628057, "Version", newJString(Version))
  result = call_21628056.call(nil, query_21628057, nil, nil, nil)

var getDescribeDBClusterBacktracks* = Call_GetDescribeDBClusterBacktracks_21628038(
    name: "getDescribeDBClusterBacktracks", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterBacktracks",
    validator: validate_GetDescribeDBClusterBacktracks_21628039, base: "/",
    makeUrl: url_GetDescribeDBClusterBacktracks_21628040,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterEndpoints_21628099 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeDBClusterEndpoints_21628101(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterEndpoints_21628100(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628102 = query.getOrDefault("Action")
  valid_21628102 = validateParameter(valid_21628102, JString, required = true, default = newJString(
      "DescribeDBClusterEndpoints"))
  if valid_21628102 != nil:
    section.add "Action", valid_21628102
  var valid_21628103 = query.getOrDefault("Version")
  valid_21628103 = validateParameter(valid_21628103, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628103 != nil:
    section.add "Version", valid_21628103
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628104 = header.getOrDefault("X-Amz-Date")
  valid_21628104 = validateParameter(valid_21628104, JString, required = false,
                                   default = nil)
  if valid_21628104 != nil:
    section.add "X-Amz-Date", valid_21628104
  var valid_21628105 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628105 = validateParameter(valid_21628105, JString, required = false,
                                   default = nil)
  if valid_21628105 != nil:
    section.add "X-Amz-Security-Token", valid_21628105
  var valid_21628106 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628106 = validateParameter(valid_21628106, JString, required = false,
                                   default = nil)
  if valid_21628106 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628106
  var valid_21628107 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628107 = validateParameter(valid_21628107, JString, required = false,
                                   default = nil)
  if valid_21628107 != nil:
    section.add "X-Amz-Algorithm", valid_21628107
  var valid_21628108 = header.getOrDefault("X-Amz-Signature")
  valid_21628108 = validateParameter(valid_21628108, JString, required = false,
                                   default = nil)
  if valid_21628108 != nil:
    section.add "X-Amz-Signature", valid_21628108
  var valid_21628109 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628109 = validateParameter(valid_21628109, JString, required = false,
                                   default = nil)
  if valid_21628109 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628109
  var valid_21628110 = header.getOrDefault("X-Amz-Credential")
  valid_21628110 = validateParameter(valid_21628110, JString, required = false,
                                   default = nil)
  if valid_21628110 != nil:
    section.add "X-Amz-Credential", valid_21628110
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: JString
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  section = newJObject()
  var valid_21628111 = formData.getOrDefault("Marker")
  valid_21628111 = validateParameter(valid_21628111, JString, required = false,
                                   default = nil)
  if valid_21628111 != nil:
    section.add "Marker", valid_21628111
  var valid_21628112 = formData.getOrDefault("Filters")
  valid_21628112 = validateParameter(valid_21628112, JArray, required = false,
                                   default = nil)
  if valid_21628112 != nil:
    section.add "Filters", valid_21628112
  var valid_21628113 = formData.getOrDefault("MaxRecords")
  valid_21628113 = validateParameter(valid_21628113, JInt, required = false,
                                   default = nil)
  if valid_21628113 != nil:
    section.add "MaxRecords", valid_21628113
  var valid_21628114 = formData.getOrDefault("DBClusterIdentifier")
  valid_21628114 = validateParameter(valid_21628114, JString, required = false,
                                   default = nil)
  if valid_21628114 != nil:
    section.add "DBClusterIdentifier", valid_21628114
  var valid_21628115 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_21628115 = validateParameter(valid_21628115, JString, required = false,
                                   default = nil)
  if valid_21628115 != nil:
    section.add "DBClusterEndpointIdentifier", valid_21628115
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628116: Call_PostDescribeDBClusterEndpoints_21628099;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21628116.validator(path, query, header, formData, body, _)
  let scheme = call_21628116.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628116.makeUrl(scheme.get, call_21628116.host, call_21628116.base,
                               call_21628116.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628116, uri, valid, _)

proc call*(call_21628117: Call_PostDescribeDBClusterEndpoints_21628099;
          Marker: string = ""; Action: string = "DescribeDBClusterEndpoints";
          Filters: JsonNode = nil; MaxRecords: int = 0;
          DBClusterIdentifier: string = "";
          DBClusterEndpointIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterEndpoints
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   DBClusterEndpointIdentifier: string
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Version: string (required)
  var query_21628118 = newJObject()
  var formData_21628119 = newJObject()
  add(formData_21628119, "Marker", newJString(Marker))
  add(query_21628118, "Action", newJString(Action))
  if Filters != nil:
    formData_21628119.add "Filters", Filters
  add(formData_21628119, "MaxRecords", newJInt(MaxRecords))
  add(formData_21628119, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_21628119, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_21628118, "Version", newJString(Version))
  result = call_21628117.call(nil, query_21628118, nil, formData_21628119, nil)

var postDescribeDBClusterEndpoints* = Call_PostDescribeDBClusterEndpoints_21628099(
    name: "postDescribeDBClusterEndpoints", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterEndpoints",
    validator: validate_PostDescribeDBClusterEndpoints_21628100, base: "/",
    makeUrl: url_PostDescribeDBClusterEndpoints_21628101,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterEndpoints_21628079 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeDBClusterEndpoints_21628081(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterEndpoints_21628080(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterEndpointIdentifier: JString
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628082 = query.getOrDefault("MaxRecords")
  valid_21628082 = validateParameter(valid_21628082, JInt, required = false,
                                   default = nil)
  if valid_21628082 != nil:
    section.add "MaxRecords", valid_21628082
  var valid_21628083 = query.getOrDefault("DBClusterIdentifier")
  valid_21628083 = validateParameter(valid_21628083, JString, required = false,
                                   default = nil)
  if valid_21628083 != nil:
    section.add "DBClusterIdentifier", valid_21628083
  var valid_21628084 = query.getOrDefault("Filters")
  valid_21628084 = validateParameter(valid_21628084, JArray, required = false,
                                   default = nil)
  if valid_21628084 != nil:
    section.add "Filters", valid_21628084
  var valid_21628085 = query.getOrDefault("Action")
  valid_21628085 = validateParameter(valid_21628085, JString, required = true, default = newJString(
      "DescribeDBClusterEndpoints"))
  if valid_21628085 != nil:
    section.add "Action", valid_21628085
  var valid_21628086 = query.getOrDefault("Marker")
  valid_21628086 = validateParameter(valid_21628086, JString, required = false,
                                   default = nil)
  if valid_21628086 != nil:
    section.add "Marker", valid_21628086
  var valid_21628087 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_21628087 = validateParameter(valid_21628087, JString, required = false,
                                   default = nil)
  if valid_21628087 != nil:
    section.add "DBClusterEndpointIdentifier", valid_21628087
  var valid_21628088 = query.getOrDefault("Version")
  valid_21628088 = validateParameter(valid_21628088, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628088 != nil:
    section.add "Version", valid_21628088
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628089 = header.getOrDefault("X-Amz-Date")
  valid_21628089 = validateParameter(valid_21628089, JString, required = false,
                                   default = nil)
  if valid_21628089 != nil:
    section.add "X-Amz-Date", valid_21628089
  var valid_21628090 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628090 = validateParameter(valid_21628090, JString, required = false,
                                   default = nil)
  if valid_21628090 != nil:
    section.add "X-Amz-Security-Token", valid_21628090
  var valid_21628091 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628091 = validateParameter(valid_21628091, JString, required = false,
                                   default = nil)
  if valid_21628091 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628091
  var valid_21628092 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628092 = validateParameter(valid_21628092, JString, required = false,
                                   default = nil)
  if valid_21628092 != nil:
    section.add "X-Amz-Algorithm", valid_21628092
  var valid_21628093 = header.getOrDefault("X-Amz-Signature")
  valid_21628093 = validateParameter(valid_21628093, JString, required = false,
                                   default = nil)
  if valid_21628093 != nil:
    section.add "X-Amz-Signature", valid_21628093
  var valid_21628094 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628094 = validateParameter(valid_21628094, JString, required = false,
                                   default = nil)
  if valid_21628094 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628094
  var valid_21628095 = header.getOrDefault("X-Amz-Credential")
  valid_21628095 = validateParameter(valid_21628095, JString, required = false,
                                   default = nil)
  if valid_21628095 != nil:
    section.add "X-Amz-Credential", valid_21628095
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628096: Call_GetDescribeDBClusterEndpoints_21628079;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21628096.validator(path, query, header, formData, body, _)
  let scheme = call_21628096.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628096.makeUrl(scheme.get, call_21628096.host, call_21628096.base,
                               call_21628096.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628096, uri, valid, _)

proc call*(call_21628097: Call_GetDescribeDBClusterEndpoints_21628079;
          MaxRecords: int = 0; DBClusterIdentifier: string = "";
          Filters: JsonNode = nil; Action: string = "DescribeDBClusterEndpoints";
          Marker: string = ""; DBClusterEndpointIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterEndpoints
  ## <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
  ##   Filters: JArray
  ##          : A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format 
  ## <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>. <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>. <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>. <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>. <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>modifying</code>. 
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterEndpoints</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterEndpointIdentifier: string
  ##                              : The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
  ##   Version: string (required)
  var query_21628098 = newJObject()
  add(query_21628098, "MaxRecords", newJInt(MaxRecords))
  add(query_21628098, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  if Filters != nil:
    query_21628098.add "Filters", Filters
  add(query_21628098, "Action", newJString(Action))
  add(query_21628098, "Marker", newJString(Marker))
  add(query_21628098, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  add(query_21628098, "Version", newJString(Version))
  result = call_21628097.call(nil, query_21628098, nil, nil, nil)

var getDescribeDBClusterEndpoints* = Call_GetDescribeDBClusterEndpoints_21628079(
    name: "getDescribeDBClusterEndpoints", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterEndpoints",
    validator: validate_GetDescribeDBClusterEndpoints_21628080, base: "/",
    makeUrl: url_GetDescribeDBClusterEndpoints_21628081,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameterGroups_21628139 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeDBClusterParameterGroups_21628141(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterParameterGroups_21628140(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628142 = query.getOrDefault("Action")
  valid_21628142 = validateParameter(valid_21628142, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_21628142 != nil:
    section.add "Action", valid_21628142
  var valid_21628143 = query.getOrDefault("Version")
  valid_21628143 = validateParameter(valid_21628143, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628143 != nil:
    section.add "Version", valid_21628143
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628144 = header.getOrDefault("X-Amz-Date")
  valid_21628144 = validateParameter(valid_21628144, JString, required = false,
                                   default = nil)
  if valid_21628144 != nil:
    section.add "X-Amz-Date", valid_21628144
  var valid_21628145 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628145 = validateParameter(valid_21628145, JString, required = false,
                                   default = nil)
  if valid_21628145 != nil:
    section.add "X-Amz-Security-Token", valid_21628145
  var valid_21628146 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628146 = validateParameter(valid_21628146, JString, required = false,
                                   default = nil)
  if valid_21628146 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628146
  var valid_21628147 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628147 = validateParameter(valid_21628147, JString, required = false,
                                   default = nil)
  if valid_21628147 != nil:
    section.add "X-Amz-Algorithm", valid_21628147
  var valid_21628148 = header.getOrDefault("X-Amz-Signature")
  valid_21628148 = validateParameter(valid_21628148, JString, required = false,
                                   default = nil)
  if valid_21628148 != nil:
    section.add "X-Amz-Signature", valid_21628148
  var valid_21628149 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628149 = validateParameter(valid_21628149, JString, required = false,
                                   default = nil)
  if valid_21628149 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628149
  var valid_21628150 = header.getOrDefault("X-Amz-Credential")
  valid_21628150 = validateParameter(valid_21628150, JString, required = false,
                                   default = nil)
  if valid_21628150 != nil:
    section.add "X-Amz-Credential", valid_21628150
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21628151 = formData.getOrDefault("Marker")
  valid_21628151 = validateParameter(valid_21628151, JString, required = false,
                                   default = nil)
  if valid_21628151 != nil:
    section.add "Marker", valid_21628151
  var valid_21628152 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_21628152 = validateParameter(valid_21628152, JString, required = false,
                                   default = nil)
  if valid_21628152 != nil:
    section.add "DBClusterParameterGroupName", valid_21628152
  var valid_21628153 = formData.getOrDefault("Filters")
  valid_21628153 = validateParameter(valid_21628153, JArray, required = false,
                                   default = nil)
  if valid_21628153 != nil:
    section.add "Filters", valid_21628153
  var valid_21628154 = formData.getOrDefault("MaxRecords")
  valid_21628154 = validateParameter(valid_21628154, JInt, required = false,
                                   default = nil)
  if valid_21628154 != nil:
    section.add "MaxRecords", valid_21628154
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628155: Call_PostDescribeDBClusterParameterGroups_21628139;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21628155.validator(path, query, header, formData, body, _)
  let scheme = call_21628155.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628155.makeUrl(scheme.get, call_21628155.host, call_21628155.base,
                               call_21628155.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628155, uri, valid, _)

proc call*(call_21628156: Call_PostDescribeDBClusterParameterGroups_21628139;
          Marker: string = ""; Action: string = "DescribeDBClusterParameterGroups";
          DBClusterParameterGroupName: string = ""; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterParameterGroups
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21628157 = newJObject()
  var formData_21628158 = newJObject()
  add(formData_21628158, "Marker", newJString(Marker))
  add(query_21628157, "Action", newJString(Action))
  add(formData_21628158, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    formData_21628158.add "Filters", Filters
  add(formData_21628158, "MaxRecords", newJInt(MaxRecords))
  add(query_21628157, "Version", newJString(Version))
  result = call_21628156.call(nil, query_21628157, nil, formData_21628158, nil)

var postDescribeDBClusterParameterGroups* = Call_PostDescribeDBClusterParameterGroups_21628139(
    name: "postDescribeDBClusterParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_PostDescribeDBClusterParameterGroups_21628140, base: "/",
    makeUrl: url_PostDescribeDBClusterParameterGroups_21628141,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameterGroups_21628120 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeDBClusterParameterGroups_21628122(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterParameterGroups_21628121(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628123 = query.getOrDefault("MaxRecords")
  valid_21628123 = validateParameter(valid_21628123, JInt, required = false,
                                   default = nil)
  if valid_21628123 != nil:
    section.add "MaxRecords", valid_21628123
  var valid_21628124 = query.getOrDefault("DBClusterParameterGroupName")
  valid_21628124 = validateParameter(valid_21628124, JString, required = false,
                                   default = nil)
  if valid_21628124 != nil:
    section.add "DBClusterParameterGroupName", valid_21628124
  var valid_21628125 = query.getOrDefault("Filters")
  valid_21628125 = validateParameter(valid_21628125, JArray, required = false,
                                   default = nil)
  if valid_21628125 != nil:
    section.add "Filters", valid_21628125
  var valid_21628126 = query.getOrDefault("Action")
  valid_21628126 = validateParameter(valid_21628126, JString, required = true, default = newJString(
      "DescribeDBClusterParameterGroups"))
  if valid_21628126 != nil:
    section.add "Action", valid_21628126
  var valid_21628127 = query.getOrDefault("Marker")
  valid_21628127 = validateParameter(valid_21628127, JString, required = false,
                                   default = nil)
  if valid_21628127 != nil:
    section.add "Marker", valid_21628127
  var valid_21628128 = query.getOrDefault("Version")
  valid_21628128 = validateParameter(valid_21628128, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628128 != nil:
    section.add "Version", valid_21628128
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628129 = header.getOrDefault("X-Amz-Date")
  valid_21628129 = validateParameter(valid_21628129, JString, required = false,
                                   default = nil)
  if valid_21628129 != nil:
    section.add "X-Amz-Date", valid_21628129
  var valid_21628130 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628130 = validateParameter(valid_21628130, JString, required = false,
                                   default = nil)
  if valid_21628130 != nil:
    section.add "X-Amz-Security-Token", valid_21628130
  var valid_21628131 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628131 = validateParameter(valid_21628131, JString, required = false,
                                   default = nil)
  if valid_21628131 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628131
  var valid_21628132 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628132 = validateParameter(valid_21628132, JString, required = false,
                                   default = nil)
  if valid_21628132 != nil:
    section.add "X-Amz-Algorithm", valid_21628132
  var valid_21628133 = header.getOrDefault("X-Amz-Signature")
  valid_21628133 = validateParameter(valid_21628133, JString, required = false,
                                   default = nil)
  if valid_21628133 != nil:
    section.add "X-Amz-Signature", valid_21628133
  var valid_21628134 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628134 = validateParameter(valid_21628134, JString, required = false,
                                   default = nil)
  if valid_21628134 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628134
  var valid_21628135 = header.getOrDefault("X-Amz-Credential")
  valid_21628135 = validateParameter(valid_21628135, JString, required = false,
                                   default = nil)
  if valid_21628135 != nil:
    section.add "X-Amz-Credential", valid_21628135
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628136: Call_GetDescribeDBClusterParameterGroups_21628120;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21628136.validator(path, query, header, formData, body, _)
  let scheme = call_21628136.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628136.makeUrl(scheme.get, call_21628136.host, call_21628136.base,
                               call_21628136.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628136, uri, valid, _)

proc call*(call_21628137: Call_GetDescribeDBClusterParameterGroups_21628120;
          MaxRecords: int = 0; DBClusterParameterGroupName: string = "";
          Filters: JsonNode = nil;
          Action: string = "DescribeDBClusterParameterGroups"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterParameterGroups
  ## <p> Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list will contain only the description of the specified DB cluster parameter group. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of a specific DB cluster parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_21628138 = newJObject()
  add(query_21628138, "MaxRecords", newJInt(MaxRecords))
  add(query_21628138, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    query_21628138.add "Filters", Filters
  add(query_21628138, "Action", newJString(Action))
  add(query_21628138, "Marker", newJString(Marker))
  add(query_21628138, "Version", newJString(Version))
  result = call_21628137.call(nil, query_21628138, nil, nil, nil)

var getDescribeDBClusterParameterGroups* = Call_GetDescribeDBClusterParameterGroups_21628120(
    name: "getDescribeDBClusterParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameterGroups",
    validator: validate_GetDescribeDBClusterParameterGroups_21628121, base: "/",
    makeUrl: url_GetDescribeDBClusterParameterGroups_21628122,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterParameters_21628179 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeDBClusterParameters_21628181(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterParameters_21628180(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628182 = query.getOrDefault("Action")
  valid_21628182 = validateParameter(valid_21628182, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_21628182 != nil:
    section.add "Action", valid_21628182
  var valid_21628183 = query.getOrDefault("Version")
  valid_21628183 = validateParameter(valid_21628183, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628183 != nil:
    section.add "Version", valid_21628183
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628184 = header.getOrDefault("X-Amz-Date")
  valid_21628184 = validateParameter(valid_21628184, JString, required = false,
                                   default = nil)
  if valid_21628184 != nil:
    section.add "X-Amz-Date", valid_21628184
  var valid_21628185 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628185 = validateParameter(valid_21628185, JString, required = false,
                                   default = nil)
  if valid_21628185 != nil:
    section.add "X-Amz-Security-Token", valid_21628185
  var valid_21628186 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628186 = validateParameter(valid_21628186, JString, required = false,
                                   default = nil)
  if valid_21628186 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628186
  var valid_21628187 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628187 = validateParameter(valid_21628187, JString, required = false,
                                   default = nil)
  if valid_21628187 != nil:
    section.add "X-Amz-Algorithm", valid_21628187
  var valid_21628188 = header.getOrDefault("X-Amz-Signature")
  valid_21628188 = validateParameter(valid_21628188, JString, required = false,
                                   default = nil)
  if valid_21628188 != nil:
    section.add "X-Amz-Signature", valid_21628188
  var valid_21628189 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628189 = validateParameter(valid_21628189, JString, required = false,
                                   default = nil)
  if valid_21628189 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628189
  var valid_21628190 = header.getOrDefault("X-Amz-Credential")
  valid_21628190 = validateParameter(valid_21628190, JString, required = false,
                                   default = nil)
  if valid_21628190 != nil:
    section.add "X-Amz-Credential", valid_21628190
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  section = newJObject()
  var valid_21628191 = formData.getOrDefault("Marker")
  valid_21628191 = validateParameter(valid_21628191, JString, required = false,
                                   default = nil)
  if valid_21628191 != nil:
    section.add "Marker", valid_21628191
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_21628192 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_21628192 = validateParameter(valid_21628192, JString, required = true,
                                   default = nil)
  if valid_21628192 != nil:
    section.add "DBClusterParameterGroupName", valid_21628192
  var valid_21628193 = formData.getOrDefault("Filters")
  valid_21628193 = validateParameter(valid_21628193, JArray, required = false,
                                   default = nil)
  if valid_21628193 != nil:
    section.add "Filters", valid_21628193
  var valid_21628194 = formData.getOrDefault("MaxRecords")
  valid_21628194 = validateParameter(valid_21628194, JInt, required = false,
                                   default = nil)
  if valid_21628194 != nil:
    section.add "MaxRecords", valid_21628194
  var valid_21628195 = formData.getOrDefault("Source")
  valid_21628195 = validateParameter(valid_21628195, JString, required = false,
                                   default = nil)
  if valid_21628195 != nil:
    section.add "Source", valid_21628195
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628196: Call_PostDescribeDBClusterParameters_21628179;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21628196.validator(path, query, header, formData, body, _)
  let scheme = call_21628196.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628196.makeUrl(scheme.get, call_21628196.host, call_21628196.base,
                               call_21628196.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628196, uri, valid, _)

proc call*(call_21628197: Call_PostDescribeDBClusterParameters_21628179;
          DBClusterParameterGroupName: string; Marker: string = "";
          Action: string = "DescribeDBClusterParameters"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"; Source: string = ""): Recallable =
  ## postDescribeDBClusterParameters
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  var query_21628198 = newJObject()
  var formData_21628199 = newJObject()
  add(formData_21628199, "Marker", newJString(Marker))
  add(query_21628198, "Action", newJString(Action))
  add(formData_21628199, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    formData_21628199.add "Filters", Filters
  add(formData_21628199, "MaxRecords", newJInt(MaxRecords))
  add(query_21628198, "Version", newJString(Version))
  add(formData_21628199, "Source", newJString(Source))
  result = call_21628197.call(nil, query_21628198, nil, formData_21628199, nil)

var postDescribeDBClusterParameters* = Call_PostDescribeDBClusterParameters_21628179(
    name: "postDescribeDBClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_PostDescribeDBClusterParameters_21628180, base: "/",
    makeUrl: url_PostDescribeDBClusterParameters_21628181,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterParameters_21628159 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeDBClusterParameters_21628161(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterParameters_21628160(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: JString
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628162 = query.getOrDefault("MaxRecords")
  valid_21628162 = validateParameter(valid_21628162, JInt, required = false,
                                   default = nil)
  if valid_21628162 != nil:
    section.add "MaxRecords", valid_21628162
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_21628163 = query.getOrDefault("DBClusterParameterGroupName")
  valid_21628163 = validateParameter(valid_21628163, JString, required = true,
                                   default = nil)
  if valid_21628163 != nil:
    section.add "DBClusterParameterGroupName", valid_21628163
  var valid_21628164 = query.getOrDefault("Filters")
  valid_21628164 = validateParameter(valid_21628164, JArray, required = false,
                                   default = nil)
  if valid_21628164 != nil:
    section.add "Filters", valid_21628164
  var valid_21628165 = query.getOrDefault("Action")
  valid_21628165 = validateParameter(valid_21628165, JString, required = true, default = newJString(
      "DescribeDBClusterParameters"))
  if valid_21628165 != nil:
    section.add "Action", valid_21628165
  var valid_21628166 = query.getOrDefault("Marker")
  valid_21628166 = validateParameter(valid_21628166, JString, required = false,
                                   default = nil)
  if valid_21628166 != nil:
    section.add "Marker", valid_21628166
  var valid_21628167 = query.getOrDefault("Source")
  valid_21628167 = validateParameter(valid_21628167, JString, required = false,
                                   default = nil)
  if valid_21628167 != nil:
    section.add "Source", valid_21628167
  var valid_21628168 = query.getOrDefault("Version")
  valid_21628168 = validateParameter(valid_21628168, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628168 != nil:
    section.add "Version", valid_21628168
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628169 = header.getOrDefault("X-Amz-Date")
  valid_21628169 = validateParameter(valid_21628169, JString, required = false,
                                   default = nil)
  if valid_21628169 != nil:
    section.add "X-Amz-Date", valid_21628169
  var valid_21628170 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628170 = validateParameter(valid_21628170, JString, required = false,
                                   default = nil)
  if valid_21628170 != nil:
    section.add "X-Amz-Security-Token", valid_21628170
  var valid_21628171 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628171 = validateParameter(valid_21628171, JString, required = false,
                                   default = nil)
  if valid_21628171 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628171
  var valid_21628172 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628172 = validateParameter(valid_21628172, JString, required = false,
                                   default = nil)
  if valid_21628172 != nil:
    section.add "X-Amz-Algorithm", valid_21628172
  var valid_21628173 = header.getOrDefault("X-Amz-Signature")
  valid_21628173 = validateParameter(valid_21628173, JString, required = false,
                                   default = nil)
  if valid_21628173 != nil:
    section.add "X-Amz-Signature", valid_21628173
  var valid_21628174 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628174 = validateParameter(valid_21628174, JString, required = false,
                                   default = nil)
  if valid_21628174 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628174
  var valid_21628175 = header.getOrDefault("X-Amz-Credential")
  valid_21628175 = validateParameter(valid_21628175, JString, required = false,
                                   default = nil)
  if valid_21628175 != nil:
    section.add "X-Amz-Credential", valid_21628175
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628176: Call_GetDescribeDBClusterParameters_21628159;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21628176.validator(path, query, header, formData, body, _)
  let scheme = call_21628176.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628176.makeUrl(scheme.get, call_21628176.host, call_21628176.base,
                               call_21628176.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628176, uri, valid, _)

proc call*(call_21628177: Call_GetDescribeDBClusterParameters_21628159;
          DBClusterParameterGroupName: string; MaxRecords: int = 0;
          Filters: JsonNode = nil; Action: string = "DescribeDBClusterParameters";
          Marker: string = ""; Source: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterParameters
  ## <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : <p>The name of a specific DB cluster parameter group to return parameter details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: string
  ##         :  A value that indicates to return only parameters for a specific source. Parameter sources can be <code>engine</code>, <code>service</code>, or <code>customer</code>. 
  ##   Version: string (required)
  var query_21628178 = newJObject()
  add(query_21628178, "MaxRecords", newJInt(MaxRecords))
  add(query_21628178, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Filters != nil:
    query_21628178.add "Filters", Filters
  add(query_21628178, "Action", newJString(Action))
  add(query_21628178, "Marker", newJString(Marker))
  add(query_21628178, "Source", newJString(Source))
  add(query_21628178, "Version", newJString(Version))
  result = call_21628177.call(nil, query_21628178, nil, nil, nil)

var getDescribeDBClusterParameters* = Call_GetDescribeDBClusterParameters_21628159(
    name: "getDescribeDBClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterParameters",
    validator: validate_GetDescribeDBClusterParameters_21628160, base: "/",
    makeUrl: url_GetDescribeDBClusterParameters_21628161,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshotAttributes_21628216 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeDBClusterSnapshotAttributes_21628218(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterSnapshotAttributes_21628217(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628219 = query.getOrDefault("Action")
  valid_21628219 = validateParameter(valid_21628219, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_21628219 != nil:
    section.add "Action", valid_21628219
  var valid_21628220 = query.getOrDefault("Version")
  valid_21628220 = validateParameter(valid_21628220, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628220 != nil:
    section.add "Version", valid_21628220
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628221 = header.getOrDefault("X-Amz-Date")
  valid_21628221 = validateParameter(valid_21628221, JString, required = false,
                                   default = nil)
  if valid_21628221 != nil:
    section.add "X-Amz-Date", valid_21628221
  var valid_21628222 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628222 = validateParameter(valid_21628222, JString, required = false,
                                   default = nil)
  if valid_21628222 != nil:
    section.add "X-Amz-Security-Token", valid_21628222
  var valid_21628223 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628223 = validateParameter(valid_21628223, JString, required = false,
                                   default = nil)
  if valid_21628223 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628223
  var valid_21628224 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628224 = validateParameter(valid_21628224, JString, required = false,
                                   default = nil)
  if valid_21628224 != nil:
    section.add "X-Amz-Algorithm", valid_21628224
  var valid_21628225 = header.getOrDefault("X-Amz-Signature")
  valid_21628225 = validateParameter(valid_21628225, JString, required = false,
                                   default = nil)
  if valid_21628225 != nil:
    section.add "X-Amz-Signature", valid_21628225
  var valid_21628226 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628226 = validateParameter(valid_21628226, JString, required = false,
                                   default = nil)
  if valid_21628226 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628226
  var valid_21628227 = header.getOrDefault("X-Amz-Credential")
  valid_21628227 = validateParameter(valid_21628227, JString, required = false,
                                   default = nil)
  if valid_21628227 != nil:
    section.add "X-Amz-Credential", valid_21628227
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_21628228 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_21628228 = validateParameter(valid_21628228, JString, required = true,
                                   default = nil)
  if valid_21628228 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_21628228
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628229: Call_PostDescribeDBClusterSnapshotAttributes_21628216;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21628229.validator(path, query, header, formData, body, _)
  let scheme = call_21628229.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628229.makeUrl(scheme.get, call_21628229.host, call_21628229.base,
                               call_21628229.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628229, uri, valid, _)

proc call*(call_21628230: Call_PostDescribeDBClusterSnapshotAttributes_21628216;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628231 = newJObject()
  var formData_21628232 = newJObject()
  add(formData_21628232, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_21628231, "Action", newJString(Action))
  add(query_21628231, "Version", newJString(Version))
  result = call_21628230.call(nil, query_21628231, nil, formData_21628232, nil)

var postDescribeDBClusterSnapshotAttributes* = Call_PostDescribeDBClusterSnapshotAttributes_21628216(
    name: "postDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_PostDescribeDBClusterSnapshotAttributes_21628217,
    base: "/", makeUrl: url_PostDescribeDBClusterSnapshotAttributes_21628218,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshotAttributes_21628200 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeDBClusterSnapshotAttributes_21628202(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterSnapshotAttributes_21628201(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterSnapshotIdentifier` field"
  var valid_21628203 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_21628203 = validateParameter(valid_21628203, JString, required = true,
                                   default = nil)
  if valid_21628203 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_21628203
  var valid_21628204 = query.getOrDefault("Action")
  valid_21628204 = validateParameter(valid_21628204, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshotAttributes"))
  if valid_21628204 != nil:
    section.add "Action", valid_21628204
  var valid_21628205 = query.getOrDefault("Version")
  valid_21628205 = validateParameter(valid_21628205, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628205 != nil:
    section.add "Version", valid_21628205
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628206 = header.getOrDefault("X-Amz-Date")
  valid_21628206 = validateParameter(valid_21628206, JString, required = false,
                                   default = nil)
  if valid_21628206 != nil:
    section.add "X-Amz-Date", valid_21628206
  var valid_21628207 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628207 = validateParameter(valid_21628207, JString, required = false,
                                   default = nil)
  if valid_21628207 != nil:
    section.add "X-Amz-Security-Token", valid_21628207
  var valid_21628208 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628208 = validateParameter(valid_21628208, JString, required = false,
                                   default = nil)
  if valid_21628208 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628208
  var valid_21628209 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628209 = validateParameter(valid_21628209, JString, required = false,
                                   default = nil)
  if valid_21628209 != nil:
    section.add "X-Amz-Algorithm", valid_21628209
  var valid_21628210 = header.getOrDefault("X-Amz-Signature")
  valid_21628210 = validateParameter(valid_21628210, JString, required = false,
                                   default = nil)
  if valid_21628210 != nil:
    section.add "X-Amz-Signature", valid_21628210
  var valid_21628211 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628211 = validateParameter(valid_21628211, JString, required = false,
                                   default = nil)
  if valid_21628211 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628211
  var valid_21628212 = header.getOrDefault("X-Amz-Credential")
  valid_21628212 = validateParameter(valid_21628212, JString, required = false,
                                   default = nil)
  if valid_21628212 != nil:
    section.add "X-Amz-Credential", valid_21628212
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628213: Call_GetDescribeDBClusterSnapshotAttributes_21628200;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21628213.validator(path, query, header, formData, body, _)
  let scheme = call_21628213.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628213.makeUrl(scheme.get, call_21628213.host, call_21628213.base,
                               call_21628213.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628213, uri, valid, _)

proc call*(call_21628214: Call_GetDescribeDBClusterSnapshotAttributes_21628200;
          DBClusterSnapshotIdentifier: string;
          Action: string = "DescribeDBClusterSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshotAttributes
  ## <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB cluster snapshot, or to make the manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628215 = newJObject()
  add(query_21628215, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_21628215, "Action", newJString(Action))
  add(query_21628215, "Version", newJString(Version))
  result = call_21628214.call(nil, query_21628215, nil, nil, nil)

var getDescribeDBClusterSnapshotAttributes* = Call_GetDescribeDBClusterSnapshotAttributes_21628200(
    name: "getDescribeDBClusterSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBClusterSnapshotAttributes",
    validator: validate_GetDescribeDBClusterSnapshotAttributes_21628201,
    base: "/", makeUrl: url_GetDescribeDBClusterSnapshotAttributes_21628202,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusterSnapshots_21628256 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeDBClusterSnapshots_21628258(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusterSnapshots_21628257(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628259 = query.getOrDefault("Action")
  valid_21628259 = validateParameter(valid_21628259, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_21628259 != nil:
    section.add "Action", valid_21628259
  var valid_21628260 = query.getOrDefault("Version")
  valid_21628260 = validateParameter(valid_21628260, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628260 != nil:
    section.add "Version", valid_21628260
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628261 = header.getOrDefault("X-Amz-Date")
  valid_21628261 = validateParameter(valid_21628261, JString, required = false,
                                   default = nil)
  if valid_21628261 != nil:
    section.add "X-Amz-Date", valid_21628261
  var valid_21628262 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628262 = validateParameter(valid_21628262, JString, required = false,
                                   default = nil)
  if valid_21628262 != nil:
    section.add "X-Amz-Security-Token", valid_21628262
  var valid_21628263 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628263 = validateParameter(valid_21628263, JString, required = false,
                                   default = nil)
  if valid_21628263 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628263
  var valid_21628264 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628264 = validateParameter(valid_21628264, JString, required = false,
                                   default = nil)
  if valid_21628264 != nil:
    section.add "X-Amz-Algorithm", valid_21628264
  var valid_21628265 = header.getOrDefault("X-Amz-Signature")
  valid_21628265 = validateParameter(valid_21628265, JString, required = false,
                                   default = nil)
  if valid_21628265 != nil:
    section.add "X-Amz-Signature", valid_21628265
  var valid_21628266 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628266 = validateParameter(valid_21628266, JString, required = false,
                                   default = nil)
  if valid_21628266 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628266
  var valid_21628267 = header.getOrDefault("X-Amz-Credential")
  valid_21628267 = validateParameter(valid_21628267, JString, required = false,
                                   default = nil)
  if valid_21628267 != nil:
    section.add "X-Amz-Credential", valid_21628267
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_21628268 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_21628268 = validateParameter(valid_21628268, JString, required = false,
                                   default = nil)
  if valid_21628268 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_21628268
  var valid_21628269 = formData.getOrDefault("IncludeShared")
  valid_21628269 = validateParameter(valid_21628269, JBool, required = false,
                                   default = nil)
  if valid_21628269 != nil:
    section.add "IncludeShared", valid_21628269
  var valid_21628270 = formData.getOrDefault("IncludePublic")
  valid_21628270 = validateParameter(valid_21628270, JBool, required = false,
                                   default = nil)
  if valid_21628270 != nil:
    section.add "IncludePublic", valid_21628270
  var valid_21628271 = formData.getOrDefault("SnapshotType")
  valid_21628271 = validateParameter(valid_21628271, JString, required = false,
                                   default = nil)
  if valid_21628271 != nil:
    section.add "SnapshotType", valid_21628271
  var valid_21628272 = formData.getOrDefault("Marker")
  valid_21628272 = validateParameter(valid_21628272, JString, required = false,
                                   default = nil)
  if valid_21628272 != nil:
    section.add "Marker", valid_21628272
  var valid_21628273 = formData.getOrDefault("Filters")
  valid_21628273 = validateParameter(valid_21628273, JArray, required = false,
                                   default = nil)
  if valid_21628273 != nil:
    section.add "Filters", valid_21628273
  var valid_21628274 = formData.getOrDefault("MaxRecords")
  valid_21628274 = validateParameter(valid_21628274, JInt, required = false,
                                   default = nil)
  if valid_21628274 != nil:
    section.add "MaxRecords", valid_21628274
  var valid_21628275 = formData.getOrDefault("DBClusterIdentifier")
  valid_21628275 = validateParameter(valid_21628275, JString, required = false,
                                   default = nil)
  if valid_21628275 != nil:
    section.add "DBClusterIdentifier", valid_21628275
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628276: Call_PostDescribeDBClusterSnapshots_21628256;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21628276.validator(path, query, header, formData, body, _)
  let scheme = call_21628276.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628276.makeUrl(scheme.get, call_21628276.host, call_21628276.base,
                               call_21628276.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628276, uri, valid, _)

proc call*(call_21628277: Call_PostDescribeDBClusterSnapshots_21628256;
          DBClusterSnapshotIdentifier: string = ""; IncludeShared: bool = false;
          IncludePublic: bool = false; SnapshotType: string = ""; Marker: string = "";
          Action: string = "DescribeDBClusterSnapshots"; Filters: JsonNode = nil;
          MaxRecords: int = 0; DBClusterIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusterSnapshots
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_21628278 = newJObject()
  var formData_21628279 = newJObject()
  add(formData_21628279, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(formData_21628279, "IncludeShared", newJBool(IncludeShared))
  add(formData_21628279, "IncludePublic", newJBool(IncludePublic))
  add(formData_21628279, "SnapshotType", newJString(SnapshotType))
  add(formData_21628279, "Marker", newJString(Marker))
  add(query_21628278, "Action", newJString(Action))
  if Filters != nil:
    formData_21628279.add "Filters", Filters
  add(formData_21628279, "MaxRecords", newJInt(MaxRecords))
  add(formData_21628279, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21628278, "Version", newJString(Version))
  result = call_21628277.call(nil, query_21628278, nil, formData_21628279, nil)

var postDescribeDBClusterSnapshots* = Call_PostDescribeDBClusterSnapshots_21628256(
    name: "postDescribeDBClusterSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_PostDescribeDBClusterSnapshots_21628257, base: "/",
    makeUrl: url_PostDescribeDBClusterSnapshots_21628258,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusterSnapshots_21628233 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeDBClusterSnapshots_21628235(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusterSnapshots_21628234(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterSnapshotIdentifier: JString
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SnapshotType: JString
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628236 = query.getOrDefault("IncludePublic")
  valid_21628236 = validateParameter(valid_21628236, JBool, required = false,
                                   default = nil)
  if valid_21628236 != nil:
    section.add "IncludePublic", valid_21628236
  var valid_21628237 = query.getOrDefault("MaxRecords")
  valid_21628237 = validateParameter(valid_21628237, JInt, required = false,
                                   default = nil)
  if valid_21628237 != nil:
    section.add "MaxRecords", valid_21628237
  var valid_21628238 = query.getOrDefault("DBClusterIdentifier")
  valid_21628238 = validateParameter(valid_21628238, JString, required = false,
                                   default = nil)
  if valid_21628238 != nil:
    section.add "DBClusterIdentifier", valid_21628238
  var valid_21628239 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_21628239 = validateParameter(valid_21628239, JString, required = false,
                                   default = nil)
  if valid_21628239 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_21628239
  var valid_21628240 = query.getOrDefault("Filters")
  valid_21628240 = validateParameter(valid_21628240, JArray, required = false,
                                   default = nil)
  if valid_21628240 != nil:
    section.add "Filters", valid_21628240
  var valid_21628241 = query.getOrDefault("IncludeShared")
  valid_21628241 = validateParameter(valid_21628241, JBool, required = false,
                                   default = nil)
  if valid_21628241 != nil:
    section.add "IncludeShared", valid_21628241
  var valid_21628242 = query.getOrDefault("Action")
  valid_21628242 = validateParameter(valid_21628242, JString, required = true, default = newJString(
      "DescribeDBClusterSnapshots"))
  if valid_21628242 != nil:
    section.add "Action", valid_21628242
  var valid_21628243 = query.getOrDefault("Marker")
  valid_21628243 = validateParameter(valid_21628243, JString, required = false,
                                   default = nil)
  if valid_21628243 != nil:
    section.add "Marker", valid_21628243
  var valid_21628244 = query.getOrDefault("SnapshotType")
  valid_21628244 = validateParameter(valid_21628244, JString, required = false,
                                   default = nil)
  if valid_21628244 != nil:
    section.add "SnapshotType", valid_21628244
  var valid_21628245 = query.getOrDefault("Version")
  valid_21628245 = validateParameter(valid_21628245, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628245 != nil:
    section.add "Version", valid_21628245
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628246 = header.getOrDefault("X-Amz-Date")
  valid_21628246 = validateParameter(valid_21628246, JString, required = false,
                                   default = nil)
  if valid_21628246 != nil:
    section.add "X-Amz-Date", valid_21628246
  var valid_21628247 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628247 = validateParameter(valid_21628247, JString, required = false,
                                   default = nil)
  if valid_21628247 != nil:
    section.add "X-Amz-Security-Token", valid_21628247
  var valid_21628248 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628248 = validateParameter(valid_21628248, JString, required = false,
                                   default = nil)
  if valid_21628248 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628248
  var valid_21628249 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628249 = validateParameter(valid_21628249, JString, required = false,
                                   default = nil)
  if valid_21628249 != nil:
    section.add "X-Amz-Algorithm", valid_21628249
  var valid_21628250 = header.getOrDefault("X-Amz-Signature")
  valid_21628250 = validateParameter(valid_21628250, JString, required = false,
                                   default = nil)
  if valid_21628250 != nil:
    section.add "X-Amz-Signature", valid_21628250
  var valid_21628251 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628251 = validateParameter(valid_21628251, JString, required = false,
                                   default = nil)
  if valid_21628251 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628251
  var valid_21628252 = header.getOrDefault("X-Amz-Credential")
  valid_21628252 = validateParameter(valid_21628252, JString, required = false,
                                   default = nil)
  if valid_21628252 != nil:
    section.add "X-Amz-Credential", valid_21628252
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628253: Call_GetDescribeDBClusterSnapshots_21628233;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21628253.validator(path, query, header, formData, body, _)
  let scheme = call_21628253.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628253.makeUrl(scheme.get, call_21628253.host, call_21628253.base,
                               call_21628253.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628253, uri, valid, _)

proc call*(call_21628254: Call_GetDescribeDBClusterSnapshots_21628233;
          IncludePublic: bool = false; MaxRecords: int = 0;
          DBClusterIdentifier: string = "";
          DBClusterSnapshotIdentifier: string = ""; Filters: JsonNode = nil;
          IncludeShared: bool = false;
          Action: string = "DescribeDBClusterSnapshots"; Marker: string = "";
          SnapshotType: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusterSnapshots
  ## <p>Returns information about DB cluster snapshots. This API action supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB cluster snapshot as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the <code>DBClusterSnapshotIdentifier</code> parameter. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   DBClusterSnapshotIdentifier: string
  ##                              : <p>A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the <code>DBClusterIdentifier</code> parameter. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB cluster snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusterSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SnapshotType: string
  ##               : <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public DB cluster snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Version: string (required)
  var query_21628255 = newJObject()
  add(query_21628255, "IncludePublic", newJBool(IncludePublic))
  add(query_21628255, "MaxRecords", newJInt(MaxRecords))
  add(query_21628255, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21628255, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if Filters != nil:
    query_21628255.add "Filters", Filters
  add(query_21628255, "IncludeShared", newJBool(IncludeShared))
  add(query_21628255, "Action", newJString(Action))
  add(query_21628255, "Marker", newJString(Marker))
  add(query_21628255, "SnapshotType", newJString(SnapshotType))
  add(query_21628255, "Version", newJString(Version))
  result = call_21628254.call(nil, query_21628255, nil, nil, nil)

var getDescribeDBClusterSnapshots* = Call_GetDescribeDBClusterSnapshots_21628233(
    name: "getDescribeDBClusterSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusterSnapshots",
    validator: validate_GetDescribeDBClusterSnapshots_21628234, base: "/",
    makeUrl: url_GetDescribeDBClusterSnapshots_21628235,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBClusters_21628300 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeDBClusters_21628302(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBClusters_21628301(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628303 = query.getOrDefault("Action")
  valid_21628303 = validateParameter(valid_21628303, JString, required = true,
                                   default = newJString("DescribeDBClusters"))
  if valid_21628303 != nil:
    section.add "Action", valid_21628303
  var valid_21628304 = query.getOrDefault("Version")
  valid_21628304 = validateParameter(valid_21628304, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628304 != nil:
    section.add "Version", valid_21628304
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628305 = header.getOrDefault("X-Amz-Date")
  valid_21628305 = validateParameter(valid_21628305, JString, required = false,
                                   default = nil)
  if valid_21628305 != nil:
    section.add "X-Amz-Date", valid_21628305
  var valid_21628306 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628306 = validateParameter(valid_21628306, JString, required = false,
                                   default = nil)
  if valid_21628306 != nil:
    section.add "X-Amz-Security-Token", valid_21628306
  var valid_21628307 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628307 = validateParameter(valid_21628307, JString, required = false,
                                   default = nil)
  if valid_21628307 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628307
  var valid_21628308 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628308 = validateParameter(valid_21628308, JString, required = false,
                                   default = nil)
  if valid_21628308 != nil:
    section.add "X-Amz-Algorithm", valid_21628308
  var valid_21628309 = header.getOrDefault("X-Amz-Signature")
  valid_21628309 = validateParameter(valid_21628309, JString, required = false,
                                   default = nil)
  if valid_21628309 != nil:
    section.add "X-Amz-Signature", valid_21628309
  var valid_21628310 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628310 = validateParameter(valid_21628310, JString, required = false,
                                   default = nil)
  if valid_21628310 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628310
  var valid_21628311 = header.getOrDefault("X-Amz-Credential")
  valid_21628311 = validateParameter(valid_21628311, JString, required = false,
                                   default = nil)
  if valid_21628311 != nil:
    section.add "X-Amz-Credential", valid_21628311
  result.add "header", section
  ## parameters in `formData` object:
  ##   IncludeShared: JBool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  section = newJObject()
  var valid_21628312 = formData.getOrDefault("IncludeShared")
  valid_21628312 = validateParameter(valid_21628312, JBool, required = false,
                                   default = nil)
  if valid_21628312 != nil:
    section.add "IncludeShared", valid_21628312
  var valid_21628313 = formData.getOrDefault("Marker")
  valid_21628313 = validateParameter(valid_21628313, JString, required = false,
                                   default = nil)
  if valid_21628313 != nil:
    section.add "Marker", valid_21628313
  var valid_21628314 = formData.getOrDefault("Filters")
  valid_21628314 = validateParameter(valid_21628314, JArray, required = false,
                                   default = nil)
  if valid_21628314 != nil:
    section.add "Filters", valid_21628314
  var valid_21628315 = formData.getOrDefault("MaxRecords")
  valid_21628315 = validateParameter(valid_21628315, JInt, required = false,
                                   default = nil)
  if valid_21628315 != nil:
    section.add "MaxRecords", valid_21628315
  var valid_21628316 = formData.getOrDefault("DBClusterIdentifier")
  valid_21628316 = validateParameter(valid_21628316, JString, required = false,
                                   default = nil)
  if valid_21628316 != nil:
    section.add "DBClusterIdentifier", valid_21628316
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628317: Call_PostDescribeDBClusters_21628300;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  let valid = call_21628317.validator(path, query, header, formData, body, _)
  let scheme = call_21628317.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628317.makeUrl(scheme.get, call_21628317.host, call_21628317.base,
                               call_21628317.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628317, uri, valid, _)

proc call*(call_21628318: Call_PostDescribeDBClusters_21628300;
          IncludeShared: bool = false; Marker: string = "";
          Action: string = "DescribeDBClusters"; Filters: JsonNode = nil;
          MaxRecords: int = 0; DBClusterIdentifier: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBClusters
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ##   IncludeShared: bool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Version: string (required)
  var query_21628319 = newJObject()
  var formData_21628320 = newJObject()
  add(formData_21628320, "IncludeShared", newJBool(IncludeShared))
  add(formData_21628320, "Marker", newJString(Marker))
  add(query_21628319, "Action", newJString(Action))
  if Filters != nil:
    formData_21628320.add "Filters", Filters
  add(formData_21628320, "MaxRecords", newJInt(MaxRecords))
  add(formData_21628320, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21628319, "Version", newJString(Version))
  result = call_21628318.call(nil, query_21628319, nil, formData_21628320, nil)

var postDescribeDBClusters* = Call_PostDescribeDBClusters_21628300(
    name: "postDescribeDBClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_PostDescribeDBClusters_21628301, base: "/",
    makeUrl: url_PostDescribeDBClusters_21628302,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBClusters_21628280 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeDBClusters_21628282(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBClusters_21628281(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: JString
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628283 = query.getOrDefault("MaxRecords")
  valid_21628283 = validateParameter(valid_21628283, JInt, required = false,
                                   default = nil)
  if valid_21628283 != nil:
    section.add "MaxRecords", valid_21628283
  var valid_21628284 = query.getOrDefault("DBClusterIdentifier")
  valid_21628284 = validateParameter(valid_21628284, JString, required = false,
                                   default = nil)
  if valid_21628284 != nil:
    section.add "DBClusterIdentifier", valid_21628284
  var valid_21628285 = query.getOrDefault("Filters")
  valid_21628285 = validateParameter(valid_21628285, JArray, required = false,
                                   default = nil)
  if valid_21628285 != nil:
    section.add "Filters", valid_21628285
  var valid_21628286 = query.getOrDefault("IncludeShared")
  valid_21628286 = validateParameter(valid_21628286, JBool, required = false,
                                   default = nil)
  if valid_21628286 != nil:
    section.add "IncludeShared", valid_21628286
  var valid_21628287 = query.getOrDefault("Action")
  valid_21628287 = validateParameter(valid_21628287, JString, required = true,
                                   default = newJString("DescribeDBClusters"))
  if valid_21628287 != nil:
    section.add "Action", valid_21628287
  var valid_21628288 = query.getOrDefault("Marker")
  valid_21628288 = validateParameter(valid_21628288, JString, required = false,
                                   default = nil)
  if valid_21628288 != nil:
    section.add "Marker", valid_21628288
  var valid_21628289 = query.getOrDefault("Version")
  valid_21628289 = validateParameter(valid_21628289, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628289 != nil:
    section.add "Version", valid_21628289
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628290 = header.getOrDefault("X-Amz-Date")
  valid_21628290 = validateParameter(valid_21628290, JString, required = false,
                                   default = nil)
  if valid_21628290 != nil:
    section.add "X-Amz-Date", valid_21628290
  var valid_21628291 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628291 = validateParameter(valid_21628291, JString, required = false,
                                   default = nil)
  if valid_21628291 != nil:
    section.add "X-Amz-Security-Token", valid_21628291
  var valid_21628292 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628292 = validateParameter(valid_21628292, JString, required = false,
                                   default = nil)
  if valid_21628292 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628292
  var valid_21628293 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628293 = validateParameter(valid_21628293, JString, required = false,
                                   default = nil)
  if valid_21628293 != nil:
    section.add "X-Amz-Algorithm", valid_21628293
  var valid_21628294 = header.getOrDefault("X-Amz-Signature")
  valid_21628294 = validateParameter(valid_21628294, JString, required = false,
                                   default = nil)
  if valid_21628294 != nil:
    section.add "X-Amz-Signature", valid_21628294
  var valid_21628295 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628295 = validateParameter(valid_21628295, JString, required = false,
                                   default = nil)
  if valid_21628295 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628295
  var valid_21628296 = header.getOrDefault("X-Amz-Credential")
  valid_21628296 = validateParameter(valid_21628296, JString, required = false,
                                   default = nil)
  if valid_21628296 != nil:
    section.add "X-Amz-Credential", valid_21628296
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628297: Call_GetDescribeDBClusters_21628280;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  let valid = call_21628297.validator(path, query, header, formData, body, _)
  let scheme = call_21628297.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628297.makeUrl(scheme.get, call_21628297.host, call_21628297.base,
                               call_21628297.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628297, uri, valid, _)

proc call*(call_21628298: Call_GetDescribeDBClusters_21628280; MaxRecords: int = 0;
          DBClusterIdentifier: string = ""; Filters: JsonNode = nil;
          IncludeShared: bool = false; Action: string = "DescribeDBClusters";
          Marker: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBClusters
  ## <p>Returns information about provisioned Aurora DB clusters. This API supports pagination.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBClusterIdentifier: string
  ##                      : <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : Optional Boolean parameter that specifies whether the output includes information about clusters shared from other AWS accounts.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeDBClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_21628299 = newJObject()
  add(query_21628299, "MaxRecords", newJInt(MaxRecords))
  add(query_21628299, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  if Filters != nil:
    query_21628299.add "Filters", Filters
  add(query_21628299, "IncludeShared", newJBool(IncludeShared))
  add(query_21628299, "Action", newJString(Action))
  add(query_21628299, "Marker", newJString(Marker))
  add(query_21628299, "Version", newJString(Version))
  result = call_21628298.call(nil, query_21628299, nil, nil, nil)

var getDescribeDBClusters* = Call_GetDescribeDBClusters_21628280(
    name: "getDescribeDBClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBClusters",
    validator: validate_GetDescribeDBClusters_21628281, base: "/",
    makeUrl: url_GetDescribeDBClusters_21628282,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBEngineVersions_21628346 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeDBEngineVersions_21628348(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBEngineVersions_21628347(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628349 = query.getOrDefault("Action")
  valid_21628349 = validateParameter(valid_21628349, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_21628349 != nil:
    section.add "Action", valid_21628349
  var valid_21628350 = query.getOrDefault("Version")
  valid_21628350 = validateParameter(valid_21628350, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628350 != nil:
    section.add "Version", valid_21628350
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628351 = header.getOrDefault("X-Amz-Date")
  valid_21628351 = validateParameter(valid_21628351, JString, required = false,
                                   default = nil)
  if valid_21628351 != nil:
    section.add "X-Amz-Date", valid_21628351
  var valid_21628352 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628352 = validateParameter(valid_21628352, JString, required = false,
                                   default = nil)
  if valid_21628352 != nil:
    section.add "X-Amz-Security-Token", valid_21628352
  var valid_21628353 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628353 = validateParameter(valid_21628353, JString, required = false,
                                   default = nil)
  if valid_21628353 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628353
  var valid_21628354 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628354 = validateParameter(valid_21628354, JString, required = false,
                                   default = nil)
  if valid_21628354 != nil:
    section.add "X-Amz-Algorithm", valid_21628354
  var valid_21628355 = header.getOrDefault("X-Amz-Signature")
  valid_21628355 = validateParameter(valid_21628355, JString, required = false,
                                   default = nil)
  if valid_21628355 != nil:
    section.add "X-Amz-Signature", valid_21628355
  var valid_21628356 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628356 = validateParameter(valid_21628356, JString, required = false,
                                   default = nil)
  if valid_21628356 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628356
  var valid_21628357 = header.getOrDefault("X-Amz-Credential")
  valid_21628357 = validateParameter(valid_21628357, JString, required = false,
                                   default = nil)
  if valid_21628357 != nil:
    section.add "X-Amz-Credential", valid_21628357
  result.add "header", section
  ## parameters in `formData` object:
  ##   ListSupportedCharacterSets: JBool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Engine: JString
  ##         : The database engine to return.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   IncludeAll: JBool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   ListSupportedTimezones: JBool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   DefaultOnly: JBool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  section = newJObject()
  var valid_21628358 = formData.getOrDefault("ListSupportedCharacterSets")
  valid_21628358 = validateParameter(valid_21628358, JBool, required = false,
                                   default = nil)
  if valid_21628358 != nil:
    section.add "ListSupportedCharacterSets", valid_21628358
  var valid_21628359 = formData.getOrDefault("Engine")
  valid_21628359 = validateParameter(valid_21628359, JString, required = false,
                                   default = nil)
  if valid_21628359 != nil:
    section.add "Engine", valid_21628359
  var valid_21628360 = formData.getOrDefault("Marker")
  valid_21628360 = validateParameter(valid_21628360, JString, required = false,
                                   default = nil)
  if valid_21628360 != nil:
    section.add "Marker", valid_21628360
  var valid_21628361 = formData.getOrDefault("DBParameterGroupFamily")
  valid_21628361 = validateParameter(valid_21628361, JString, required = false,
                                   default = nil)
  if valid_21628361 != nil:
    section.add "DBParameterGroupFamily", valid_21628361
  var valid_21628362 = formData.getOrDefault("IncludeAll")
  valid_21628362 = validateParameter(valid_21628362, JBool, required = false,
                                   default = nil)
  if valid_21628362 != nil:
    section.add "IncludeAll", valid_21628362
  var valid_21628363 = formData.getOrDefault("Filters")
  valid_21628363 = validateParameter(valid_21628363, JArray, required = false,
                                   default = nil)
  if valid_21628363 != nil:
    section.add "Filters", valid_21628363
  var valid_21628364 = formData.getOrDefault("MaxRecords")
  valid_21628364 = validateParameter(valid_21628364, JInt, required = false,
                                   default = nil)
  if valid_21628364 != nil:
    section.add "MaxRecords", valid_21628364
  var valid_21628365 = formData.getOrDefault("EngineVersion")
  valid_21628365 = validateParameter(valid_21628365, JString, required = false,
                                   default = nil)
  if valid_21628365 != nil:
    section.add "EngineVersion", valid_21628365
  var valid_21628366 = formData.getOrDefault("ListSupportedTimezones")
  valid_21628366 = validateParameter(valid_21628366, JBool, required = false,
                                   default = nil)
  if valid_21628366 != nil:
    section.add "ListSupportedTimezones", valid_21628366
  var valid_21628367 = formData.getOrDefault("DefaultOnly")
  valid_21628367 = validateParameter(valid_21628367, JBool, required = false,
                                   default = nil)
  if valid_21628367 != nil:
    section.add "DefaultOnly", valid_21628367
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628368: Call_PostDescribeDBEngineVersions_21628346;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_21628368.validator(path, query, header, formData, body, _)
  let scheme = call_21628368.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628368.makeUrl(scheme.get, call_21628368.host, call_21628368.base,
                               call_21628368.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628368, uri, valid, _)

proc call*(call_21628369: Call_PostDescribeDBEngineVersions_21628346;
          ListSupportedCharacterSets: bool = false; Engine: string = "";
          Marker: string = ""; Action: string = "DescribeDBEngineVersions";
          DBParameterGroupFamily: string = ""; IncludeAll: bool = false;
          Filters: JsonNode = nil; MaxRecords: int = 0; EngineVersion: string = "";
          ListSupportedTimezones: bool = false; Version: string = "2014-10-31";
          DefaultOnly: bool = false): Recallable =
  ## postDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   ListSupportedCharacterSets: bool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   Engine: string
  ##         : The database engine to return.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   IncludeAll: bool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   ListSupportedTimezones: bool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Version: string (required)
  ##   DefaultOnly: bool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  var query_21628370 = newJObject()
  var formData_21628371 = newJObject()
  add(formData_21628371, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(formData_21628371, "Engine", newJString(Engine))
  add(formData_21628371, "Marker", newJString(Marker))
  add(query_21628370, "Action", newJString(Action))
  add(formData_21628371, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  add(formData_21628371, "IncludeAll", newJBool(IncludeAll))
  if Filters != nil:
    formData_21628371.add "Filters", Filters
  add(formData_21628371, "MaxRecords", newJInt(MaxRecords))
  add(formData_21628371, "EngineVersion", newJString(EngineVersion))
  add(formData_21628371, "ListSupportedTimezones",
      newJBool(ListSupportedTimezones))
  add(query_21628370, "Version", newJString(Version))
  add(formData_21628371, "DefaultOnly", newJBool(DefaultOnly))
  result = call_21628369.call(nil, query_21628370, nil, formData_21628371, nil)

var postDescribeDBEngineVersions* = Call_PostDescribeDBEngineVersions_21628346(
    name: "postDescribeDBEngineVersions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_PostDescribeDBEngineVersions_21628347, base: "/",
    makeUrl: url_PostDescribeDBEngineVersions_21628348,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBEngineVersions_21628321 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeDBEngineVersions_21628323(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBEngineVersions_21628322(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns a list of the available DB engines.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: JBool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: JString
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   IncludeAll: JBool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   ListSupportedTimezones: JBool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineVersion: JString
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   DefaultOnly: JBool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628324 = query.getOrDefault("Engine")
  valid_21628324 = validateParameter(valid_21628324, JString, required = false,
                                   default = nil)
  if valid_21628324 != nil:
    section.add "Engine", valid_21628324
  var valid_21628325 = query.getOrDefault("ListSupportedCharacterSets")
  valid_21628325 = validateParameter(valid_21628325, JBool, required = false,
                                   default = nil)
  if valid_21628325 != nil:
    section.add "ListSupportedCharacterSets", valid_21628325
  var valid_21628326 = query.getOrDefault("MaxRecords")
  valid_21628326 = validateParameter(valid_21628326, JInt, required = false,
                                   default = nil)
  if valid_21628326 != nil:
    section.add "MaxRecords", valid_21628326
  var valid_21628327 = query.getOrDefault("DBParameterGroupFamily")
  valid_21628327 = validateParameter(valid_21628327, JString, required = false,
                                   default = nil)
  if valid_21628327 != nil:
    section.add "DBParameterGroupFamily", valid_21628327
  var valid_21628328 = query.getOrDefault("Filters")
  valid_21628328 = validateParameter(valid_21628328, JArray, required = false,
                                   default = nil)
  if valid_21628328 != nil:
    section.add "Filters", valid_21628328
  var valid_21628329 = query.getOrDefault("IncludeAll")
  valid_21628329 = validateParameter(valid_21628329, JBool, required = false,
                                   default = nil)
  if valid_21628329 != nil:
    section.add "IncludeAll", valid_21628329
  var valid_21628330 = query.getOrDefault("ListSupportedTimezones")
  valid_21628330 = validateParameter(valid_21628330, JBool, required = false,
                                   default = nil)
  if valid_21628330 != nil:
    section.add "ListSupportedTimezones", valid_21628330
  var valid_21628331 = query.getOrDefault("Action")
  valid_21628331 = validateParameter(valid_21628331, JString, required = true, default = newJString(
      "DescribeDBEngineVersions"))
  if valid_21628331 != nil:
    section.add "Action", valid_21628331
  var valid_21628332 = query.getOrDefault("Marker")
  valid_21628332 = validateParameter(valid_21628332, JString, required = false,
                                   default = nil)
  if valid_21628332 != nil:
    section.add "Marker", valid_21628332
  var valid_21628333 = query.getOrDefault("EngineVersion")
  valid_21628333 = validateParameter(valid_21628333, JString, required = false,
                                   default = nil)
  if valid_21628333 != nil:
    section.add "EngineVersion", valid_21628333
  var valid_21628334 = query.getOrDefault("DefaultOnly")
  valid_21628334 = validateParameter(valid_21628334, JBool, required = false,
                                   default = nil)
  if valid_21628334 != nil:
    section.add "DefaultOnly", valid_21628334
  var valid_21628335 = query.getOrDefault("Version")
  valid_21628335 = validateParameter(valid_21628335, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628335 != nil:
    section.add "Version", valid_21628335
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628336 = header.getOrDefault("X-Amz-Date")
  valid_21628336 = validateParameter(valid_21628336, JString, required = false,
                                   default = nil)
  if valid_21628336 != nil:
    section.add "X-Amz-Date", valid_21628336
  var valid_21628337 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628337 = validateParameter(valid_21628337, JString, required = false,
                                   default = nil)
  if valid_21628337 != nil:
    section.add "X-Amz-Security-Token", valid_21628337
  var valid_21628338 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628338 = validateParameter(valid_21628338, JString, required = false,
                                   default = nil)
  if valid_21628338 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628338
  var valid_21628339 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628339 = validateParameter(valid_21628339, JString, required = false,
                                   default = nil)
  if valid_21628339 != nil:
    section.add "X-Amz-Algorithm", valid_21628339
  var valid_21628340 = header.getOrDefault("X-Amz-Signature")
  valid_21628340 = validateParameter(valid_21628340, JString, required = false,
                                   default = nil)
  if valid_21628340 != nil:
    section.add "X-Amz-Signature", valid_21628340
  var valid_21628341 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628341 = validateParameter(valid_21628341, JString, required = false,
                                   default = nil)
  if valid_21628341 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628341
  var valid_21628342 = header.getOrDefault("X-Amz-Credential")
  valid_21628342 = validateParameter(valid_21628342, JString, required = false,
                                   default = nil)
  if valid_21628342 != nil:
    section.add "X-Amz-Credential", valid_21628342
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628343: Call_GetDescribeDBEngineVersions_21628321;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of the available DB engines.
  ## 
  let valid = call_21628343.validator(path, query, header, formData, body, _)
  let scheme = call_21628343.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628343.makeUrl(scheme.get, call_21628343.host, call_21628343.base,
                               call_21628343.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628343, uri, valid, _)

proc call*(call_21628344: Call_GetDescribeDBEngineVersions_21628321;
          Engine: string = ""; ListSupportedCharacterSets: bool = false;
          MaxRecords: int = 0; DBParameterGroupFamily: string = "";
          Filters: JsonNode = nil; IncludeAll: bool = false;
          ListSupportedTimezones: bool = false;
          Action: string = "DescribeDBEngineVersions"; Marker: string = "";
          EngineVersion: string = ""; DefaultOnly: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBEngineVersions
  ## Returns a list of the available DB engines.
  ##   Engine: string
  ##         : The database engine to return.
  ##   ListSupportedCharacterSets: bool
  ##                             : <p>A value that indicates whether to list the supported character sets for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: string
  ##                         : <p>The name of a specific DB parameter group family to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li> </ul>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   IncludeAll: bool
  ##             : A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.
  ##   ListSupportedTimezones: bool
  ##                         : <p>A value that indicates whether to list the supported time zones for each engine version.</p> <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineVersion: string
  ##                : <p>The database engine version to return.</p> <p>Example: <code>5.1.49</code> </p>
  ##   DefaultOnly: bool
  ##              : A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.
  ##   Version: string (required)
  var query_21628345 = newJObject()
  add(query_21628345, "Engine", newJString(Engine))
  add(query_21628345, "ListSupportedCharacterSets",
      newJBool(ListSupportedCharacterSets))
  add(query_21628345, "MaxRecords", newJInt(MaxRecords))
  add(query_21628345, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Filters != nil:
    query_21628345.add "Filters", Filters
  add(query_21628345, "IncludeAll", newJBool(IncludeAll))
  add(query_21628345, "ListSupportedTimezones", newJBool(ListSupportedTimezones))
  add(query_21628345, "Action", newJString(Action))
  add(query_21628345, "Marker", newJString(Marker))
  add(query_21628345, "EngineVersion", newJString(EngineVersion))
  add(query_21628345, "DefaultOnly", newJBool(DefaultOnly))
  add(query_21628345, "Version", newJString(Version))
  result = call_21628344.call(nil, query_21628345, nil, nil, nil)

var getDescribeDBEngineVersions* = Call_GetDescribeDBEngineVersions_21628321(
    name: "getDescribeDBEngineVersions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBEngineVersions",
    validator: validate_GetDescribeDBEngineVersions_21628322, base: "/",
    makeUrl: url_GetDescribeDBEngineVersions_21628323,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstanceAutomatedBackups_21628392 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeDBInstanceAutomatedBackups_21628394(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBInstanceAutomatedBackups_21628393(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628395 = query.getOrDefault("Action")
  valid_21628395 = validateParameter(valid_21628395, JString, required = true, default = newJString(
      "DescribeDBInstanceAutomatedBackups"))
  if valid_21628395 != nil:
    section.add "Action", valid_21628395
  var valid_21628396 = query.getOrDefault("Version")
  valid_21628396 = validateParameter(valid_21628396, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628396 != nil:
    section.add "Version", valid_21628396
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628397 = header.getOrDefault("X-Amz-Date")
  valid_21628397 = validateParameter(valid_21628397, JString, required = false,
                                   default = nil)
  if valid_21628397 != nil:
    section.add "X-Amz-Date", valid_21628397
  var valid_21628398 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628398 = validateParameter(valid_21628398, JString, required = false,
                                   default = nil)
  if valid_21628398 != nil:
    section.add "X-Amz-Security-Token", valid_21628398
  var valid_21628399 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628399 = validateParameter(valid_21628399, JString, required = false,
                                   default = nil)
  if valid_21628399 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628399
  var valid_21628400 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628400 = validateParameter(valid_21628400, JString, required = false,
                                   default = nil)
  if valid_21628400 != nil:
    section.add "X-Amz-Algorithm", valid_21628400
  var valid_21628401 = header.getOrDefault("X-Amz-Signature")
  valid_21628401 = validateParameter(valid_21628401, JString, required = false,
                                   default = nil)
  if valid_21628401 != nil:
    section.add "X-Amz-Signature", valid_21628401
  var valid_21628402 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628402 = validateParameter(valid_21628402, JString, required = false,
                                   default = nil)
  if valid_21628402 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628402
  var valid_21628403 = header.getOrDefault("X-Amz-Credential")
  valid_21628403 = validateParameter(valid_21628403, JString, required = false,
                                   default = nil)
  if valid_21628403 != nil:
    section.add "X-Amz-Credential", valid_21628403
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   DbiResourceId: JString
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  section = newJObject()
  var valid_21628404 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21628404 = validateParameter(valid_21628404, JString, required = false,
                                   default = nil)
  if valid_21628404 != nil:
    section.add "DBInstanceIdentifier", valid_21628404
  var valid_21628405 = formData.getOrDefault("DbiResourceId")
  valid_21628405 = validateParameter(valid_21628405, JString, required = false,
                                   default = nil)
  if valid_21628405 != nil:
    section.add "DbiResourceId", valid_21628405
  var valid_21628406 = formData.getOrDefault("Marker")
  valid_21628406 = validateParameter(valid_21628406, JString, required = false,
                                   default = nil)
  if valid_21628406 != nil:
    section.add "Marker", valid_21628406
  var valid_21628407 = formData.getOrDefault("Filters")
  valid_21628407 = validateParameter(valid_21628407, JArray, required = false,
                                   default = nil)
  if valid_21628407 != nil:
    section.add "Filters", valid_21628407
  var valid_21628408 = formData.getOrDefault("MaxRecords")
  valid_21628408 = validateParameter(valid_21628408, JInt, required = false,
                                   default = nil)
  if valid_21628408 != nil:
    section.add "MaxRecords", valid_21628408
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628409: Call_PostDescribeDBInstanceAutomatedBackups_21628392;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  let valid = call_21628409.validator(path, query, header, formData, body, _)
  let scheme = call_21628409.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628409.makeUrl(scheme.get, call_21628409.host, call_21628409.base,
                               call_21628409.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628409, uri, valid, _)

proc call*(call_21628410: Call_PostDescribeDBInstanceAutomatedBackups_21628392;
          DBInstanceIdentifier: string = ""; DbiResourceId: string = "";
          Marker: string = "";
          Action: string = "DescribeDBInstanceAutomatedBackups";
          Filters: JsonNode = nil; MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstanceAutomatedBackups
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ##   DBInstanceIdentifier: string
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  ##   DbiResourceId: string
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  ##   Version: string (required)
  var query_21628411 = newJObject()
  var formData_21628412 = newJObject()
  add(formData_21628412, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_21628412, "DbiResourceId", newJString(DbiResourceId))
  add(formData_21628412, "Marker", newJString(Marker))
  add(query_21628411, "Action", newJString(Action))
  if Filters != nil:
    formData_21628412.add "Filters", Filters
  add(formData_21628412, "MaxRecords", newJInt(MaxRecords))
  add(query_21628411, "Version", newJString(Version))
  result = call_21628410.call(nil, query_21628411, nil, formData_21628412, nil)

var postDescribeDBInstanceAutomatedBackups* = Call_PostDescribeDBInstanceAutomatedBackups_21628392(
    name: "postDescribeDBInstanceAutomatedBackups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBInstanceAutomatedBackups",
    validator: validate_PostDescribeDBInstanceAutomatedBackups_21628393,
    base: "/", makeUrl: url_PostDescribeDBInstanceAutomatedBackups_21628394,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstanceAutomatedBackups_21628372 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeDBInstanceAutomatedBackups_21628374(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBInstanceAutomatedBackups_21628373(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   DbiResourceId: JString
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  section = newJObject()
  var valid_21628375 = query.getOrDefault("MaxRecords")
  valid_21628375 = validateParameter(valid_21628375, JInt, required = false,
                                   default = nil)
  if valid_21628375 != nil:
    section.add "MaxRecords", valid_21628375
  var valid_21628376 = query.getOrDefault("Filters")
  valid_21628376 = validateParameter(valid_21628376, JArray, required = false,
                                   default = nil)
  if valid_21628376 != nil:
    section.add "Filters", valid_21628376
  var valid_21628377 = query.getOrDefault("DbiResourceId")
  valid_21628377 = validateParameter(valid_21628377, JString, required = false,
                                   default = nil)
  if valid_21628377 != nil:
    section.add "DbiResourceId", valid_21628377
  var valid_21628378 = query.getOrDefault("Action")
  valid_21628378 = validateParameter(valid_21628378, JString, required = true, default = newJString(
      "DescribeDBInstanceAutomatedBackups"))
  if valid_21628378 != nil:
    section.add "Action", valid_21628378
  var valid_21628379 = query.getOrDefault("Marker")
  valid_21628379 = validateParameter(valid_21628379, JString, required = false,
                                   default = nil)
  if valid_21628379 != nil:
    section.add "Marker", valid_21628379
  var valid_21628380 = query.getOrDefault("Version")
  valid_21628380 = validateParameter(valid_21628380, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628380 != nil:
    section.add "Version", valid_21628380
  var valid_21628381 = query.getOrDefault("DBInstanceIdentifier")
  valid_21628381 = validateParameter(valid_21628381, JString, required = false,
                                   default = nil)
  if valid_21628381 != nil:
    section.add "DBInstanceIdentifier", valid_21628381
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628382 = header.getOrDefault("X-Amz-Date")
  valid_21628382 = validateParameter(valid_21628382, JString, required = false,
                                   default = nil)
  if valid_21628382 != nil:
    section.add "X-Amz-Date", valid_21628382
  var valid_21628383 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628383 = validateParameter(valid_21628383, JString, required = false,
                                   default = nil)
  if valid_21628383 != nil:
    section.add "X-Amz-Security-Token", valid_21628383
  var valid_21628384 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628384 = validateParameter(valid_21628384, JString, required = false,
                                   default = nil)
  if valid_21628384 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628384
  var valid_21628385 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628385 = validateParameter(valid_21628385, JString, required = false,
                                   default = nil)
  if valid_21628385 != nil:
    section.add "X-Amz-Algorithm", valid_21628385
  var valid_21628386 = header.getOrDefault("X-Amz-Signature")
  valid_21628386 = validateParameter(valid_21628386, JString, required = false,
                                   default = nil)
  if valid_21628386 != nil:
    section.add "X-Amz-Signature", valid_21628386
  var valid_21628387 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628387 = validateParameter(valid_21628387, JString, required = false,
                                   default = nil)
  if valid_21628387 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628387
  var valid_21628388 = header.getOrDefault("X-Amz-Credential")
  valid_21628388 = validateParameter(valid_21628388, JString, required = false,
                                   default = nil)
  if valid_21628388 != nil:
    section.add "X-Amz-Credential", valid_21628388
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628389: Call_GetDescribeDBInstanceAutomatedBackups_21628372;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ## 
  let valid = call_21628389.validator(path, query, header, formData, body, _)
  let scheme = call_21628389.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628389.makeUrl(scheme.get, call_21628389.host, call_21628389.base,
                               call_21628389.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628389, uri, valid, _)

proc call*(call_21628390: Call_GetDescribeDBInstanceAutomatedBackups_21628372;
          MaxRecords: int = 0; Filters: JsonNode = nil; DbiResourceId: string = "";
          Action: string = "DescribeDBInstanceAutomatedBackups";
          Marker: string = ""; Version: string = "2014-10-31";
          DBInstanceIdentifier: string = ""): Recallable =
  ## getDescribeDBInstanceAutomatedBackups
  ## <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p> <p>All parameters are optional.</p>
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.
  ##   Filters: JArray
  ##          : <p>A filter that specifies which resources to return based on status.</p> <p>Supported filters are the following:</p> <ul> <li> <p> <code>status</code> </p> <ul> <li> <p> <code>active</code> - automated backups for current instances</p> </li> <li> <p> <code>retained</code> - automated backups for deleted instances</p> </li> <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li> </ul> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.</p> </li> </ul> <p>Returns all resources by default. The status for each resource is specified in the response.</p>
  ##   DbiResourceId: string
  ##                : The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
  ##   Action: string (required)
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string
  ##                       : (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
  var query_21628391 = newJObject()
  add(query_21628391, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21628391.add "Filters", Filters
  add(query_21628391, "DbiResourceId", newJString(DbiResourceId))
  add(query_21628391, "Action", newJString(Action))
  add(query_21628391, "Marker", newJString(Marker))
  add(query_21628391, "Version", newJString(Version))
  add(query_21628391, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_21628390.call(nil, query_21628391, nil, nil, nil)

var getDescribeDBInstanceAutomatedBackups* = Call_GetDescribeDBInstanceAutomatedBackups_21628372(
    name: "getDescribeDBInstanceAutomatedBackups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeDBInstanceAutomatedBackups",
    validator: validate_GetDescribeDBInstanceAutomatedBackups_21628373, base: "/",
    makeUrl: url_GetDescribeDBInstanceAutomatedBackups_21628374,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBInstances_21628432 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeDBInstances_21628434(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBInstances_21628433(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628435 = query.getOrDefault("Action")
  valid_21628435 = validateParameter(valid_21628435, JString, required = true,
                                   default = newJString("DescribeDBInstances"))
  if valid_21628435 != nil:
    section.add "Action", valid_21628435
  var valid_21628436 = query.getOrDefault("Version")
  valid_21628436 = validateParameter(valid_21628436, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628436 != nil:
    section.add "Version", valid_21628436
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628437 = header.getOrDefault("X-Amz-Date")
  valid_21628437 = validateParameter(valid_21628437, JString, required = false,
                                   default = nil)
  if valid_21628437 != nil:
    section.add "X-Amz-Date", valid_21628437
  var valid_21628438 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628438 = validateParameter(valid_21628438, JString, required = false,
                                   default = nil)
  if valid_21628438 != nil:
    section.add "X-Amz-Security-Token", valid_21628438
  var valid_21628439 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628439 = validateParameter(valid_21628439, JString, required = false,
                                   default = nil)
  if valid_21628439 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628439
  var valid_21628440 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628440 = validateParameter(valid_21628440, JString, required = false,
                                   default = nil)
  if valid_21628440 != nil:
    section.add "X-Amz-Algorithm", valid_21628440
  var valid_21628441 = header.getOrDefault("X-Amz-Signature")
  valid_21628441 = validateParameter(valid_21628441, JString, required = false,
                                   default = nil)
  if valid_21628441 != nil:
    section.add "X-Amz-Signature", valid_21628441
  var valid_21628442 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628442 = validateParameter(valid_21628442, JString, required = false,
                                   default = nil)
  if valid_21628442 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628442
  var valid_21628443 = header.getOrDefault("X-Amz-Credential")
  valid_21628443 = validateParameter(valid_21628443, JString, required = false,
                                   default = nil)
  if valid_21628443 != nil:
    section.add "X-Amz-Credential", valid_21628443
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21628444 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21628444 = validateParameter(valid_21628444, JString, required = false,
                                   default = nil)
  if valid_21628444 != nil:
    section.add "DBInstanceIdentifier", valid_21628444
  var valid_21628445 = formData.getOrDefault("Marker")
  valid_21628445 = validateParameter(valid_21628445, JString, required = false,
                                   default = nil)
  if valid_21628445 != nil:
    section.add "Marker", valid_21628445
  var valid_21628446 = formData.getOrDefault("Filters")
  valid_21628446 = validateParameter(valid_21628446, JArray, required = false,
                                   default = nil)
  if valid_21628446 != nil:
    section.add "Filters", valid_21628446
  var valid_21628447 = formData.getOrDefault("MaxRecords")
  valid_21628447 = validateParameter(valid_21628447, JInt, required = false,
                                   default = nil)
  if valid_21628447 != nil:
    section.add "MaxRecords", valid_21628447
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628448: Call_PostDescribeDBInstances_21628432;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  let valid = call_21628448.validator(path, query, header, formData, body, _)
  let scheme = call_21628448.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628448.makeUrl(scheme.get, call_21628448.host, call_21628448.base,
                               call_21628448.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628448, uri, valid, _)

proc call*(call_21628449: Call_PostDescribeDBInstances_21628432;
          DBInstanceIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribeDBInstances"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBInstances
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21628450 = newJObject()
  var formData_21628451 = newJObject()
  add(formData_21628451, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_21628451, "Marker", newJString(Marker))
  add(query_21628450, "Action", newJString(Action))
  if Filters != nil:
    formData_21628451.add "Filters", Filters
  add(formData_21628451, "MaxRecords", newJInt(MaxRecords))
  add(query_21628450, "Version", newJString(Version))
  result = call_21628449.call(nil, query_21628450, nil, formData_21628451, nil)

var postDescribeDBInstances* = Call_PostDescribeDBInstances_21628432(
    name: "postDescribeDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_PostDescribeDBInstances_21628433, base: "/",
    makeUrl: url_PostDescribeDBInstances_21628434,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBInstances_21628413 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeDBInstances_21628415(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBInstances_21628414(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_21628416 = query.getOrDefault("MaxRecords")
  valid_21628416 = validateParameter(valid_21628416, JInt, required = false,
                                   default = nil)
  if valid_21628416 != nil:
    section.add "MaxRecords", valid_21628416
  var valid_21628417 = query.getOrDefault("Filters")
  valid_21628417 = validateParameter(valid_21628417, JArray, required = false,
                                   default = nil)
  if valid_21628417 != nil:
    section.add "Filters", valid_21628417
  var valid_21628418 = query.getOrDefault("Action")
  valid_21628418 = validateParameter(valid_21628418, JString, required = true,
                                   default = newJString("DescribeDBInstances"))
  if valid_21628418 != nil:
    section.add "Action", valid_21628418
  var valid_21628419 = query.getOrDefault("Marker")
  valid_21628419 = validateParameter(valid_21628419, JString, required = false,
                                   default = nil)
  if valid_21628419 != nil:
    section.add "Marker", valid_21628419
  var valid_21628420 = query.getOrDefault("Version")
  valid_21628420 = validateParameter(valid_21628420, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628420 != nil:
    section.add "Version", valid_21628420
  var valid_21628421 = query.getOrDefault("DBInstanceIdentifier")
  valid_21628421 = validateParameter(valid_21628421, JString, required = false,
                                   default = nil)
  if valid_21628421 != nil:
    section.add "DBInstanceIdentifier", valid_21628421
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628422 = header.getOrDefault("X-Amz-Date")
  valid_21628422 = validateParameter(valid_21628422, JString, required = false,
                                   default = nil)
  if valid_21628422 != nil:
    section.add "X-Amz-Date", valid_21628422
  var valid_21628423 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628423 = validateParameter(valid_21628423, JString, required = false,
                                   default = nil)
  if valid_21628423 != nil:
    section.add "X-Amz-Security-Token", valid_21628423
  var valid_21628424 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628424 = validateParameter(valid_21628424, JString, required = false,
                                   default = nil)
  if valid_21628424 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628424
  var valid_21628425 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628425 = validateParameter(valid_21628425, JString, required = false,
                                   default = nil)
  if valid_21628425 != nil:
    section.add "X-Amz-Algorithm", valid_21628425
  var valid_21628426 = header.getOrDefault("X-Amz-Signature")
  valid_21628426 = validateParameter(valid_21628426, JString, required = false,
                                   default = nil)
  if valid_21628426 != nil:
    section.add "X-Amz-Signature", valid_21628426
  var valid_21628427 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628427 = validateParameter(valid_21628427, JString, required = false,
                                   default = nil)
  if valid_21628427 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628427
  var valid_21628428 = header.getOrDefault("X-Amz-Credential")
  valid_21628428 = validateParameter(valid_21628428, JString, required = false,
                                   default = nil)
  if valid_21628428 != nil:
    section.add "X-Amz-Credential", valid_21628428
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628429: Call_GetDescribeDBInstances_21628413;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ## 
  let valid = call_21628429.validator(path, query, header, formData, body, _)
  let scheme = call_21628429.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628429.makeUrl(scheme.get, call_21628429.host, call_21628429.base,
                               call_21628429.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628429, uri, valid, _)

proc call*(call_21628430: Call_GetDescribeDBInstances_21628413;
          MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeDBInstances"; Marker: string = "";
          Version: string = "2014-10-31"; DBInstanceIdentifier: string = ""): Recallable =
  ## getDescribeDBInstances
  ## <p>Returns information about provisioned RDS instances. This API supports pagination.</p> <note> <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB instances to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will only include information about the DB instances identified by these DB instance resource identifiers.</p> </li> <li> <p> <code>domain</code> - Accepts Active Directory directory IDs. The results list will only include information about the DB instances associated with these domains.</p> </li> <li> <p> <code>engine</code> - Accepts engine names. The results list will only include information about the DB instances for these engines.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBInstances</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string
  ##                       : <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  var query_21628431 = newJObject()
  add(query_21628431, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21628431.add "Filters", Filters
  add(query_21628431, "Action", newJString(Action))
  add(query_21628431, "Marker", newJString(Marker))
  add(query_21628431, "Version", newJString(Version))
  add(query_21628431, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_21628430.call(nil, query_21628431, nil, nil, nil)

var getDescribeDBInstances* = Call_GetDescribeDBInstances_21628413(
    name: "getDescribeDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBInstances",
    validator: validate_GetDescribeDBInstances_21628414, base: "/",
    makeUrl: url_GetDescribeDBInstances_21628415,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBLogFiles_21628474 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeDBLogFiles_21628476(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBLogFiles_21628475(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns a list of DB log files for the DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628477 = query.getOrDefault("Action")
  valid_21628477 = validateParameter(valid_21628477, JString, required = true,
                                   default = newJString("DescribeDBLogFiles"))
  if valid_21628477 != nil:
    section.add "Action", valid_21628477
  var valid_21628478 = query.getOrDefault("Version")
  valid_21628478 = validateParameter(valid_21628478, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628478 != nil:
    section.add "Version", valid_21628478
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628479 = header.getOrDefault("X-Amz-Date")
  valid_21628479 = validateParameter(valid_21628479, JString, required = false,
                                   default = nil)
  if valid_21628479 != nil:
    section.add "X-Amz-Date", valid_21628479
  var valid_21628480 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628480 = validateParameter(valid_21628480, JString, required = false,
                                   default = nil)
  if valid_21628480 != nil:
    section.add "X-Amz-Security-Token", valid_21628480
  var valid_21628481 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628481 = validateParameter(valid_21628481, JString, required = false,
                                   default = nil)
  if valid_21628481 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628481
  var valid_21628482 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628482 = validateParameter(valid_21628482, JString, required = false,
                                   default = nil)
  if valid_21628482 != nil:
    section.add "X-Amz-Algorithm", valid_21628482
  var valid_21628483 = header.getOrDefault("X-Amz-Signature")
  valid_21628483 = validateParameter(valid_21628483, JString, required = false,
                                   default = nil)
  if valid_21628483 != nil:
    section.add "X-Amz-Signature", valid_21628483
  var valid_21628484 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628484 = validateParameter(valid_21628484, JString, required = false,
                                   default = nil)
  if valid_21628484 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628484
  var valid_21628485 = header.getOrDefault("X-Amz-Credential")
  valid_21628485 = validateParameter(valid_21628485, JString, required = false,
                                   default = nil)
  if valid_21628485 != nil:
    section.add "X-Amz-Credential", valid_21628485
  result.add "header", section
  ## parameters in `formData` object:
  ##   FilenameContains: JString
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FileSize: JInt
  ##           : Filters the available log files for files larger than the specified size.
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   FileLastWritten: JInt
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  section = newJObject()
  var valid_21628486 = formData.getOrDefault("FilenameContains")
  valid_21628486 = validateParameter(valid_21628486, JString, required = false,
                                   default = nil)
  if valid_21628486 != nil:
    section.add "FilenameContains", valid_21628486
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_21628487 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21628487 = validateParameter(valid_21628487, JString, required = true,
                                   default = nil)
  if valid_21628487 != nil:
    section.add "DBInstanceIdentifier", valid_21628487
  var valid_21628488 = formData.getOrDefault("FileSize")
  valid_21628488 = validateParameter(valid_21628488, JInt, required = false,
                                   default = nil)
  if valid_21628488 != nil:
    section.add "FileSize", valid_21628488
  var valid_21628489 = formData.getOrDefault("Marker")
  valid_21628489 = validateParameter(valid_21628489, JString, required = false,
                                   default = nil)
  if valid_21628489 != nil:
    section.add "Marker", valid_21628489
  var valid_21628490 = formData.getOrDefault("Filters")
  valid_21628490 = validateParameter(valid_21628490, JArray, required = false,
                                   default = nil)
  if valid_21628490 != nil:
    section.add "Filters", valid_21628490
  var valid_21628491 = formData.getOrDefault("MaxRecords")
  valid_21628491 = validateParameter(valid_21628491, JInt, required = false,
                                   default = nil)
  if valid_21628491 != nil:
    section.add "MaxRecords", valid_21628491
  var valid_21628492 = formData.getOrDefault("FileLastWritten")
  valid_21628492 = validateParameter(valid_21628492, JInt, required = false,
                                   default = nil)
  if valid_21628492 != nil:
    section.add "FileLastWritten", valid_21628492
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628493: Call_PostDescribeDBLogFiles_21628474;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of DB log files for the DB instance.
  ## 
  let valid = call_21628493.validator(path, query, header, formData, body, _)
  let scheme = call_21628493.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628493.makeUrl(scheme.get, call_21628493.host, call_21628493.base,
                               call_21628493.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628493, uri, valid, _)

proc call*(call_21628494: Call_PostDescribeDBLogFiles_21628474;
          DBInstanceIdentifier: string; FilenameContains: string = "";
          FileSize: int = 0; Marker: string = ""; Action: string = "DescribeDBLogFiles";
          Filters: JsonNode = nil; MaxRecords: int = 0; FileLastWritten: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBLogFiles
  ## Returns a list of DB log files for the DB instance.
  ##   FilenameContains: string
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   FileSize: int
  ##           : Filters the available log files for files larger than the specified size.
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   FileLastWritten: int
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   Version: string (required)
  var query_21628495 = newJObject()
  var formData_21628496 = newJObject()
  add(formData_21628496, "FilenameContains", newJString(FilenameContains))
  add(formData_21628496, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_21628496, "FileSize", newJInt(FileSize))
  add(formData_21628496, "Marker", newJString(Marker))
  add(query_21628495, "Action", newJString(Action))
  if Filters != nil:
    formData_21628496.add "Filters", Filters
  add(formData_21628496, "MaxRecords", newJInt(MaxRecords))
  add(formData_21628496, "FileLastWritten", newJInt(FileLastWritten))
  add(query_21628495, "Version", newJString(Version))
  result = call_21628494.call(nil, query_21628495, nil, formData_21628496, nil)

var postDescribeDBLogFiles* = Call_PostDescribeDBLogFiles_21628474(
    name: "postDescribeDBLogFiles", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBLogFiles",
    validator: validate_PostDescribeDBLogFiles_21628475, base: "/",
    makeUrl: url_PostDescribeDBLogFiles_21628476,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBLogFiles_21628452 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeDBLogFiles_21628454(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBLogFiles_21628453(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns a list of DB log files for the DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   FileLastWritten: JInt
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   MaxRecords: JInt
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   FilenameContains: JString
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   FileSize: JInt
  ##           : Filters the available log files for files larger than the specified size.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_21628455 = query.getOrDefault("FileLastWritten")
  valid_21628455 = validateParameter(valid_21628455, JInt, required = false,
                                   default = nil)
  if valid_21628455 != nil:
    section.add "FileLastWritten", valid_21628455
  var valid_21628456 = query.getOrDefault("MaxRecords")
  valid_21628456 = validateParameter(valid_21628456, JInt, required = false,
                                   default = nil)
  if valid_21628456 != nil:
    section.add "MaxRecords", valid_21628456
  var valid_21628457 = query.getOrDefault("FilenameContains")
  valid_21628457 = validateParameter(valid_21628457, JString, required = false,
                                   default = nil)
  if valid_21628457 != nil:
    section.add "FilenameContains", valid_21628457
  var valid_21628458 = query.getOrDefault("FileSize")
  valid_21628458 = validateParameter(valid_21628458, JInt, required = false,
                                   default = nil)
  if valid_21628458 != nil:
    section.add "FileSize", valid_21628458
  var valid_21628459 = query.getOrDefault("Filters")
  valid_21628459 = validateParameter(valid_21628459, JArray, required = false,
                                   default = nil)
  if valid_21628459 != nil:
    section.add "Filters", valid_21628459
  var valid_21628460 = query.getOrDefault("Action")
  valid_21628460 = validateParameter(valid_21628460, JString, required = true,
                                   default = newJString("DescribeDBLogFiles"))
  if valid_21628460 != nil:
    section.add "Action", valid_21628460
  var valid_21628461 = query.getOrDefault("Marker")
  valid_21628461 = validateParameter(valid_21628461, JString, required = false,
                                   default = nil)
  if valid_21628461 != nil:
    section.add "Marker", valid_21628461
  var valid_21628462 = query.getOrDefault("Version")
  valid_21628462 = validateParameter(valid_21628462, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628462 != nil:
    section.add "Version", valid_21628462
  var valid_21628463 = query.getOrDefault("DBInstanceIdentifier")
  valid_21628463 = validateParameter(valid_21628463, JString, required = true,
                                   default = nil)
  if valid_21628463 != nil:
    section.add "DBInstanceIdentifier", valid_21628463
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628464 = header.getOrDefault("X-Amz-Date")
  valid_21628464 = validateParameter(valid_21628464, JString, required = false,
                                   default = nil)
  if valid_21628464 != nil:
    section.add "X-Amz-Date", valid_21628464
  var valid_21628465 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628465 = validateParameter(valid_21628465, JString, required = false,
                                   default = nil)
  if valid_21628465 != nil:
    section.add "X-Amz-Security-Token", valid_21628465
  var valid_21628466 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628466 = validateParameter(valid_21628466, JString, required = false,
                                   default = nil)
  if valid_21628466 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628466
  var valid_21628467 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628467 = validateParameter(valid_21628467, JString, required = false,
                                   default = nil)
  if valid_21628467 != nil:
    section.add "X-Amz-Algorithm", valid_21628467
  var valid_21628468 = header.getOrDefault("X-Amz-Signature")
  valid_21628468 = validateParameter(valid_21628468, JString, required = false,
                                   default = nil)
  if valid_21628468 != nil:
    section.add "X-Amz-Signature", valid_21628468
  var valid_21628469 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628469 = validateParameter(valid_21628469, JString, required = false,
                                   default = nil)
  if valid_21628469 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628469
  var valid_21628470 = header.getOrDefault("X-Amz-Credential")
  valid_21628470 = validateParameter(valid_21628470, JString, required = false,
                                   default = nil)
  if valid_21628470 != nil:
    section.add "X-Amz-Credential", valid_21628470
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628471: Call_GetDescribeDBLogFiles_21628452;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of DB log files for the DB instance.
  ## 
  let valid = call_21628471.validator(path, query, header, formData, body, _)
  let scheme = call_21628471.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628471.makeUrl(scheme.get, call_21628471.host, call_21628471.base,
                               call_21628471.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628471, uri, valid, _)

proc call*(call_21628472: Call_GetDescribeDBLogFiles_21628452;
          DBInstanceIdentifier: string; FileLastWritten: int = 0; MaxRecords: int = 0;
          FilenameContains: string = ""; FileSize: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeDBLogFiles"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBLogFiles
  ## Returns a list of DB log files for the DB instance.
  ##   FileLastWritten: int
  ##                  : Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
  ##   MaxRecords: int
  ##             : The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.
  ##   FilenameContains: string
  ##                   : Filters the available log files for log file names that contain the specified string.
  ##   FileSize: int
  ##           : Filters the available log files for files larger than the specified size.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         : The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  var query_21628473 = newJObject()
  add(query_21628473, "FileLastWritten", newJInt(FileLastWritten))
  add(query_21628473, "MaxRecords", newJInt(MaxRecords))
  add(query_21628473, "FilenameContains", newJString(FilenameContains))
  add(query_21628473, "FileSize", newJInt(FileSize))
  if Filters != nil:
    query_21628473.add "Filters", Filters
  add(query_21628473, "Action", newJString(Action))
  add(query_21628473, "Marker", newJString(Marker))
  add(query_21628473, "Version", newJString(Version))
  add(query_21628473, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_21628472.call(nil, query_21628473, nil, nil, nil)

var getDescribeDBLogFiles* = Call_GetDescribeDBLogFiles_21628452(
    name: "getDescribeDBLogFiles", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBLogFiles",
    validator: validate_GetDescribeDBLogFiles_21628453, base: "/",
    makeUrl: url_GetDescribeDBLogFiles_21628454,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameterGroups_21628516 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeDBParameterGroups_21628518(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBParameterGroups_21628517(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628519 = query.getOrDefault("Action")
  valid_21628519 = validateParameter(valid_21628519, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_21628519 != nil:
    section.add "Action", valid_21628519
  var valid_21628520 = query.getOrDefault("Version")
  valid_21628520 = validateParameter(valid_21628520, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628520 != nil:
    section.add "Version", valid_21628520
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628521 = header.getOrDefault("X-Amz-Date")
  valid_21628521 = validateParameter(valid_21628521, JString, required = false,
                                   default = nil)
  if valid_21628521 != nil:
    section.add "X-Amz-Date", valid_21628521
  var valid_21628522 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628522 = validateParameter(valid_21628522, JString, required = false,
                                   default = nil)
  if valid_21628522 != nil:
    section.add "X-Amz-Security-Token", valid_21628522
  var valid_21628523 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628523 = validateParameter(valid_21628523, JString, required = false,
                                   default = nil)
  if valid_21628523 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628523
  var valid_21628524 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628524 = validateParameter(valid_21628524, JString, required = false,
                                   default = nil)
  if valid_21628524 != nil:
    section.add "X-Amz-Algorithm", valid_21628524
  var valid_21628525 = header.getOrDefault("X-Amz-Signature")
  valid_21628525 = validateParameter(valid_21628525, JString, required = false,
                                   default = nil)
  if valid_21628525 != nil:
    section.add "X-Amz-Signature", valid_21628525
  var valid_21628526 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628526 = validateParameter(valid_21628526, JString, required = false,
                                   default = nil)
  if valid_21628526 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628526
  var valid_21628527 = header.getOrDefault("X-Amz-Credential")
  valid_21628527 = validateParameter(valid_21628527, JString, required = false,
                                   default = nil)
  if valid_21628527 != nil:
    section.add "X-Amz-Credential", valid_21628527
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21628528 = formData.getOrDefault("DBParameterGroupName")
  valid_21628528 = validateParameter(valid_21628528, JString, required = false,
                                   default = nil)
  if valid_21628528 != nil:
    section.add "DBParameterGroupName", valid_21628528
  var valid_21628529 = formData.getOrDefault("Marker")
  valid_21628529 = validateParameter(valid_21628529, JString, required = false,
                                   default = nil)
  if valid_21628529 != nil:
    section.add "Marker", valid_21628529
  var valid_21628530 = formData.getOrDefault("Filters")
  valid_21628530 = validateParameter(valid_21628530, JArray, required = false,
                                   default = nil)
  if valid_21628530 != nil:
    section.add "Filters", valid_21628530
  var valid_21628531 = formData.getOrDefault("MaxRecords")
  valid_21628531 = validateParameter(valid_21628531, JInt, required = false,
                                   default = nil)
  if valid_21628531 != nil:
    section.add "MaxRecords", valid_21628531
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628532: Call_PostDescribeDBParameterGroups_21628516;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  let valid = call_21628532.validator(path, query, header, formData, body, _)
  let scheme = call_21628532.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628532.makeUrl(scheme.get, call_21628532.host, call_21628532.base,
                               call_21628532.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628532, uri, valid, _)

proc call*(call_21628533: Call_PostDescribeDBParameterGroups_21628516;
          DBParameterGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBParameterGroups"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBParameterGroups
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21628534 = newJObject()
  var formData_21628535 = newJObject()
  add(formData_21628535, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_21628535, "Marker", newJString(Marker))
  add(query_21628534, "Action", newJString(Action))
  if Filters != nil:
    formData_21628535.add "Filters", Filters
  add(formData_21628535, "MaxRecords", newJInt(MaxRecords))
  add(query_21628534, "Version", newJString(Version))
  result = call_21628533.call(nil, query_21628534, nil, formData_21628535, nil)

var postDescribeDBParameterGroups* = Call_PostDescribeDBParameterGroups_21628516(
    name: "postDescribeDBParameterGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_PostDescribeDBParameterGroups_21628517, base: "/",
    makeUrl: url_PostDescribeDBParameterGroups_21628518,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameterGroups_21628497 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeDBParameterGroups_21628499(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBParameterGroups_21628498(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628500 = query.getOrDefault("MaxRecords")
  valid_21628500 = validateParameter(valid_21628500, JInt, required = false,
                                   default = nil)
  if valid_21628500 != nil:
    section.add "MaxRecords", valid_21628500
  var valid_21628501 = query.getOrDefault("Filters")
  valid_21628501 = validateParameter(valid_21628501, JArray, required = false,
                                   default = nil)
  if valid_21628501 != nil:
    section.add "Filters", valid_21628501
  var valid_21628502 = query.getOrDefault("DBParameterGroupName")
  valid_21628502 = validateParameter(valid_21628502, JString, required = false,
                                   default = nil)
  if valid_21628502 != nil:
    section.add "DBParameterGroupName", valid_21628502
  var valid_21628503 = query.getOrDefault("Action")
  valid_21628503 = validateParameter(valid_21628503, JString, required = true, default = newJString(
      "DescribeDBParameterGroups"))
  if valid_21628503 != nil:
    section.add "Action", valid_21628503
  var valid_21628504 = query.getOrDefault("Marker")
  valid_21628504 = validateParameter(valid_21628504, JString, required = false,
                                   default = nil)
  if valid_21628504 != nil:
    section.add "Marker", valid_21628504
  var valid_21628505 = query.getOrDefault("Version")
  valid_21628505 = validateParameter(valid_21628505, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628505 != nil:
    section.add "Version", valid_21628505
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628506 = header.getOrDefault("X-Amz-Date")
  valid_21628506 = validateParameter(valid_21628506, JString, required = false,
                                   default = nil)
  if valid_21628506 != nil:
    section.add "X-Amz-Date", valid_21628506
  var valid_21628507 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628507 = validateParameter(valid_21628507, JString, required = false,
                                   default = nil)
  if valid_21628507 != nil:
    section.add "X-Amz-Security-Token", valid_21628507
  var valid_21628508 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628508 = validateParameter(valid_21628508, JString, required = false,
                                   default = nil)
  if valid_21628508 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628508
  var valid_21628509 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628509 = validateParameter(valid_21628509, JString, required = false,
                                   default = nil)
  if valid_21628509 != nil:
    section.add "X-Amz-Algorithm", valid_21628509
  var valid_21628510 = header.getOrDefault("X-Amz-Signature")
  valid_21628510 = validateParameter(valid_21628510, JString, required = false,
                                   default = nil)
  if valid_21628510 != nil:
    section.add "X-Amz-Signature", valid_21628510
  var valid_21628511 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628511 = validateParameter(valid_21628511, JString, required = false,
                                   default = nil)
  if valid_21628511 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628511
  var valid_21628512 = header.getOrDefault("X-Amz-Credential")
  valid_21628512 = validateParameter(valid_21628512, JString, required = false,
                                   default = nil)
  if valid_21628512 != nil:
    section.add "X-Amz-Credential", valid_21628512
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628513: Call_GetDescribeDBParameterGroups_21628497;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ## 
  let valid = call_21628513.validator(path, query, header, formData, body, _)
  let scheme = call_21628513.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628513.makeUrl(scheme.get, call_21628513.host, call_21628513.base,
                               call_21628513.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628513, uri, valid, _)

proc call*(call_21628514: Call_GetDescribeDBParameterGroups_21628497;
          MaxRecords: int = 0; Filters: JsonNode = nil;
          DBParameterGroupName: string = "";
          Action: string = "DescribeDBParameterGroups"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBParameterGroups
  ##  Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified, the list will contain only the description of the specified DB parameter group. 
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBParameterGroupName: string
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_21628515 = newJObject()
  add(query_21628515, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21628515.add "Filters", Filters
  add(query_21628515, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_21628515, "Action", newJString(Action))
  add(query_21628515, "Marker", newJString(Marker))
  add(query_21628515, "Version", newJString(Version))
  result = call_21628514.call(nil, query_21628515, nil, nil, nil)

var getDescribeDBParameterGroups* = Call_GetDescribeDBParameterGroups_21628497(
    name: "getDescribeDBParameterGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameterGroups",
    validator: validate_GetDescribeDBParameterGroups_21628498, base: "/",
    makeUrl: url_GetDescribeDBParameterGroups_21628499,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBParameters_21628556 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeDBParameters_21628558(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBParameters_21628557(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628559 = query.getOrDefault("Action")
  valid_21628559 = validateParameter(valid_21628559, JString, required = true,
                                   default = newJString("DescribeDBParameters"))
  if valid_21628559 != nil:
    section.add "Action", valid_21628559
  var valid_21628560 = query.getOrDefault("Version")
  valid_21628560 = validateParameter(valid_21628560, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628560 != nil:
    section.add "Version", valid_21628560
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628561 = header.getOrDefault("X-Amz-Date")
  valid_21628561 = validateParameter(valid_21628561, JString, required = false,
                                   default = nil)
  if valid_21628561 != nil:
    section.add "X-Amz-Date", valid_21628561
  var valid_21628562 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628562 = validateParameter(valid_21628562, JString, required = false,
                                   default = nil)
  if valid_21628562 != nil:
    section.add "X-Amz-Security-Token", valid_21628562
  var valid_21628563 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628563 = validateParameter(valid_21628563, JString, required = false,
                                   default = nil)
  if valid_21628563 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628563
  var valid_21628564 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628564 = validateParameter(valid_21628564, JString, required = false,
                                   default = nil)
  if valid_21628564 != nil:
    section.add "X-Amz-Algorithm", valid_21628564
  var valid_21628565 = header.getOrDefault("X-Amz-Signature")
  valid_21628565 = validateParameter(valid_21628565, JString, required = false,
                                   default = nil)
  if valid_21628565 != nil:
    section.add "X-Amz-Signature", valid_21628565
  var valid_21628566 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628566 = validateParameter(valid_21628566, JString, required = false,
                                   default = nil)
  if valid_21628566 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628566
  var valid_21628567 = header.getOrDefault("X-Amz-Credential")
  valid_21628567 = validateParameter(valid_21628567, JString, required = false,
                                   default = nil)
  if valid_21628567 != nil:
    section.add "X-Amz-Credential", valid_21628567
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_21628568 = formData.getOrDefault("DBParameterGroupName")
  valid_21628568 = validateParameter(valid_21628568, JString, required = true,
                                   default = nil)
  if valid_21628568 != nil:
    section.add "DBParameterGroupName", valid_21628568
  var valid_21628569 = formData.getOrDefault("Marker")
  valid_21628569 = validateParameter(valid_21628569, JString, required = false,
                                   default = nil)
  if valid_21628569 != nil:
    section.add "Marker", valid_21628569
  var valid_21628570 = formData.getOrDefault("Filters")
  valid_21628570 = validateParameter(valid_21628570, JArray, required = false,
                                   default = nil)
  if valid_21628570 != nil:
    section.add "Filters", valid_21628570
  var valid_21628571 = formData.getOrDefault("MaxRecords")
  valid_21628571 = validateParameter(valid_21628571, JInt, required = false,
                                   default = nil)
  if valid_21628571 != nil:
    section.add "MaxRecords", valid_21628571
  var valid_21628572 = formData.getOrDefault("Source")
  valid_21628572 = validateParameter(valid_21628572, JString, required = false,
                                   default = nil)
  if valid_21628572 != nil:
    section.add "Source", valid_21628572
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628573: Call_PostDescribeDBParameters_21628556;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_21628573.validator(path, query, header, formData, body, _)
  let scheme = call_21628573.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628573.makeUrl(scheme.get, call_21628573.host, call_21628573.base,
                               call_21628573.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628573, uri, valid, _)

proc call*(call_21628574: Call_PostDescribeDBParameters_21628556;
          DBParameterGroupName: string; Marker: string = "";
          Action: string = "DescribeDBParameters"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"; Source: string = ""): Recallable =
  ## postDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  var query_21628575 = newJObject()
  var formData_21628576 = newJObject()
  add(formData_21628576, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_21628576, "Marker", newJString(Marker))
  add(query_21628575, "Action", newJString(Action))
  if Filters != nil:
    formData_21628576.add "Filters", Filters
  add(formData_21628576, "MaxRecords", newJInt(MaxRecords))
  add(query_21628575, "Version", newJString(Version))
  add(formData_21628576, "Source", newJString(Source))
  result = call_21628574.call(nil, query_21628575, nil, formData_21628576, nil)

var postDescribeDBParameters* = Call_PostDescribeDBParameters_21628556(
    name: "postDescribeDBParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_PostDescribeDBParameters_21628557, base: "/",
    makeUrl: url_PostDescribeDBParameters_21628558,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBParameters_21628536 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeDBParameters_21628538(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBParameters_21628537(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: JString
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628539 = query.getOrDefault("MaxRecords")
  valid_21628539 = validateParameter(valid_21628539, JInt, required = false,
                                   default = nil)
  if valid_21628539 != nil:
    section.add "MaxRecords", valid_21628539
  var valid_21628540 = query.getOrDefault("Filters")
  valid_21628540 = validateParameter(valid_21628540, JArray, required = false,
                                   default = nil)
  if valid_21628540 != nil:
    section.add "Filters", valid_21628540
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_21628541 = query.getOrDefault("DBParameterGroupName")
  valid_21628541 = validateParameter(valid_21628541, JString, required = true,
                                   default = nil)
  if valid_21628541 != nil:
    section.add "DBParameterGroupName", valid_21628541
  var valid_21628542 = query.getOrDefault("Action")
  valid_21628542 = validateParameter(valid_21628542, JString, required = true,
                                   default = newJString("DescribeDBParameters"))
  if valid_21628542 != nil:
    section.add "Action", valid_21628542
  var valid_21628543 = query.getOrDefault("Marker")
  valid_21628543 = validateParameter(valid_21628543, JString, required = false,
                                   default = nil)
  if valid_21628543 != nil:
    section.add "Marker", valid_21628543
  var valid_21628544 = query.getOrDefault("Source")
  valid_21628544 = validateParameter(valid_21628544, JString, required = false,
                                   default = nil)
  if valid_21628544 != nil:
    section.add "Source", valid_21628544
  var valid_21628545 = query.getOrDefault("Version")
  valid_21628545 = validateParameter(valid_21628545, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628545 != nil:
    section.add "Version", valid_21628545
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628546 = header.getOrDefault("X-Amz-Date")
  valid_21628546 = validateParameter(valid_21628546, JString, required = false,
                                   default = nil)
  if valid_21628546 != nil:
    section.add "X-Amz-Date", valid_21628546
  var valid_21628547 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628547 = validateParameter(valid_21628547, JString, required = false,
                                   default = nil)
  if valid_21628547 != nil:
    section.add "X-Amz-Security-Token", valid_21628547
  var valid_21628548 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628548 = validateParameter(valid_21628548, JString, required = false,
                                   default = nil)
  if valid_21628548 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628548
  var valid_21628549 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628549 = validateParameter(valid_21628549, JString, required = false,
                                   default = nil)
  if valid_21628549 != nil:
    section.add "X-Amz-Algorithm", valid_21628549
  var valid_21628550 = header.getOrDefault("X-Amz-Signature")
  valid_21628550 = validateParameter(valid_21628550, JString, required = false,
                                   default = nil)
  if valid_21628550 != nil:
    section.add "X-Amz-Signature", valid_21628550
  var valid_21628551 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628551 = validateParameter(valid_21628551, JString, required = false,
                                   default = nil)
  if valid_21628551 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628551
  var valid_21628552 = header.getOrDefault("X-Amz-Credential")
  valid_21628552 = validateParameter(valid_21628552, JString, required = false,
                                   default = nil)
  if valid_21628552 != nil:
    section.add "X-Amz-Credential", valid_21628552
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628553: Call_GetDescribeDBParameters_21628536;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns the detailed parameter list for a particular DB parameter group.
  ## 
  let valid = call_21628553.validator(path, query, header, formData, body, _)
  let scheme = call_21628553.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628553.makeUrl(scheme.get, call_21628553.host, call_21628553.base,
                               call_21628553.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628553, uri, valid, _)

proc call*(call_21628554: Call_GetDescribeDBParameters_21628536;
          DBParameterGroupName: string; MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeDBParameters"; Marker: string = "";
          Source: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBParameters
  ## Returns the detailed parameter list for a particular DB parameter group.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of a specific DB parameter group to return details for.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Source: string
  ##         : <p>The parameter types to return.</p> <p>Default: All parameter types returned</p> <p>Valid Values: <code>user | system | engine-default</code> </p>
  ##   Version: string (required)
  var query_21628555 = newJObject()
  add(query_21628555, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21628555.add "Filters", Filters
  add(query_21628555, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_21628555, "Action", newJString(Action))
  add(query_21628555, "Marker", newJString(Marker))
  add(query_21628555, "Source", newJString(Source))
  add(query_21628555, "Version", newJString(Version))
  result = call_21628554.call(nil, query_21628555, nil, nil, nil)

var getDescribeDBParameters* = Call_GetDescribeDBParameters_21628536(
    name: "getDescribeDBParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBParameters",
    validator: validate_GetDescribeDBParameters_21628537, base: "/",
    makeUrl: url_GetDescribeDBParameters_21628538,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBProxies_21628596 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeDBProxies_21628598(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBProxies_21628597(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628599 = query.getOrDefault("Action")
  valid_21628599 = validateParameter(valid_21628599, JString, required = true,
                                   default = newJString("DescribeDBProxies"))
  if valid_21628599 != nil:
    section.add "Action", valid_21628599
  var valid_21628600 = query.getOrDefault("Version")
  valid_21628600 = validateParameter(valid_21628600, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628600 != nil:
    section.add "Version", valid_21628600
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628601 = header.getOrDefault("X-Amz-Date")
  valid_21628601 = validateParameter(valid_21628601, JString, required = false,
                                   default = nil)
  if valid_21628601 != nil:
    section.add "X-Amz-Date", valid_21628601
  var valid_21628602 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628602 = validateParameter(valid_21628602, JString, required = false,
                                   default = nil)
  if valid_21628602 != nil:
    section.add "X-Amz-Security-Token", valid_21628602
  var valid_21628603 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628603 = validateParameter(valid_21628603, JString, required = false,
                                   default = nil)
  if valid_21628603 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628603
  var valid_21628604 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628604 = validateParameter(valid_21628604, JString, required = false,
                                   default = nil)
  if valid_21628604 != nil:
    section.add "X-Amz-Algorithm", valid_21628604
  var valid_21628605 = header.getOrDefault("X-Amz-Signature")
  valid_21628605 = validateParameter(valid_21628605, JString, required = false,
                                   default = nil)
  if valid_21628605 != nil:
    section.add "X-Amz-Signature", valid_21628605
  var valid_21628606 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628606 = validateParameter(valid_21628606, JString, required = false,
                                   default = nil)
  if valid_21628606 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628606
  var valid_21628607 = header.getOrDefault("X-Amz-Credential")
  valid_21628607 = validateParameter(valid_21628607, JString, required = false,
                                   default = nil)
  if valid_21628607 != nil:
    section.add "X-Amz-Credential", valid_21628607
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBProxyName: JString
  ##              : The name of the DB proxy.
  section = newJObject()
  var valid_21628608 = formData.getOrDefault("Marker")
  valid_21628608 = validateParameter(valid_21628608, JString, required = false,
                                   default = nil)
  if valid_21628608 != nil:
    section.add "Marker", valid_21628608
  var valid_21628609 = formData.getOrDefault("Filters")
  valid_21628609 = validateParameter(valid_21628609, JArray, required = false,
                                   default = nil)
  if valid_21628609 != nil:
    section.add "Filters", valid_21628609
  var valid_21628610 = formData.getOrDefault("MaxRecords")
  valid_21628610 = validateParameter(valid_21628610, JInt, required = false,
                                   default = nil)
  if valid_21628610 != nil:
    section.add "MaxRecords", valid_21628610
  var valid_21628611 = formData.getOrDefault("DBProxyName")
  valid_21628611 = validateParameter(valid_21628611, JString, required = false,
                                   default = nil)
  if valid_21628611 != nil:
    section.add "DBProxyName", valid_21628611
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628612: Call_PostDescribeDBProxies_21628596;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  let valid = call_21628612.validator(path, query, header, formData, body, _)
  let scheme = call_21628612.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628612.makeUrl(scheme.get, call_21628612.host, call_21628612.base,
                               call_21628612.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628612, uri, valid, _)

proc call*(call_21628613: Call_PostDescribeDBProxies_21628596; Marker: string = "";
          Action: string = "DescribeDBProxies"; Filters: JsonNode = nil;
          MaxRecords: int = 0; DBProxyName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBProxies
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBProxyName: string
  ##              : The name of the DB proxy.
  ##   Version: string (required)
  var query_21628614 = newJObject()
  var formData_21628615 = newJObject()
  add(formData_21628615, "Marker", newJString(Marker))
  add(query_21628614, "Action", newJString(Action))
  if Filters != nil:
    formData_21628615.add "Filters", Filters
  add(formData_21628615, "MaxRecords", newJInt(MaxRecords))
  add(formData_21628615, "DBProxyName", newJString(DBProxyName))
  add(query_21628614, "Version", newJString(Version))
  result = call_21628613.call(nil, query_21628614, nil, formData_21628615, nil)

var postDescribeDBProxies* = Call_PostDescribeDBProxies_21628596(
    name: "postDescribeDBProxies", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxies",
    validator: validate_PostDescribeDBProxies_21628597, base: "/",
    makeUrl: url_PostDescribeDBProxies_21628598,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBProxies_21628577 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeDBProxies_21628579(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBProxies_21628578(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: JString
  ##              : The name of the DB proxy.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628580 = query.getOrDefault("MaxRecords")
  valid_21628580 = validateParameter(valid_21628580, JInt, required = false,
                                   default = nil)
  if valid_21628580 != nil:
    section.add "MaxRecords", valid_21628580
  var valid_21628581 = query.getOrDefault("Filters")
  valid_21628581 = validateParameter(valid_21628581, JArray, required = false,
                                   default = nil)
  if valid_21628581 != nil:
    section.add "Filters", valid_21628581
  var valid_21628582 = query.getOrDefault("Action")
  valid_21628582 = validateParameter(valid_21628582, JString, required = true,
                                   default = newJString("DescribeDBProxies"))
  if valid_21628582 != nil:
    section.add "Action", valid_21628582
  var valid_21628583 = query.getOrDefault("Marker")
  valid_21628583 = validateParameter(valid_21628583, JString, required = false,
                                   default = nil)
  if valid_21628583 != nil:
    section.add "Marker", valid_21628583
  var valid_21628584 = query.getOrDefault("DBProxyName")
  valid_21628584 = validateParameter(valid_21628584, JString, required = false,
                                   default = nil)
  if valid_21628584 != nil:
    section.add "DBProxyName", valid_21628584
  var valid_21628585 = query.getOrDefault("Version")
  valid_21628585 = validateParameter(valid_21628585, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628585 != nil:
    section.add "Version", valid_21628585
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628586 = header.getOrDefault("X-Amz-Date")
  valid_21628586 = validateParameter(valid_21628586, JString, required = false,
                                   default = nil)
  if valid_21628586 != nil:
    section.add "X-Amz-Date", valid_21628586
  var valid_21628587 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628587 = validateParameter(valid_21628587, JString, required = false,
                                   default = nil)
  if valid_21628587 != nil:
    section.add "X-Amz-Security-Token", valid_21628587
  var valid_21628588 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628588 = validateParameter(valid_21628588, JString, required = false,
                                   default = nil)
  if valid_21628588 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628588
  var valid_21628589 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628589 = validateParameter(valid_21628589, JString, required = false,
                                   default = nil)
  if valid_21628589 != nil:
    section.add "X-Amz-Algorithm", valid_21628589
  var valid_21628590 = header.getOrDefault("X-Amz-Signature")
  valid_21628590 = validateParameter(valid_21628590, JString, required = false,
                                   default = nil)
  if valid_21628590 != nil:
    section.add "X-Amz-Signature", valid_21628590
  var valid_21628591 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628591 = validateParameter(valid_21628591, JString, required = false,
                                   default = nil)
  if valid_21628591 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628591
  var valid_21628592 = header.getOrDefault("X-Amz-Credential")
  valid_21628592 = validateParameter(valid_21628592, JString, required = false,
                                   default = nil)
  if valid_21628592 != nil:
    section.add "X-Amz-Credential", valid_21628592
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628593: Call_GetDescribeDBProxies_21628577; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ## 
  let valid = call_21628593.validator(path, query, header, formData, body, _)
  let scheme = call_21628593.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628593.makeUrl(scheme.get, call_21628593.host, call_21628593.base,
                               call_21628593.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628593, uri, valid, _)

proc call*(call_21628594: Call_GetDescribeDBProxies_21628577; MaxRecords: int = 0;
          Filters: JsonNode = nil; Action: string = "DescribeDBProxies";
          Marker: string = ""; DBProxyName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBProxies
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxies.</p>
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: string
  ##              : The name of the DB proxy.
  ##   Version: string (required)
  var query_21628595 = newJObject()
  add(query_21628595, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21628595.add "Filters", Filters
  add(query_21628595, "Action", newJString(Action))
  add(query_21628595, "Marker", newJString(Marker))
  add(query_21628595, "DBProxyName", newJString(DBProxyName))
  add(query_21628595, "Version", newJString(Version))
  result = call_21628594.call(nil, query_21628595, nil, nil, nil)

var getDescribeDBProxies* = Call_GetDescribeDBProxies_21628577(
    name: "getDescribeDBProxies", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxies",
    validator: validate_GetDescribeDBProxies_21628578, base: "/",
    makeUrl: url_GetDescribeDBProxies_21628579,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBProxyTargetGroups_21628636 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeDBProxyTargetGroups_21628638(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBProxyTargetGroups_21628637(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628639 = query.getOrDefault("Action")
  valid_21628639 = validateParameter(valid_21628639, JString, required = true, default = newJString(
      "DescribeDBProxyTargetGroups"))
  if valid_21628639 != nil:
    section.add "Action", valid_21628639
  var valid_21628640 = query.getOrDefault("Version")
  valid_21628640 = validateParameter(valid_21628640, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628640 != nil:
    section.add "Version", valid_21628640
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628641 = header.getOrDefault("X-Amz-Date")
  valid_21628641 = validateParameter(valid_21628641, JString, required = false,
                                   default = nil)
  if valid_21628641 != nil:
    section.add "X-Amz-Date", valid_21628641
  var valid_21628642 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628642 = validateParameter(valid_21628642, JString, required = false,
                                   default = nil)
  if valid_21628642 != nil:
    section.add "X-Amz-Security-Token", valid_21628642
  var valid_21628643 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628643 = validateParameter(valid_21628643, JString, required = false,
                                   default = nil)
  if valid_21628643 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628643
  var valid_21628644 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628644 = validateParameter(valid_21628644, JString, required = false,
                                   default = nil)
  if valid_21628644 != nil:
    section.add "X-Amz-Algorithm", valid_21628644
  var valid_21628645 = header.getOrDefault("X-Amz-Signature")
  valid_21628645 = validateParameter(valid_21628645, JString, required = false,
                                   default = nil)
  if valid_21628645 != nil:
    section.add "X-Amz-Signature", valid_21628645
  var valid_21628646 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628646 = validateParameter(valid_21628646, JString, required = false,
                                   default = nil)
  if valid_21628646 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628646
  var valid_21628647 = header.getOrDefault("X-Amz-Credential")
  valid_21628647 = validateParameter(valid_21628647, JString, required = false,
                                   default = nil)
  if valid_21628647 != nil:
    section.add "X-Amz-Credential", valid_21628647
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  section = newJObject()
  var valid_21628648 = formData.getOrDefault("Marker")
  valid_21628648 = validateParameter(valid_21628648, JString, required = false,
                                   default = nil)
  if valid_21628648 != nil:
    section.add "Marker", valid_21628648
  var valid_21628649 = formData.getOrDefault("TargetGroupName")
  valid_21628649 = validateParameter(valid_21628649, JString, required = false,
                                   default = nil)
  if valid_21628649 != nil:
    section.add "TargetGroupName", valid_21628649
  var valid_21628650 = formData.getOrDefault("Filters")
  valid_21628650 = validateParameter(valid_21628650, JArray, required = false,
                                   default = nil)
  if valid_21628650 != nil:
    section.add "Filters", valid_21628650
  var valid_21628651 = formData.getOrDefault("MaxRecords")
  valid_21628651 = validateParameter(valid_21628651, JInt, required = false,
                                   default = nil)
  if valid_21628651 != nil:
    section.add "MaxRecords", valid_21628651
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_21628652 = formData.getOrDefault("DBProxyName")
  valid_21628652 = validateParameter(valid_21628652, JString, required = true,
                                   default = nil)
  if valid_21628652 != nil:
    section.add "DBProxyName", valid_21628652
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628653: Call_PostDescribeDBProxyTargetGroups_21628636;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  let valid = call_21628653.validator(path, query, header, formData, body, _)
  let scheme = call_21628653.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628653.makeUrl(scheme.get, call_21628653.host, call_21628653.base,
                               call_21628653.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628653, uri, valid, _)

proc call*(call_21628654: Call_PostDescribeDBProxyTargetGroups_21628636;
          DBProxyName: string; Marker: string = "";
          Action: string = "DescribeDBProxyTargetGroups";
          TargetGroupName: string = ""; Filters: JsonNode = nil; MaxRecords: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBProxyTargetGroups
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Version: string (required)
  var query_21628655 = newJObject()
  var formData_21628656 = newJObject()
  add(formData_21628656, "Marker", newJString(Marker))
  add(query_21628655, "Action", newJString(Action))
  add(formData_21628656, "TargetGroupName", newJString(TargetGroupName))
  if Filters != nil:
    formData_21628656.add "Filters", Filters
  add(formData_21628656, "MaxRecords", newJInt(MaxRecords))
  add(formData_21628656, "DBProxyName", newJString(DBProxyName))
  add(query_21628655, "Version", newJString(Version))
  result = call_21628654.call(nil, query_21628655, nil, formData_21628656, nil)

var postDescribeDBProxyTargetGroups* = Call_PostDescribeDBProxyTargetGroups_21628636(
    name: "postDescribeDBProxyTargetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargetGroups",
    validator: validate_PostDescribeDBProxyTargetGroups_21628637, base: "/",
    makeUrl: url_PostDescribeDBProxyTargetGroups_21628638,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBProxyTargetGroups_21628616 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeDBProxyTargetGroups_21628618(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBProxyTargetGroups_21628617(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628619 = query.getOrDefault("MaxRecords")
  valid_21628619 = validateParameter(valid_21628619, JInt, required = false,
                                   default = nil)
  if valid_21628619 != nil:
    section.add "MaxRecords", valid_21628619
  var valid_21628620 = query.getOrDefault("TargetGroupName")
  valid_21628620 = validateParameter(valid_21628620, JString, required = false,
                                   default = nil)
  if valid_21628620 != nil:
    section.add "TargetGroupName", valid_21628620
  var valid_21628621 = query.getOrDefault("Filters")
  valid_21628621 = validateParameter(valid_21628621, JArray, required = false,
                                   default = nil)
  if valid_21628621 != nil:
    section.add "Filters", valid_21628621
  var valid_21628622 = query.getOrDefault("Action")
  valid_21628622 = validateParameter(valid_21628622, JString, required = true, default = newJString(
      "DescribeDBProxyTargetGroups"))
  if valid_21628622 != nil:
    section.add "Action", valid_21628622
  var valid_21628623 = query.getOrDefault("Marker")
  valid_21628623 = validateParameter(valid_21628623, JString, required = false,
                                   default = nil)
  if valid_21628623 != nil:
    section.add "Marker", valid_21628623
  var valid_21628624 = query.getOrDefault("DBProxyName")
  valid_21628624 = validateParameter(valid_21628624, JString, required = true,
                                   default = nil)
  if valid_21628624 != nil:
    section.add "DBProxyName", valid_21628624
  var valid_21628625 = query.getOrDefault("Version")
  valid_21628625 = validateParameter(valid_21628625, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628625 != nil:
    section.add "Version", valid_21628625
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628626 = header.getOrDefault("X-Amz-Date")
  valid_21628626 = validateParameter(valid_21628626, JString, required = false,
                                   default = nil)
  if valid_21628626 != nil:
    section.add "X-Amz-Date", valid_21628626
  var valid_21628627 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628627 = validateParameter(valid_21628627, JString, required = false,
                                   default = nil)
  if valid_21628627 != nil:
    section.add "X-Amz-Security-Token", valid_21628627
  var valid_21628628 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628628 = validateParameter(valid_21628628, JString, required = false,
                                   default = nil)
  if valid_21628628 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628628
  var valid_21628629 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628629 = validateParameter(valid_21628629, JString, required = false,
                                   default = nil)
  if valid_21628629 != nil:
    section.add "X-Amz-Algorithm", valid_21628629
  var valid_21628630 = header.getOrDefault("X-Amz-Signature")
  valid_21628630 = validateParameter(valid_21628630, JString, required = false,
                                   default = nil)
  if valid_21628630 != nil:
    section.add "X-Amz-Signature", valid_21628630
  var valid_21628631 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628631 = validateParameter(valid_21628631, JString, required = false,
                                   default = nil)
  if valid_21628631 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628631
  var valid_21628632 = header.getOrDefault("X-Amz-Credential")
  valid_21628632 = validateParameter(valid_21628632, JString, required = false,
                                   default = nil)
  if valid_21628632 != nil:
    section.add "X-Amz-Credential", valid_21628632
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628633: Call_GetDescribeDBProxyTargetGroups_21628616;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ## 
  let valid = call_21628633.validator(path, query, header, formData, body, _)
  let scheme = call_21628633.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628633.makeUrl(scheme.get, call_21628633.host, call_21628633.base,
                               call_21628633.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628633, uri, valid, _)

proc call*(call_21628634: Call_GetDescribeDBProxyTargetGroups_21628616;
          DBProxyName: string; MaxRecords: int = 0; TargetGroupName: string = "";
          Filters: JsonNode = nil; Action: string = "DescribeDBProxyTargetGroups";
          Marker: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBProxyTargetGroups
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> associated with the target group.
  ##   Version: string (required)
  var query_21628635 = newJObject()
  add(query_21628635, "MaxRecords", newJInt(MaxRecords))
  add(query_21628635, "TargetGroupName", newJString(TargetGroupName))
  if Filters != nil:
    query_21628635.add "Filters", Filters
  add(query_21628635, "Action", newJString(Action))
  add(query_21628635, "Marker", newJString(Marker))
  add(query_21628635, "DBProxyName", newJString(DBProxyName))
  add(query_21628635, "Version", newJString(Version))
  result = call_21628634.call(nil, query_21628635, nil, nil, nil)

var getDescribeDBProxyTargetGroups* = Call_GetDescribeDBProxyTargetGroups_21628616(
    name: "getDescribeDBProxyTargetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargetGroups",
    validator: validate_GetDescribeDBProxyTargetGroups_21628617, base: "/",
    makeUrl: url_GetDescribeDBProxyTargetGroups_21628618,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBProxyTargets_21628677 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeDBProxyTargets_21628679(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBProxyTargets_21628678(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628680 = query.getOrDefault("Action")
  valid_21628680 = validateParameter(valid_21628680, JString, required = true, default = newJString(
      "DescribeDBProxyTargets"))
  if valid_21628680 != nil:
    section.add "Action", valid_21628680
  var valid_21628681 = query.getOrDefault("Version")
  valid_21628681 = validateParameter(valid_21628681, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628681 != nil:
    section.add "Version", valid_21628681
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628682 = header.getOrDefault("X-Amz-Date")
  valid_21628682 = validateParameter(valid_21628682, JString, required = false,
                                   default = nil)
  if valid_21628682 != nil:
    section.add "X-Amz-Date", valid_21628682
  var valid_21628683 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628683 = validateParameter(valid_21628683, JString, required = false,
                                   default = nil)
  if valid_21628683 != nil:
    section.add "X-Amz-Security-Token", valid_21628683
  var valid_21628684 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628684 = validateParameter(valid_21628684, JString, required = false,
                                   default = nil)
  if valid_21628684 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628684
  var valid_21628685 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628685 = validateParameter(valid_21628685, JString, required = false,
                                   default = nil)
  if valid_21628685 != nil:
    section.add "X-Amz-Algorithm", valid_21628685
  var valid_21628686 = header.getOrDefault("X-Amz-Signature")
  valid_21628686 = validateParameter(valid_21628686, JString, required = false,
                                   default = nil)
  if valid_21628686 != nil:
    section.add "X-Amz-Signature", valid_21628686
  var valid_21628687 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628687 = validateParameter(valid_21628687, JString, required = false,
                                   default = nil)
  if valid_21628687 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628687
  var valid_21628688 = header.getOrDefault("X-Amz-Credential")
  valid_21628688 = validateParameter(valid_21628688, JString, required = false,
                                   default = nil)
  if valid_21628688 != nil:
    section.add "X-Amz-Credential", valid_21628688
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  section = newJObject()
  var valid_21628689 = formData.getOrDefault("Marker")
  valid_21628689 = validateParameter(valid_21628689, JString, required = false,
                                   default = nil)
  if valid_21628689 != nil:
    section.add "Marker", valid_21628689
  var valid_21628690 = formData.getOrDefault("TargetGroupName")
  valid_21628690 = validateParameter(valid_21628690, JString, required = false,
                                   default = nil)
  if valid_21628690 != nil:
    section.add "TargetGroupName", valid_21628690
  var valid_21628691 = formData.getOrDefault("Filters")
  valid_21628691 = validateParameter(valid_21628691, JArray, required = false,
                                   default = nil)
  if valid_21628691 != nil:
    section.add "Filters", valid_21628691
  var valid_21628692 = formData.getOrDefault("MaxRecords")
  valid_21628692 = validateParameter(valid_21628692, JInt, required = false,
                                   default = nil)
  if valid_21628692 != nil:
    section.add "MaxRecords", valid_21628692
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_21628693 = formData.getOrDefault("DBProxyName")
  valid_21628693 = validateParameter(valid_21628693, JString, required = true,
                                   default = nil)
  if valid_21628693 != nil:
    section.add "DBProxyName", valid_21628693
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628694: Call_PostDescribeDBProxyTargets_21628677;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  let valid = call_21628694.validator(path, query, header, formData, body, _)
  let scheme = call_21628694.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628694.makeUrl(scheme.get, call_21628694.host, call_21628694.base,
                               call_21628694.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628694, uri, valid, _)

proc call*(call_21628695: Call_PostDescribeDBProxyTargets_21628677;
          DBProxyName: string; Marker: string = "";
          Action: string = "DescribeDBProxyTargets"; TargetGroupName: string = "";
          Filters: JsonNode = nil; MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Version: string (required)
  var query_21628696 = newJObject()
  var formData_21628697 = newJObject()
  add(formData_21628697, "Marker", newJString(Marker))
  add(query_21628696, "Action", newJString(Action))
  add(formData_21628697, "TargetGroupName", newJString(TargetGroupName))
  if Filters != nil:
    formData_21628697.add "Filters", Filters
  add(formData_21628697, "MaxRecords", newJInt(MaxRecords))
  add(formData_21628697, "DBProxyName", newJString(DBProxyName))
  add(query_21628696, "Version", newJString(Version))
  result = call_21628695.call(nil, query_21628696, nil, formData_21628697, nil)

var postDescribeDBProxyTargets* = Call_PostDescribeDBProxyTargets_21628677(
    name: "postDescribeDBProxyTargets", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargets",
    validator: validate_PostDescribeDBProxyTargets_21628678, base: "/",
    makeUrl: url_PostDescribeDBProxyTargets_21628679,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBProxyTargets_21628657 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeDBProxyTargets_21628659(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBProxyTargets_21628658(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628660 = query.getOrDefault("MaxRecords")
  valid_21628660 = validateParameter(valid_21628660, JInt, required = false,
                                   default = nil)
  if valid_21628660 != nil:
    section.add "MaxRecords", valid_21628660
  var valid_21628661 = query.getOrDefault("TargetGroupName")
  valid_21628661 = validateParameter(valid_21628661, JString, required = false,
                                   default = nil)
  if valid_21628661 != nil:
    section.add "TargetGroupName", valid_21628661
  var valid_21628662 = query.getOrDefault("Filters")
  valid_21628662 = validateParameter(valid_21628662, JArray, required = false,
                                   default = nil)
  if valid_21628662 != nil:
    section.add "Filters", valid_21628662
  var valid_21628663 = query.getOrDefault("Action")
  valid_21628663 = validateParameter(valid_21628663, JString, required = true, default = newJString(
      "DescribeDBProxyTargets"))
  if valid_21628663 != nil:
    section.add "Action", valid_21628663
  var valid_21628664 = query.getOrDefault("Marker")
  valid_21628664 = validateParameter(valid_21628664, JString, required = false,
                                   default = nil)
  if valid_21628664 != nil:
    section.add "Marker", valid_21628664
  var valid_21628665 = query.getOrDefault("DBProxyName")
  valid_21628665 = validateParameter(valid_21628665, JString, required = true,
                                   default = nil)
  if valid_21628665 != nil:
    section.add "DBProxyName", valid_21628665
  var valid_21628666 = query.getOrDefault("Version")
  valid_21628666 = validateParameter(valid_21628666, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628666 != nil:
    section.add "Version", valid_21628666
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628667 = header.getOrDefault("X-Amz-Date")
  valid_21628667 = validateParameter(valid_21628667, JString, required = false,
                                   default = nil)
  if valid_21628667 != nil:
    section.add "X-Amz-Date", valid_21628667
  var valid_21628668 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628668 = validateParameter(valid_21628668, JString, required = false,
                                   default = nil)
  if valid_21628668 != nil:
    section.add "X-Amz-Security-Token", valid_21628668
  var valid_21628669 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628669 = validateParameter(valid_21628669, JString, required = false,
                                   default = nil)
  if valid_21628669 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628669
  var valid_21628670 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628670 = validateParameter(valid_21628670, JString, required = false,
                                   default = nil)
  if valid_21628670 != nil:
    section.add "X-Amz-Algorithm", valid_21628670
  var valid_21628671 = header.getOrDefault("X-Amz-Signature")
  valid_21628671 = validateParameter(valid_21628671, JString, required = false,
                                   default = nil)
  if valid_21628671 != nil:
    section.add "X-Amz-Signature", valid_21628671
  var valid_21628672 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628672 = validateParameter(valid_21628672, JString, required = false,
                                   default = nil)
  if valid_21628672 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628672
  var valid_21628673 = header.getOrDefault("X-Amz-Credential")
  valid_21628673 = validateParameter(valid_21628673, JString, required = false,
                                   default = nil)
  if valid_21628673 != nil:
    section.add "X-Amz-Credential", valid_21628673
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628674: Call_GetDescribeDBProxyTargets_21628657;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ## 
  let valid = call_21628674.validator(path, query, header, formData, body, _)
  let scheme = call_21628674.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628674.makeUrl(scheme.get, call_21628674.host, call_21628674.base,
                               call_21628674.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628674, uri, valid, _)

proc call*(call_21628675: Call_GetDescribeDBProxyTargets_21628657;
          DBProxyName: string; MaxRecords: int = 0; TargetGroupName: string = "";
          Filters: JsonNode = nil; Action: string = "DescribeDBProxyTargets";
          Marker: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code> to describe.
  ##   Filters: JArray
  ##          : This parameter is not currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxyTarget</code> to describe.
  ##   Version: string (required)
  var query_21628676 = newJObject()
  add(query_21628676, "MaxRecords", newJInt(MaxRecords))
  add(query_21628676, "TargetGroupName", newJString(TargetGroupName))
  if Filters != nil:
    query_21628676.add "Filters", Filters
  add(query_21628676, "Action", newJString(Action))
  add(query_21628676, "Marker", newJString(Marker))
  add(query_21628676, "DBProxyName", newJString(DBProxyName))
  add(query_21628676, "Version", newJString(Version))
  result = call_21628675.call(nil, query_21628676, nil, nil, nil)

var getDescribeDBProxyTargets* = Call_GetDescribeDBProxyTargets_21628657(
    name: "getDescribeDBProxyTargets", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBProxyTargets",
    validator: validate_GetDescribeDBProxyTargets_21628658, base: "/",
    makeUrl: url_GetDescribeDBProxyTargets_21628659,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSecurityGroups_21628717 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeDBSecurityGroups_21628719(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSecurityGroups_21628718(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628720 = query.getOrDefault("Action")
  valid_21628720 = validateParameter(valid_21628720, JString, required = true, default = newJString(
      "DescribeDBSecurityGroups"))
  if valid_21628720 != nil:
    section.add "Action", valid_21628720
  var valid_21628721 = query.getOrDefault("Version")
  valid_21628721 = validateParameter(valid_21628721, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628721 != nil:
    section.add "Version", valid_21628721
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628722 = header.getOrDefault("X-Amz-Date")
  valid_21628722 = validateParameter(valid_21628722, JString, required = false,
                                   default = nil)
  if valid_21628722 != nil:
    section.add "X-Amz-Date", valid_21628722
  var valid_21628723 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628723 = validateParameter(valid_21628723, JString, required = false,
                                   default = nil)
  if valid_21628723 != nil:
    section.add "X-Amz-Security-Token", valid_21628723
  var valid_21628724 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628724 = validateParameter(valid_21628724, JString, required = false,
                                   default = nil)
  if valid_21628724 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628724
  var valid_21628725 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628725 = validateParameter(valid_21628725, JString, required = false,
                                   default = nil)
  if valid_21628725 != nil:
    section.add "X-Amz-Algorithm", valid_21628725
  var valid_21628726 = header.getOrDefault("X-Amz-Signature")
  valid_21628726 = validateParameter(valid_21628726, JString, required = false,
                                   default = nil)
  if valid_21628726 != nil:
    section.add "X-Amz-Signature", valid_21628726
  var valid_21628727 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628727 = validateParameter(valid_21628727, JString, required = false,
                                   default = nil)
  if valid_21628727 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628727
  var valid_21628728 = header.getOrDefault("X-Amz-Credential")
  valid_21628728 = validateParameter(valid_21628728, JString, required = false,
                                   default = nil)
  if valid_21628728 != nil:
    section.add "X-Amz-Credential", valid_21628728
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString
  ##                      : The name of the DB security group to return details for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21628729 = formData.getOrDefault("DBSecurityGroupName")
  valid_21628729 = validateParameter(valid_21628729, JString, required = false,
                                   default = nil)
  if valid_21628729 != nil:
    section.add "DBSecurityGroupName", valid_21628729
  var valid_21628730 = formData.getOrDefault("Marker")
  valid_21628730 = validateParameter(valid_21628730, JString, required = false,
                                   default = nil)
  if valid_21628730 != nil:
    section.add "Marker", valid_21628730
  var valid_21628731 = formData.getOrDefault("Filters")
  valid_21628731 = validateParameter(valid_21628731, JArray, required = false,
                                   default = nil)
  if valid_21628731 != nil:
    section.add "Filters", valid_21628731
  var valid_21628732 = formData.getOrDefault("MaxRecords")
  valid_21628732 = validateParameter(valid_21628732, JInt, required = false,
                                   default = nil)
  if valid_21628732 != nil:
    section.add "MaxRecords", valid_21628732
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628733: Call_PostDescribeDBSecurityGroups_21628717;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  let valid = call_21628733.validator(path, query, header, formData, body, _)
  let scheme = call_21628733.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628733.makeUrl(scheme.get, call_21628733.host, call_21628733.base,
                               call_21628733.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628733, uri, valid, _)

proc call*(call_21628734: Call_PostDescribeDBSecurityGroups_21628717;
          DBSecurityGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBSecurityGroups"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSecurityGroups
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ##   DBSecurityGroupName: string
  ##                      : The name of the DB security group to return details for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21628735 = newJObject()
  var formData_21628736 = newJObject()
  add(formData_21628736, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(formData_21628736, "Marker", newJString(Marker))
  add(query_21628735, "Action", newJString(Action))
  if Filters != nil:
    formData_21628736.add "Filters", Filters
  add(formData_21628736, "MaxRecords", newJInt(MaxRecords))
  add(query_21628735, "Version", newJString(Version))
  result = call_21628734.call(nil, query_21628735, nil, formData_21628736, nil)

var postDescribeDBSecurityGroups* = Call_PostDescribeDBSecurityGroups_21628717(
    name: "postDescribeDBSecurityGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSecurityGroups",
    validator: validate_PostDescribeDBSecurityGroups_21628718, base: "/",
    makeUrl: url_PostDescribeDBSecurityGroups_21628719,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSecurityGroups_21628698 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeDBSecurityGroups_21628700(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSecurityGroups_21628699(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBSecurityGroupName: JString
  ##                      : The name of the DB security group to return details for.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628701 = query.getOrDefault("MaxRecords")
  valid_21628701 = validateParameter(valid_21628701, JInt, required = false,
                                   default = nil)
  if valid_21628701 != nil:
    section.add "MaxRecords", valid_21628701
  var valid_21628702 = query.getOrDefault("DBSecurityGroupName")
  valid_21628702 = validateParameter(valid_21628702, JString, required = false,
                                   default = nil)
  if valid_21628702 != nil:
    section.add "DBSecurityGroupName", valid_21628702
  var valid_21628703 = query.getOrDefault("Filters")
  valid_21628703 = validateParameter(valid_21628703, JArray, required = false,
                                   default = nil)
  if valid_21628703 != nil:
    section.add "Filters", valid_21628703
  var valid_21628704 = query.getOrDefault("Action")
  valid_21628704 = validateParameter(valid_21628704, JString, required = true, default = newJString(
      "DescribeDBSecurityGroups"))
  if valid_21628704 != nil:
    section.add "Action", valid_21628704
  var valid_21628705 = query.getOrDefault("Marker")
  valid_21628705 = validateParameter(valid_21628705, JString, required = false,
                                   default = nil)
  if valid_21628705 != nil:
    section.add "Marker", valid_21628705
  var valid_21628706 = query.getOrDefault("Version")
  valid_21628706 = validateParameter(valid_21628706, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628706 != nil:
    section.add "Version", valid_21628706
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628707 = header.getOrDefault("X-Amz-Date")
  valid_21628707 = validateParameter(valid_21628707, JString, required = false,
                                   default = nil)
  if valid_21628707 != nil:
    section.add "X-Amz-Date", valid_21628707
  var valid_21628708 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628708 = validateParameter(valid_21628708, JString, required = false,
                                   default = nil)
  if valid_21628708 != nil:
    section.add "X-Amz-Security-Token", valid_21628708
  var valid_21628709 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628709 = validateParameter(valid_21628709, JString, required = false,
                                   default = nil)
  if valid_21628709 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628709
  var valid_21628710 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628710 = validateParameter(valid_21628710, JString, required = false,
                                   default = nil)
  if valid_21628710 != nil:
    section.add "X-Amz-Algorithm", valid_21628710
  var valid_21628711 = header.getOrDefault("X-Amz-Signature")
  valid_21628711 = validateParameter(valid_21628711, JString, required = false,
                                   default = nil)
  if valid_21628711 != nil:
    section.add "X-Amz-Signature", valid_21628711
  var valid_21628712 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628712 = validateParameter(valid_21628712, JString, required = false,
                                   default = nil)
  if valid_21628712 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628712
  var valid_21628713 = header.getOrDefault("X-Amz-Credential")
  valid_21628713 = validateParameter(valid_21628713, JString, required = false,
                                   default = nil)
  if valid_21628713 != nil:
    section.add "X-Amz-Credential", valid_21628713
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628714: Call_GetDescribeDBSecurityGroups_21628698;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ## 
  let valid = call_21628714.validator(path, query, header, formData, body, _)
  let scheme = call_21628714.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628714.makeUrl(scheme.get, call_21628714.host, call_21628714.base,
                               call_21628714.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628714, uri, valid, _)

proc call*(call_21628715: Call_GetDescribeDBSecurityGroups_21628698;
          MaxRecords: int = 0; DBSecurityGroupName: string = "";
          Filters: JsonNode = nil; Action: string = "DescribeDBSecurityGroups";
          Marker: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBSecurityGroups
  ##  Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified, the list will contain only the descriptions of the specified DB security group. 
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBSecurityGroupName: string
  ##                      : The name of the DB security group to return details for.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSecurityGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_21628716 = newJObject()
  add(query_21628716, "MaxRecords", newJInt(MaxRecords))
  add(query_21628716, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  if Filters != nil:
    query_21628716.add "Filters", Filters
  add(query_21628716, "Action", newJString(Action))
  add(query_21628716, "Marker", newJString(Marker))
  add(query_21628716, "Version", newJString(Version))
  result = call_21628715.call(nil, query_21628716, nil, nil, nil)

var getDescribeDBSecurityGroups* = Call_GetDescribeDBSecurityGroups_21628698(
    name: "getDescribeDBSecurityGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSecurityGroups",
    validator: validate_GetDescribeDBSecurityGroups_21628699, base: "/",
    makeUrl: url_GetDescribeDBSecurityGroups_21628700,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSnapshotAttributes_21628753 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeDBSnapshotAttributes_21628755(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSnapshotAttributes_21628754(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628756 = query.getOrDefault("Action")
  valid_21628756 = validateParameter(valid_21628756, JString, required = true, default = newJString(
      "DescribeDBSnapshotAttributes"))
  if valid_21628756 != nil:
    section.add "Action", valid_21628756
  var valid_21628757 = query.getOrDefault("Version")
  valid_21628757 = validateParameter(valid_21628757, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628757 != nil:
    section.add "Version", valid_21628757
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628758 = header.getOrDefault("X-Amz-Date")
  valid_21628758 = validateParameter(valid_21628758, JString, required = false,
                                   default = nil)
  if valid_21628758 != nil:
    section.add "X-Amz-Date", valid_21628758
  var valid_21628759 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628759 = validateParameter(valid_21628759, JString, required = false,
                                   default = nil)
  if valid_21628759 != nil:
    section.add "X-Amz-Security-Token", valid_21628759
  var valid_21628760 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628760 = validateParameter(valid_21628760, JString, required = false,
                                   default = nil)
  if valid_21628760 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628760
  var valid_21628761 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628761 = validateParameter(valid_21628761, JString, required = false,
                                   default = nil)
  if valid_21628761 != nil:
    section.add "X-Amz-Algorithm", valid_21628761
  var valid_21628762 = header.getOrDefault("X-Amz-Signature")
  valid_21628762 = validateParameter(valid_21628762, JString, required = false,
                                   default = nil)
  if valid_21628762 != nil:
    section.add "X-Amz-Signature", valid_21628762
  var valid_21628763 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628763 = validateParameter(valid_21628763, JString, required = false,
                                   default = nil)
  if valid_21628763 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628763
  var valid_21628764 = header.getOrDefault("X-Amz-Credential")
  valid_21628764 = validateParameter(valid_21628764, JString, required = false,
                                   default = nil)
  if valid_21628764 != nil:
    section.add "X-Amz-Credential", valid_21628764
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_21628765 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_21628765 = validateParameter(valid_21628765, JString, required = true,
                                   default = nil)
  if valid_21628765 != nil:
    section.add "DBSnapshotIdentifier", valid_21628765
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628766: Call_PostDescribeDBSnapshotAttributes_21628753;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  let valid = call_21628766.validator(path, query, header, formData, body, _)
  let scheme = call_21628766.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628766.makeUrl(scheme.get, call_21628766.host, call_21628766.base,
                               call_21628766.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628766, uri, valid, _)

proc call*(call_21628767: Call_PostDescribeDBSnapshotAttributes_21628753;
          DBSnapshotIdentifier: string;
          Action: string = "DescribeDBSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSnapshotAttributes
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628768 = newJObject()
  var formData_21628769 = newJObject()
  add(formData_21628769, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_21628768, "Action", newJString(Action))
  add(query_21628768, "Version", newJString(Version))
  result = call_21628767.call(nil, query_21628768, nil, formData_21628769, nil)

var postDescribeDBSnapshotAttributes* = Call_PostDescribeDBSnapshotAttributes_21628753(
    name: "postDescribeDBSnapshotAttributes", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshotAttributes",
    validator: validate_PostDescribeDBSnapshotAttributes_21628754, base: "/",
    makeUrl: url_PostDescribeDBSnapshotAttributes_21628755,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSnapshotAttributes_21628737 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeDBSnapshotAttributes_21628739(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSnapshotAttributes_21628738(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  section = newJObject()
  var valid_21628740 = query.getOrDefault("Action")
  valid_21628740 = validateParameter(valid_21628740, JString, required = true, default = newJString(
      "DescribeDBSnapshotAttributes"))
  if valid_21628740 != nil:
    section.add "Action", valid_21628740
  var valid_21628741 = query.getOrDefault("Version")
  valid_21628741 = validateParameter(valid_21628741, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628741 != nil:
    section.add "Version", valid_21628741
  var valid_21628742 = query.getOrDefault("DBSnapshotIdentifier")
  valid_21628742 = validateParameter(valid_21628742, JString, required = true,
                                   default = nil)
  if valid_21628742 != nil:
    section.add "DBSnapshotIdentifier", valid_21628742
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628743 = header.getOrDefault("X-Amz-Date")
  valid_21628743 = validateParameter(valid_21628743, JString, required = false,
                                   default = nil)
  if valid_21628743 != nil:
    section.add "X-Amz-Date", valid_21628743
  var valid_21628744 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628744 = validateParameter(valid_21628744, JString, required = false,
                                   default = nil)
  if valid_21628744 != nil:
    section.add "X-Amz-Security-Token", valid_21628744
  var valid_21628745 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628745 = validateParameter(valid_21628745, JString, required = false,
                                   default = nil)
  if valid_21628745 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628745
  var valid_21628746 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628746 = validateParameter(valid_21628746, JString, required = false,
                                   default = nil)
  if valid_21628746 != nil:
    section.add "X-Amz-Algorithm", valid_21628746
  var valid_21628747 = header.getOrDefault("X-Amz-Signature")
  valid_21628747 = validateParameter(valid_21628747, JString, required = false,
                                   default = nil)
  if valid_21628747 != nil:
    section.add "X-Amz-Signature", valid_21628747
  var valid_21628748 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628748 = validateParameter(valid_21628748, JString, required = false,
                                   default = nil)
  if valid_21628748 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628748
  var valid_21628749 = header.getOrDefault("X-Amz-Credential")
  valid_21628749 = validateParameter(valid_21628749, JString, required = false,
                                   default = nil)
  if valid_21628749 != nil:
    section.add "X-Amz-Credential", valid_21628749
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628750: Call_GetDescribeDBSnapshotAttributes_21628737;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ## 
  let valid = call_21628750.validator(path, query, header, formData, body, _)
  let scheme = call_21628750.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628750.makeUrl(scheme.get, call_21628750.host, call_21628750.base,
                               call_21628750.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628750, uri, valid, _)

proc call*(call_21628751: Call_GetDescribeDBSnapshotAttributes_21628737;
          DBSnapshotIdentifier: string;
          Action: string = "DescribeDBSnapshotAttributes";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBSnapshotAttributes
  ## <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p> <p>When sharing snapshots with other AWS accounts, <code>DescribeDBSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the AWS accounts that are authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual DB snapshot is public and can be copied or restored by all AWS accounts.</p> <p>To add or remove access for an AWS account to copy or restore a manual DB snapshot, or to make the manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to describe the attributes for.
  var query_21628752 = newJObject()
  add(query_21628752, "Action", newJString(Action))
  add(query_21628752, "Version", newJString(Version))
  add(query_21628752, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_21628751.call(nil, query_21628752, nil, nil, nil)

var getDescribeDBSnapshotAttributes* = Call_GetDescribeDBSnapshotAttributes_21628737(
    name: "getDescribeDBSnapshotAttributes", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshotAttributes",
    validator: validate_GetDescribeDBSnapshotAttributes_21628738, base: "/",
    makeUrl: url_GetDescribeDBSnapshotAttributes_21628739,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSnapshots_21628794 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeDBSnapshots_21628796(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSnapshots_21628795(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628797 = query.getOrDefault("Action")
  valid_21628797 = validateParameter(valid_21628797, JString, required = true,
                                   default = newJString("DescribeDBSnapshots"))
  if valid_21628797 != nil:
    section.add "Action", valid_21628797
  var valid_21628798 = query.getOrDefault("Version")
  valid_21628798 = validateParameter(valid_21628798, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628798 != nil:
    section.add "Version", valid_21628798
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628799 = header.getOrDefault("X-Amz-Date")
  valid_21628799 = validateParameter(valid_21628799, JString, required = false,
                                   default = nil)
  if valid_21628799 != nil:
    section.add "X-Amz-Date", valid_21628799
  var valid_21628800 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628800 = validateParameter(valid_21628800, JString, required = false,
                                   default = nil)
  if valid_21628800 != nil:
    section.add "X-Amz-Security-Token", valid_21628800
  var valid_21628801 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628801 = validateParameter(valid_21628801, JString, required = false,
                                   default = nil)
  if valid_21628801 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628801
  var valid_21628802 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628802 = validateParameter(valid_21628802, JString, required = false,
                                   default = nil)
  if valid_21628802 != nil:
    section.add "X-Amz-Algorithm", valid_21628802
  var valid_21628803 = header.getOrDefault("X-Amz-Signature")
  valid_21628803 = validateParameter(valid_21628803, JString, required = false,
                                   default = nil)
  if valid_21628803 != nil:
    section.add "X-Amz-Signature", valid_21628803
  var valid_21628804 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628804 = validateParameter(valid_21628804, JString, required = false,
                                   default = nil)
  if valid_21628804 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628804
  var valid_21628805 = header.getOrDefault("X-Amz-Credential")
  valid_21628805 = validateParameter(valid_21628805, JString, required = false,
                                   default = nil)
  if valid_21628805 != nil:
    section.add "X-Amz-Credential", valid_21628805
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   DbiResourceId: JString
  ##                : A specific DB resource ID to describe.
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSnapshotIdentifier: JString
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21628806 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21628806 = validateParameter(valid_21628806, JString, required = false,
                                   default = nil)
  if valid_21628806 != nil:
    section.add "DBInstanceIdentifier", valid_21628806
  var valid_21628807 = formData.getOrDefault("IncludeShared")
  valid_21628807 = validateParameter(valid_21628807, JBool, required = false,
                                   default = nil)
  if valid_21628807 != nil:
    section.add "IncludeShared", valid_21628807
  var valid_21628808 = formData.getOrDefault("IncludePublic")
  valid_21628808 = validateParameter(valid_21628808, JBool, required = false,
                                   default = nil)
  if valid_21628808 != nil:
    section.add "IncludePublic", valid_21628808
  var valid_21628809 = formData.getOrDefault("DbiResourceId")
  valid_21628809 = validateParameter(valid_21628809, JString, required = false,
                                   default = nil)
  if valid_21628809 != nil:
    section.add "DbiResourceId", valid_21628809
  var valid_21628810 = formData.getOrDefault("SnapshotType")
  valid_21628810 = validateParameter(valid_21628810, JString, required = false,
                                   default = nil)
  if valid_21628810 != nil:
    section.add "SnapshotType", valid_21628810
  var valid_21628811 = formData.getOrDefault("Marker")
  valid_21628811 = validateParameter(valid_21628811, JString, required = false,
                                   default = nil)
  if valid_21628811 != nil:
    section.add "Marker", valid_21628811
  var valid_21628812 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_21628812 = validateParameter(valid_21628812, JString, required = false,
                                   default = nil)
  if valid_21628812 != nil:
    section.add "DBSnapshotIdentifier", valid_21628812
  var valid_21628813 = formData.getOrDefault("Filters")
  valid_21628813 = validateParameter(valid_21628813, JArray, required = false,
                                   default = nil)
  if valid_21628813 != nil:
    section.add "Filters", valid_21628813
  var valid_21628814 = formData.getOrDefault("MaxRecords")
  valid_21628814 = validateParameter(valid_21628814, JInt, required = false,
                                   default = nil)
  if valid_21628814 != nil:
    section.add "MaxRecords", valid_21628814
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628815: Call_PostDescribeDBSnapshots_21628794;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  let valid = call_21628815.validator(path, query, header, formData, body, _)
  let scheme = call_21628815.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628815.makeUrl(scheme.get, call_21628815.host, call_21628815.base,
                               call_21628815.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628815, uri, valid, _)

proc call*(call_21628816: Call_PostDescribeDBSnapshots_21628794;
          DBInstanceIdentifier: string = ""; IncludeShared: bool = false;
          IncludePublic: bool = false; DbiResourceId: string = "";
          SnapshotType: string = ""; Marker: string = "";
          DBSnapshotIdentifier: string = ""; Action: string = "DescribeDBSnapshots";
          Filters: JsonNode = nil; MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSnapshots
  ## Returns information about DB snapshots. This API action supports pagination.
  ##   DBInstanceIdentifier: string
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   DbiResourceId: string
  ##                : A specific DB resource ID to describe.
  ##   SnapshotType: string
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSnapshotIdentifier: string
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21628817 = newJObject()
  var formData_21628818 = newJObject()
  add(formData_21628818, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_21628818, "IncludeShared", newJBool(IncludeShared))
  add(formData_21628818, "IncludePublic", newJBool(IncludePublic))
  add(formData_21628818, "DbiResourceId", newJString(DbiResourceId))
  add(formData_21628818, "SnapshotType", newJString(SnapshotType))
  add(formData_21628818, "Marker", newJString(Marker))
  add(formData_21628818, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_21628817, "Action", newJString(Action))
  if Filters != nil:
    formData_21628818.add "Filters", Filters
  add(formData_21628818, "MaxRecords", newJInt(MaxRecords))
  add(query_21628817, "Version", newJString(Version))
  result = call_21628816.call(nil, query_21628817, nil, formData_21628818, nil)

var postDescribeDBSnapshots* = Call_PostDescribeDBSnapshots_21628794(
    name: "postDescribeDBSnapshots", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshots",
    validator: validate_PostDescribeDBSnapshots_21628795, base: "/",
    makeUrl: url_PostDescribeDBSnapshots_21628796,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSnapshots_21628770 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeDBSnapshots_21628772(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSnapshots_21628771(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   IncludePublic: JBool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   IncludeShared: JBool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DbiResourceId: JString
  ##                : A specific DB resource ID to describe.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SnapshotType: JString
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: JString
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  section = newJObject()
  var valid_21628773 = query.getOrDefault("IncludePublic")
  valid_21628773 = validateParameter(valid_21628773, JBool, required = false,
                                   default = nil)
  if valid_21628773 != nil:
    section.add "IncludePublic", valid_21628773
  var valid_21628774 = query.getOrDefault("MaxRecords")
  valid_21628774 = validateParameter(valid_21628774, JInt, required = false,
                                   default = nil)
  if valid_21628774 != nil:
    section.add "MaxRecords", valid_21628774
  var valid_21628775 = query.getOrDefault("Filters")
  valid_21628775 = validateParameter(valid_21628775, JArray, required = false,
                                   default = nil)
  if valid_21628775 != nil:
    section.add "Filters", valid_21628775
  var valid_21628776 = query.getOrDefault("IncludeShared")
  valid_21628776 = validateParameter(valid_21628776, JBool, required = false,
                                   default = nil)
  if valid_21628776 != nil:
    section.add "IncludeShared", valid_21628776
  var valid_21628777 = query.getOrDefault("DbiResourceId")
  valid_21628777 = validateParameter(valid_21628777, JString, required = false,
                                   default = nil)
  if valid_21628777 != nil:
    section.add "DbiResourceId", valid_21628777
  var valid_21628778 = query.getOrDefault("Action")
  valid_21628778 = validateParameter(valid_21628778, JString, required = true,
                                   default = newJString("DescribeDBSnapshots"))
  if valid_21628778 != nil:
    section.add "Action", valid_21628778
  var valid_21628779 = query.getOrDefault("Marker")
  valid_21628779 = validateParameter(valid_21628779, JString, required = false,
                                   default = nil)
  if valid_21628779 != nil:
    section.add "Marker", valid_21628779
  var valid_21628780 = query.getOrDefault("SnapshotType")
  valid_21628780 = validateParameter(valid_21628780, JString, required = false,
                                   default = nil)
  if valid_21628780 != nil:
    section.add "SnapshotType", valid_21628780
  var valid_21628781 = query.getOrDefault("Version")
  valid_21628781 = validateParameter(valid_21628781, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628781 != nil:
    section.add "Version", valid_21628781
  var valid_21628782 = query.getOrDefault("DBInstanceIdentifier")
  valid_21628782 = validateParameter(valid_21628782, JString, required = false,
                                   default = nil)
  if valid_21628782 != nil:
    section.add "DBInstanceIdentifier", valid_21628782
  var valid_21628783 = query.getOrDefault("DBSnapshotIdentifier")
  valid_21628783 = validateParameter(valid_21628783, JString, required = false,
                                   default = nil)
  if valid_21628783 != nil:
    section.add "DBSnapshotIdentifier", valid_21628783
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628784 = header.getOrDefault("X-Amz-Date")
  valid_21628784 = validateParameter(valid_21628784, JString, required = false,
                                   default = nil)
  if valid_21628784 != nil:
    section.add "X-Amz-Date", valid_21628784
  var valid_21628785 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628785 = validateParameter(valid_21628785, JString, required = false,
                                   default = nil)
  if valid_21628785 != nil:
    section.add "X-Amz-Security-Token", valid_21628785
  var valid_21628786 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628786 = validateParameter(valid_21628786, JString, required = false,
                                   default = nil)
  if valid_21628786 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628786
  var valid_21628787 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628787 = validateParameter(valid_21628787, JString, required = false,
                                   default = nil)
  if valid_21628787 != nil:
    section.add "X-Amz-Algorithm", valid_21628787
  var valid_21628788 = header.getOrDefault("X-Amz-Signature")
  valid_21628788 = validateParameter(valid_21628788, JString, required = false,
                                   default = nil)
  if valid_21628788 != nil:
    section.add "X-Amz-Signature", valid_21628788
  var valid_21628789 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628789 = validateParameter(valid_21628789, JString, required = false,
                                   default = nil)
  if valid_21628789 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628789
  var valid_21628790 = header.getOrDefault("X-Amz-Credential")
  valid_21628790 = validateParameter(valid_21628790, JString, required = false,
                                   default = nil)
  if valid_21628790 != nil:
    section.add "X-Amz-Credential", valid_21628790
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628791: Call_GetDescribeDBSnapshots_21628770;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns information about DB snapshots. This API action supports pagination.
  ## 
  let valid = call_21628791.validator(path, query, header, formData, body, _)
  let scheme = call_21628791.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628791.makeUrl(scheme.get, call_21628791.host, call_21628791.base,
                               call_21628791.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628791, uri, valid, _)

proc call*(call_21628792: Call_GetDescribeDBSnapshots_21628770;
          IncludePublic: bool = false; MaxRecords: int = 0; Filters: JsonNode = nil;
          IncludeShared: bool = false; DbiResourceId: string = "";
          Action: string = "DescribeDBSnapshots"; Marker: string = "";
          SnapshotType: string = ""; Version: string = "2014-10-31";
          DBInstanceIdentifier: string = ""; DBSnapshotIdentifier: string = ""): Recallable =
  ## getDescribeDBSnapshots
  ## Returns information about DB snapshots. This API action supports pagination.
  ##   IncludePublic: bool
  ##                : <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account. By default, the public snapshots are not included.</p> <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more DB snapshots to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs).</p> </li> <li> <p> <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p> </li> <li> <p> <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p> </li> <li> <p> <code>snapshot-type</code> - Accepts types of DB snapshots.</p> </li> <li> <p> <code>engine</code> - Accepts names of database engines.</p> </li> </ul>
  ##   IncludeShared: bool
  ##                : <p>A value that indicates whether to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore. By default, these snapshots are not included.</p> <p>You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
  ##   DbiResourceId: string
  ##                : A specific DB resource ID to describe.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeDBSnapshots</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   SnapshotType: string
  ##               : <p>The type of snapshots to be returned. You can specify one of the following values:</p> <ul> <li> <p> <code>automated</code> - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.</p> </li> <li> <p> <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p> </li> <li> <p> <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p> </li> <li> <p> <code>public</code> - Return all DB snapshots that have been marked as public.</p> </li> <li> <p> <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p> <p>For information about AWS Backup, see the <a 
  ## href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html"> <i>AWS Backup Developer Guide.</i> </a> </p> <p>The <code>awsbackup</code> type does not apply to Aurora.</p> </li> </ul> <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by enabling the <code>IncludeShared</code> parameter. You can include public snapshots with these results by enabling the <code>IncludePublic</code> parameter.</p> <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to <code>public</code>.</p>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string
  ##                       : <p>The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   DBSnapshotIdentifier: string
  ##                       : <p> A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p> </li> </ul>
  var query_21628793 = newJObject()
  add(query_21628793, "IncludePublic", newJBool(IncludePublic))
  add(query_21628793, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21628793.add "Filters", Filters
  add(query_21628793, "IncludeShared", newJBool(IncludeShared))
  add(query_21628793, "DbiResourceId", newJString(DbiResourceId))
  add(query_21628793, "Action", newJString(Action))
  add(query_21628793, "Marker", newJString(Marker))
  add(query_21628793, "SnapshotType", newJString(SnapshotType))
  add(query_21628793, "Version", newJString(Version))
  add(query_21628793, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_21628793, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_21628792.call(nil, query_21628793, nil, nil, nil)

var getDescribeDBSnapshots* = Call_GetDescribeDBSnapshots_21628770(
    name: "getDescribeDBSnapshots", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSnapshots",
    validator: validate_GetDescribeDBSnapshots_21628771, base: "/",
    makeUrl: url_GetDescribeDBSnapshots_21628772,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeDBSubnetGroups_21628838 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeDBSubnetGroups_21628840(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeDBSubnetGroups_21628839(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628841 = query.getOrDefault("Action")
  valid_21628841 = validateParameter(valid_21628841, JString, required = true, default = newJString(
      "DescribeDBSubnetGroups"))
  if valid_21628841 != nil:
    section.add "Action", valid_21628841
  var valid_21628842 = query.getOrDefault("Version")
  valid_21628842 = validateParameter(valid_21628842, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628842 != nil:
    section.add "Version", valid_21628842
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628843 = header.getOrDefault("X-Amz-Date")
  valid_21628843 = validateParameter(valid_21628843, JString, required = false,
                                   default = nil)
  if valid_21628843 != nil:
    section.add "X-Amz-Date", valid_21628843
  var valid_21628844 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628844 = validateParameter(valid_21628844, JString, required = false,
                                   default = nil)
  if valid_21628844 != nil:
    section.add "X-Amz-Security-Token", valid_21628844
  var valid_21628845 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628845 = validateParameter(valid_21628845, JString, required = false,
                                   default = nil)
  if valid_21628845 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628845
  var valid_21628846 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628846 = validateParameter(valid_21628846, JString, required = false,
                                   default = nil)
  if valid_21628846 != nil:
    section.add "X-Amz-Algorithm", valid_21628846
  var valid_21628847 = header.getOrDefault("X-Amz-Signature")
  valid_21628847 = validateParameter(valid_21628847, JString, required = false,
                                   default = nil)
  if valid_21628847 != nil:
    section.add "X-Amz-Signature", valid_21628847
  var valid_21628848 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628848 = validateParameter(valid_21628848, JString, required = false,
                                   default = nil)
  if valid_21628848 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628848
  var valid_21628849 = header.getOrDefault("X-Amz-Credential")
  valid_21628849 = validateParameter(valid_21628849, JString, required = false,
                                   default = nil)
  if valid_21628849 != nil:
    section.add "X-Amz-Credential", valid_21628849
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21628850 = formData.getOrDefault("DBSubnetGroupName")
  valid_21628850 = validateParameter(valid_21628850, JString, required = false,
                                   default = nil)
  if valid_21628850 != nil:
    section.add "DBSubnetGroupName", valid_21628850
  var valid_21628851 = formData.getOrDefault("Marker")
  valid_21628851 = validateParameter(valid_21628851, JString, required = false,
                                   default = nil)
  if valid_21628851 != nil:
    section.add "Marker", valid_21628851
  var valid_21628852 = formData.getOrDefault("Filters")
  valid_21628852 = validateParameter(valid_21628852, JArray, required = false,
                                   default = nil)
  if valid_21628852 != nil:
    section.add "Filters", valid_21628852
  var valid_21628853 = formData.getOrDefault("MaxRecords")
  valid_21628853 = validateParameter(valid_21628853, JInt, required = false,
                                   default = nil)
  if valid_21628853 != nil:
    section.add "MaxRecords", valid_21628853
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628854: Call_PostDescribeDBSubnetGroups_21628838;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_21628854.validator(path, query, header, formData, body, _)
  let scheme = call_21628854.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628854.makeUrl(scheme.get, call_21628854.host, call_21628854.base,
                               call_21628854.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628854, uri, valid, _)

proc call*(call_21628855: Call_PostDescribeDBSubnetGroups_21628838;
          DBSubnetGroupName: string = ""; Marker: string = "";
          Action: string = "DescribeDBSubnetGroups"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21628856 = newJObject()
  var formData_21628857 = newJObject()
  add(formData_21628857, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_21628857, "Marker", newJString(Marker))
  add(query_21628856, "Action", newJString(Action))
  if Filters != nil:
    formData_21628857.add "Filters", Filters
  add(formData_21628857, "MaxRecords", newJInt(MaxRecords))
  add(query_21628856, "Version", newJString(Version))
  result = call_21628855.call(nil, query_21628856, nil, formData_21628857, nil)

var postDescribeDBSubnetGroups* = Call_PostDescribeDBSubnetGroups_21628838(
    name: "postDescribeDBSubnetGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_PostDescribeDBSubnetGroups_21628839, base: "/",
    makeUrl: url_PostDescribeDBSubnetGroups_21628840,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeDBSubnetGroups_21628819 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeDBSubnetGroups_21628821(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeDBSubnetGroups_21628820(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSubnetGroupName: JString
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628822 = query.getOrDefault("MaxRecords")
  valid_21628822 = validateParameter(valid_21628822, JInt, required = false,
                                   default = nil)
  if valid_21628822 != nil:
    section.add "MaxRecords", valid_21628822
  var valid_21628823 = query.getOrDefault("Filters")
  valid_21628823 = validateParameter(valid_21628823, JArray, required = false,
                                   default = nil)
  if valid_21628823 != nil:
    section.add "Filters", valid_21628823
  var valid_21628824 = query.getOrDefault("Action")
  valid_21628824 = validateParameter(valid_21628824, JString, required = true, default = newJString(
      "DescribeDBSubnetGroups"))
  if valid_21628824 != nil:
    section.add "Action", valid_21628824
  var valid_21628825 = query.getOrDefault("Marker")
  valid_21628825 = validateParameter(valid_21628825, JString, required = false,
                                   default = nil)
  if valid_21628825 != nil:
    section.add "Marker", valid_21628825
  var valid_21628826 = query.getOrDefault("DBSubnetGroupName")
  valid_21628826 = validateParameter(valid_21628826, JString, required = false,
                                   default = nil)
  if valid_21628826 != nil:
    section.add "DBSubnetGroupName", valid_21628826
  var valid_21628827 = query.getOrDefault("Version")
  valid_21628827 = validateParameter(valid_21628827, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628827 != nil:
    section.add "Version", valid_21628827
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628828 = header.getOrDefault("X-Amz-Date")
  valid_21628828 = validateParameter(valid_21628828, JString, required = false,
                                   default = nil)
  if valid_21628828 != nil:
    section.add "X-Amz-Date", valid_21628828
  var valid_21628829 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628829 = validateParameter(valid_21628829, JString, required = false,
                                   default = nil)
  if valid_21628829 != nil:
    section.add "X-Amz-Security-Token", valid_21628829
  var valid_21628830 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628830 = validateParameter(valid_21628830, JString, required = false,
                                   default = nil)
  if valid_21628830 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628830
  var valid_21628831 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628831 = validateParameter(valid_21628831, JString, required = false,
                                   default = nil)
  if valid_21628831 != nil:
    section.add "X-Amz-Algorithm", valid_21628831
  var valid_21628832 = header.getOrDefault("X-Amz-Signature")
  valid_21628832 = validateParameter(valid_21628832, JString, required = false,
                                   default = nil)
  if valid_21628832 != nil:
    section.add "X-Amz-Signature", valid_21628832
  var valid_21628833 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628833 = validateParameter(valid_21628833, JString, required = false,
                                   default = nil)
  if valid_21628833 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628833
  var valid_21628834 = header.getOrDefault("X-Amz-Credential")
  valid_21628834 = validateParameter(valid_21628834, JString, required = false,
                                   default = nil)
  if valid_21628834 != nil:
    section.add "X-Amz-Credential", valid_21628834
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628835: Call_GetDescribeDBSubnetGroups_21628819;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ## 
  let valid = call_21628835.validator(path, query, header, formData, body, _)
  let scheme = call_21628835.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628835.makeUrl(scheme.get, call_21628835.host, call_21628835.base,
                               call_21628835.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628835, uri, valid, _)

proc call*(call_21628836: Call_GetDescribeDBSubnetGroups_21628819;
          MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeDBSubnetGroups"; Marker: string = "";
          DBSubnetGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeDBSubnetGroups
  ## <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p> <p>For an overview of CIDR ranges, go to the <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>. </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBSubnetGroupName: string
  ##                    : The name of the DB subnet group to return details for.
  ##   Version: string (required)
  var query_21628837 = newJObject()
  add(query_21628837, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21628837.add "Filters", Filters
  add(query_21628837, "Action", newJString(Action))
  add(query_21628837, "Marker", newJString(Marker))
  add(query_21628837, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21628837, "Version", newJString(Version))
  result = call_21628836.call(nil, query_21628837, nil, nil, nil)

var getDescribeDBSubnetGroups* = Call_GetDescribeDBSubnetGroups_21628819(
    name: "getDescribeDBSubnetGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeDBSubnetGroups",
    validator: validate_GetDescribeDBSubnetGroups_21628820, base: "/",
    makeUrl: url_GetDescribeDBSubnetGroups_21628821,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultClusterParameters_21628877 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeEngineDefaultClusterParameters_21628879(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultClusterParameters_21628878(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628880 = query.getOrDefault("Action")
  valid_21628880 = validateParameter(valid_21628880, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_21628880 != nil:
    section.add "Action", valid_21628880
  var valid_21628881 = query.getOrDefault("Version")
  valid_21628881 = validateParameter(valid_21628881, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628881 != nil:
    section.add "Version", valid_21628881
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628882 = header.getOrDefault("X-Amz-Date")
  valid_21628882 = validateParameter(valid_21628882, JString, required = false,
                                   default = nil)
  if valid_21628882 != nil:
    section.add "X-Amz-Date", valid_21628882
  var valid_21628883 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628883 = validateParameter(valid_21628883, JString, required = false,
                                   default = nil)
  if valid_21628883 != nil:
    section.add "X-Amz-Security-Token", valid_21628883
  var valid_21628884 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628884 = validateParameter(valid_21628884, JString, required = false,
                                   default = nil)
  if valid_21628884 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628884
  var valid_21628885 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628885 = validateParameter(valid_21628885, JString, required = false,
                                   default = nil)
  if valid_21628885 != nil:
    section.add "X-Amz-Algorithm", valid_21628885
  var valid_21628886 = header.getOrDefault("X-Amz-Signature")
  valid_21628886 = validateParameter(valid_21628886, JString, required = false,
                                   default = nil)
  if valid_21628886 != nil:
    section.add "X-Amz-Signature", valid_21628886
  var valid_21628887 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628887 = validateParameter(valid_21628887, JString, required = false,
                                   default = nil)
  if valid_21628887 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628887
  var valid_21628888 = header.getOrDefault("X-Amz-Credential")
  valid_21628888 = validateParameter(valid_21628888, JString, required = false,
                                   default = nil)
  if valid_21628888 != nil:
    section.add "X-Amz-Credential", valid_21628888
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21628889 = formData.getOrDefault("Marker")
  valid_21628889 = validateParameter(valid_21628889, JString, required = false,
                                   default = nil)
  if valid_21628889 != nil:
    section.add "Marker", valid_21628889
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_21628890 = formData.getOrDefault("DBParameterGroupFamily")
  valid_21628890 = validateParameter(valid_21628890, JString, required = true,
                                   default = nil)
  if valid_21628890 != nil:
    section.add "DBParameterGroupFamily", valid_21628890
  var valid_21628891 = formData.getOrDefault("Filters")
  valid_21628891 = validateParameter(valid_21628891, JArray, required = false,
                                   default = nil)
  if valid_21628891 != nil:
    section.add "Filters", valid_21628891
  var valid_21628892 = formData.getOrDefault("MaxRecords")
  valid_21628892 = validateParameter(valid_21628892, JInt, required = false,
                                   default = nil)
  if valid_21628892 != nil:
    section.add "MaxRecords", valid_21628892
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628893: Call_PostDescribeEngineDefaultClusterParameters_21628877;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_21628893.validator(path, query, header, formData, body, _)
  let scheme = call_21628893.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628893.makeUrl(scheme.get, call_21628893.host, call_21628893.base,
                               call_21628893.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628893, uri, valid, _)

proc call*(call_21628894: Call_PostDescribeEngineDefaultClusterParameters_21628877;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultClusterParameters";
          Filters: JsonNode = nil; MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultClusterParameters
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21628895 = newJObject()
  var formData_21628896 = newJObject()
  add(formData_21628896, "Marker", newJString(Marker))
  add(query_21628895, "Action", newJString(Action))
  add(formData_21628896, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  if Filters != nil:
    formData_21628896.add "Filters", Filters
  add(formData_21628896, "MaxRecords", newJInt(MaxRecords))
  add(query_21628895, "Version", newJString(Version))
  result = call_21628894.call(nil, query_21628895, nil, formData_21628896, nil)

var postDescribeEngineDefaultClusterParameters* = Call_PostDescribeEngineDefaultClusterParameters_21628877(
    name: "postDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_PostDescribeEngineDefaultClusterParameters_21628878,
    base: "/", makeUrl: url_PostDescribeEngineDefaultClusterParameters_21628879,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultClusterParameters_21628858 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeEngineDefaultClusterParameters_21628860(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultClusterParameters_21628859(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628861 = query.getOrDefault("MaxRecords")
  valid_21628861 = validateParameter(valid_21628861, JInt, required = false,
                                   default = nil)
  if valid_21628861 != nil:
    section.add "MaxRecords", valid_21628861
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_21628862 = query.getOrDefault("DBParameterGroupFamily")
  valid_21628862 = validateParameter(valid_21628862, JString, required = true,
                                   default = nil)
  if valid_21628862 != nil:
    section.add "DBParameterGroupFamily", valid_21628862
  var valid_21628863 = query.getOrDefault("Filters")
  valid_21628863 = validateParameter(valid_21628863, JArray, required = false,
                                   default = nil)
  if valid_21628863 != nil:
    section.add "Filters", valid_21628863
  var valid_21628864 = query.getOrDefault("Action")
  valid_21628864 = validateParameter(valid_21628864, JString, required = true, default = newJString(
      "DescribeEngineDefaultClusterParameters"))
  if valid_21628864 != nil:
    section.add "Action", valid_21628864
  var valid_21628865 = query.getOrDefault("Marker")
  valid_21628865 = validateParameter(valid_21628865, JString, required = false,
                                   default = nil)
  if valid_21628865 != nil:
    section.add "Marker", valid_21628865
  var valid_21628866 = query.getOrDefault("Version")
  valid_21628866 = validateParameter(valid_21628866, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628866 != nil:
    section.add "Version", valid_21628866
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628867 = header.getOrDefault("X-Amz-Date")
  valid_21628867 = validateParameter(valid_21628867, JString, required = false,
                                   default = nil)
  if valid_21628867 != nil:
    section.add "X-Amz-Date", valid_21628867
  var valid_21628868 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628868 = validateParameter(valid_21628868, JString, required = false,
                                   default = nil)
  if valid_21628868 != nil:
    section.add "X-Amz-Security-Token", valid_21628868
  var valid_21628869 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628869 = validateParameter(valid_21628869, JString, required = false,
                                   default = nil)
  if valid_21628869 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628869
  var valid_21628870 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628870 = validateParameter(valid_21628870, JString, required = false,
                                   default = nil)
  if valid_21628870 != nil:
    section.add "X-Amz-Algorithm", valid_21628870
  var valid_21628871 = header.getOrDefault("X-Amz-Signature")
  valid_21628871 = validateParameter(valid_21628871, JString, required = false,
                                   default = nil)
  if valid_21628871 != nil:
    section.add "X-Amz-Signature", valid_21628871
  var valid_21628872 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628872 = validateParameter(valid_21628872, JString, required = false,
                                   default = nil)
  if valid_21628872 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628872
  var valid_21628873 = header.getOrDefault("X-Amz-Credential")
  valid_21628873 = validateParameter(valid_21628873, JString, required = false,
                                   default = nil)
  if valid_21628873 != nil:
    section.add "X-Amz-Credential", valid_21628873
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628874: Call_GetDescribeEngineDefaultClusterParameters_21628858;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ## 
  let valid = call_21628874.validator(path, query, header, formData, body, _)
  let scheme = call_21628874.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628874.makeUrl(scheme.get, call_21628874.host, call_21628874.base,
                               call_21628874.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628874, uri, valid, _)

proc call*(call_21628875: Call_GetDescribeEngineDefaultClusterParameters_21628858;
          DBParameterGroupFamily: string; MaxRecords: int = 0;
          Filters: JsonNode = nil;
          Action: string = "DescribeEngineDefaultClusterParameters";
          Marker: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEngineDefaultClusterParameters
  ## <p>Returns the default engine and system parameter information for the cluster database engine.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB cluster parameter group family to return engine parameter information for.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultClusterParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_21628876 = newJObject()
  add(query_21628876, "MaxRecords", newJInt(MaxRecords))
  add(query_21628876, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Filters != nil:
    query_21628876.add "Filters", Filters
  add(query_21628876, "Action", newJString(Action))
  add(query_21628876, "Marker", newJString(Marker))
  add(query_21628876, "Version", newJString(Version))
  result = call_21628875.call(nil, query_21628876, nil, nil, nil)

var getDescribeEngineDefaultClusterParameters* = Call_GetDescribeEngineDefaultClusterParameters_21628858(
    name: "getDescribeEngineDefaultClusterParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeEngineDefaultClusterParameters",
    validator: validate_GetDescribeEngineDefaultClusterParameters_21628859,
    base: "/", makeUrl: url_GetDescribeEngineDefaultClusterParameters_21628860,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEngineDefaultParameters_21628916 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeEngineDefaultParameters_21628918(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEngineDefaultParameters_21628917(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628919 = query.getOrDefault("Action")
  valid_21628919 = validateParameter(valid_21628919, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_21628919 != nil:
    section.add "Action", valid_21628919
  var valid_21628920 = query.getOrDefault("Version")
  valid_21628920 = validateParameter(valid_21628920, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628920 != nil:
    section.add "Version", valid_21628920
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628921 = header.getOrDefault("X-Amz-Date")
  valid_21628921 = validateParameter(valid_21628921, JString, required = false,
                                   default = nil)
  if valid_21628921 != nil:
    section.add "X-Amz-Date", valid_21628921
  var valid_21628922 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628922 = validateParameter(valid_21628922, JString, required = false,
                                   default = nil)
  if valid_21628922 != nil:
    section.add "X-Amz-Security-Token", valid_21628922
  var valid_21628923 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628923 = validateParameter(valid_21628923, JString, required = false,
                                   default = nil)
  if valid_21628923 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628923
  var valid_21628924 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628924 = validateParameter(valid_21628924, JString, required = false,
                                   default = nil)
  if valid_21628924 != nil:
    section.add "X-Amz-Algorithm", valid_21628924
  var valid_21628925 = header.getOrDefault("X-Amz-Signature")
  valid_21628925 = validateParameter(valid_21628925, JString, required = false,
                                   default = nil)
  if valid_21628925 != nil:
    section.add "X-Amz-Signature", valid_21628925
  var valid_21628926 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628926 = validateParameter(valid_21628926, JString, required = false,
                                   default = nil)
  if valid_21628926 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628926
  var valid_21628927 = header.getOrDefault("X-Amz-Credential")
  valid_21628927 = validateParameter(valid_21628927, JString, required = false,
                                   default = nil)
  if valid_21628927 != nil:
    section.add "X-Amz-Credential", valid_21628927
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21628928 = formData.getOrDefault("Marker")
  valid_21628928 = validateParameter(valid_21628928, JString, required = false,
                                   default = nil)
  if valid_21628928 != nil:
    section.add "Marker", valid_21628928
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_21628929 = formData.getOrDefault("DBParameterGroupFamily")
  valid_21628929 = validateParameter(valid_21628929, JString, required = true,
                                   default = nil)
  if valid_21628929 != nil:
    section.add "DBParameterGroupFamily", valid_21628929
  var valid_21628930 = formData.getOrDefault("Filters")
  valid_21628930 = validateParameter(valid_21628930, JArray, required = false,
                                   default = nil)
  if valid_21628930 != nil:
    section.add "Filters", valid_21628930
  var valid_21628931 = formData.getOrDefault("MaxRecords")
  valid_21628931 = validateParameter(valid_21628931, JInt, required = false,
                                   default = nil)
  if valid_21628931 != nil:
    section.add "MaxRecords", valid_21628931
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628932: Call_PostDescribeEngineDefaultParameters_21628916;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_21628932.validator(path, query, header, formData, body, _)
  let scheme = call_21628932.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628932.makeUrl(scheme.get, call_21628932.host, call_21628932.base,
                               call_21628932.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628932, uri, valid, _)

proc call*(call_21628933: Call_PostDescribeEngineDefaultParameters_21628916;
          DBParameterGroupFamily: string; Marker: string = "";
          Action: string = "DescribeEngineDefaultParameters";
          Filters: JsonNode = nil; MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21628934 = newJObject()
  var formData_21628935 = newJObject()
  add(formData_21628935, "Marker", newJString(Marker))
  add(query_21628934, "Action", newJString(Action))
  add(formData_21628935, "DBParameterGroupFamily",
      newJString(DBParameterGroupFamily))
  if Filters != nil:
    formData_21628935.add "Filters", Filters
  add(formData_21628935, "MaxRecords", newJInt(MaxRecords))
  add(query_21628934, "Version", newJString(Version))
  result = call_21628933.call(nil, query_21628934, nil, formData_21628935, nil)

var postDescribeEngineDefaultParameters* = Call_PostDescribeEngineDefaultParameters_21628916(
    name: "postDescribeEngineDefaultParameters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_PostDescribeEngineDefaultParameters_21628917, base: "/",
    makeUrl: url_PostDescribeEngineDefaultParameters_21628918,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEngineDefaultParameters_21628897 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeEngineDefaultParameters_21628899(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEngineDefaultParameters_21628898(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: JString (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628900 = query.getOrDefault("MaxRecords")
  valid_21628900 = validateParameter(valid_21628900, JInt, required = false,
                                   default = nil)
  if valid_21628900 != nil:
    section.add "MaxRecords", valid_21628900
  assert query != nil, "query argument is necessary due to required `DBParameterGroupFamily` field"
  var valid_21628901 = query.getOrDefault("DBParameterGroupFamily")
  valid_21628901 = validateParameter(valid_21628901, JString, required = true,
                                   default = nil)
  if valid_21628901 != nil:
    section.add "DBParameterGroupFamily", valid_21628901
  var valid_21628902 = query.getOrDefault("Filters")
  valid_21628902 = validateParameter(valid_21628902, JArray, required = false,
                                   default = nil)
  if valid_21628902 != nil:
    section.add "Filters", valid_21628902
  var valid_21628903 = query.getOrDefault("Action")
  valid_21628903 = validateParameter(valid_21628903, JString, required = true, default = newJString(
      "DescribeEngineDefaultParameters"))
  if valid_21628903 != nil:
    section.add "Action", valid_21628903
  var valid_21628904 = query.getOrDefault("Marker")
  valid_21628904 = validateParameter(valid_21628904, JString, required = false,
                                   default = nil)
  if valid_21628904 != nil:
    section.add "Marker", valid_21628904
  var valid_21628905 = query.getOrDefault("Version")
  valid_21628905 = validateParameter(valid_21628905, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628905 != nil:
    section.add "Version", valid_21628905
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628906 = header.getOrDefault("X-Amz-Date")
  valid_21628906 = validateParameter(valid_21628906, JString, required = false,
                                   default = nil)
  if valid_21628906 != nil:
    section.add "X-Amz-Date", valid_21628906
  var valid_21628907 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628907 = validateParameter(valid_21628907, JString, required = false,
                                   default = nil)
  if valid_21628907 != nil:
    section.add "X-Amz-Security-Token", valid_21628907
  var valid_21628908 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628908 = validateParameter(valid_21628908, JString, required = false,
                                   default = nil)
  if valid_21628908 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628908
  var valid_21628909 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628909 = validateParameter(valid_21628909, JString, required = false,
                                   default = nil)
  if valid_21628909 != nil:
    section.add "X-Amz-Algorithm", valid_21628909
  var valid_21628910 = header.getOrDefault("X-Amz-Signature")
  valid_21628910 = validateParameter(valid_21628910, JString, required = false,
                                   default = nil)
  if valid_21628910 != nil:
    section.add "X-Amz-Signature", valid_21628910
  var valid_21628911 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628911 = validateParameter(valid_21628911, JString, required = false,
                                   default = nil)
  if valid_21628911 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628911
  var valid_21628912 = header.getOrDefault("X-Amz-Credential")
  valid_21628912 = validateParameter(valid_21628912, JString, required = false,
                                   default = nil)
  if valid_21628912 != nil:
    section.add "X-Amz-Credential", valid_21628912
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628913: Call_GetDescribeEngineDefaultParameters_21628897;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns the default engine and system parameter information for the specified database engine.
  ## 
  let valid = call_21628913.validator(path, query, header, formData, body, _)
  let scheme = call_21628913.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628913.makeUrl(scheme.get, call_21628913.host, call_21628913.base,
                               call_21628913.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628913, uri, valid, _)

proc call*(call_21628914: Call_GetDescribeEngineDefaultParameters_21628897;
          DBParameterGroupFamily: string; MaxRecords: int = 0;
          Filters: JsonNode = nil;
          Action: string = "DescribeEngineDefaultParameters"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeEngineDefaultParameters
  ## Returns the default engine and system parameter information for the specified database engine.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   DBParameterGroupFamily: string (required)
  ##                         : The name of the DB parameter group family.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_21628915 = newJObject()
  add(query_21628915, "MaxRecords", newJInt(MaxRecords))
  add(query_21628915, "DBParameterGroupFamily", newJString(DBParameterGroupFamily))
  if Filters != nil:
    query_21628915.add "Filters", Filters
  add(query_21628915, "Action", newJString(Action))
  add(query_21628915, "Marker", newJString(Marker))
  add(query_21628915, "Version", newJString(Version))
  result = call_21628914.call(nil, query_21628915, nil, nil, nil)

var getDescribeEngineDefaultParameters* = Call_GetDescribeEngineDefaultParameters_21628897(
    name: "getDescribeEngineDefaultParameters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEngineDefaultParameters",
    validator: validate_GetDescribeEngineDefaultParameters_21628898, base: "/",
    makeUrl: url_GetDescribeEngineDefaultParameters_21628899,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventCategories_21628953 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeEventCategories_21628955(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventCategories_21628954(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628956 = query.getOrDefault("Action")
  valid_21628956 = validateParameter(valid_21628956, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_21628956 != nil:
    section.add "Action", valid_21628956
  var valid_21628957 = query.getOrDefault("Version")
  valid_21628957 = validateParameter(valid_21628957, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628957 != nil:
    section.add "Version", valid_21628957
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628958 = header.getOrDefault("X-Amz-Date")
  valid_21628958 = validateParameter(valid_21628958, JString, required = false,
                                   default = nil)
  if valid_21628958 != nil:
    section.add "X-Amz-Date", valid_21628958
  var valid_21628959 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628959 = validateParameter(valid_21628959, JString, required = false,
                                   default = nil)
  if valid_21628959 != nil:
    section.add "X-Amz-Security-Token", valid_21628959
  var valid_21628960 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628960 = validateParameter(valid_21628960, JString, required = false,
                                   default = nil)
  if valid_21628960 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628960
  var valid_21628961 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628961 = validateParameter(valid_21628961, JString, required = false,
                                   default = nil)
  if valid_21628961 != nil:
    section.add "X-Amz-Algorithm", valid_21628961
  var valid_21628962 = header.getOrDefault("X-Amz-Signature")
  valid_21628962 = validateParameter(valid_21628962, JString, required = false,
                                   default = nil)
  if valid_21628962 != nil:
    section.add "X-Amz-Signature", valid_21628962
  var valid_21628963 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628963 = validateParameter(valid_21628963, JString, required = false,
                                   default = nil)
  if valid_21628963 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628963
  var valid_21628964 = header.getOrDefault("X-Amz-Credential")
  valid_21628964 = validateParameter(valid_21628964, JString, required = false,
                                   default = nil)
  if valid_21628964 != nil:
    section.add "X-Amz-Credential", valid_21628964
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  section = newJObject()
  var valid_21628965 = formData.getOrDefault("Filters")
  valid_21628965 = validateParameter(valid_21628965, JArray, required = false,
                                   default = nil)
  if valid_21628965 != nil:
    section.add "Filters", valid_21628965
  var valid_21628966 = formData.getOrDefault("SourceType")
  valid_21628966 = validateParameter(valid_21628966, JString, required = false,
                                   default = nil)
  if valid_21628966 != nil:
    section.add "SourceType", valid_21628966
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628967: Call_PostDescribeEventCategories_21628953;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_21628967.validator(path, query, header, formData, body, _)
  let scheme = call_21628967.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628967.makeUrl(scheme.get, call_21628967.host, call_21628967.base,
                               call_21628967.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628967, uri, valid, _)

proc call*(call_21628968: Call_PostDescribeEventCategories_21628953;
          Action: string = "DescribeEventCategories"; Filters: JsonNode = nil;
          Version: string = "2014-10-31"; SourceType: string = ""): Recallable =
  ## postDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  var query_21628969 = newJObject()
  var formData_21628970 = newJObject()
  add(query_21628969, "Action", newJString(Action))
  if Filters != nil:
    formData_21628970.add "Filters", Filters
  add(query_21628969, "Version", newJString(Version))
  add(formData_21628970, "SourceType", newJString(SourceType))
  result = call_21628968.call(nil, query_21628969, nil, formData_21628970, nil)

var postDescribeEventCategories* = Call_PostDescribeEventCategories_21628953(
    name: "postDescribeEventCategories", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_PostDescribeEventCategories_21628954, base: "/",
    makeUrl: url_PostDescribeEventCategories_21628955,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventCategories_21628936 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeEventCategories_21628938(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventCategories_21628937(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628939 = query.getOrDefault("SourceType")
  valid_21628939 = validateParameter(valid_21628939, JString, required = false,
                                   default = nil)
  if valid_21628939 != nil:
    section.add "SourceType", valid_21628939
  var valid_21628940 = query.getOrDefault("Filters")
  valid_21628940 = validateParameter(valid_21628940, JArray, required = false,
                                   default = nil)
  if valid_21628940 != nil:
    section.add "Filters", valid_21628940
  var valid_21628941 = query.getOrDefault("Action")
  valid_21628941 = validateParameter(valid_21628941, JString, required = true, default = newJString(
      "DescribeEventCategories"))
  if valid_21628941 != nil:
    section.add "Action", valid_21628941
  var valid_21628942 = query.getOrDefault("Version")
  valid_21628942 = validateParameter(valid_21628942, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628942 != nil:
    section.add "Version", valid_21628942
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628943 = header.getOrDefault("X-Amz-Date")
  valid_21628943 = validateParameter(valid_21628943, JString, required = false,
                                   default = nil)
  if valid_21628943 != nil:
    section.add "X-Amz-Date", valid_21628943
  var valid_21628944 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628944 = validateParameter(valid_21628944, JString, required = false,
                                   default = nil)
  if valid_21628944 != nil:
    section.add "X-Amz-Security-Token", valid_21628944
  var valid_21628945 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628945 = validateParameter(valid_21628945, JString, required = false,
                                   default = nil)
  if valid_21628945 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628945
  var valid_21628946 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628946 = validateParameter(valid_21628946, JString, required = false,
                                   default = nil)
  if valid_21628946 != nil:
    section.add "X-Amz-Algorithm", valid_21628946
  var valid_21628947 = header.getOrDefault("X-Amz-Signature")
  valid_21628947 = validateParameter(valid_21628947, JString, required = false,
                                   default = nil)
  if valid_21628947 != nil:
    section.add "X-Amz-Signature", valid_21628947
  var valid_21628948 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628948 = validateParameter(valid_21628948, JString, required = false,
                                   default = nil)
  if valid_21628948 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628948
  var valid_21628949 = header.getOrDefault("X-Amz-Credential")
  valid_21628949 = validateParameter(valid_21628949, JString, required = false,
                                   default = nil)
  if valid_21628949 != nil:
    section.add "X-Amz-Credential", valid_21628949
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628950: Call_GetDescribeEventCategories_21628936;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_21628950.validator(path, query, header, formData, body, _)
  let scheme = call_21628950.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628950.makeUrl(scheme.get, call_21628950.host, call_21628950.base,
                               call_21628950.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628950, uri, valid, _)

proc call*(call_21628951: Call_GetDescribeEventCategories_21628936;
          SourceType: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeEventCategories"; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEventCategories
  ## Displays a list of categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html"> Events</a> topic in the <i>Amazon RDS User Guide.</i> 
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21628952 = newJObject()
  add(query_21628952, "SourceType", newJString(SourceType))
  if Filters != nil:
    query_21628952.add "Filters", Filters
  add(query_21628952, "Action", newJString(Action))
  add(query_21628952, "Version", newJString(Version))
  result = call_21628951.call(nil, query_21628952, nil, nil, nil)

var getDescribeEventCategories* = Call_GetDescribeEventCategories_21628936(
    name: "getDescribeEventCategories", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventCategories",
    validator: validate_GetDescribeEventCategories_21628937, base: "/",
    makeUrl: url_GetDescribeEventCategories_21628938,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEventSubscriptions_21628990 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeEventSubscriptions_21628992(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEventSubscriptions_21628991(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628993 = query.getOrDefault("Action")
  valid_21628993 = validateParameter(valid_21628993, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_21628993 != nil:
    section.add "Action", valid_21628993
  var valid_21628994 = query.getOrDefault("Version")
  valid_21628994 = validateParameter(valid_21628994, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628994 != nil:
    section.add "Version", valid_21628994
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628995 = header.getOrDefault("X-Amz-Date")
  valid_21628995 = validateParameter(valid_21628995, JString, required = false,
                                   default = nil)
  if valid_21628995 != nil:
    section.add "X-Amz-Date", valid_21628995
  var valid_21628996 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628996 = validateParameter(valid_21628996, JString, required = false,
                                   default = nil)
  if valid_21628996 != nil:
    section.add "X-Amz-Security-Token", valid_21628996
  var valid_21628997 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628997 = validateParameter(valid_21628997, JString, required = false,
                                   default = nil)
  if valid_21628997 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628997
  var valid_21628998 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628998 = validateParameter(valid_21628998, JString, required = false,
                                   default = nil)
  if valid_21628998 != nil:
    section.add "X-Amz-Algorithm", valid_21628998
  var valid_21628999 = header.getOrDefault("X-Amz-Signature")
  valid_21628999 = validateParameter(valid_21628999, JString, required = false,
                                   default = nil)
  if valid_21628999 != nil:
    section.add "X-Amz-Signature", valid_21628999
  var valid_21629000 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629000 = validateParameter(valid_21629000, JString, required = false,
                                   default = nil)
  if valid_21629000 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629000
  var valid_21629001 = header.getOrDefault("X-Amz-Credential")
  valid_21629001 = validateParameter(valid_21629001, JString, required = false,
                                   default = nil)
  if valid_21629001 != nil:
    section.add "X-Amz-Credential", valid_21629001
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: JString
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21629002 = formData.getOrDefault("Marker")
  valid_21629002 = validateParameter(valid_21629002, JString, required = false,
                                   default = nil)
  if valid_21629002 != nil:
    section.add "Marker", valid_21629002
  var valid_21629003 = formData.getOrDefault("SubscriptionName")
  valid_21629003 = validateParameter(valid_21629003, JString, required = false,
                                   default = nil)
  if valid_21629003 != nil:
    section.add "SubscriptionName", valid_21629003
  var valid_21629004 = formData.getOrDefault("Filters")
  valid_21629004 = validateParameter(valid_21629004, JArray, required = false,
                                   default = nil)
  if valid_21629004 != nil:
    section.add "Filters", valid_21629004
  var valid_21629005 = formData.getOrDefault("MaxRecords")
  valid_21629005 = validateParameter(valid_21629005, JInt, required = false,
                                   default = nil)
  if valid_21629005 != nil:
    section.add "MaxRecords", valid_21629005
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629006: Call_PostDescribeEventSubscriptions_21628990;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_21629006.validator(path, query, header, formData, body, _)
  let scheme = call_21629006.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629006.makeUrl(scheme.get, call_21629006.host, call_21629006.base,
                               call_21629006.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629006, uri, valid, _)

proc call*(call_21629007: Call_PostDescribeEventSubscriptions_21628990;
          Marker: string = ""; SubscriptionName: string = "";
          Action: string = "DescribeEventSubscriptions"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: string
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21629008 = newJObject()
  var formData_21629009 = newJObject()
  add(formData_21629009, "Marker", newJString(Marker))
  add(formData_21629009, "SubscriptionName", newJString(SubscriptionName))
  add(query_21629008, "Action", newJString(Action))
  if Filters != nil:
    formData_21629009.add "Filters", Filters
  add(formData_21629009, "MaxRecords", newJInt(MaxRecords))
  add(query_21629008, "Version", newJString(Version))
  result = call_21629007.call(nil, query_21629008, nil, formData_21629009, nil)

var postDescribeEventSubscriptions* = Call_PostDescribeEventSubscriptions_21628990(
    name: "postDescribeEventSubscriptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_PostDescribeEventSubscriptions_21628991, base: "/",
    makeUrl: url_PostDescribeEventSubscriptions_21628992,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEventSubscriptions_21628971 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeEventSubscriptions_21628973(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEventSubscriptions_21628972(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: JString
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21628974 = query.getOrDefault("MaxRecords")
  valid_21628974 = validateParameter(valid_21628974, JInt, required = false,
                                   default = nil)
  if valid_21628974 != nil:
    section.add "MaxRecords", valid_21628974
  var valid_21628975 = query.getOrDefault("Filters")
  valid_21628975 = validateParameter(valid_21628975, JArray, required = false,
                                   default = nil)
  if valid_21628975 != nil:
    section.add "Filters", valid_21628975
  var valid_21628976 = query.getOrDefault("Action")
  valid_21628976 = validateParameter(valid_21628976, JString, required = true, default = newJString(
      "DescribeEventSubscriptions"))
  if valid_21628976 != nil:
    section.add "Action", valid_21628976
  var valid_21628977 = query.getOrDefault("Marker")
  valid_21628977 = validateParameter(valid_21628977, JString, required = false,
                                   default = nil)
  if valid_21628977 != nil:
    section.add "Marker", valid_21628977
  var valid_21628978 = query.getOrDefault("SubscriptionName")
  valid_21628978 = validateParameter(valid_21628978, JString, required = false,
                                   default = nil)
  if valid_21628978 != nil:
    section.add "SubscriptionName", valid_21628978
  var valid_21628979 = query.getOrDefault("Version")
  valid_21628979 = validateParameter(valid_21628979, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21628979 != nil:
    section.add "Version", valid_21628979
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21628980 = header.getOrDefault("X-Amz-Date")
  valid_21628980 = validateParameter(valid_21628980, JString, required = false,
                                   default = nil)
  if valid_21628980 != nil:
    section.add "X-Amz-Date", valid_21628980
  var valid_21628981 = header.getOrDefault("X-Amz-Security-Token")
  valid_21628981 = validateParameter(valid_21628981, JString, required = false,
                                   default = nil)
  if valid_21628981 != nil:
    section.add "X-Amz-Security-Token", valid_21628981
  var valid_21628982 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21628982 = validateParameter(valid_21628982, JString, required = false,
                                   default = nil)
  if valid_21628982 != nil:
    section.add "X-Amz-Content-Sha256", valid_21628982
  var valid_21628983 = header.getOrDefault("X-Amz-Algorithm")
  valid_21628983 = validateParameter(valid_21628983, JString, required = false,
                                   default = nil)
  if valid_21628983 != nil:
    section.add "X-Amz-Algorithm", valid_21628983
  var valid_21628984 = header.getOrDefault("X-Amz-Signature")
  valid_21628984 = validateParameter(valid_21628984, JString, required = false,
                                   default = nil)
  if valid_21628984 != nil:
    section.add "X-Amz-Signature", valid_21628984
  var valid_21628985 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21628985 = validateParameter(valid_21628985, JString, required = false,
                                   default = nil)
  if valid_21628985 != nil:
    section.add "X-Amz-SignedHeaders", valid_21628985
  var valid_21628986 = header.getOrDefault("X-Amz-Credential")
  valid_21628986 = validateParameter(valid_21628986, JString, required = false,
                                   default = nil)
  if valid_21628986 != nil:
    section.add "X-Amz-Credential", valid_21628986
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21628987: Call_GetDescribeEventSubscriptions_21628971;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ## 
  let valid = call_21628987.validator(path, query, header, formData, body, _)
  let scheme = call_21628987.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21628987.makeUrl(scheme.get, call_21628987.host, call_21628987.base,
                               call_21628987.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21628987, uri, valid, _)

proc call*(call_21628988: Call_GetDescribeEventSubscriptions_21628971;
          MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeEventSubscriptions"; Marker: string = "";
          SubscriptionName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEventSubscriptions
  ## <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status.</p> <p>If you specify a SubscriptionName, lists the description for that subscription.</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   SubscriptionName: string
  ##                   : The name of the RDS event notification subscription you want to describe.
  ##   Version: string (required)
  var query_21628989 = newJObject()
  add(query_21628989, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21628989.add "Filters", Filters
  add(query_21628989, "Action", newJString(Action))
  add(query_21628989, "Marker", newJString(Marker))
  add(query_21628989, "SubscriptionName", newJString(SubscriptionName))
  add(query_21628989, "Version", newJString(Version))
  result = call_21628988.call(nil, query_21628989, nil, nil, nil)

var getDescribeEventSubscriptions* = Call_GetDescribeEventSubscriptions_21628971(
    name: "getDescribeEventSubscriptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEventSubscriptions",
    validator: validate_GetDescribeEventSubscriptions_21628972, base: "/",
    makeUrl: url_GetDescribeEventSubscriptions_21628973,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeEvents_21629034 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeEvents_21629036(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeEvents_21629035(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629037 = query.getOrDefault("Action")
  valid_21629037 = validateParameter(valid_21629037, JString, required = true,
                                   default = newJString("DescribeEvents"))
  if valid_21629037 != nil:
    section.add "Action", valid_21629037
  var valid_21629038 = query.getOrDefault("Version")
  valid_21629038 = validateParameter(valid_21629038, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629038 != nil:
    section.add "Version", valid_21629038
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629039 = header.getOrDefault("X-Amz-Date")
  valid_21629039 = validateParameter(valid_21629039, JString, required = false,
                                   default = nil)
  if valid_21629039 != nil:
    section.add "X-Amz-Date", valid_21629039
  var valid_21629040 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629040 = validateParameter(valid_21629040, JString, required = false,
                                   default = nil)
  if valid_21629040 != nil:
    section.add "X-Amz-Security-Token", valid_21629040
  var valid_21629041 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629041 = validateParameter(valid_21629041, JString, required = false,
                                   default = nil)
  if valid_21629041 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629041
  var valid_21629042 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629042 = validateParameter(valid_21629042, JString, required = false,
                                   default = nil)
  if valid_21629042 != nil:
    section.add "X-Amz-Algorithm", valid_21629042
  var valid_21629043 = header.getOrDefault("X-Amz-Signature")
  valid_21629043 = validateParameter(valid_21629043, JString, required = false,
                                   default = nil)
  if valid_21629043 != nil:
    section.add "X-Amz-Signature", valid_21629043
  var valid_21629044 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629044 = validateParameter(valid_21629044, JString, required = false,
                                   default = nil)
  if valid_21629044 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629044
  var valid_21629045 = header.getOrDefault("X-Amz-Credential")
  valid_21629045 = validateParameter(valid_21629045, JString, required = false,
                                   default = nil)
  if valid_21629045 != nil:
    section.add "X-Amz-Credential", valid_21629045
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  section = newJObject()
  var valid_21629046 = formData.getOrDefault("SourceIdentifier")
  valid_21629046 = validateParameter(valid_21629046, JString, required = false,
                                   default = nil)
  if valid_21629046 != nil:
    section.add "SourceIdentifier", valid_21629046
  var valid_21629047 = formData.getOrDefault("EventCategories")
  valid_21629047 = validateParameter(valid_21629047, JArray, required = false,
                                   default = nil)
  if valid_21629047 != nil:
    section.add "EventCategories", valid_21629047
  var valid_21629048 = formData.getOrDefault("Marker")
  valid_21629048 = validateParameter(valid_21629048, JString, required = false,
                                   default = nil)
  if valid_21629048 != nil:
    section.add "Marker", valid_21629048
  var valid_21629049 = formData.getOrDefault("StartTime")
  valid_21629049 = validateParameter(valid_21629049, JString, required = false,
                                   default = nil)
  if valid_21629049 != nil:
    section.add "StartTime", valid_21629049
  var valid_21629050 = formData.getOrDefault("Duration")
  valid_21629050 = validateParameter(valid_21629050, JInt, required = false,
                                   default = nil)
  if valid_21629050 != nil:
    section.add "Duration", valid_21629050
  var valid_21629051 = formData.getOrDefault("Filters")
  valid_21629051 = validateParameter(valid_21629051, JArray, required = false,
                                   default = nil)
  if valid_21629051 != nil:
    section.add "Filters", valid_21629051
  var valid_21629052 = formData.getOrDefault("EndTime")
  valid_21629052 = validateParameter(valid_21629052, JString, required = false,
                                   default = nil)
  if valid_21629052 != nil:
    section.add "EndTime", valid_21629052
  var valid_21629053 = formData.getOrDefault("MaxRecords")
  valid_21629053 = validateParameter(valid_21629053, JInt, required = false,
                                   default = nil)
  if valid_21629053 != nil:
    section.add "MaxRecords", valid_21629053
  var valid_21629054 = formData.getOrDefault("SourceType")
  valid_21629054 = validateParameter(valid_21629054, JString, required = false,
                                   default = newJString("db-instance"))
  if valid_21629054 != nil:
    section.add "SourceType", valid_21629054
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629055: Call_PostDescribeEvents_21629034; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_21629055.validator(path, query, header, formData, body, _)
  let scheme = call_21629055.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629055.makeUrl(scheme.get, call_21629055.host, call_21629055.base,
                               call_21629055.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629055, uri, valid, _)

proc call*(call_21629056: Call_PostDescribeEvents_21629034;
          SourceIdentifier: string = ""; EventCategories: JsonNode = nil;
          Marker: string = ""; StartTime: string = "";
          Action: string = "DescribeEvents"; Duration: int = 0; Filters: JsonNode = nil;
          EndTime: string = ""; MaxRecords: int = 0; Version: string = "2014-10-31";
          SourceType: string = "db-instance"): Recallable =
  ## postDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Action: string (required)
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  var query_21629057 = newJObject()
  var formData_21629058 = newJObject()
  add(formData_21629058, "SourceIdentifier", newJString(SourceIdentifier))
  if EventCategories != nil:
    formData_21629058.add "EventCategories", EventCategories
  add(formData_21629058, "Marker", newJString(Marker))
  add(formData_21629058, "StartTime", newJString(StartTime))
  add(query_21629057, "Action", newJString(Action))
  add(formData_21629058, "Duration", newJInt(Duration))
  if Filters != nil:
    formData_21629058.add "Filters", Filters
  add(formData_21629058, "EndTime", newJString(EndTime))
  add(formData_21629058, "MaxRecords", newJInt(MaxRecords))
  add(query_21629057, "Version", newJString(Version))
  add(formData_21629058, "SourceType", newJString(SourceType))
  result = call_21629056.call(nil, query_21629057, nil, formData_21629058, nil)

var postDescribeEvents* = Call_PostDescribeEvents_21629034(
    name: "postDescribeEvents", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeEvents",
    validator: validate_PostDescribeEvents_21629035, base: "/",
    makeUrl: url_PostDescribeEvents_21629036, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeEvents_21629010 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeEvents_21629012(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeEvents_21629011(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   StartTime: JString
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: JString (required)
  ##   SourceIdentifier: JString
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Duration: JInt
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: JString
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629013 = query.getOrDefault("SourceType")
  valid_21629013 = validateParameter(valid_21629013, JString, required = false,
                                   default = newJString("db-instance"))
  if valid_21629013 != nil:
    section.add "SourceType", valid_21629013
  var valid_21629014 = query.getOrDefault("MaxRecords")
  valid_21629014 = validateParameter(valid_21629014, JInt, required = false,
                                   default = nil)
  if valid_21629014 != nil:
    section.add "MaxRecords", valid_21629014
  var valid_21629015 = query.getOrDefault("StartTime")
  valid_21629015 = validateParameter(valid_21629015, JString, required = false,
                                   default = nil)
  if valid_21629015 != nil:
    section.add "StartTime", valid_21629015
  var valid_21629016 = query.getOrDefault("Filters")
  valid_21629016 = validateParameter(valid_21629016, JArray, required = false,
                                   default = nil)
  if valid_21629016 != nil:
    section.add "Filters", valid_21629016
  var valid_21629017 = query.getOrDefault("Action")
  valid_21629017 = validateParameter(valid_21629017, JString, required = true,
                                   default = newJString("DescribeEvents"))
  if valid_21629017 != nil:
    section.add "Action", valid_21629017
  var valid_21629018 = query.getOrDefault("SourceIdentifier")
  valid_21629018 = validateParameter(valid_21629018, JString, required = false,
                                   default = nil)
  if valid_21629018 != nil:
    section.add "SourceIdentifier", valid_21629018
  var valid_21629019 = query.getOrDefault("Marker")
  valid_21629019 = validateParameter(valid_21629019, JString, required = false,
                                   default = nil)
  if valid_21629019 != nil:
    section.add "Marker", valid_21629019
  var valid_21629020 = query.getOrDefault("EventCategories")
  valid_21629020 = validateParameter(valid_21629020, JArray, required = false,
                                   default = nil)
  if valid_21629020 != nil:
    section.add "EventCategories", valid_21629020
  var valid_21629021 = query.getOrDefault("Duration")
  valid_21629021 = validateParameter(valid_21629021, JInt, required = false,
                                   default = nil)
  if valid_21629021 != nil:
    section.add "Duration", valid_21629021
  var valid_21629022 = query.getOrDefault("EndTime")
  valid_21629022 = validateParameter(valid_21629022, JString, required = false,
                                   default = nil)
  if valid_21629022 != nil:
    section.add "EndTime", valid_21629022
  var valid_21629023 = query.getOrDefault("Version")
  valid_21629023 = validateParameter(valid_21629023, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629023 != nil:
    section.add "Version", valid_21629023
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629024 = header.getOrDefault("X-Amz-Date")
  valid_21629024 = validateParameter(valid_21629024, JString, required = false,
                                   default = nil)
  if valid_21629024 != nil:
    section.add "X-Amz-Date", valid_21629024
  var valid_21629025 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629025 = validateParameter(valid_21629025, JString, required = false,
                                   default = nil)
  if valid_21629025 != nil:
    section.add "X-Amz-Security-Token", valid_21629025
  var valid_21629026 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629026 = validateParameter(valid_21629026, JString, required = false,
                                   default = nil)
  if valid_21629026 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629026
  var valid_21629027 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629027 = validateParameter(valid_21629027, JString, required = false,
                                   default = nil)
  if valid_21629027 != nil:
    section.add "X-Amz-Algorithm", valid_21629027
  var valid_21629028 = header.getOrDefault("X-Amz-Signature")
  valid_21629028 = validateParameter(valid_21629028, JString, required = false,
                                   default = nil)
  if valid_21629028 != nil:
    section.add "X-Amz-Signature", valid_21629028
  var valid_21629029 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629029 = validateParameter(valid_21629029, JString, required = false,
                                   default = nil)
  if valid_21629029 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629029
  var valid_21629030 = header.getOrDefault("X-Amz-Credential")
  valid_21629030 = validateParameter(valid_21629030, JString, required = false,
                                   default = nil)
  if valid_21629030 != nil:
    section.add "X-Amz-Credential", valid_21629030
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629031: Call_GetDescribeEvents_21629010; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ## 
  let valid = call_21629031.validator(path, query, header, formData, body, _)
  let scheme = call_21629031.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629031.makeUrl(scheme.get, call_21629031.host, call_21629031.base,
                               call_21629031.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629031, uri, valid, _)

proc call*(call_21629032: Call_GetDescribeEvents_21629010;
          SourceType: string = "db-instance"; MaxRecords: int = 0;
          StartTime: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeEvents"; SourceIdentifier: string = "";
          Marker: string = ""; EventCategories: JsonNode = nil; Duration: int = 0;
          EndTime: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeEvents
  ## Returns events related to DB instances, DB security groups, DB snapshots, and DB parameter groups for the past 14 days. Events specific to a particular DB instance, DB security group, database snapshot, or DB parameter group can be obtained by providing the name as a parameter. By default, the past hour of events are returned.
  ##   SourceType: string
  ##             : The event source to retrieve events for. If no value is specified, all events are returned.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   StartTime: string
  ##            : <p> The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: string (required)
  ##   SourceIdentifier: string
  ##                   : <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p> <p>Constraints:</p> <ul> <li> <p>If SourceIdentifier is supplied, SourceType must also be provided.</p> </li> <li> <p>If the source type is <code>DBInstance</code>, then a <code>DBInstanceIdentifier</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSecurityGroup</code>, a <code>DBSecurityGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBParameterGroup</code>, a <code>DBParameterGroupName</code> must be supplied.</p> </li> <li> <p>If the source type is <code>DBSnapshot</code>, a <code>DBSnapshotIdentifier</code> must be supplied.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EventCategories: JArray
  ##                  : A list of event categories that trigger notifications for a event notification subscription.
  ##   Duration: int
  ##           : <p>The number of minutes to retrieve events for.</p> <p>Default: 60</p>
  ##   EndTime: string
  ##          : <p> The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <p>Example: 2009-07-08T18:00Z</p>
  ##   Version: string (required)
  var query_21629033 = newJObject()
  add(query_21629033, "SourceType", newJString(SourceType))
  add(query_21629033, "MaxRecords", newJInt(MaxRecords))
  add(query_21629033, "StartTime", newJString(StartTime))
  if Filters != nil:
    query_21629033.add "Filters", Filters
  add(query_21629033, "Action", newJString(Action))
  add(query_21629033, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_21629033, "Marker", newJString(Marker))
  if EventCategories != nil:
    query_21629033.add "EventCategories", EventCategories
  add(query_21629033, "Duration", newJInt(Duration))
  add(query_21629033, "EndTime", newJString(EndTime))
  add(query_21629033, "Version", newJString(Version))
  result = call_21629032.call(nil, query_21629033, nil, nil, nil)

var getDescribeEvents* = Call_GetDescribeEvents_21629010(name: "getDescribeEvents",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=DescribeEvents", validator: validate_GetDescribeEvents_21629011,
    base: "/", makeUrl: url_GetDescribeEvents_21629012,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeExportTasks_21629079 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeExportTasks_21629081(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeExportTasks_21629080(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns information about a snapshot export to Amazon S3. This API operation supports pagination. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629082 = query.getOrDefault("Action")
  valid_21629082 = validateParameter(valid_21629082, JString, required = true,
                                   default = newJString("DescribeExportTasks"))
  if valid_21629082 != nil:
    section.add "Action", valid_21629082
  var valid_21629083 = query.getOrDefault("Version")
  valid_21629083 = validateParameter(valid_21629083, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629083 != nil:
    section.add "Version", valid_21629083
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629084 = header.getOrDefault("X-Amz-Date")
  valid_21629084 = validateParameter(valid_21629084, JString, required = false,
                                   default = nil)
  if valid_21629084 != nil:
    section.add "X-Amz-Date", valid_21629084
  var valid_21629085 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629085 = validateParameter(valid_21629085, JString, required = false,
                                   default = nil)
  if valid_21629085 != nil:
    section.add "X-Amz-Security-Token", valid_21629085
  var valid_21629086 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629086 = validateParameter(valid_21629086, JString, required = false,
                                   default = nil)
  if valid_21629086 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629086
  var valid_21629087 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629087 = validateParameter(valid_21629087, JString, required = false,
                                   default = nil)
  if valid_21629087 != nil:
    section.add "X-Amz-Algorithm", valid_21629087
  var valid_21629088 = header.getOrDefault("X-Amz-Signature")
  valid_21629088 = validateParameter(valid_21629088, JString, required = false,
                                   default = nil)
  if valid_21629088 != nil:
    section.add "X-Amz-Signature", valid_21629088
  var valid_21629089 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629089 = validateParameter(valid_21629089, JString, required = false,
                                   default = nil)
  if valid_21629089 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629089
  var valid_21629090 = header.getOrDefault("X-Amz-Credential")
  valid_21629090 = validateParameter(valid_21629090, JString, required = false,
                                   default = nil)
  if valid_21629090 != nil:
    section.add "X-Amz-Credential", valid_21629090
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceArn: JString
  ##            : The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeExportTasks</code> request. If you specify this parameter, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. 
  ##   ExportTaskIdentifier: JString
  ##                       : The identifier of the snapshot export task to be described.
  ##   Filters: JArray
  ##          : <p>Filters specify one or more snapshot exports to describe. The filters are specified as name-value pairs that define what to include in the output.</p> <p>Supported filters include the following: </p> <ul> <li> <p> <code>export-task-identifier</code> - An identifier for the snapshot export task.</p> </li> <li> <p> <code>s3-bucket</code> - The Amazon S3 bucket the snapshot is exported to.</p> </li> <li> <p> <code>source-arn</code> - The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3</p> </li> <li> <p> <code>status</code> - The status of the export task.</p> </li> </ul>
  ##   MaxRecords: JString
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified value, a pagination token called a marker is included in the response. You can use the marker in a later <code>DescribeExportTasks</code> request to retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21629091 = formData.getOrDefault("SourceArn")
  valid_21629091 = validateParameter(valid_21629091, JString, required = false,
                                   default = nil)
  if valid_21629091 != nil:
    section.add "SourceArn", valid_21629091
  var valid_21629092 = formData.getOrDefault("Marker")
  valid_21629092 = validateParameter(valid_21629092, JString, required = false,
                                   default = nil)
  if valid_21629092 != nil:
    section.add "Marker", valid_21629092
  var valid_21629093 = formData.getOrDefault("ExportTaskIdentifier")
  valid_21629093 = validateParameter(valid_21629093, JString, required = false,
                                   default = nil)
  if valid_21629093 != nil:
    section.add "ExportTaskIdentifier", valid_21629093
  var valid_21629094 = formData.getOrDefault("Filters")
  valid_21629094 = validateParameter(valid_21629094, JArray, required = false,
                                   default = nil)
  if valid_21629094 != nil:
    section.add "Filters", valid_21629094
  var valid_21629095 = formData.getOrDefault("MaxRecords")
  valid_21629095 = validateParameter(valid_21629095, JString, required = false,
                                   default = nil)
  if valid_21629095 != nil:
    section.add "MaxRecords", valid_21629095
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629096: Call_PostDescribeExportTasks_21629079;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns information about a snapshot export to Amazon S3. This API operation supports pagination. 
  ## 
  let valid = call_21629096.validator(path, query, header, formData, body, _)
  let scheme = call_21629096.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629096.makeUrl(scheme.get, call_21629096.host, call_21629096.base,
                               call_21629096.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629096, uri, valid, _)

proc call*(call_21629097: Call_PostDescribeExportTasks_21629079;
          SourceArn: string = ""; Marker: string = "";
          ExportTaskIdentifier: string = ""; Action: string = "DescribeExportTasks";
          Filters: JsonNode = nil; MaxRecords: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeExportTasks
  ## Returns information about a snapshot export to Amazon S3. This API operation supports pagination. 
  ##   SourceArn: string
  ##            : The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeExportTasks</code> request. If you specify this parameter, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. 
  ##   ExportTaskIdentifier: string
  ##                       : The identifier of the snapshot export task to be described.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>Filters specify one or more snapshot exports to describe. The filters are specified as name-value pairs that define what to include in the output.</p> <p>Supported filters include the following: </p> <ul> <li> <p> <code>export-task-identifier</code> - An identifier for the snapshot export task.</p> </li> <li> <p> <code>s3-bucket</code> - The Amazon S3 bucket the snapshot is exported to.</p> </li> <li> <p> <code>source-arn</code> - The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3</p> </li> <li> <p> <code>status</code> - The status of the export task.</p> </li> </ul>
  ##   MaxRecords: string
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified value, a pagination token called a marker is included in the response. You can use the marker in a later <code>DescribeExportTasks</code> request to retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21629098 = newJObject()
  var formData_21629099 = newJObject()
  add(formData_21629099, "SourceArn", newJString(SourceArn))
  add(formData_21629099, "Marker", newJString(Marker))
  add(formData_21629099, "ExportTaskIdentifier", newJString(ExportTaskIdentifier))
  add(query_21629098, "Action", newJString(Action))
  if Filters != nil:
    formData_21629099.add "Filters", Filters
  add(formData_21629099, "MaxRecords", newJString(MaxRecords))
  add(query_21629098, "Version", newJString(Version))
  result = call_21629097.call(nil, query_21629098, nil, formData_21629099, nil)

var postDescribeExportTasks* = Call_PostDescribeExportTasks_21629079(
    name: "postDescribeExportTasks", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeExportTasks",
    validator: validate_PostDescribeExportTasks_21629080, base: "/",
    makeUrl: url_PostDescribeExportTasks_21629081,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeExportTasks_21629059 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeExportTasks_21629061(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeExportTasks_21629060(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns information about a snapshot export to Amazon S3. This API operation supports pagination. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JString
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified value, a pagination token called a marker is included in the response. You can use the marker in a later <code>DescribeExportTasks</code> request to retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>Filters specify one or more snapshot exports to describe. The filters are specified as name-value pairs that define what to include in the output.</p> <p>Supported filters include the following: </p> <ul> <li> <p> <code>export-task-identifier</code> - An identifier for the snapshot export task.</p> </li> <li> <p> <code>s3-bucket</code> - The Amazon S3 bucket the snapshot is exported to.</p> </li> <li> <p> <code>source-arn</code> - The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3</p> </li> <li> <p> <code>status</code> - The status of the export task.</p> </li> </ul>
  ##   SourceArn: JString
  ##            : The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeExportTasks</code> request. If you specify this parameter, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. 
  ##   Version: JString (required)
  ##   ExportTaskIdentifier: JString
  ##                       : The identifier of the snapshot export task to be described.
  section = newJObject()
  var valid_21629062 = query.getOrDefault("MaxRecords")
  valid_21629062 = validateParameter(valid_21629062, JString, required = false,
                                   default = nil)
  if valid_21629062 != nil:
    section.add "MaxRecords", valid_21629062
  var valid_21629063 = query.getOrDefault("Filters")
  valid_21629063 = validateParameter(valid_21629063, JArray, required = false,
                                   default = nil)
  if valid_21629063 != nil:
    section.add "Filters", valid_21629063
  var valid_21629064 = query.getOrDefault("SourceArn")
  valid_21629064 = validateParameter(valid_21629064, JString, required = false,
                                   default = nil)
  if valid_21629064 != nil:
    section.add "SourceArn", valid_21629064
  var valid_21629065 = query.getOrDefault("Action")
  valid_21629065 = validateParameter(valid_21629065, JString, required = true,
                                   default = newJString("DescribeExportTasks"))
  if valid_21629065 != nil:
    section.add "Action", valid_21629065
  var valid_21629066 = query.getOrDefault("Marker")
  valid_21629066 = validateParameter(valid_21629066, JString, required = false,
                                   default = nil)
  if valid_21629066 != nil:
    section.add "Marker", valid_21629066
  var valid_21629067 = query.getOrDefault("Version")
  valid_21629067 = validateParameter(valid_21629067, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629067 != nil:
    section.add "Version", valid_21629067
  var valid_21629068 = query.getOrDefault("ExportTaskIdentifier")
  valid_21629068 = validateParameter(valid_21629068, JString, required = false,
                                   default = nil)
  if valid_21629068 != nil:
    section.add "ExportTaskIdentifier", valid_21629068
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629069 = header.getOrDefault("X-Amz-Date")
  valid_21629069 = validateParameter(valid_21629069, JString, required = false,
                                   default = nil)
  if valid_21629069 != nil:
    section.add "X-Amz-Date", valid_21629069
  var valid_21629070 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629070 = validateParameter(valid_21629070, JString, required = false,
                                   default = nil)
  if valid_21629070 != nil:
    section.add "X-Amz-Security-Token", valid_21629070
  var valid_21629071 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629071 = validateParameter(valid_21629071, JString, required = false,
                                   default = nil)
  if valid_21629071 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629071
  var valid_21629072 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629072 = validateParameter(valid_21629072, JString, required = false,
                                   default = nil)
  if valid_21629072 != nil:
    section.add "X-Amz-Algorithm", valid_21629072
  var valid_21629073 = header.getOrDefault("X-Amz-Signature")
  valid_21629073 = validateParameter(valid_21629073, JString, required = false,
                                   default = nil)
  if valid_21629073 != nil:
    section.add "X-Amz-Signature", valid_21629073
  var valid_21629074 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629074 = validateParameter(valid_21629074, JString, required = false,
                                   default = nil)
  if valid_21629074 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629074
  var valid_21629075 = header.getOrDefault("X-Amz-Credential")
  valid_21629075 = validateParameter(valid_21629075, JString, required = false,
                                   default = nil)
  if valid_21629075 != nil:
    section.add "X-Amz-Credential", valid_21629075
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629076: Call_GetDescribeExportTasks_21629059;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns information about a snapshot export to Amazon S3. This API operation supports pagination. 
  ## 
  let valid = call_21629076.validator(path, query, header, formData, body, _)
  let scheme = call_21629076.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629076.makeUrl(scheme.get, call_21629076.host, call_21629076.base,
                               call_21629076.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629076, uri, valid, _)

proc call*(call_21629077: Call_GetDescribeExportTasks_21629059;
          MaxRecords: string = ""; Filters: JsonNode = nil; SourceArn: string = "";
          Action: string = "DescribeExportTasks"; Marker: string = "";
          Version: string = "2014-10-31"; ExportTaskIdentifier: string = ""): Recallable =
  ## getDescribeExportTasks
  ## Returns information about a snapshot export to Amazon S3. This API operation supports pagination. 
  ##   MaxRecords: string
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified value, a pagination token called a marker is included in the response. You can use the marker in a later <code>DescribeExportTasks</code> request to retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>Filters specify one or more snapshot exports to describe. The filters are specified as name-value pairs that define what to include in the output.</p> <p>Supported filters include the following: </p> <ul> <li> <p> <code>export-task-identifier</code> - An identifier for the snapshot export task.</p> </li> <li> <p> <code>s3-bucket</code> - The Amazon S3 bucket the snapshot is exported to.</p> </li> <li> <p> <code>source-arn</code> - The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3</p> </li> <li> <p> <code>status</code> - The status of the export task.</p> </li> </ul>
  ##   SourceArn: string
  ##            : The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeExportTasks</code> request. If you specify this parameter, the response includes only records beyond the marker, up to the value specified by the <code>MaxRecords</code> parameter. 
  ##   Version: string (required)
  ##   ExportTaskIdentifier: string
  ##                       : The identifier of the snapshot export task to be described.
  var query_21629078 = newJObject()
  add(query_21629078, "MaxRecords", newJString(MaxRecords))
  if Filters != nil:
    query_21629078.add "Filters", Filters
  add(query_21629078, "SourceArn", newJString(SourceArn))
  add(query_21629078, "Action", newJString(Action))
  add(query_21629078, "Marker", newJString(Marker))
  add(query_21629078, "Version", newJString(Version))
  add(query_21629078, "ExportTaskIdentifier", newJString(ExportTaskIdentifier))
  result = call_21629077.call(nil, query_21629078, nil, nil, nil)

var getDescribeExportTasks* = Call_GetDescribeExportTasks_21629059(
    name: "getDescribeExportTasks", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeExportTasks",
    validator: validate_GetDescribeExportTasks_21629060, base: "/",
    makeUrl: url_GetDescribeExportTasks_21629061,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeGlobalClusters_21629119 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeGlobalClusters_21629121(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeGlobalClusters_21629120(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629122 = query.getOrDefault("Action")
  valid_21629122 = validateParameter(valid_21629122, JString, required = true, default = newJString(
      "DescribeGlobalClusters"))
  if valid_21629122 != nil:
    section.add "Action", valid_21629122
  var valid_21629123 = query.getOrDefault("Version")
  valid_21629123 = validateParameter(valid_21629123, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629123 != nil:
    section.add "Version", valid_21629123
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629124 = header.getOrDefault("X-Amz-Date")
  valid_21629124 = validateParameter(valid_21629124, JString, required = false,
                                   default = nil)
  if valid_21629124 != nil:
    section.add "X-Amz-Date", valid_21629124
  var valid_21629125 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629125 = validateParameter(valid_21629125, JString, required = false,
                                   default = nil)
  if valid_21629125 != nil:
    section.add "X-Amz-Security-Token", valid_21629125
  var valid_21629126 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629126 = validateParameter(valid_21629126, JString, required = false,
                                   default = nil)
  if valid_21629126 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629126
  var valid_21629127 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629127 = validateParameter(valid_21629127, JString, required = false,
                                   default = nil)
  if valid_21629127 != nil:
    section.add "X-Amz-Algorithm", valid_21629127
  var valid_21629128 = header.getOrDefault("X-Amz-Signature")
  valid_21629128 = validateParameter(valid_21629128, JString, required = false,
                                   default = nil)
  if valid_21629128 != nil:
    section.add "X-Amz-Signature", valid_21629128
  var valid_21629129 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629129 = validateParameter(valid_21629129, JString, required = false,
                                   default = nil)
  if valid_21629129 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629129
  var valid_21629130 = header.getOrDefault("X-Amz-Credential")
  valid_21629130 = validateParameter(valid_21629130, JString, required = false,
                                   default = nil)
  if valid_21629130 != nil:
    section.add "X-Amz-Credential", valid_21629130
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21629131 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_21629131 = validateParameter(valid_21629131, JString, required = false,
                                   default = nil)
  if valid_21629131 != nil:
    section.add "GlobalClusterIdentifier", valid_21629131
  var valid_21629132 = formData.getOrDefault("Marker")
  valid_21629132 = validateParameter(valid_21629132, JString, required = false,
                                   default = nil)
  if valid_21629132 != nil:
    section.add "Marker", valid_21629132
  var valid_21629133 = formData.getOrDefault("Filters")
  valid_21629133 = validateParameter(valid_21629133, JArray, required = false,
                                   default = nil)
  if valid_21629133 != nil:
    section.add "Filters", valid_21629133
  var valid_21629134 = formData.getOrDefault("MaxRecords")
  valid_21629134 = validateParameter(valid_21629134, JInt, required = false,
                                   default = nil)
  if valid_21629134 != nil:
    section.add "MaxRecords", valid_21629134
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629135: Call_PostDescribeGlobalClusters_21629119;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21629135.validator(path, query, header, formData, body, _)
  let scheme = call_21629135.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629135.makeUrl(scheme.get, call_21629135.host, call_21629135.base,
                               call_21629135.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629135, uri, valid, _)

proc call*(call_21629136: Call_PostDescribeGlobalClusters_21629119;
          GlobalClusterIdentifier: string = ""; Marker: string = "";
          Action: string = "DescribeGlobalClusters"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeGlobalClusters
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21629137 = newJObject()
  var formData_21629138 = newJObject()
  add(formData_21629138, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_21629138, "Marker", newJString(Marker))
  add(query_21629137, "Action", newJString(Action))
  if Filters != nil:
    formData_21629138.add "Filters", Filters
  add(formData_21629138, "MaxRecords", newJInt(MaxRecords))
  add(query_21629137, "Version", newJString(Version))
  result = call_21629136.call(nil, query_21629137, nil, formData_21629138, nil)

var postDescribeGlobalClusters* = Call_PostDescribeGlobalClusters_21629119(
    name: "postDescribeGlobalClusters", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeGlobalClusters",
    validator: validate_PostDescribeGlobalClusters_21629120, base: "/",
    makeUrl: url_PostDescribeGlobalClusters_21629121,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeGlobalClusters_21629100 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeGlobalClusters_21629102(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeGlobalClusters_21629101(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629103 = query.getOrDefault("MaxRecords")
  valid_21629103 = validateParameter(valid_21629103, JInt, required = false,
                                   default = nil)
  if valid_21629103 != nil:
    section.add "MaxRecords", valid_21629103
  var valid_21629104 = query.getOrDefault("Filters")
  valid_21629104 = validateParameter(valid_21629104, JArray, required = false,
                                   default = nil)
  if valid_21629104 != nil:
    section.add "Filters", valid_21629104
  var valid_21629105 = query.getOrDefault("Action")
  valid_21629105 = validateParameter(valid_21629105, JString, required = true, default = newJString(
      "DescribeGlobalClusters"))
  if valid_21629105 != nil:
    section.add "Action", valid_21629105
  var valid_21629106 = query.getOrDefault("Marker")
  valid_21629106 = validateParameter(valid_21629106, JString, required = false,
                                   default = nil)
  if valid_21629106 != nil:
    section.add "Marker", valid_21629106
  var valid_21629107 = query.getOrDefault("GlobalClusterIdentifier")
  valid_21629107 = validateParameter(valid_21629107, JString, required = false,
                                   default = nil)
  if valid_21629107 != nil:
    section.add "GlobalClusterIdentifier", valid_21629107
  var valid_21629108 = query.getOrDefault("Version")
  valid_21629108 = validateParameter(valid_21629108, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629108 != nil:
    section.add "Version", valid_21629108
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629109 = header.getOrDefault("X-Amz-Date")
  valid_21629109 = validateParameter(valid_21629109, JString, required = false,
                                   default = nil)
  if valid_21629109 != nil:
    section.add "X-Amz-Date", valid_21629109
  var valid_21629110 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629110 = validateParameter(valid_21629110, JString, required = false,
                                   default = nil)
  if valid_21629110 != nil:
    section.add "X-Amz-Security-Token", valid_21629110
  var valid_21629111 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629111 = validateParameter(valid_21629111, JString, required = false,
                                   default = nil)
  if valid_21629111 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629111
  var valid_21629112 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629112 = validateParameter(valid_21629112, JString, required = false,
                                   default = nil)
  if valid_21629112 != nil:
    section.add "X-Amz-Algorithm", valid_21629112
  var valid_21629113 = header.getOrDefault("X-Amz-Signature")
  valid_21629113 = validateParameter(valid_21629113, JString, required = false,
                                   default = nil)
  if valid_21629113 != nil:
    section.add "X-Amz-Signature", valid_21629113
  var valid_21629114 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629114 = validateParameter(valid_21629114, JString, required = false,
                                   default = nil)
  if valid_21629114 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629114
  var valid_21629115 = header.getOrDefault("X-Amz-Credential")
  valid_21629115 = validateParameter(valid_21629115, JString, required = false,
                                   default = nil)
  if valid_21629115 != nil:
    section.add "X-Amz-Credential", valid_21629115
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629116: Call_GetDescribeGlobalClusters_21629100;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21629116.validator(path, query, header, formData, body, _)
  let scheme = call_21629116.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629116.makeUrl(scheme.get, call_21629116.host, call_21629116.base,
                               call_21629116.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629116, uri, valid, _)

proc call*(call_21629117: Call_GetDescribeGlobalClusters_21629100;
          MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeGlobalClusters"; Marker: string = "";
          GlobalClusterIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeGlobalClusters
  ## <p> Returns information about Aurora global database clusters. This API supports pagination. </p> <p> For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more global DB clusters to describe.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.</p> </li> </ul>
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match an existing DBClusterIdentifier.</p> </li> </ul>
  ##   Version: string (required)
  var query_21629118 = newJObject()
  add(query_21629118, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21629118.add "Filters", Filters
  add(query_21629118, "Action", newJString(Action))
  add(query_21629118, "Marker", newJString(Marker))
  add(query_21629118, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_21629118, "Version", newJString(Version))
  result = call_21629117.call(nil, query_21629118, nil, nil, nil)

var getDescribeGlobalClusters* = Call_GetDescribeGlobalClusters_21629100(
    name: "getDescribeGlobalClusters", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeGlobalClusters",
    validator: validate_GetDescribeGlobalClusters_21629101, base: "/",
    makeUrl: url_GetDescribeGlobalClusters_21629102,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeInstallationMedia_21629158 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeInstallationMedia_21629160(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeInstallationMedia_21629159(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629161 = query.getOrDefault("Action")
  valid_21629161 = validateParameter(valid_21629161, JString, required = true, default = newJString(
      "DescribeInstallationMedia"))
  if valid_21629161 != nil:
    section.add "Action", valid_21629161
  var valid_21629162 = query.getOrDefault("Version")
  valid_21629162 = validateParameter(valid_21629162, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629162 != nil:
    section.add "Version", valid_21629162
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629163 = header.getOrDefault("X-Amz-Date")
  valid_21629163 = validateParameter(valid_21629163, JString, required = false,
                                   default = nil)
  if valid_21629163 != nil:
    section.add "X-Amz-Date", valid_21629163
  var valid_21629164 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629164 = validateParameter(valid_21629164, JString, required = false,
                                   default = nil)
  if valid_21629164 != nil:
    section.add "X-Amz-Security-Token", valid_21629164
  var valid_21629165 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629165 = validateParameter(valid_21629165, JString, required = false,
                                   default = nil)
  if valid_21629165 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629165
  var valid_21629166 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629166 = validateParameter(valid_21629166, JString, required = false,
                                   default = nil)
  if valid_21629166 != nil:
    section.add "X-Amz-Algorithm", valid_21629166
  var valid_21629167 = header.getOrDefault("X-Amz-Signature")
  valid_21629167 = validateParameter(valid_21629167, JString, required = false,
                                   default = nil)
  if valid_21629167 != nil:
    section.add "X-Amz-Signature", valid_21629167
  var valid_21629168 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629168 = validateParameter(valid_21629168, JString, required = false,
                                   default = nil)
  if valid_21629168 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629168
  var valid_21629169 = header.getOrDefault("X-Amz-Credential")
  valid_21629169 = validateParameter(valid_21629169, JString, required = false,
                                   default = nil)
  if valid_21629169 != nil:
    section.add "X-Amz-Credential", valid_21629169
  result.add "header", section
  ## parameters in `formData` object:
  ##   InstallationMediaId: JString
  ##                      : The installation medium ID.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  section = newJObject()
  var valid_21629170 = formData.getOrDefault("InstallationMediaId")
  valid_21629170 = validateParameter(valid_21629170, JString, required = false,
                                   default = nil)
  if valid_21629170 != nil:
    section.add "InstallationMediaId", valid_21629170
  var valid_21629171 = formData.getOrDefault("Marker")
  valid_21629171 = validateParameter(valid_21629171, JString, required = false,
                                   default = nil)
  if valid_21629171 != nil:
    section.add "Marker", valid_21629171
  var valid_21629172 = formData.getOrDefault("Filters")
  valid_21629172 = validateParameter(valid_21629172, JArray, required = false,
                                   default = nil)
  if valid_21629172 != nil:
    section.add "Filters", valid_21629172
  var valid_21629173 = formData.getOrDefault("MaxRecords")
  valid_21629173 = validateParameter(valid_21629173, JInt, required = false,
                                   default = nil)
  if valid_21629173 != nil:
    section.add "MaxRecords", valid_21629173
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629174: Call_PostDescribeInstallationMedia_21629158;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_21629174.validator(path, query, header, formData, body, _)
  let scheme = call_21629174.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629174.makeUrl(scheme.get, call_21629174.host, call_21629174.base,
                               call_21629174.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629174, uri, valid, _)

proc call*(call_21629175: Call_PostDescribeInstallationMedia_21629158;
          InstallationMediaId: string = ""; Marker: string = "";
          Action: string = "DescribeInstallationMedia"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeInstallationMedia
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   InstallationMediaId: string
  ##                      : The installation medium ID.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_21629176 = newJObject()
  var formData_21629177 = newJObject()
  add(formData_21629177, "InstallationMediaId", newJString(InstallationMediaId))
  add(formData_21629177, "Marker", newJString(Marker))
  add(query_21629176, "Action", newJString(Action))
  if Filters != nil:
    formData_21629177.add "Filters", Filters
  add(formData_21629177, "MaxRecords", newJInt(MaxRecords))
  add(query_21629176, "Version", newJString(Version))
  result = call_21629175.call(nil, query_21629176, nil, formData_21629177, nil)

var postDescribeInstallationMedia* = Call_PostDescribeInstallationMedia_21629158(
    name: "postDescribeInstallationMedia", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeInstallationMedia",
    validator: validate_PostDescribeInstallationMedia_21629159, base: "/",
    makeUrl: url_PostDescribeInstallationMedia_21629160,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeInstallationMedia_21629139 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeInstallationMedia_21629141(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeInstallationMedia_21629140(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   InstallationMediaId: JString
  ##                      : The installation medium ID.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629142 = query.getOrDefault("MaxRecords")
  valid_21629142 = validateParameter(valid_21629142, JInt, required = false,
                                   default = nil)
  if valid_21629142 != nil:
    section.add "MaxRecords", valid_21629142
  var valid_21629143 = query.getOrDefault("Filters")
  valid_21629143 = validateParameter(valid_21629143, JArray, required = false,
                                   default = nil)
  if valid_21629143 != nil:
    section.add "Filters", valid_21629143
  var valid_21629144 = query.getOrDefault("InstallationMediaId")
  valid_21629144 = validateParameter(valid_21629144, JString, required = false,
                                   default = nil)
  if valid_21629144 != nil:
    section.add "InstallationMediaId", valid_21629144
  var valid_21629145 = query.getOrDefault("Action")
  valid_21629145 = validateParameter(valid_21629145, JString, required = true, default = newJString(
      "DescribeInstallationMedia"))
  if valid_21629145 != nil:
    section.add "Action", valid_21629145
  var valid_21629146 = query.getOrDefault("Marker")
  valid_21629146 = validateParameter(valid_21629146, JString, required = false,
                                   default = nil)
  if valid_21629146 != nil:
    section.add "Marker", valid_21629146
  var valid_21629147 = query.getOrDefault("Version")
  valid_21629147 = validateParameter(valid_21629147, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629147 != nil:
    section.add "Version", valid_21629147
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629148 = header.getOrDefault("X-Amz-Date")
  valid_21629148 = validateParameter(valid_21629148, JString, required = false,
                                   default = nil)
  if valid_21629148 != nil:
    section.add "X-Amz-Date", valid_21629148
  var valid_21629149 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629149 = validateParameter(valid_21629149, JString, required = false,
                                   default = nil)
  if valid_21629149 != nil:
    section.add "X-Amz-Security-Token", valid_21629149
  var valid_21629150 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629150 = validateParameter(valid_21629150, JString, required = false,
                                   default = nil)
  if valid_21629150 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629150
  var valid_21629151 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629151 = validateParameter(valid_21629151, JString, required = false,
                                   default = nil)
  if valid_21629151 != nil:
    section.add "X-Amz-Algorithm", valid_21629151
  var valid_21629152 = header.getOrDefault("X-Amz-Signature")
  valid_21629152 = validateParameter(valid_21629152, JString, required = false,
                                   default = nil)
  if valid_21629152 != nil:
    section.add "X-Amz-Signature", valid_21629152
  var valid_21629153 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629153 = validateParameter(valid_21629153, JString, required = false,
                                   default = nil)
  if valid_21629153 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629153
  var valid_21629154 = header.getOrDefault("X-Amz-Credential")
  valid_21629154 = validateParameter(valid_21629154, JString, required = false,
                                   default = nil)
  if valid_21629154 != nil:
    section.add "X-Amz-Credential", valid_21629154
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629155: Call_GetDescribeInstallationMedia_21629139;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ## 
  let valid = call_21629155.validator(path, query, header, formData, body, _)
  let scheme = call_21629155.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629155.makeUrl(scheme.get, call_21629155.host, call_21629155.base,
                               call_21629155.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629155, uri, valid, _)

proc call*(call_21629156: Call_GetDescribeInstallationMedia_21629139;
          MaxRecords: int = 0; Filters: JsonNode = nil;
          InstallationMediaId: string = "";
          Action: string = "DescribeInstallationMedia"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeInstallationMedia
  ## Describes the available installation media for a DB engine that requires an on-premises customer provided license, such as Microsoft SQL Server.
  ##   MaxRecords: int
  ##             : An optional pagination token provided by a previous DescribeInstallationMedia request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more installation media to describe. Supported filters include the following:</p> <ul> <li> <p> <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ) identifiers. The results list includes information about only the custom AZs identified by these identifiers.</p> </li> <li> <p> <code>engine</code> - Accepts database engines. The results list includes information about only the database engines identified by these identifiers.</p> <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p> </li> </ul>
  ##   InstallationMediaId: string
  ##                      : The installation medium ID.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  var query_21629157 = newJObject()
  add(query_21629157, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21629157.add "Filters", Filters
  add(query_21629157, "InstallationMediaId", newJString(InstallationMediaId))
  add(query_21629157, "Action", newJString(Action))
  add(query_21629157, "Marker", newJString(Marker))
  add(query_21629157, "Version", newJString(Version))
  result = call_21629156.call(nil, query_21629157, nil, nil, nil)

var getDescribeInstallationMedia* = Call_GetDescribeInstallationMedia_21629139(
    name: "getDescribeInstallationMedia", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeInstallationMedia",
    validator: validate_GetDescribeInstallationMedia_21629140, base: "/",
    makeUrl: url_GetDescribeInstallationMedia_21629141,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOptionGroupOptions_21629198 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeOptionGroupOptions_21629200(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOptionGroupOptions_21629199(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Describes all available options.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629201 = query.getOrDefault("Action")
  valid_21629201 = validateParameter(valid_21629201, JString, required = true, default = newJString(
      "DescribeOptionGroupOptions"))
  if valid_21629201 != nil:
    section.add "Action", valid_21629201
  var valid_21629202 = query.getOrDefault("Version")
  valid_21629202 = validateParameter(valid_21629202, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629202 != nil:
    section.add "Version", valid_21629202
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629203 = header.getOrDefault("X-Amz-Date")
  valid_21629203 = validateParameter(valid_21629203, JString, required = false,
                                   default = nil)
  if valid_21629203 != nil:
    section.add "X-Amz-Date", valid_21629203
  var valid_21629204 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629204 = validateParameter(valid_21629204, JString, required = false,
                                   default = nil)
  if valid_21629204 != nil:
    section.add "X-Amz-Security-Token", valid_21629204
  var valid_21629205 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629205 = validateParameter(valid_21629205, JString, required = false,
                                   default = nil)
  if valid_21629205 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629205
  var valid_21629206 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629206 = validateParameter(valid_21629206, JString, required = false,
                                   default = nil)
  if valid_21629206 != nil:
    section.add "X-Amz-Algorithm", valid_21629206
  var valid_21629207 = header.getOrDefault("X-Amz-Signature")
  valid_21629207 = validateParameter(valid_21629207, JString, required = false,
                                   default = nil)
  if valid_21629207 != nil:
    section.add "X-Amz-Signature", valid_21629207
  var valid_21629208 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629208 = validateParameter(valid_21629208, JString, required = false,
                                   default = nil)
  if valid_21629208 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629208
  var valid_21629209 = header.getOrDefault("X-Amz-Credential")
  valid_21629209 = validateParameter(valid_21629209, JString, required = false,
                                   default = nil)
  if valid_21629209 != nil:
    section.add "X-Amz-Credential", valid_21629209
  result.add "header", section
  ## parameters in `formData` object:
  ##   MajorEngineVersion: JString
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   EngineName: JString (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21629210 = formData.getOrDefault("MajorEngineVersion")
  valid_21629210 = validateParameter(valid_21629210, JString, required = false,
                                   default = nil)
  if valid_21629210 != nil:
    section.add "MajorEngineVersion", valid_21629210
  var valid_21629211 = formData.getOrDefault("Marker")
  valid_21629211 = validateParameter(valid_21629211, JString, required = false,
                                   default = nil)
  if valid_21629211 != nil:
    section.add "Marker", valid_21629211
  assert formData != nil,
        "formData argument is necessary due to required `EngineName` field"
  var valid_21629212 = formData.getOrDefault("EngineName")
  valid_21629212 = validateParameter(valid_21629212, JString, required = true,
                                   default = nil)
  if valid_21629212 != nil:
    section.add "EngineName", valid_21629212
  var valid_21629213 = formData.getOrDefault("Filters")
  valid_21629213 = validateParameter(valid_21629213, JArray, required = false,
                                   default = nil)
  if valid_21629213 != nil:
    section.add "Filters", valid_21629213
  var valid_21629214 = formData.getOrDefault("MaxRecords")
  valid_21629214 = validateParameter(valid_21629214, JInt, required = false,
                                   default = nil)
  if valid_21629214 != nil:
    section.add "MaxRecords", valid_21629214
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629215: Call_PostDescribeOptionGroupOptions_21629198;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes all available options.
  ## 
  let valid = call_21629215.validator(path, query, header, formData, body, _)
  let scheme = call_21629215.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629215.makeUrl(scheme.get, call_21629215.host, call_21629215.base,
                               call_21629215.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629215, uri, valid, _)

proc call*(call_21629216: Call_PostDescribeOptionGroupOptions_21629198;
          EngineName: string; MajorEngineVersion: string = ""; Marker: string = "";
          Action: string = "DescribeOptionGroupOptions"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeOptionGroupOptions
  ## Describes all available options.
  ##   MajorEngineVersion: string
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   EngineName: string (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21629217 = newJObject()
  var formData_21629218 = newJObject()
  add(formData_21629218, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(formData_21629218, "Marker", newJString(Marker))
  add(query_21629217, "Action", newJString(Action))
  add(formData_21629218, "EngineName", newJString(EngineName))
  if Filters != nil:
    formData_21629218.add "Filters", Filters
  add(formData_21629218, "MaxRecords", newJInt(MaxRecords))
  add(query_21629217, "Version", newJString(Version))
  result = call_21629216.call(nil, query_21629217, nil, formData_21629218, nil)

var postDescribeOptionGroupOptions* = Call_PostDescribeOptionGroupOptions_21629198(
    name: "postDescribeOptionGroupOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroupOptions",
    validator: validate_PostDescribeOptionGroupOptions_21629199, base: "/",
    makeUrl: url_PostDescribeOptionGroupOptions_21629200,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOptionGroupOptions_21629178 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeOptionGroupOptions_21629180(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOptionGroupOptions_21629179(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Describes all available options.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  ##   EngineName: JString (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   MajorEngineVersion: JString
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  section = newJObject()
  var valid_21629181 = query.getOrDefault("MaxRecords")
  valid_21629181 = validateParameter(valid_21629181, JInt, required = false,
                                   default = nil)
  if valid_21629181 != nil:
    section.add "MaxRecords", valid_21629181
  var valid_21629182 = query.getOrDefault("Filters")
  valid_21629182 = validateParameter(valid_21629182, JArray, required = false,
                                   default = nil)
  if valid_21629182 != nil:
    section.add "Filters", valid_21629182
  var valid_21629183 = query.getOrDefault("Action")
  valid_21629183 = validateParameter(valid_21629183, JString, required = true, default = newJString(
      "DescribeOptionGroupOptions"))
  if valid_21629183 != nil:
    section.add "Action", valid_21629183
  var valid_21629184 = query.getOrDefault("Marker")
  valid_21629184 = validateParameter(valid_21629184, JString, required = false,
                                   default = nil)
  if valid_21629184 != nil:
    section.add "Marker", valid_21629184
  var valid_21629185 = query.getOrDefault("Version")
  valid_21629185 = validateParameter(valid_21629185, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629185 != nil:
    section.add "Version", valid_21629185
  var valid_21629186 = query.getOrDefault("EngineName")
  valid_21629186 = validateParameter(valid_21629186, JString, required = true,
                                   default = nil)
  if valid_21629186 != nil:
    section.add "EngineName", valid_21629186
  var valid_21629187 = query.getOrDefault("MajorEngineVersion")
  valid_21629187 = validateParameter(valid_21629187, JString, required = false,
                                   default = nil)
  if valid_21629187 != nil:
    section.add "MajorEngineVersion", valid_21629187
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629188 = header.getOrDefault("X-Amz-Date")
  valid_21629188 = validateParameter(valid_21629188, JString, required = false,
                                   default = nil)
  if valid_21629188 != nil:
    section.add "X-Amz-Date", valid_21629188
  var valid_21629189 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629189 = validateParameter(valid_21629189, JString, required = false,
                                   default = nil)
  if valid_21629189 != nil:
    section.add "X-Amz-Security-Token", valid_21629189
  var valid_21629190 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629190 = validateParameter(valid_21629190, JString, required = false,
                                   default = nil)
  if valid_21629190 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629190
  var valid_21629191 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629191 = validateParameter(valid_21629191, JString, required = false,
                                   default = nil)
  if valid_21629191 != nil:
    section.add "X-Amz-Algorithm", valid_21629191
  var valid_21629192 = header.getOrDefault("X-Amz-Signature")
  valid_21629192 = validateParameter(valid_21629192, JString, required = false,
                                   default = nil)
  if valid_21629192 != nil:
    section.add "X-Amz-Signature", valid_21629192
  var valid_21629193 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629193 = validateParameter(valid_21629193, JString, required = false,
                                   default = nil)
  if valid_21629193 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629193
  var valid_21629194 = header.getOrDefault("X-Amz-Credential")
  valid_21629194 = validateParameter(valid_21629194, JString, required = false,
                                   default = nil)
  if valid_21629194 != nil:
    section.add "X-Amz-Credential", valid_21629194
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629195: Call_GetDescribeOptionGroupOptions_21629178;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes all available options.
  ## 
  let valid = call_21629195.validator(path, query, header, formData, body, _)
  let scheme = call_21629195.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629195.makeUrl(scheme.get, call_21629195.host, call_21629195.base,
                               call_21629195.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629195, uri, valid, _)

proc call*(call_21629196: Call_GetDescribeOptionGroupOptions_21629178;
          EngineName: string; MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeOptionGroupOptions"; Marker: string = "";
          Version: string = "2014-10-31"; MajorEngineVersion: string = ""): Recallable =
  ## getDescribeOptionGroupOptions
  ## Describes all available options.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  ##   EngineName: string (required)
  ##             : A required parameter. Options available for the given engine name are described.
  ##   MajorEngineVersion: string
  ##                     : If specified, filters the results to include only options for the specified major engine version.
  var query_21629197 = newJObject()
  add(query_21629197, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21629197.add "Filters", Filters
  add(query_21629197, "Action", newJString(Action))
  add(query_21629197, "Marker", newJString(Marker))
  add(query_21629197, "Version", newJString(Version))
  add(query_21629197, "EngineName", newJString(EngineName))
  add(query_21629197, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_21629196.call(nil, query_21629197, nil, nil, nil)

var getDescribeOptionGroupOptions* = Call_GetDescribeOptionGroupOptions_21629178(
    name: "getDescribeOptionGroupOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroupOptions",
    validator: validate_GetDescribeOptionGroupOptions_21629179, base: "/",
    makeUrl: url_GetDescribeOptionGroupOptions_21629180,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOptionGroups_21629240 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeOptionGroups_21629242(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOptionGroups_21629241(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describes the available option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629243 = query.getOrDefault("Action")
  valid_21629243 = validateParameter(valid_21629243, JString, required = true,
                                   default = newJString("DescribeOptionGroups"))
  if valid_21629243 != nil:
    section.add "Action", valid_21629243
  var valid_21629244 = query.getOrDefault("Version")
  valid_21629244 = validateParameter(valid_21629244, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629244 != nil:
    section.add "Version", valid_21629244
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629245 = header.getOrDefault("X-Amz-Date")
  valid_21629245 = validateParameter(valid_21629245, JString, required = false,
                                   default = nil)
  if valid_21629245 != nil:
    section.add "X-Amz-Date", valid_21629245
  var valid_21629246 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629246 = validateParameter(valid_21629246, JString, required = false,
                                   default = nil)
  if valid_21629246 != nil:
    section.add "X-Amz-Security-Token", valid_21629246
  var valid_21629247 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629247 = validateParameter(valid_21629247, JString, required = false,
                                   default = nil)
  if valid_21629247 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629247
  var valid_21629248 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629248 = validateParameter(valid_21629248, JString, required = false,
                                   default = nil)
  if valid_21629248 != nil:
    section.add "X-Amz-Algorithm", valid_21629248
  var valid_21629249 = header.getOrDefault("X-Amz-Signature")
  valid_21629249 = validateParameter(valid_21629249, JString, required = false,
                                   default = nil)
  if valid_21629249 != nil:
    section.add "X-Amz-Signature", valid_21629249
  var valid_21629250 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629250 = validateParameter(valid_21629250, JString, required = false,
                                   default = nil)
  if valid_21629250 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629250
  var valid_21629251 = header.getOrDefault("X-Amz-Credential")
  valid_21629251 = validateParameter(valid_21629251, JString, required = false,
                                   default = nil)
  if valid_21629251 != nil:
    section.add "X-Amz-Credential", valid_21629251
  result.add "header", section
  ## parameters in `formData` object:
  ##   MajorEngineVersion: JString
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   EngineName: JString
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21629252 = formData.getOrDefault("MajorEngineVersion")
  valid_21629252 = validateParameter(valid_21629252, JString, required = false,
                                   default = nil)
  if valid_21629252 != nil:
    section.add "MajorEngineVersion", valid_21629252
  var valid_21629253 = formData.getOrDefault("OptionGroupName")
  valid_21629253 = validateParameter(valid_21629253, JString, required = false,
                                   default = nil)
  if valid_21629253 != nil:
    section.add "OptionGroupName", valid_21629253
  var valid_21629254 = formData.getOrDefault("Marker")
  valid_21629254 = validateParameter(valid_21629254, JString, required = false,
                                   default = nil)
  if valid_21629254 != nil:
    section.add "Marker", valid_21629254
  var valid_21629255 = formData.getOrDefault("EngineName")
  valid_21629255 = validateParameter(valid_21629255, JString, required = false,
                                   default = nil)
  if valid_21629255 != nil:
    section.add "EngineName", valid_21629255
  var valid_21629256 = formData.getOrDefault("Filters")
  valid_21629256 = validateParameter(valid_21629256, JArray, required = false,
                                   default = nil)
  if valid_21629256 != nil:
    section.add "Filters", valid_21629256
  var valid_21629257 = formData.getOrDefault("MaxRecords")
  valid_21629257 = validateParameter(valid_21629257, JInt, required = false,
                                   default = nil)
  if valid_21629257 != nil:
    section.add "MaxRecords", valid_21629257
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629258: Call_PostDescribeOptionGroups_21629240;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes the available option groups.
  ## 
  let valid = call_21629258.validator(path, query, header, formData, body, _)
  let scheme = call_21629258.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629258.makeUrl(scheme.get, call_21629258.host, call_21629258.base,
                               call_21629258.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629258, uri, valid, _)

proc call*(call_21629259: Call_PostDescribeOptionGroups_21629240;
          MajorEngineVersion: string = ""; OptionGroupName: string = "";
          Marker: string = ""; Action: string = "DescribeOptionGroups";
          EngineName: string = ""; Filters: JsonNode = nil; MaxRecords: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOptionGroups
  ## Describes the available option groups.
  ##   MajorEngineVersion: string
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  ##   OptionGroupName: string
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   EngineName: string
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21629260 = newJObject()
  var formData_21629261 = newJObject()
  add(formData_21629261, "MajorEngineVersion", newJString(MajorEngineVersion))
  add(formData_21629261, "OptionGroupName", newJString(OptionGroupName))
  add(formData_21629261, "Marker", newJString(Marker))
  add(query_21629260, "Action", newJString(Action))
  add(formData_21629261, "EngineName", newJString(EngineName))
  if Filters != nil:
    formData_21629261.add "Filters", Filters
  add(formData_21629261, "MaxRecords", newJInt(MaxRecords))
  add(query_21629260, "Version", newJString(Version))
  result = call_21629259.call(nil, query_21629260, nil, formData_21629261, nil)

var postDescribeOptionGroups* = Call_PostDescribeOptionGroups_21629240(
    name: "postDescribeOptionGroups", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroups",
    validator: validate_PostDescribeOptionGroups_21629241, base: "/",
    makeUrl: url_PostDescribeOptionGroups_21629242,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOptionGroups_21629219 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeOptionGroups_21629221(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOptionGroups_21629220(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Describes the available option groups.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  ##   EngineName: JString
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   MajorEngineVersion: JString
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  section = newJObject()
  var valid_21629222 = query.getOrDefault("MaxRecords")
  valid_21629222 = validateParameter(valid_21629222, JInt, required = false,
                                   default = nil)
  if valid_21629222 != nil:
    section.add "MaxRecords", valid_21629222
  var valid_21629223 = query.getOrDefault("OptionGroupName")
  valid_21629223 = validateParameter(valid_21629223, JString, required = false,
                                   default = nil)
  if valid_21629223 != nil:
    section.add "OptionGroupName", valid_21629223
  var valid_21629224 = query.getOrDefault("Filters")
  valid_21629224 = validateParameter(valid_21629224, JArray, required = false,
                                   default = nil)
  if valid_21629224 != nil:
    section.add "Filters", valid_21629224
  var valid_21629225 = query.getOrDefault("Action")
  valid_21629225 = validateParameter(valid_21629225, JString, required = true,
                                   default = newJString("DescribeOptionGroups"))
  if valid_21629225 != nil:
    section.add "Action", valid_21629225
  var valid_21629226 = query.getOrDefault("Marker")
  valid_21629226 = validateParameter(valid_21629226, JString, required = false,
                                   default = nil)
  if valid_21629226 != nil:
    section.add "Marker", valid_21629226
  var valid_21629227 = query.getOrDefault("Version")
  valid_21629227 = validateParameter(valid_21629227, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629227 != nil:
    section.add "Version", valid_21629227
  var valid_21629228 = query.getOrDefault("EngineName")
  valid_21629228 = validateParameter(valid_21629228, JString, required = false,
                                   default = nil)
  if valid_21629228 != nil:
    section.add "EngineName", valid_21629228
  var valid_21629229 = query.getOrDefault("MajorEngineVersion")
  valid_21629229 = validateParameter(valid_21629229, JString, required = false,
                                   default = nil)
  if valid_21629229 != nil:
    section.add "MajorEngineVersion", valid_21629229
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629230 = header.getOrDefault("X-Amz-Date")
  valid_21629230 = validateParameter(valid_21629230, JString, required = false,
                                   default = nil)
  if valid_21629230 != nil:
    section.add "X-Amz-Date", valid_21629230
  var valid_21629231 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629231 = validateParameter(valid_21629231, JString, required = false,
                                   default = nil)
  if valid_21629231 != nil:
    section.add "X-Amz-Security-Token", valid_21629231
  var valid_21629232 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629232 = validateParameter(valid_21629232, JString, required = false,
                                   default = nil)
  if valid_21629232 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629232
  var valid_21629233 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629233 = validateParameter(valid_21629233, JString, required = false,
                                   default = nil)
  if valid_21629233 != nil:
    section.add "X-Amz-Algorithm", valid_21629233
  var valid_21629234 = header.getOrDefault("X-Amz-Signature")
  valid_21629234 = validateParameter(valid_21629234, JString, required = false,
                                   default = nil)
  if valid_21629234 != nil:
    section.add "X-Amz-Signature", valid_21629234
  var valid_21629235 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629235 = validateParameter(valid_21629235, JString, required = false,
                                   default = nil)
  if valid_21629235 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629235
  var valid_21629236 = header.getOrDefault("X-Amz-Credential")
  valid_21629236 = validateParameter(valid_21629236, JString, required = false,
                                   default = nil)
  if valid_21629236 != nil:
    section.add "X-Amz-Credential", valid_21629236
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629237: Call_GetDescribeOptionGroups_21629219;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Describes the available option groups.
  ## 
  let valid = call_21629237.validator(path, query, header, formData, body, _)
  let scheme = call_21629237.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629237.makeUrl(scheme.get, call_21629237.host, call_21629237.base,
                               call_21629237.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629237, uri, valid, _)

proc call*(call_21629238: Call_GetDescribeOptionGroups_21629219;
          MaxRecords: int = 0; OptionGroupName: string = ""; Filters: JsonNode = nil;
          Action: string = "DescribeOptionGroups"; Marker: string = "";
          Version: string = "2014-10-31"; EngineName: string = "";
          MajorEngineVersion: string = ""): Recallable =
  ## getDescribeOptionGroups
  ## Describes the available option groups.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  ##   EngineName: string
  ##             : Filters the list of option groups to only include groups associated with a specific database engine.
  ##   MajorEngineVersion: string
  ##                     : Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
  var query_21629239 = newJObject()
  add(query_21629239, "MaxRecords", newJInt(MaxRecords))
  add(query_21629239, "OptionGroupName", newJString(OptionGroupName))
  if Filters != nil:
    query_21629239.add "Filters", Filters
  add(query_21629239, "Action", newJString(Action))
  add(query_21629239, "Marker", newJString(Marker))
  add(query_21629239, "Version", newJString(Version))
  add(query_21629239, "EngineName", newJString(EngineName))
  add(query_21629239, "MajorEngineVersion", newJString(MajorEngineVersion))
  result = call_21629238.call(nil, query_21629239, nil, nil, nil)

var getDescribeOptionGroups* = Call_GetDescribeOptionGroups_21629219(
    name: "getDescribeOptionGroups", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeOptionGroups",
    validator: validate_GetDescribeOptionGroups_21629220, base: "/",
    makeUrl: url_GetDescribeOptionGroups_21629221,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeOrderableDBInstanceOptions_21629285 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeOrderableDBInstanceOptions_21629287(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeOrderableDBInstanceOptions_21629286(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629288 = query.getOrDefault("Action")
  valid_21629288 = validateParameter(valid_21629288, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_21629288 != nil:
    section.add "Action", valid_21629288
  var valid_21629289 = query.getOrDefault("Version")
  valid_21629289 = validateParameter(valid_21629289, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629289 != nil:
    section.add "Version", valid_21629289
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629290 = header.getOrDefault("X-Amz-Date")
  valid_21629290 = validateParameter(valid_21629290, JString, required = false,
                                   default = nil)
  if valid_21629290 != nil:
    section.add "X-Amz-Date", valid_21629290
  var valid_21629291 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629291 = validateParameter(valid_21629291, JString, required = false,
                                   default = nil)
  if valid_21629291 != nil:
    section.add "X-Amz-Security-Token", valid_21629291
  var valid_21629292 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629292 = validateParameter(valid_21629292, JString, required = false,
                                   default = nil)
  if valid_21629292 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629292
  var valid_21629293 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629293 = validateParameter(valid_21629293, JString, required = false,
                                   default = nil)
  if valid_21629293 != nil:
    section.add "X-Amz-Algorithm", valid_21629293
  var valid_21629294 = header.getOrDefault("X-Amz-Signature")
  valid_21629294 = validateParameter(valid_21629294, JString, required = false,
                                   default = nil)
  if valid_21629294 != nil:
    section.add "X-Amz-Signature", valid_21629294
  var valid_21629295 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629295 = validateParameter(valid_21629295, JString, required = false,
                                   default = nil)
  if valid_21629295 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629295
  var valid_21629296 = header.getOrDefault("X-Amz-Credential")
  valid_21629296 = validateParameter(valid_21629296, JString, required = false,
                                   default = nil)
  if valid_21629296 != nil:
    section.add "X-Amz-Credential", valid_21629296
  result.add "header", section
  ## parameters in `formData` object:
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Vpc: JBool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_21629297 = formData.getOrDefault("Engine")
  valid_21629297 = validateParameter(valid_21629297, JString, required = true,
                                   default = nil)
  if valid_21629297 != nil:
    section.add "Engine", valid_21629297
  var valid_21629298 = formData.getOrDefault("Marker")
  valid_21629298 = validateParameter(valid_21629298, JString, required = false,
                                   default = nil)
  if valid_21629298 != nil:
    section.add "Marker", valid_21629298
  var valid_21629299 = formData.getOrDefault("Vpc")
  valid_21629299 = validateParameter(valid_21629299, JBool, required = false,
                                   default = nil)
  if valid_21629299 != nil:
    section.add "Vpc", valid_21629299
  var valid_21629300 = formData.getOrDefault("DBInstanceClass")
  valid_21629300 = validateParameter(valid_21629300, JString, required = false,
                                   default = nil)
  if valid_21629300 != nil:
    section.add "DBInstanceClass", valid_21629300
  var valid_21629301 = formData.getOrDefault("Filters")
  valid_21629301 = validateParameter(valid_21629301, JArray, required = false,
                                   default = nil)
  if valid_21629301 != nil:
    section.add "Filters", valid_21629301
  var valid_21629302 = formData.getOrDefault("LicenseModel")
  valid_21629302 = validateParameter(valid_21629302, JString, required = false,
                                   default = nil)
  if valid_21629302 != nil:
    section.add "LicenseModel", valid_21629302
  var valid_21629303 = formData.getOrDefault("MaxRecords")
  valid_21629303 = validateParameter(valid_21629303, JInt, required = false,
                                   default = nil)
  if valid_21629303 != nil:
    section.add "MaxRecords", valid_21629303
  var valid_21629304 = formData.getOrDefault("EngineVersion")
  valid_21629304 = validateParameter(valid_21629304, JString, required = false,
                                   default = nil)
  if valid_21629304 != nil:
    section.add "EngineVersion", valid_21629304
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629305: Call_PostDescribeOrderableDBInstanceOptions_21629285;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_21629305.validator(path, query, header, formData, body, _)
  let scheme = call_21629305.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629305.makeUrl(scheme.get, call_21629305.host, call_21629305.base,
                               call_21629305.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629305, uri, valid, _)

proc call*(call_21629306: Call_PostDescribeOrderableDBInstanceOptions_21629285;
          Engine: string; Marker: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions"; Vpc: bool = false;
          DBInstanceClass: string = ""; Filters: JsonNode = nil;
          LicenseModel: string = ""; MaxRecords: int = 0; EngineVersion: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   Action: string (required)
  ##   Vpc: bool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Version: string (required)
  var query_21629307 = newJObject()
  var formData_21629308 = newJObject()
  add(formData_21629308, "Engine", newJString(Engine))
  add(formData_21629308, "Marker", newJString(Marker))
  add(query_21629307, "Action", newJString(Action))
  add(formData_21629308, "Vpc", newJBool(Vpc))
  add(formData_21629308, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    formData_21629308.add "Filters", Filters
  add(formData_21629308, "LicenseModel", newJString(LicenseModel))
  add(formData_21629308, "MaxRecords", newJInt(MaxRecords))
  add(formData_21629308, "EngineVersion", newJString(EngineVersion))
  add(query_21629307, "Version", newJString(Version))
  result = call_21629306.call(nil, query_21629307, nil, formData_21629308, nil)

var postDescribeOrderableDBInstanceOptions* = Call_PostDescribeOrderableDBInstanceOptions_21629285(
    name: "postDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_PostDescribeOrderableDBInstanceOptions_21629286,
    base: "/", makeUrl: url_PostDescribeOrderableDBInstanceOptions_21629287,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeOrderableDBInstanceOptions_21629262 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeOrderableDBInstanceOptions_21629264(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeOrderableDBInstanceOptions_21629263(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   LicenseModel: JString
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: JBool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   EngineVersion: JString
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_21629265 = query.getOrDefault("Engine")
  valid_21629265 = validateParameter(valid_21629265, JString, required = true,
                                   default = nil)
  if valid_21629265 != nil:
    section.add "Engine", valid_21629265
  var valid_21629266 = query.getOrDefault("MaxRecords")
  valid_21629266 = validateParameter(valid_21629266, JInt, required = false,
                                   default = nil)
  if valid_21629266 != nil:
    section.add "MaxRecords", valid_21629266
  var valid_21629267 = query.getOrDefault("Filters")
  valid_21629267 = validateParameter(valid_21629267, JArray, required = false,
                                   default = nil)
  if valid_21629267 != nil:
    section.add "Filters", valid_21629267
  var valid_21629268 = query.getOrDefault("LicenseModel")
  valid_21629268 = validateParameter(valid_21629268, JString, required = false,
                                   default = nil)
  if valid_21629268 != nil:
    section.add "LicenseModel", valid_21629268
  var valid_21629269 = query.getOrDefault("Vpc")
  valid_21629269 = validateParameter(valid_21629269, JBool, required = false,
                                   default = nil)
  if valid_21629269 != nil:
    section.add "Vpc", valid_21629269
  var valid_21629270 = query.getOrDefault("DBInstanceClass")
  valid_21629270 = validateParameter(valid_21629270, JString, required = false,
                                   default = nil)
  if valid_21629270 != nil:
    section.add "DBInstanceClass", valid_21629270
  var valid_21629271 = query.getOrDefault("Action")
  valid_21629271 = validateParameter(valid_21629271, JString, required = true, default = newJString(
      "DescribeOrderableDBInstanceOptions"))
  if valid_21629271 != nil:
    section.add "Action", valid_21629271
  var valid_21629272 = query.getOrDefault("Marker")
  valid_21629272 = validateParameter(valid_21629272, JString, required = false,
                                   default = nil)
  if valid_21629272 != nil:
    section.add "Marker", valid_21629272
  var valid_21629273 = query.getOrDefault("EngineVersion")
  valid_21629273 = validateParameter(valid_21629273, JString, required = false,
                                   default = nil)
  if valid_21629273 != nil:
    section.add "EngineVersion", valid_21629273
  var valid_21629274 = query.getOrDefault("Version")
  valid_21629274 = validateParameter(valid_21629274, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629274 != nil:
    section.add "Version", valid_21629274
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629275 = header.getOrDefault("X-Amz-Date")
  valid_21629275 = validateParameter(valid_21629275, JString, required = false,
                                   default = nil)
  if valid_21629275 != nil:
    section.add "X-Amz-Date", valid_21629275
  var valid_21629276 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629276 = validateParameter(valid_21629276, JString, required = false,
                                   default = nil)
  if valid_21629276 != nil:
    section.add "X-Amz-Security-Token", valid_21629276
  var valid_21629277 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629277 = validateParameter(valid_21629277, JString, required = false,
                                   default = nil)
  if valid_21629277 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629277
  var valid_21629278 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629278 = validateParameter(valid_21629278, JString, required = false,
                                   default = nil)
  if valid_21629278 != nil:
    section.add "X-Amz-Algorithm", valid_21629278
  var valid_21629279 = header.getOrDefault("X-Amz-Signature")
  valid_21629279 = validateParameter(valid_21629279, JString, required = false,
                                   default = nil)
  if valid_21629279 != nil:
    section.add "X-Amz-Signature", valid_21629279
  var valid_21629280 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629280 = validateParameter(valid_21629280, JString, required = false,
                                   default = nil)
  if valid_21629280 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629280
  var valid_21629281 = header.getOrDefault("X-Amz-Credential")
  valid_21629281 = validateParameter(valid_21629281, JString, required = false,
                                   default = nil)
  if valid_21629281 != nil:
    section.add "X-Amz-Credential", valid_21629281
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629282: Call_GetDescribeOrderableDBInstanceOptions_21629262;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of orderable DB instance options for the specified engine.
  ## 
  let valid = call_21629282.validator(path, query, header, formData, body, _)
  let scheme = call_21629282.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629282.makeUrl(scheme.get, call_21629282.host, call_21629282.base,
                               call_21629282.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629282, uri, valid, _)

proc call*(call_21629283: Call_GetDescribeOrderableDBInstanceOptions_21629262;
          Engine: string; MaxRecords: int = 0; Filters: JsonNode = nil;
          LicenseModel: string = ""; Vpc: bool = false; DBInstanceClass: string = "";
          Action: string = "DescribeOrderableDBInstanceOptions";
          Marker: string = ""; EngineVersion: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeOrderableDBInstanceOptions
  ## Returns a list of orderable DB instance options for the specified engine.
  ##   Engine: string (required)
  ##         : The name of the engine to retrieve DB instance options for.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   LicenseModel: string
  ##               : The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
  ##   Vpc: bool
  ##      : A value that indicates whether to show only VPC or non-VPC offerings.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code> . 
  ##   EngineVersion: string
  ##                : The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
  ##   Version: string (required)
  var query_21629284 = newJObject()
  add(query_21629284, "Engine", newJString(Engine))
  add(query_21629284, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21629284.add "Filters", Filters
  add(query_21629284, "LicenseModel", newJString(LicenseModel))
  add(query_21629284, "Vpc", newJBool(Vpc))
  add(query_21629284, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_21629284, "Action", newJString(Action))
  add(query_21629284, "Marker", newJString(Marker))
  add(query_21629284, "EngineVersion", newJString(EngineVersion))
  add(query_21629284, "Version", newJString(Version))
  result = call_21629283.call(nil, query_21629284, nil, nil, nil)

var getDescribeOrderableDBInstanceOptions* = Call_GetDescribeOrderableDBInstanceOptions_21629262(
    name: "getDescribeOrderableDBInstanceOptions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeOrderableDBInstanceOptions",
    validator: validate_GetDescribeOrderableDBInstanceOptions_21629263, base: "/",
    makeUrl: url_GetDescribeOrderableDBInstanceOptions_21629264,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribePendingMaintenanceActions_21629328 = ref object of OpenApiRestCall_21625435
proc url_PostDescribePendingMaintenanceActions_21629330(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribePendingMaintenanceActions_21629329(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629331 = query.getOrDefault("Action")
  valid_21629331 = validateParameter(valid_21629331, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_21629331 != nil:
    section.add "Action", valid_21629331
  var valid_21629332 = query.getOrDefault("Version")
  valid_21629332 = validateParameter(valid_21629332, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629332 != nil:
    section.add "Version", valid_21629332
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629333 = header.getOrDefault("X-Amz-Date")
  valid_21629333 = validateParameter(valid_21629333, JString, required = false,
                                   default = nil)
  if valid_21629333 != nil:
    section.add "X-Amz-Date", valid_21629333
  var valid_21629334 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629334 = validateParameter(valid_21629334, JString, required = false,
                                   default = nil)
  if valid_21629334 != nil:
    section.add "X-Amz-Security-Token", valid_21629334
  var valid_21629335 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629335 = validateParameter(valid_21629335, JString, required = false,
                                   default = nil)
  if valid_21629335 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629335
  var valid_21629336 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629336 = validateParameter(valid_21629336, JString, required = false,
                                   default = nil)
  if valid_21629336 != nil:
    section.add "X-Amz-Algorithm", valid_21629336
  var valid_21629337 = header.getOrDefault("X-Amz-Signature")
  valid_21629337 = validateParameter(valid_21629337, JString, required = false,
                                   default = nil)
  if valid_21629337 != nil:
    section.add "X-Amz-Signature", valid_21629337
  var valid_21629338 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629338 = validateParameter(valid_21629338, JString, required = false,
                                   default = nil)
  if valid_21629338 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629338
  var valid_21629339 = header.getOrDefault("X-Amz-Credential")
  valid_21629339 = validateParameter(valid_21629339, JString, required = false,
                                   default = nil)
  if valid_21629339 != nil:
    section.add "X-Amz-Credential", valid_21629339
  result.add "header", section
  ## parameters in `formData` object:
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21629340 = formData.getOrDefault("Marker")
  valid_21629340 = validateParameter(valid_21629340, JString, required = false,
                                   default = nil)
  if valid_21629340 != nil:
    section.add "Marker", valid_21629340
  var valid_21629341 = formData.getOrDefault("ResourceIdentifier")
  valid_21629341 = validateParameter(valid_21629341, JString, required = false,
                                   default = nil)
  if valid_21629341 != nil:
    section.add "ResourceIdentifier", valid_21629341
  var valid_21629342 = formData.getOrDefault("Filters")
  valid_21629342 = validateParameter(valid_21629342, JArray, required = false,
                                   default = nil)
  if valid_21629342 != nil:
    section.add "Filters", valid_21629342
  var valid_21629343 = formData.getOrDefault("MaxRecords")
  valid_21629343 = validateParameter(valid_21629343, JInt, required = false,
                                   default = nil)
  if valid_21629343 != nil:
    section.add "MaxRecords", valid_21629343
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629344: Call_PostDescribePendingMaintenanceActions_21629328;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_21629344.validator(path, query, header, formData, body, _)
  let scheme = call_21629344.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629344.makeUrl(scheme.get, call_21629344.host, call_21629344.base,
                               call_21629344.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629344, uri, valid, _)

proc call*(call_21629345: Call_PostDescribePendingMaintenanceActions_21629328;
          Marker: string = ""; Action: string = "DescribePendingMaintenanceActions";
          ResourceIdentifier: string = ""; Filters: JsonNode = nil; MaxRecords: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## postDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Action: string (required)
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21629346 = newJObject()
  var formData_21629347 = newJObject()
  add(formData_21629347, "Marker", newJString(Marker))
  add(query_21629346, "Action", newJString(Action))
  add(formData_21629347, "ResourceIdentifier", newJString(ResourceIdentifier))
  if Filters != nil:
    formData_21629347.add "Filters", Filters
  add(formData_21629347, "MaxRecords", newJInt(MaxRecords))
  add(query_21629346, "Version", newJString(Version))
  result = call_21629345.call(nil, query_21629346, nil, formData_21629347, nil)

var postDescribePendingMaintenanceActions* = Call_PostDescribePendingMaintenanceActions_21629328(
    name: "postDescribePendingMaintenanceActions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_PostDescribePendingMaintenanceActions_21629329, base: "/",
    makeUrl: url_PostDescribePendingMaintenanceActions_21629330,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribePendingMaintenanceActions_21629309 = ref object of OpenApiRestCall_21625435
proc url_GetDescribePendingMaintenanceActions_21629311(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribePendingMaintenanceActions_21629310(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   ResourceIdentifier: JString
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629312 = query.getOrDefault("MaxRecords")
  valid_21629312 = validateParameter(valid_21629312, JInt, required = false,
                                   default = nil)
  if valid_21629312 != nil:
    section.add "MaxRecords", valid_21629312
  var valid_21629313 = query.getOrDefault("Filters")
  valid_21629313 = validateParameter(valid_21629313, JArray, required = false,
                                   default = nil)
  if valid_21629313 != nil:
    section.add "Filters", valid_21629313
  var valid_21629314 = query.getOrDefault("ResourceIdentifier")
  valid_21629314 = validateParameter(valid_21629314, JString, required = false,
                                   default = nil)
  if valid_21629314 != nil:
    section.add "ResourceIdentifier", valid_21629314
  var valid_21629315 = query.getOrDefault("Action")
  valid_21629315 = validateParameter(valid_21629315, JString, required = true, default = newJString(
      "DescribePendingMaintenanceActions"))
  if valid_21629315 != nil:
    section.add "Action", valid_21629315
  var valid_21629316 = query.getOrDefault("Marker")
  valid_21629316 = validateParameter(valid_21629316, JString, required = false,
                                   default = nil)
  if valid_21629316 != nil:
    section.add "Marker", valid_21629316
  var valid_21629317 = query.getOrDefault("Version")
  valid_21629317 = validateParameter(valid_21629317, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629317 != nil:
    section.add "Version", valid_21629317
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629318 = header.getOrDefault("X-Amz-Date")
  valid_21629318 = validateParameter(valid_21629318, JString, required = false,
                                   default = nil)
  if valid_21629318 != nil:
    section.add "X-Amz-Date", valid_21629318
  var valid_21629319 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629319 = validateParameter(valid_21629319, JString, required = false,
                                   default = nil)
  if valid_21629319 != nil:
    section.add "X-Amz-Security-Token", valid_21629319
  var valid_21629320 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629320 = validateParameter(valid_21629320, JString, required = false,
                                   default = nil)
  if valid_21629320 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629320
  var valid_21629321 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629321 = validateParameter(valid_21629321, JString, required = false,
                                   default = nil)
  if valid_21629321 != nil:
    section.add "X-Amz-Algorithm", valid_21629321
  var valid_21629322 = header.getOrDefault("X-Amz-Signature")
  valid_21629322 = validateParameter(valid_21629322, JString, required = false,
                                   default = nil)
  if valid_21629322 != nil:
    section.add "X-Amz-Signature", valid_21629322
  var valid_21629323 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629323 = validateParameter(valid_21629323, JString, required = false,
                                   default = nil)
  if valid_21629323 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629323
  var valid_21629324 = header.getOrDefault("X-Amz-Credential")
  valid_21629324 = validateParameter(valid_21629324, JString, required = false,
                                   default = nil)
  if valid_21629324 != nil:
    section.add "X-Amz-Credential", valid_21629324
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629325: Call_GetDescribePendingMaintenanceActions_21629309;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ## 
  let valid = call_21629325.validator(path, query, header, formData, body, _)
  let scheme = call_21629325.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629325.makeUrl(scheme.get, call_21629325.host, call_21629325.base,
                               call_21629325.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629325, uri, valid, _)

proc call*(call_21629326: Call_GetDescribePendingMaintenanceActions_21629309;
          MaxRecords: int = 0; Filters: JsonNode = nil; ResourceIdentifier: string = "";
          Action: string = "DescribePendingMaintenanceActions"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribePendingMaintenanceActions
  ## Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : <p>A filter that specifies one or more resources to return pending maintenance actions for.</p> <p>Supported filters:</p> <ul> <li> <p> <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.</p> </li> <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.</p> </li> </ul>
  ##   ResourceIdentifier: string
  ##                     : The ARN of a resource to return pending maintenance actions for.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous <code>DescribePendingMaintenanceActions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by <code>MaxRecords</code>. 
  ##   Version: string (required)
  var query_21629327 = newJObject()
  add(query_21629327, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21629327.add "Filters", Filters
  add(query_21629327, "ResourceIdentifier", newJString(ResourceIdentifier))
  add(query_21629327, "Action", newJString(Action))
  add(query_21629327, "Marker", newJString(Marker))
  add(query_21629327, "Version", newJString(Version))
  result = call_21629326.call(nil, query_21629327, nil, nil, nil)

var getDescribePendingMaintenanceActions* = Call_GetDescribePendingMaintenanceActions_21629309(
    name: "getDescribePendingMaintenanceActions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribePendingMaintenanceActions",
    validator: validate_GetDescribePendingMaintenanceActions_21629310, base: "/",
    makeUrl: url_GetDescribePendingMaintenanceActions_21629311,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedDBInstances_21629374 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeReservedDBInstances_21629376(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReservedDBInstances_21629375(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629377 = query.getOrDefault("Action")
  valid_21629377 = validateParameter(valid_21629377, JString, required = true, default = newJString(
      "DescribeReservedDBInstances"))
  if valid_21629377 != nil:
    section.add "Action", valid_21629377
  var valid_21629378 = query.getOrDefault("Version")
  valid_21629378 = validateParameter(valid_21629378, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629378 != nil:
    section.add "Version", valid_21629378
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629379 = header.getOrDefault("X-Amz-Date")
  valid_21629379 = validateParameter(valid_21629379, JString, required = false,
                                   default = nil)
  if valid_21629379 != nil:
    section.add "X-Amz-Date", valid_21629379
  var valid_21629380 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629380 = validateParameter(valid_21629380, JString, required = false,
                                   default = nil)
  if valid_21629380 != nil:
    section.add "X-Amz-Security-Token", valid_21629380
  var valid_21629381 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629381 = validateParameter(valid_21629381, JString, required = false,
                                   default = nil)
  if valid_21629381 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629381
  var valid_21629382 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629382 = validateParameter(valid_21629382, JString, required = false,
                                   default = nil)
  if valid_21629382 != nil:
    section.add "X-Amz-Algorithm", valid_21629382
  var valid_21629383 = header.getOrDefault("X-Amz-Signature")
  valid_21629383 = validateParameter(valid_21629383, JString, required = false,
                                   default = nil)
  if valid_21629383 != nil:
    section.add "X-Amz-Signature", valid_21629383
  var valid_21629384 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629384 = validateParameter(valid_21629384, JString, required = false,
                                   default = nil)
  if valid_21629384 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629384
  var valid_21629385 = header.getOrDefault("X-Amz-Credential")
  valid_21629385 = validateParameter(valid_21629385, JString, required = false,
                                   default = nil)
  if valid_21629385 != nil:
    section.add "X-Amz-Credential", valid_21629385
  result.add "header", section
  ## parameters in `formData` object:
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ReservedDBInstanceId: JString
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ProductDescription: JString
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   LeaseId: JString
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  section = newJObject()
  var valid_21629386 = formData.getOrDefault("OfferingType")
  valid_21629386 = validateParameter(valid_21629386, JString, required = false,
                                   default = nil)
  if valid_21629386 != nil:
    section.add "OfferingType", valid_21629386
  var valid_21629387 = formData.getOrDefault("ReservedDBInstanceId")
  valid_21629387 = validateParameter(valid_21629387, JString, required = false,
                                   default = nil)
  if valid_21629387 != nil:
    section.add "ReservedDBInstanceId", valid_21629387
  var valid_21629388 = formData.getOrDefault("Marker")
  valid_21629388 = validateParameter(valid_21629388, JString, required = false,
                                   default = nil)
  if valid_21629388 != nil:
    section.add "Marker", valid_21629388
  var valid_21629389 = formData.getOrDefault("MultiAZ")
  valid_21629389 = validateParameter(valid_21629389, JBool, required = false,
                                   default = nil)
  if valid_21629389 != nil:
    section.add "MultiAZ", valid_21629389
  var valid_21629390 = formData.getOrDefault("Duration")
  valid_21629390 = validateParameter(valid_21629390, JString, required = false,
                                   default = nil)
  if valid_21629390 != nil:
    section.add "Duration", valid_21629390
  var valid_21629391 = formData.getOrDefault("DBInstanceClass")
  valid_21629391 = validateParameter(valid_21629391, JString, required = false,
                                   default = nil)
  if valid_21629391 != nil:
    section.add "DBInstanceClass", valid_21629391
  var valid_21629392 = formData.getOrDefault("Filters")
  valid_21629392 = validateParameter(valid_21629392, JArray, required = false,
                                   default = nil)
  if valid_21629392 != nil:
    section.add "Filters", valid_21629392
  var valid_21629393 = formData.getOrDefault("ProductDescription")
  valid_21629393 = validateParameter(valid_21629393, JString, required = false,
                                   default = nil)
  if valid_21629393 != nil:
    section.add "ProductDescription", valid_21629393
  var valid_21629394 = formData.getOrDefault("MaxRecords")
  valid_21629394 = validateParameter(valid_21629394, JInt, required = false,
                                   default = nil)
  if valid_21629394 != nil:
    section.add "MaxRecords", valid_21629394
  var valid_21629395 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_21629395 = validateParameter(valid_21629395, JString, required = false,
                                   default = nil)
  if valid_21629395 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_21629395
  var valid_21629396 = formData.getOrDefault("LeaseId")
  valid_21629396 = validateParameter(valid_21629396, JString, required = false,
                                   default = nil)
  if valid_21629396 != nil:
    section.add "LeaseId", valid_21629396
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629397: Call_PostDescribeReservedDBInstances_21629374;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  let valid = call_21629397.validator(path, query, header, formData, body, _)
  let scheme = call_21629397.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629397.makeUrl(scheme.get, call_21629397.host, call_21629397.base,
                               call_21629397.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629397, uri, valid, _)

proc call*(call_21629398: Call_PostDescribeReservedDBInstances_21629374;
          OfferingType: string = ""; ReservedDBInstanceId: string = "";
          Marker: string = ""; MultiAZ: bool = false;
          Action: string = "DescribeReservedDBInstances"; Duration: string = "";
          DBInstanceClass: string = ""; Filters: JsonNode = nil;
          ProductDescription: string = ""; MaxRecords: int = 0;
          ReservedDBInstancesOfferingId: string = "";
          Version: string = "2014-10-31"; LeaseId: string = ""): Recallable =
  ## postDescribeReservedDBInstances
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   ReservedDBInstanceId: string
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ProductDescription: string
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   ReservedDBInstancesOfferingId: string
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   Version: string (required)
  ##   LeaseId: string
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  var query_21629399 = newJObject()
  var formData_21629400 = newJObject()
  add(formData_21629400, "OfferingType", newJString(OfferingType))
  add(formData_21629400, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(formData_21629400, "Marker", newJString(Marker))
  add(formData_21629400, "MultiAZ", newJBool(MultiAZ))
  add(query_21629399, "Action", newJString(Action))
  add(formData_21629400, "Duration", newJString(Duration))
  add(formData_21629400, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    formData_21629400.add "Filters", Filters
  add(formData_21629400, "ProductDescription", newJString(ProductDescription))
  add(formData_21629400, "MaxRecords", newJInt(MaxRecords))
  add(formData_21629400, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_21629399, "Version", newJString(Version))
  add(formData_21629400, "LeaseId", newJString(LeaseId))
  result = call_21629398.call(nil, query_21629399, nil, formData_21629400, nil)

var postDescribeReservedDBInstances* = Call_PostDescribeReservedDBInstances_21629374(
    name: "postDescribeReservedDBInstances", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeReservedDBInstances",
    validator: validate_PostDescribeReservedDBInstances_21629375, base: "/",
    makeUrl: url_PostDescribeReservedDBInstances_21629376,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedDBInstances_21629348 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeReservedDBInstances_21629350(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReservedDBInstances_21629349(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ProductDescription: JString
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   LeaseId: JString
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   ReservedDBInstanceId: JString
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: JString
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629351 = query.getOrDefault("ProductDescription")
  valid_21629351 = validateParameter(valid_21629351, JString, required = false,
                                   default = nil)
  if valid_21629351 != nil:
    section.add "ProductDescription", valid_21629351
  var valid_21629352 = query.getOrDefault("LeaseId")
  valid_21629352 = validateParameter(valid_21629352, JString, required = false,
                                   default = nil)
  if valid_21629352 != nil:
    section.add "LeaseId", valid_21629352
  var valid_21629353 = query.getOrDefault("MaxRecords")
  valid_21629353 = validateParameter(valid_21629353, JInt, required = false,
                                   default = nil)
  if valid_21629353 != nil:
    section.add "MaxRecords", valid_21629353
  var valid_21629354 = query.getOrDefault("OfferingType")
  valid_21629354 = validateParameter(valid_21629354, JString, required = false,
                                   default = nil)
  if valid_21629354 != nil:
    section.add "OfferingType", valid_21629354
  var valid_21629355 = query.getOrDefault("Filters")
  valid_21629355 = validateParameter(valid_21629355, JArray, required = false,
                                   default = nil)
  if valid_21629355 != nil:
    section.add "Filters", valid_21629355
  var valid_21629356 = query.getOrDefault("MultiAZ")
  valid_21629356 = validateParameter(valid_21629356, JBool, required = false,
                                   default = nil)
  if valid_21629356 != nil:
    section.add "MultiAZ", valid_21629356
  var valid_21629357 = query.getOrDefault("ReservedDBInstanceId")
  valid_21629357 = validateParameter(valid_21629357, JString, required = false,
                                   default = nil)
  if valid_21629357 != nil:
    section.add "ReservedDBInstanceId", valid_21629357
  var valid_21629358 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_21629358 = validateParameter(valid_21629358, JString, required = false,
                                   default = nil)
  if valid_21629358 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_21629358
  var valid_21629359 = query.getOrDefault("DBInstanceClass")
  valid_21629359 = validateParameter(valid_21629359, JString, required = false,
                                   default = nil)
  if valid_21629359 != nil:
    section.add "DBInstanceClass", valid_21629359
  var valid_21629360 = query.getOrDefault("Action")
  valid_21629360 = validateParameter(valid_21629360, JString, required = true, default = newJString(
      "DescribeReservedDBInstances"))
  if valid_21629360 != nil:
    section.add "Action", valid_21629360
  var valid_21629361 = query.getOrDefault("Marker")
  valid_21629361 = validateParameter(valid_21629361, JString, required = false,
                                   default = nil)
  if valid_21629361 != nil:
    section.add "Marker", valid_21629361
  var valid_21629362 = query.getOrDefault("Duration")
  valid_21629362 = validateParameter(valid_21629362, JString, required = false,
                                   default = nil)
  if valid_21629362 != nil:
    section.add "Duration", valid_21629362
  var valid_21629363 = query.getOrDefault("Version")
  valid_21629363 = validateParameter(valid_21629363, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629363 != nil:
    section.add "Version", valid_21629363
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629364 = header.getOrDefault("X-Amz-Date")
  valid_21629364 = validateParameter(valid_21629364, JString, required = false,
                                   default = nil)
  if valid_21629364 != nil:
    section.add "X-Amz-Date", valid_21629364
  var valid_21629365 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629365 = validateParameter(valid_21629365, JString, required = false,
                                   default = nil)
  if valid_21629365 != nil:
    section.add "X-Amz-Security-Token", valid_21629365
  var valid_21629366 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629366 = validateParameter(valid_21629366, JString, required = false,
                                   default = nil)
  if valid_21629366 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629366
  var valid_21629367 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629367 = validateParameter(valid_21629367, JString, required = false,
                                   default = nil)
  if valid_21629367 != nil:
    section.add "X-Amz-Algorithm", valid_21629367
  var valid_21629368 = header.getOrDefault("X-Amz-Signature")
  valid_21629368 = validateParameter(valid_21629368, JString, required = false,
                                   default = nil)
  if valid_21629368 != nil:
    section.add "X-Amz-Signature", valid_21629368
  var valid_21629369 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629369 = validateParameter(valid_21629369, JString, required = false,
                                   default = nil)
  if valid_21629369 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629369
  var valid_21629370 = header.getOrDefault("X-Amz-Credential")
  valid_21629370 = validateParameter(valid_21629370, JString, required = false,
                                   default = nil)
  if valid_21629370 != nil:
    section.add "X-Amz-Credential", valid_21629370
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629371: Call_GetDescribeReservedDBInstances_21629348;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ## 
  let valid = call_21629371.validator(path, query, header, formData, body, _)
  let scheme = call_21629371.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629371.makeUrl(scheme.get, call_21629371.host, call_21629371.base,
                               call_21629371.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629371, uri, valid, _)

proc call*(call_21629372: Call_GetDescribeReservedDBInstances_21629348;
          ProductDescription: string = ""; LeaseId: string = ""; MaxRecords: int = 0;
          OfferingType: string = ""; Filters: JsonNode = nil; MultiAZ: bool = false;
          ReservedDBInstanceId: string = "";
          ReservedDBInstancesOfferingId: string = ""; DBInstanceClass: string = "";
          Action: string = "DescribeReservedDBInstances"; Marker: string = "";
          Duration: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeReservedDBInstances
  ## Returns information about reserved DB instances for this account, or about a specified reserved DB instance.
  ##   ProductDescription: string
  ##                     : The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
  ##   LeaseId: string
  ##          : <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note> <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   ReservedDBInstanceId: string
  ##                       : The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
  ##   ReservedDBInstancesOfferingId: string
  ##                                : The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: string
  ##           : <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: string (required)
  var query_21629373 = newJObject()
  add(query_21629373, "ProductDescription", newJString(ProductDescription))
  add(query_21629373, "LeaseId", newJString(LeaseId))
  add(query_21629373, "MaxRecords", newJInt(MaxRecords))
  add(query_21629373, "OfferingType", newJString(OfferingType))
  if Filters != nil:
    query_21629373.add "Filters", Filters
  add(query_21629373, "MultiAZ", newJBool(MultiAZ))
  add(query_21629373, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_21629373, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_21629373, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_21629373, "Action", newJString(Action))
  add(query_21629373, "Marker", newJString(Marker))
  add(query_21629373, "Duration", newJString(Duration))
  add(query_21629373, "Version", newJString(Version))
  result = call_21629372.call(nil, query_21629373, nil, nil, nil)

var getDescribeReservedDBInstances* = Call_GetDescribeReservedDBInstances_21629348(
    name: "getDescribeReservedDBInstances", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeReservedDBInstances",
    validator: validate_GetDescribeReservedDBInstances_21629349, base: "/",
    makeUrl: url_GetDescribeReservedDBInstances_21629350,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeReservedDBInstancesOfferings_21629425 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeReservedDBInstancesOfferings_21629427(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeReservedDBInstancesOfferings_21629426(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Lists available reserved DB instance offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629428 = query.getOrDefault("Action")
  valid_21629428 = validateParameter(valid_21629428, JString, required = true, default = newJString(
      "DescribeReservedDBInstancesOfferings"))
  if valid_21629428 != nil:
    section.add "Action", valid_21629428
  var valid_21629429 = query.getOrDefault("Version")
  valid_21629429 = validateParameter(valid_21629429, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629429 != nil:
    section.add "Version", valid_21629429
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629430 = header.getOrDefault("X-Amz-Date")
  valid_21629430 = validateParameter(valid_21629430, JString, required = false,
                                   default = nil)
  if valid_21629430 != nil:
    section.add "X-Amz-Date", valid_21629430
  var valid_21629431 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629431 = validateParameter(valid_21629431, JString, required = false,
                                   default = nil)
  if valid_21629431 != nil:
    section.add "X-Amz-Security-Token", valid_21629431
  var valid_21629432 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629432 = validateParameter(valid_21629432, JString, required = false,
                                   default = nil)
  if valid_21629432 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629432
  var valid_21629433 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629433 = validateParameter(valid_21629433, JString, required = false,
                                   default = nil)
  if valid_21629433 != nil:
    section.add "X-Amz-Algorithm", valid_21629433
  var valid_21629434 = header.getOrDefault("X-Amz-Signature")
  valid_21629434 = validateParameter(valid_21629434, JString, required = false,
                                   default = nil)
  if valid_21629434 != nil:
    section.add "X-Amz-Signature", valid_21629434
  var valid_21629435 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629435 = validateParameter(valid_21629435, JString, required = false,
                                   default = nil)
  if valid_21629435 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629435
  var valid_21629436 = header.getOrDefault("X-Amz-Credential")
  valid_21629436 = validateParameter(valid_21629436, JString, required = false,
                                   default = nil)
  if valid_21629436 != nil:
    section.add "X-Amz-Credential", valid_21629436
  result.add "header", section
  ## parameters in `formData` object:
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ProductDescription: JString
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  section = newJObject()
  var valid_21629437 = formData.getOrDefault("OfferingType")
  valid_21629437 = validateParameter(valid_21629437, JString, required = false,
                                   default = nil)
  if valid_21629437 != nil:
    section.add "OfferingType", valid_21629437
  var valid_21629438 = formData.getOrDefault("Marker")
  valid_21629438 = validateParameter(valid_21629438, JString, required = false,
                                   default = nil)
  if valid_21629438 != nil:
    section.add "Marker", valid_21629438
  var valid_21629439 = formData.getOrDefault("MultiAZ")
  valid_21629439 = validateParameter(valid_21629439, JBool, required = false,
                                   default = nil)
  if valid_21629439 != nil:
    section.add "MultiAZ", valid_21629439
  var valid_21629440 = formData.getOrDefault("Duration")
  valid_21629440 = validateParameter(valid_21629440, JString, required = false,
                                   default = nil)
  if valid_21629440 != nil:
    section.add "Duration", valid_21629440
  var valid_21629441 = formData.getOrDefault("DBInstanceClass")
  valid_21629441 = validateParameter(valid_21629441, JString, required = false,
                                   default = nil)
  if valid_21629441 != nil:
    section.add "DBInstanceClass", valid_21629441
  var valid_21629442 = formData.getOrDefault("Filters")
  valid_21629442 = validateParameter(valid_21629442, JArray, required = false,
                                   default = nil)
  if valid_21629442 != nil:
    section.add "Filters", valid_21629442
  var valid_21629443 = formData.getOrDefault("ProductDescription")
  valid_21629443 = validateParameter(valid_21629443, JString, required = false,
                                   default = nil)
  if valid_21629443 != nil:
    section.add "ProductDescription", valid_21629443
  var valid_21629444 = formData.getOrDefault("MaxRecords")
  valid_21629444 = validateParameter(valid_21629444, JInt, required = false,
                                   default = nil)
  if valid_21629444 != nil:
    section.add "MaxRecords", valid_21629444
  var valid_21629445 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_21629445 = validateParameter(valid_21629445, JString, required = false,
                                   default = nil)
  if valid_21629445 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_21629445
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629446: Call_PostDescribeReservedDBInstancesOfferings_21629425;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists available reserved DB instance offerings.
  ## 
  let valid = call_21629446.validator(path, query, header, formData, body, _)
  let scheme = call_21629446.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629446.makeUrl(scheme.get, call_21629446.host, call_21629446.base,
                               call_21629446.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629446, uri, valid, _)

proc call*(call_21629447: Call_PostDescribeReservedDBInstancesOfferings_21629425;
          OfferingType: string = ""; Marker: string = ""; MultiAZ: bool = false;
          Action: string = "DescribeReservedDBInstancesOfferings";
          Duration: string = ""; DBInstanceClass: string = ""; Filters: JsonNode = nil;
          ProductDescription: string = ""; MaxRecords: int = 0;
          ReservedDBInstancesOfferingId: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postDescribeReservedDBInstancesOfferings
  ## Lists available reserved DB instance offerings.
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   Action: string (required)
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ProductDescription: string
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   ReservedDBInstancesOfferingId: string
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   Version: string (required)
  var query_21629448 = newJObject()
  var formData_21629449 = newJObject()
  add(formData_21629449, "OfferingType", newJString(OfferingType))
  add(formData_21629449, "Marker", newJString(Marker))
  add(formData_21629449, "MultiAZ", newJBool(MultiAZ))
  add(query_21629448, "Action", newJString(Action))
  add(formData_21629449, "Duration", newJString(Duration))
  add(formData_21629449, "DBInstanceClass", newJString(DBInstanceClass))
  if Filters != nil:
    formData_21629449.add "Filters", Filters
  add(formData_21629449, "ProductDescription", newJString(ProductDescription))
  add(formData_21629449, "MaxRecords", newJInt(MaxRecords))
  add(formData_21629449, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_21629448, "Version", newJString(Version))
  result = call_21629447.call(nil, query_21629448, nil, formData_21629449, nil)

var postDescribeReservedDBInstancesOfferings* = Call_PostDescribeReservedDBInstancesOfferings_21629425(
    name: "postDescribeReservedDBInstancesOfferings", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeReservedDBInstancesOfferings",
    validator: validate_PostDescribeReservedDBInstancesOfferings_21629426,
    base: "/", makeUrl: url_PostDescribeReservedDBInstancesOfferings_21629427,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeReservedDBInstancesOfferings_21629401 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeReservedDBInstancesOfferings_21629403(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeReservedDBInstancesOfferings_21629402(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Lists available reserved DB instance offerings.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ProductDescription: JString
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   MaxRecords: JInt
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   OfferingType: JString
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   ReservedDBInstancesOfferingId: JString
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   DBInstanceClass: JString
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: JString
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629404 = query.getOrDefault("ProductDescription")
  valid_21629404 = validateParameter(valid_21629404, JString, required = false,
                                   default = nil)
  if valid_21629404 != nil:
    section.add "ProductDescription", valid_21629404
  var valid_21629405 = query.getOrDefault("MaxRecords")
  valid_21629405 = validateParameter(valid_21629405, JInt, required = false,
                                   default = nil)
  if valid_21629405 != nil:
    section.add "MaxRecords", valid_21629405
  var valid_21629406 = query.getOrDefault("OfferingType")
  valid_21629406 = validateParameter(valid_21629406, JString, required = false,
                                   default = nil)
  if valid_21629406 != nil:
    section.add "OfferingType", valid_21629406
  var valid_21629407 = query.getOrDefault("Filters")
  valid_21629407 = validateParameter(valid_21629407, JArray, required = false,
                                   default = nil)
  if valid_21629407 != nil:
    section.add "Filters", valid_21629407
  var valid_21629408 = query.getOrDefault("MultiAZ")
  valid_21629408 = validateParameter(valid_21629408, JBool, required = false,
                                   default = nil)
  if valid_21629408 != nil:
    section.add "MultiAZ", valid_21629408
  var valid_21629409 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_21629409 = validateParameter(valid_21629409, JString, required = false,
                                   default = nil)
  if valid_21629409 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_21629409
  var valid_21629410 = query.getOrDefault("DBInstanceClass")
  valid_21629410 = validateParameter(valid_21629410, JString, required = false,
                                   default = nil)
  if valid_21629410 != nil:
    section.add "DBInstanceClass", valid_21629410
  var valid_21629411 = query.getOrDefault("Action")
  valid_21629411 = validateParameter(valid_21629411, JString, required = true, default = newJString(
      "DescribeReservedDBInstancesOfferings"))
  if valid_21629411 != nil:
    section.add "Action", valid_21629411
  var valid_21629412 = query.getOrDefault("Marker")
  valid_21629412 = validateParameter(valid_21629412, JString, required = false,
                                   default = nil)
  if valid_21629412 != nil:
    section.add "Marker", valid_21629412
  var valid_21629413 = query.getOrDefault("Duration")
  valid_21629413 = validateParameter(valid_21629413, JString, required = false,
                                   default = nil)
  if valid_21629413 != nil:
    section.add "Duration", valid_21629413
  var valid_21629414 = query.getOrDefault("Version")
  valid_21629414 = validateParameter(valid_21629414, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629414 != nil:
    section.add "Version", valid_21629414
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629415 = header.getOrDefault("X-Amz-Date")
  valid_21629415 = validateParameter(valid_21629415, JString, required = false,
                                   default = nil)
  if valid_21629415 != nil:
    section.add "X-Amz-Date", valid_21629415
  var valid_21629416 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629416 = validateParameter(valid_21629416, JString, required = false,
                                   default = nil)
  if valid_21629416 != nil:
    section.add "X-Amz-Security-Token", valid_21629416
  var valid_21629417 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629417 = validateParameter(valid_21629417, JString, required = false,
                                   default = nil)
  if valid_21629417 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629417
  var valid_21629418 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629418 = validateParameter(valid_21629418, JString, required = false,
                                   default = nil)
  if valid_21629418 != nil:
    section.add "X-Amz-Algorithm", valid_21629418
  var valid_21629419 = header.getOrDefault("X-Amz-Signature")
  valid_21629419 = validateParameter(valid_21629419, JString, required = false,
                                   default = nil)
  if valid_21629419 != nil:
    section.add "X-Amz-Signature", valid_21629419
  var valid_21629420 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629420 = validateParameter(valid_21629420, JString, required = false,
                                   default = nil)
  if valid_21629420 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629420
  var valid_21629421 = header.getOrDefault("X-Amz-Credential")
  valid_21629421 = validateParameter(valid_21629421, JString, required = false,
                                   default = nil)
  if valid_21629421 != nil:
    section.add "X-Amz-Credential", valid_21629421
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629422: Call_GetDescribeReservedDBInstancesOfferings_21629401;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Lists available reserved DB instance offerings.
  ## 
  let valid = call_21629422.validator(path, query, header, formData, body, _)
  let scheme = call_21629422.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629422.makeUrl(scheme.get, call_21629422.host, call_21629422.base,
                               call_21629422.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629422, uri, valid, _)

proc call*(call_21629423: Call_GetDescribeReservedDBInstancesOfferings_21629401;
          ProductDescription: string = ""; MaxRecords: int = 0;
          OfferingType: string = ""; Filters: JsonNode = nil; MultiAZ: bool = false;
          ReservedDBInstancesOfferingId: string = ""; DBInstanceClass: string = "";
          Action: string = "DescribeReservedDBInstancesOfferings";
          Marker: string = ""; Duration: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getDescribeReservedDBInstancesOfferings
  ## Lists available reserved DB instance offerings.
  ##   ProductDescription: string
  ##                     : <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p> <note> <p>The results show offerings that partially match the filter value.</p> </note>
  ##   MaxRecords: int
  ##             : <p> The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   OfferingType: string
  ##               : <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p> <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MultiAZ: bool
  ##          : A value that indicates whether to show only those reservations that support Multi-AZ.
  ##   ReservedDBInstancesOfferingId: string
  ##                                : <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p> <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code> </p>
  ##   DBInstanceClass: string
  ##                  : The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
  ##   Action: string (required)
  ##   Marker: string
  ##         :  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>. 
  ##   Duration: string
  ##           : <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p> <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
  ##   Version: string (required)
  var query_21629424 = newJObject()
  add(query_21629424, "ProductDescription", newJString(ProductDescription))
  add(query_21629424, "MaxRecords", newJInt(MaxRecords))
  add(query_21629424, "OfferingType", newJString(OfferingType))
  if Filters != nil:
    query_21629424.add "Filters", Filters
  add(query_21629424, "MultiAZ", newJBool(MultiAZ))
  add(query_21629424, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_21629424, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_21629424, "Action", newJString(Action))
  add(query_21629424, "Marker", newJString(Marker))
  add(query_21629424, "Duration", newJString(Duration))
  add(query_21629424, "Version", newJString(Version))
  result = call_21629423.call(nil, query_21629424, nil, nil, nil)

var getDescribeReservedDBInstancesOfferings* = Call_GetDescribeReservedDBInstancesOfferings_21629401(
    name: "getDescribeReservedDBInstancesOfferings", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeReservedDBInstancesOfferings",
    validator: validate_GetDescribeReservedDBInstancesOfferings_21629402,
    base: "/", makeUrl: url_GetDescribeReservedDBInstancesOfferings_21629403,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeSourceRegions_21629469 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeSourceRegions_21629471(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeSourceRegions_21629470(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629472 = query.getOrDefault("Action")
  valid_21629472 = validateParameter(valid_21629472, JString, required = true, default = newJString(
      "DescribeSourceRegions"))
  if valid_21629472 != nil:
    section.add "Action", valid_21629472
  var valid_21629473 = query.getOrDefault("Version")
  valid_21629473 = validateParameter(valid_21629473, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629473 != nil:
    section.add "Version", valid_21629473
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629474 = header.getOrDefault("X-Amz-Date")
  valid_21629474 = validateParameter(valid_21629474, JString, required = false,
                                   default = nil)
  if valid_21629474 != nil:
    section.add "X-Amz-Date", valid_21629474
  var valid_21629475 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629475 = validateParameter(valid_21629475, JString, required = false,
                                   default = nil)
  if valid_21629475 != nil:
    section.add "X-Amz-Security-Token", valid_21629475
  var valid_21629476 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629476 = validateParameter(valid_21629476, JString, required = false,
                                   default = nil)
  if valid_21629476 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629476
  var valid_21629477 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629477 = validateParameter(valid_21629477, JString, required = false,
                                   default = nil)
  if valid_21629477 != nil:
    section.add "X-Amz-Algorithm", valid_21629477
  var valid_21629478 = header.getOrDefault("X-Amz-Signature")
  valid_21629478 = validateParameter(valid_21629478, JString, required = false,
                                   default = nil)
  if valid_21629478 != nil:
    section.add "X-Amz-Signature", valid_21629478
  var valid_21629479 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629479 = validateParameter(valid_21629479, JString, required = false,
                                   default = nil)
  if valid_21629479 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629479
  var valid_21629480 = header.getOrDefault("X-Amz-Credential")
  valid_21629480 = validateParameter(valid_21629480, JString, required = false,
                                   default = nil)
  if valid_21629480 != nil:
    section.add "X-Amz-Credential", valid_21629480
  result.add "header", section
  ## parameters in `formData` object:
  ##   RegionName: JString
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  section = newJObject()
  var valid_21629481 = formData.getOrDefault("RegionName")
  valid_21629481 = validateParameter(valid_21629481, JString, required = false,
                                   default = nil)
  if valid_21629481 != nil:
    section.add "RegionName", valid_21629481
  var valid_21629482 = formData.getOrDefault("Marker")
  valid_21629482 = validateParameter(valid_21629482, JString, required = false,
                                   default = nil)
  if valid_21629482 != nil:
    section.add "Marker", valid_21629482
  var valid_21629483 = formData.getOrDefault("Filters")
  valid_21629483 = validateParameter(valid_21629483, JArray, required = false,
                                   default = nil)
  if valid_21629483 != nil:
    section.add "Filters", valid_21629483
  var valid_21629484 = formData.getOrDefault("MaxRecords")
  valid_21629484 = validateParameter(valid_21629484, JInt, required = false,
                                   default = nil)
  if valid_21629484 != nil:
    section.add "MaxRecords", valid_21629484
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629485: Call_PostDescribeSourceRegions_21629469;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  let valid = call_21629485.validator(path, query, header, formData, body, _)
  let scheme = call_21629485.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629485.makeUrl(scheme.get, call_21629485.host, call_21629485.base,
                               call_21629485.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629485, uri, valid, _)

proc call*(call_21629486: Call_PostDescribeSourceRegions_21629469;
          RegionName: string = ""; Marker: string = "";
          Action: string = "DescribeSourceRegions"; Filters: JsonNode = nil;
          MaxRecords: int = 0; Version: string = "2014-10-31"): Recallable =
  ## postDescribeSourceRegions
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ##   RegionName: string
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Version: string (required)
  var query_21629487 = newJObject()
  var formData_21629488 = newJObject()
  add(formData_21629488, "RegionName", newJString(RegionName))
  add(formData_21629488, "Marker", newJString(Marker))
  add(query_21629487, "Action", newJString(Action))
  if Filters != nil:
    formData_21629488.add "Filters", Filters
  add(formData_21629488, "MaxRecords", newJInt(MaxRecords))
  add(query_21629487, "Version", newJString(Version))
  result = call_21629486.call(nil, query_21629487, nil, formData_21629488, nil)

var postDescribeSourceRegions* = Call_PostDescribeSourceRegions_21629469(
    name: "postDescribeSourceRegions", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DescribeSourceRegions",
    validator: validate_PostDescribeSourceRegions_21629470, base: "/",
    makeUrl: url_PostDescribeSourceRegions_21629471,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeSourceRegions_21629450 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeSourceRegions_21629452(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeSourceRegions_21629451(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MaxRecords: JInt
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: JString (required)
  ##   RegionName: JString
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  section = newJObject()
  var valid_21629453 = query.getOrDefault("MaxRecords")
  valid_21629453 = validateParameter(valid_21629453, JInt, required = false,
                                   default = nil)
  if valid_21629453 != nil:
    section.add "MaxRecords", valid_21629453
  var valid_21629454 = query.getOrDefault("Filters")
  valid_21629454 = validateParameter(valid_21629454, JArray, required = false,
                                   default = nil)
  if valid_21629454 != nil:
    section.add "Filters", valid_21629454
  var valid_21629455 = query.getOrDefault("Action")
  valid_21629455 = validateParameter(valid_21629455, JString, required = true, default = newJString(
      "DescribeSourceRegions"))
  if valid_21629455 != nil:
    section.add "Action", valid_21629455
  var valid_21629456 = query.getOrDefault("Marker")
  valid_21629456 = validateParameter(valid_21629456, JString, required = false,
                                   default = nil)
  if valid_21629456 != nil:
    section.add "Marker", valid_21629456
  var valid_21629457 = query.getOrDefault("Version")
  valid_21629457 = validateParameter(valid_21629457, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629457 != nil:
    section.add "Version", valid_21629457
  var valid_21629458 = query.getOrDefault("RegionName")
  valid_21629458 = validateParameter(valid_21629458, JString, required = false,
                                   default = nil)
  if valid_21629458 != nil:
    section.add "RegionName", valid_21629458
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629459 = header.getOrDefault("X-Amz-Date")
  valid_21629459 = validateParameter(valid_21629459, JString, required = false,
                                   default = nil)
  if valid_21629459 != nil:
    section.add "X-Amz-Date", valid_21629459
  var valid_21629460 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629460 = validateParameter(valid_21629460, JString, required = false,
                                   default = nil)
  if valid_21629460 != nil:
    section.add "X-Amz-Security-Token", valid_21629460
  var valid_21629461 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629461 = validateParameter(valid_21629461, JString, required = false,
                                   default = nil)
  if valid_21629461 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629461
  var valid_21629462 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629462 = validateParameter(valid_21629462, JString, required = false,
                                   default = nil)
  if valid_21629462 != nil:
    section.add "X-Amz-Algorithm", valid_21629462
  var valid_21629463 = header.getOrDefault("X-Amz-Signature")
  valid_21629463 = validateParameter(valid_21629463, JString, required = false,
                                   default = nil)
  if valid_21629463 != nil:
    section.add "X-Amz-Signature", valid_21629463
  var valid_21629464 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629464 = validateParameter(valid_21629464, JString, required = false,
                                   default = nil)
  if valid_21629464 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629464
  var valid_21629465 = header.getOrDefault("X-Amz-Credential")
  valid_21629465 = validateParameter(valid_21629465, JString, required = false,
                                   default = nil)
  if valid_21629465 != nil:
    section.add "X-Amz-Credential", valid_21629465
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629466: Call_GetDescribeSourceRegions_21629450;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ## 
  let valid = call_21629466.validator(path, query, header, formData, body, _)
  let scheme = call_21629466.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629466.makeUrl(scheme.get, call_21629466.host, call_21629466.base,
                               call_21629466.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629466, uri, valid, _)

proc call*(call_21629467: Call_GetDescribeSourceRegions_21629450;
          MaxRecords: int = 0; Filters: JsonNode = nil;
          Action: string = "DescribeSourceRegions"; Marker: string = "";
          Version: string = "2014-10-31"; RegionName: string = ""): Recallable =
  ## getDescribeSourceRegions
  ## Returns a list of the source AWS Regions where the current AWS Region can create a Read Replica or copy a DB snapshot from. This API action supports pagination.
  ##   MaxRecords: int
  ##             : <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results. </p> <p>Default: 100</p> <p>Constraints: Minimum 20, maximum 100.</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   Action: string (required)
  ##   Marker: string
  ##         : An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
  ##   Version: string (required)
  ##   RegionName: string
  ##             : <p>The source AWS Region name. For example, <code>us-east-1</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must specify a valid AWS Region name.</p> </li> </ul>
  var query_21629468 = newJObject()
  add(query_21629468, "MaxRecords", newJInt(MaxRecords))
  if Filters != nil:
    query_21629468.add "Filters", Filters
  add(query_21629468, "Action", newJString(Action))
  add(query_21629468, "Marker", newJString(Marker))
  add(query_21629468, "Version", newJString(Version))
  add(query_21629468, "RegionName", newJString(RegionName))
  result = call_21629467.call(nil, query_21629468, nil, nil, nil)

var getDescribeSourceRegions* = Call_GetDescribeSourceRegions_21629450(
    name: "getDescribeSourceRegions", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DescribeSourceRegions",
    validator: validate_GetDescribeSourceRegions_21629451, base: "/",
    makeUrl: url_GetDescribeSourceRegions_21629452,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDescribeValidDBInstanceModifications_21629505 = ref object of OpenApiRestCall_21625435
proc url_PostDescribeValidDBInstanceModifications_21629507(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDescribeValidDBInstanceModifications_21629506(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629508 = query.getOrDefault("Action")
  valid_21629508 = validateParameter(valid_21629508, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_21629508 != nil:
    section.add "Action", valid_21629508
  var valid_21629509 = query.getOrDefault("Version")
  valid_21629509 = validateParameter(valid_21629509, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629509 != nil:
    section.add "Version", valid_21629509
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629510 = header.getOrDefault("X-Amz-Date")
  valid_21629510 = validateParameter(valid_21629510, JString, required = false,
                                   default = nil)
  if valid_21629510 != nil:
    section.add "X-Amz-Date", valid_21629510
  var valid_21629511 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629511 = validateParameter(valid_21629511, JString, required = false,
                                   default = nil)
  if valid_21629511 != nil:
    section.add "X-Amz-Security-Token", valid_21629511
  var valid_21629512 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629512 = validateParameter(valid_21629512, JString, required = false,
                                   default = nil)
  if valid_21629512 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629512
  var valid_21629513 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629513 = validateParameter(valid_21629513, JString, required = false,
                                   default = nil)
  if valid_21629513 != nil:
    section.add "X-Amz-Algorithm", valid_21629513
  var valid_21629514 = header.getOrDefault("X-Amz-Signature")
  valid_21629514 = validateParameter(valid_21629514, JString, required = false,
                                   default = nil)
  if valid_21629514 != nil:
    section.add "X-Amz-Signature", valid_21629514
  var valid_21629515 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629515 = validateParameter(valid_21629515, JString, required = false,
                                   default = nil)
  if valid_21629515 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629515
  var valid_21629516 = header.getOrDefault("X-Amz-Credential")
  valid_21629516 = validateParameter(valid_21629516, JString, required = false,
                                   default = nil)
  if valid_21629516 != nil:
    section.add "X-Amz-Credential", valid_21629516
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_21629517 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21629517 = validateParameter(valid_21629517, JString, required = true,
                                   default = nil)
  if valid_21629517 != nil:
    section.add "DBInstanceIdentifier", valid_21629517
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629518: Call_PostDescribeValidDBInstanceModifications_21629505;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_21629518.validator(path, query, header, formData, body, _)
  let scheme = call_21629518.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629518.makeUrl(scheme.get, call_21629518.host, call_21629518.base,
                               call_21629518.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629518, uri, valid, _)

proc call*(call_21629519: Call_PostDescribeValidDBInstanceModifications_21629505;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## postDescribeValidDBInstanceModifications
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21629520 = newJObject()
  var formData_21629521 = newJObject()
  add(formData_21629521, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_21629520, "Action", newJString(Action))
  add(query_21629520, "Version", newJString(Version))
  result = call_21629519.call(nil, query_21629520, nil, formData_21629521, nil)

var postDescribeValidDBInstanceModifications* = Call_PostDescribeValidDBInstanceModifications_21629505(
    name: "postDescribeValidDBInstanceModifications", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_PostDescribeValidDBInstanceModifications_21629506,
    base: "/", makeUrl: url_PostDescribeValidDBInstanceModifications_21629507,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDescribeValidDBInstanceModifications_21629489 = ref object of OpenApiRestCall_21625435
proc url_GetDescribeValidDBInstanceModifications_21629491(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDescribeValidDBInstanceModifications_21629490(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  section = newJObject()
  var valid_21629492 = query.getOrDefault("Action")
  valid_21629492 = validateParameter(valid_21629492, JString, required = true, default = newJString(
      "DescribeValidDBInstanceModifications"))
  if valid_21629492 != nil:
    section.add "Action", valid_21629492
  var valid_21629493 = query.getOrDefault("Version")
  valid_21629493 = validateParameter(valid_21629493, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629493 != nil:
    section.add "Version", valid_21629493
  var valid_21629494 = query.getOrDefault("DBInstanceIdentifier")
  valid_21629494 = validateParameter(valid_21629494, JString, required = true,
                                   default = nil)
  if valid_21629494 != nil:
    section.add "DBInstanceIdentifier", valid_21629494
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629495 = header.getOrDefault("X-Amz-Date")
  valid_21629495 = validateParameter(valid_21629495, JString, required = false,
                                   default = nil)
  if valid_21629495 != nil:
    section.add "X-Amz-Date", valid_21629495
  var valid_21629496 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629496 = validateParameter(valid_21629496, JString, required = false,
                                   default = nil)
  if valid_21629496 != nil:
    section.add "X-Amz-Security-Token", valid_21629496
  var valid_21629497 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629497 = validateParameter(valid_21629497, JString, required = false,
                                   default = nil)
  if valid_21629497 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629497
  var valid_21629498 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629498 = validateParameter(valid_21629498, JString, required = false,
                                   default = nil)
  if valid_21629498 != nil:
    section.add "X-Amz-Algorithm", valid_21629498
  var valid_21629499 = header.getOrDefault("X-Amz-Signature")
  valid_21629499 = validateParameter(valid_21629499, JString, required = false,
                                   default = nil)
  if valid_21629499 != nil:
    section.add "X-Amz-Signature", valid_21629499
  var valid_21629500 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629500 = validateParameter(valid_21629500, JString, required = false,
                                   default = nil)
  if valid_21629500 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629500
  var valid_21629501 = header.getOrDefault("X-Amz-Credential")
  valid_21629501 = validateParameter(valid_21629501, JString, required = false,
                                   default = nil)
  if valid_21629501 != nil:
    section.add "X-Amz-Credential", valid_21629501
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629502: Call_GetDescribeValidDBInstanceModifications_21629489;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_21629502.validator(path, query, header, formData, body, _)
  let scheme = call_21629502.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629502.makeUrl(scheme.get, call_21629502.host, call_21629502.base,
                               call_21629502.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629502, uri, valid, _)

proc call*(call_21629503: Call_GetDescribeValidDBInstanceModifications_21629489;
          DBInstanceIdentifier: string;
          Action: string = "DescribeValidDBInstanceModifications";
          Version: string = "2014-10-31"): Recallable =
  ## getDescribeValidDBInstanceModifications
  ## You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to your DB instance. You can use this information when you call <code>ModifyDBInstance</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : The customer identifier or the ARN of your DB instance. 
  var query_21629504 = newJObject()
  add(query_21629504, "Action", newJString(Action))
  add(query_21629504, "Version", newJString(Version))
  add(query_21629504, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_21629503.call(nil, query_21629504, nil, nil, nil)

var getDescribeValidDBInstanceModifications* = Call_GetDescribeValidDBInstanceModifications_21629489(
    name: "getDescribeValidDBInstanceModifications", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=DescribeValidDBInstanceModifications",
    validator: validate_GetDescribeValidDBInstanceModifications_21629490,
    base: "/", makeUrl: url_GetDescribeValidDBInstanceModifications_21629491,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostDownloadDBLogFilePortion_21629541 = ref object of OpenApiRestCall_21625435
proc url_PostDownloadDBLogFilePortion_21629543(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostDownloadDBLogFilePortion_21629542(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629544 = query.getOrDefault("Action")
  valid_21629544 = validateParameter(valid_21629544, JString, required = true, default = newJString(
      "DownloadDBLogFilePortion"))
  if valid_21629544 != nil:
    section.add "Action", valid_21629544
  var valid_21629545 = query.getOrDefault("Version")
  valid_21629545 = validateParameter(valid_21629545, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629545 != nil:
    section.add "Version", valid_21629545
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629546 = header.getOrDefault("X-Amz-Date")
  valid_21629546 = validateParameter(valid_21629546, JString, required = false,
                                   default = nil)
  if valid_21629546 != nil:
    section.add "X-Amz-Date", valid_21629546
  var valid_21629547 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629547 = validateParameter(valid_21629547, JString, required = false,
                                   default = nil)
  if valid_21629547 != nil:
    section.add "X-Amz-Security-Token", valid_21629547
  var valid_21629548 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629548 = validateParameter(valid_21629548, JString, required = false,
                                   default = nil)
  if valid_21629548 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629548
  var valid_21629549 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629549 = validateParameter(valid_21629549, JString, required = false,
                                   default = nil)
  if valid_21629549 != nil:
    section.add "X-Amz-Algorithm", valid_21629549
  var valid_21629550 = header.getOrDefault("X-Amz-Signature")
  valid_21629550 = validateParameter(valid_21629550, JString, required = false,
                                   default = nil)
  if valid_21629550 != nil:
    section.add "X-Amz-Signature", valid_21629550
  var valid_21629551 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629551 = validateParameter(valid_21629551, JString, required = false,
                                   default = nil)
  if valid_21629551 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629551
  var valid_21629552 = header.getOrDefault("X-Amz-Credential")
  valid_21629552 = validateParameter(valid_21629552, JString, required = false,
                                   default = nil)
  if valid_21629552 != nil:
    section.add "X-Amz-Credential", valid_21629552
  result.add "header", section
  ## parameters in `formData` object:
  ##   NumberOfLines: JInt
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Marker: JString
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   LogFileName: JString (required)
  ##              : The name of the log file to be downloaded.
  section = newJObject()
  var valid_21629553 = formData.getOrDefault("NumberOfLines")
  valid_21629553 = validateParameter(valid_21629553, JInt, required = false,
                                   default = nil)
  if valid_21629553 != nil:
    section.add "NumberOfLines", valid_21629553
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_21629554 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21629554 = validateParameter(valid_21629554, JString, required = true,
                                   default = nil)
  if valid_21629554 != nil:
    section.add "DBInstanceIdentifier", valid_21629554
  var valid_21629555 = formData.getOrDefault("Marker")
  valid_21629555 = validateParameter(valid_21629555, JString, required = false,
                                   default = nil)
  if valid_21629555 != nil:
    section.add "Marker", valid_21629555
  var valid_21629556 = formData.getOrDefault("LogFileName")
  valid_21629556 = validateParameter(valid_21629556, JString, required = true,
                                   default = nil)
  if valid_21629556 != nil:
    section.add "LogFileName", valid_21629556
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629557: Call_PostDownloadDBLogFilePortion_21629541;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  let valid = call_21629557.validator(path, query, header, formData, body, _)
  let scheme = call_21629557.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629557.makeUrl(scheme.get, call_21629557.host, call_21629557.base,
                               call_21629557.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629557, uri, valid, _)

proc call*(call_21629558: Call_PostDownloadDBLogFilePortion_21629541;
          DBInstanceIdentifier: string; LogFileName: string; NumberOfLines: int = 0;
          Marker: string = ""; Action: string = "DownloadDBLogFilePortion";
          Version: string = "2014-10-31"): Recallable =
  ## postDownloadDBLogFilePortion
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ##   NumberOfLines: int
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Marker: string
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   Action: string (required)
  ##   LogFileName: string (required)
  ##              : The name of the log file to be downloaded.
  ##   Version: string (required)
  var query_21629559 = newJObject()
  var formData_21629560 = newJObject()
  add(formData_21629560, "NumberOfLines", newJInt(NumberOfLines))
  add(formData_21629560, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_21629560, "Marker", newJString(Marker))
  add(query_21629559, "Action", newJString(Action))
  add(formData_21629560, "LogFileName", newJString(LogFileName))
  add(query_21629559, "Version", newJString(Version))
  result = call_21629558.call(nil, query_21629559, nil, formData_21629560, nil)

var postDownloadDBLogFilePortion* = Call_PostDownloadDBLogFilePortion_21629541(
    name: "postDownloadDBLogFilePortion", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=DownloadDBLogFilePortion",
    validator: validate_PostDownloadDBLogFilePortion_21629542, base: "/",
    makeUrl: url_PostDownloadDBLogFilePortion_21629543,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetDownloadDBLogFilePortion_21629522 = ref object of OpenApiRestCall_21625435
proc url_GetDownloadDBLogFilePortion_21629524(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetDownloadDBLogFilePortion_21629523(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NumberOfLines: JInt
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   LogFileName: JString (required)
  ##              : The name of the log file to be downloaded.
  ##   Action: JString (required)
  ##   Marker: JString
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_21629525 = query.getOrDefault("NumberOfLines")
  valid_21629525 = validateParameter(valid_21629525, JInt, required = false,
                                   default = nil)
  if valid_21629525 != nil:
    section.add "NumberOfLines", valid_21629525
  assert query != nil,
        "query argument is necessary due to required `LogFileName` field"
  var valid_21629526 = query.getOrDefault("LogFileName")
  valid_21629526 = validateParameter(valid_21629526, JString, required = true,
                                   default = nil)
  if valid_21629526 != nil:
    section.add "LogFileName", valid_21629526
  var valid_21629527 = query.getOrDefault("Action")
  valid_21629527 = validateParameter(valid_21629527, JString, required = true, default = newJString(
      "DownloadDBLogFilePortion"))
  if valid_21629527 != nil:
    section.add "Action", valid_21629527
  var valid_21629528 = query.getOrDefault("Marker")
  valid_21629528 = validateParameter(valid_21629528, JString, required = false,
                                   default = nil)
  if valid_21629528 != nil:
    section.add "Marker", valid_21629528
  var valid_21629529 = query.getOrDefault("Version")
  valid_21629529 = validateParameter(valid_21629529, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629529 != nil:
    section.add "Version", valid_21629529
  var valid_21629530 = query.getOrDefault("DBInstanceIdentifier")
  valid_21629530 = validateParameter(valid_21629530, JString, required = true,
                                   default = nil)
  if valid_21629530 != nil:
    section.add "DBInstanceIdentifier", valid_21629530
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629531 = header.getOrDefault("X-Amz-Date")
  valid_21629531 = validateParameter(valid_21629531, JString, required = false,
                                   default = nil)
  if valid_21629531 != nil:
    section.add "X-Amz-Date", valid_21629531
  var valid_21629532 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629532 = validateParameter(valid_21629532, JString, required = false,
                                   default = nil)
  if valid_21629532 != nil:
    section.add "X-Amz-Security-Token", valid_21629532
  var valid_21629533 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629533 = validateParameter(valid_21629533, JString, required = false,
                                   default = nil)
  if valid_21629533 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629533
  var valid_21629534 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629534 = validateParameter(valid_21629534, JString, required = false,
                                   default = nil)
  if valid_21629534 != nil:
    section.add "X-Amz-Algorithm", valid_21629534
  var valid_21629535 = header.getOrDefault("X-Amz-Signature")
  valid_21629535 = validateParameter(valid_21629535, JString, required = false,
                                   default = nil)
  if valid_21629535 != nil:
    section.add "X-Amz-Signature", valid_21629535
  var valid_21629536 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629536 = validateParameter(valid_21629536, JString, required = false,
                                   default = nil)
  if valid_21629536 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629536
  var valid_21629537 = header.getOrDefault("X-Amz-Credential")
  valid_21629537 = validateParameter(valid_21629537, JString, required = false,
                                   default = nil)
  if valid_21629537 != nil:
    section.add "X-Amz-Credential", valid_21629537
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629538: Call_GetDownloadDBLogFilePortion_21629522;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ## 
  let valid = call_21629538.validator(path, query, header, formData, body, _)
  let scheme = call_21629538.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629538.makeUrl(scheme.get, call_21629538.host, call_21629538.base,
                               call_21629538.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629538, uri, valid, _)

proc call*(call_21629539: Call_GetDownloadDBLogFilePortion_21629522;
          LogFileName: string; DBInstanceIdentifier: string; NumberOfLines: int = 0;
          Action: string = "DownloadDBLogFilePortion"; Marker: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getDownloadDBLogFilePortion
  ## Downloads all or a portion of the specified log file, up to 1 MB in size.
  ##   NumberOfLines: int
  ##                : <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p> <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.</p> <ul> <li> <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.</p> </li> <li> <p>If NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end of the log file are returned.</p> </li> <li> <p>If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.</p> </li> <li> <p>You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.</p> </li> </ul>
  ##   LogFileName: string (required)
  ##              : The name of the log file to be downloaded.
  ##   Action: string (required)
  ##   Marker: string
  ##         : The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  var query_21629540 = newJObject()
  add(query_21629540, "NumberOfLines", newJInt(NumberOfLines))
  add(query_21629540, "LogFileName", newJString(LogFileName))
  add(query_21629540, "Action", newJString(Action))
  add(query_21629540, "Marker", newJString(Marker))
  add(query_21629540, "Version", newJString(Version))
  add(query_21629540, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_21629539.call(nil, query_21629540, nil, nil, nil)

var getDownloadDBLogFilePortion* = Call_GetDownloadDBLogFilePortion_21629522(
    name: "getDownloadDBLogFilePortion", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=DownloadDBLogFilePortion",
    validator: validate_GetDownloadDBLogFilePortion_21629523, base: "/",
    makeUrl: url_GetDownloadDBLogFilePortion_21629524,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostFailoverDBCluster_21629578 = ref object of OpenApiRestCall_21625435
proc url_PostFailoverDBCluster_21629580(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostFailoverDBCluster_21629579(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629581 = query.getOrDefault("Action")
  valid_21629581 = validateParameter(valid_21629581, JString, required = true,
                                   default = newJString("FailoverDBCluster"))
  if valid_21629581 != nil:
    section.add "Action", valid_21629581
  var valid_21629582 = query.getOrDefault("Version")
  valid_21629582 = validateParameter(valid_21629582, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629582 != nil:
    section.add "Version", valid_21629582
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629583 = header.getOrDefault("X-Amz-Date")
  valid_21629583 = validateParameter(valid_21629583, JString, required = false,
                                   default = nil)
  if valid_21629583 != nil:
    section.add "X-Amz-Date", valid_21629583
  var valid_21629584 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629584 = validateParameter(valid_21629584, JString, required = false,
                                   default = nil)
  if valid_21629584 != nil:
    section.add "X-Amz-Security-Token", valid_21629584
  var valid_21629585 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629585 = validateParameter(valid_21629585, JString, required = false,
                                   default = nil)
  if valid_21629585 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629585
  var valid_21629586 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629586 = validateParameter(valid_21629586, JString, required = false,
                                   default = nil)
  if valid_21629586 != nil:
    section.add "X-Amz-Algorithm", valid_21629586
  var valid_21629587 = header.getOrDefault("X-Amz-Signature")
  valid_21629587 = validateParameter(valid_21629587, JString, required = false,
                                   default = nil)
  if valid_21629587 != nil:
    section.add "X-Amz-Signature", valid_21629587
  var valid_21629588 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629588 = validateParameter(valid_21629588, JString, required = false,
                                   default = nil)
  if valid_21629588 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629588
  var valid_21629589 = header.getOrDefault("X-Amz-Credential")
  valid_21629589 = validateParameter(valid_21629589, JString, required = false,
                                   default = nil)
  if valid_21629589 != nil:
    section.add "X-Amz-Credential", valid_21629589
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  section = newJObject()
  var valid_21629590 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_21629590 = validateParameter(valid_21629590, JString, required = false,
                                   default = nil)
  if valid_21629590 != nil:
    section.add "TargetDBInstanceIdentifier", valid_21629590
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21629591 = formData.getOrDefault("DBClusterIdentifier")
  valid_21629591 = validateParameter(valid_21629591, JString, required = true,
                                   default = nil)
  if valid_21629591 != nil:
    section.add "DBClusterIdentifier", valid_21629591
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629592: Call_PostFailoverDBCluster_21629578;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21629592.validator(path, query, header, formData, body, _)
  let scheme = call_21629592.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629592.makeUrl(scheme.get, call_21629592.host, call_21629592.base,
                               call_21629592.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629592, uri, valid, _)

proc call*(call_21629593: Call_PostFailoverDBCluster_21629578;
          DBClusterIdentifier: string; Action: string = "FailoverDBCluster";
          TargetDBInstanceIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_21629594 = newJObject()
  var formData_21629595 = newJObject()
  add(query_21629594, "Action", newJString(Action))
  add(formData_21629595, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(formData_21629595, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21629594, "Version", newJString(Version))
  result = call_21629593.call(nil, query_21629594, nil, formData_21629595, nil)

var postFailoverDBCluster* = Call_PostFailoverDBCluster_21629578(
    name: "postFailoverDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_PostFailoverDBCluster_21629579, base: "/",
    makeUrl: url_PostFailoverDBCluster_21629580,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetFailoverDBCluster_21629561 = ref object of OpenApiRestCall_21625435
proc url_GetFailoverDBCluster_21629563(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetFailoverDBCluster_21629562(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: JString
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21629564 = query.getOrDefault("DBClusterIdentifier")
  valid_21629564 = validateParameter(valid_21629564, JString, required = true,
                                   default = nil)
  if valid_21629564 != nil:
    section.add "DBClusterIdentifier", valid_21629564
  var valid_21629565 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_21629565 = validateParameter(valid_21629565, JString, required = false,
                                   default = nil)
  if valid_21629565 != nil:
    section.add "TargetDBInstanceIdentifier", valid_21629565
  var valid_21629566 = query.getOrDefault("Action")
  valid_21629566 = validateParameter(valid_21629566, JString, required = true,
                                   default = newJString("FailoverDBCluster"))
  if valid_21629566 != nil:
    section.add "Action", valid_21629566
  var valid_21629567 = query.getOrDefault("Version")
  valid_21629567 = validateParameter(valid_21629567, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629567 != nil:
    section.add "Version", valid_21629567
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629568 = header.getOrDefault("X-Amz-Date")
  valid_21629568 = validateParameter(valid_21629568, JString, required = false,
                                   default = nil)
  if valid_21629568 != nil:
    section.add "X-Amz-Date", valid_21629568
  var valid_21629569 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629569 = validateParameter(valid_21629569, JString, required = false,
                                   default = nil)
  if valid_21629569 != nil:
    section.add "X-Amz-Security-Token", valid_21629569
  var valid_21629570 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629570 = validateParameter(valid_21629570, JString, required = false,
                                   default = nil)
  if valid_21629570 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629570
  var valid_21629571 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629571 = validateParameter(valid_21629571, JString, required = false,
                                   default = nil)
  if valid_21629571 != nil:
    section.add "X-Amz-Algorithm", valid_21629571
  var valid_21629572 = header.getOrDefault("X-Amz-Signature")
  valid_21629572 = validateParameter(valid_21629572, JString, required = false,
                                   default = nil)
  if valid_21629572 != nil:
    section.add "X-Amz-Signature", valid_21629572
  var valid_21629573 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629573 = validateParameter(valid_21629573, JString, required = false,
                                   default = nil)
  if valid_21629573 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629573
  var valid_21629574 = header.getOrDefault("X-Amz-Credential")
  valid_21629574 = validateParameter(valid_21629574, JString, required = false,
                                   default = nil)
  if valid_21629574 != nil:
    section.add "X-Amz-Credential", valid_21629574
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629575: Call_GetFailoverDBCluster_21629561; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21629575.validator(path, query, header, formData, body, _)
  let scheme = call_21629575.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629575.makeUrl(scheme.get, call_21629575.host, call_21629575.base,
                               call_21629575.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629575, uri, valid, _)

proc call*(call_21629576: Call_GetFailoverDBCluster_21629561;
          DBClusterIdentifier: string; TargetDBInstanceIdentifier: string = "";
          Action: string = "FailoverDBCluster"; Version: string = "2014-10-31"): Recallable =
  ## getFailoverDBCluster
  ## <p>Forces a failover for a DB cluster.</p> <p>A failover for a DB cluster promotes one of the Aurora Replicas (read-only instances) in the DB cluster to be the primary instance (the cluster writer).</p> <p>Amazon Aurora will automatically fail over to an Aurora Replica, if one exists, when the primary instance fails. You can force a failover when you want to simulate a failure of a primary instance for testing. Because each instance in a DB cluster has its own endpoint address, you will need to clean up and re-establish any existing connections that use those endpoint addresses when the failover is complete.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   TargetDBInstanceIdentifier: string
  ##                             : <p>The name of the instance to promote to the primary instance.</p> <p>You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, <code>mydbcluster-replica1</code>.</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21629577 = newJObject()
  add(query_21629577, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21629577, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_21629577, "Action", newJString(Action))
  add(query_21629577, "Version", newJString(Version))
  result = call_21629576.call(nil, query_21629577, nil, nil, nil)

var getFailoverDBCluster* = Call_GetFailoverDBCluster_21629561(
    name: "getFailoverDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=FailoverDBCluster",
    validator: validate_GetFailoverDBCluster_21629562, base: "/",
    makeUrl: url_GetFailoverDBCluster_21629563,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostImportInstallationMedia_21629616 = ref object of OpenApiRestCall_21625435
proc url_PostImportInstallationMedia_21629618(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostImportInstallationMedia_21629617(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629619 = query.getOrDefault("Action")
  valid_21629619 = validateParameter(valid_21629619, JString, required = true, default = newJString(
      "ImportInstallationMedia"))
  if valid_21629619 != nil:
    section.add "Action", valid_21629619
  var valid_21629620 = query.getOrDefault("Version")
  valid_21629620 = validateParameter(valid_21629620, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629620 != nil:
    section.add "Version", valid_21629620
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629621 = header.getOrDefault("X-Amz-Date")
  valid_21629621 = validateParameter(valid_21629621, JString, required = false,
                                   default = nil)
  if valid_21629621 != nil:
    section.add "X-Amz-Date", valid_21629621
  var valid_21629622 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629622 = validateParameter(valid_21629622, JString, required = false,
                                   default = nil)
  if valid_21629622 != nil:
    section.add "X-Amz-Security-Token", valid_21629622
  var valid_21629623 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629623 = validateParameter(valid_21629623, JString, required = false,
                                   default = nil)
  if valid_21629623 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629623
  var valid_21629624 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629624 = validateParameter(valid_21629624, JString, required = false,
                                   default = nil)
  if valid_21629624 != nil:
    section.add "X-Amz-Algorithm", valid_21629624
  var valid_21629625 = header.getOrDefault("X-Amz-Signature")
  valid_21629625 = validateParameter(valid_21629625, JString, required = false,
                                   default = nil)
  if valid_21629625 != nil:
    section.add "X-Amz-Signature", valid_21629625
  var valid_21629626 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629626 = validateParameter(valid_21629626, JString, required = false,
                                   default = nil)
  if valid_21629626 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629626
  var valid_21629627 = header.getOrDefault("X-Amz-Credential")
  valid_21629627 = validateParameter(valid_21629627, JString, required = false,
                                   default = nil)
  if valid_21629627 != nil:
    section.add "X-Amz-Credential", valid_21629627
  result.add "header", section
  ## parameters in `formData` object:
  ##   EngineInstallationMediaPath: JString (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   OSInstallationMediaPath: JString (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   EngineVersion: JString (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `EngineInstallationMediaPath` field"
  var valid_21629628 = formData.getOrDefault("EngineInstallationMediaPath")
  valid_21629628 = validateParameter(valid_21629628, JString, required = true,
                                   default = nil)
  if valid_21629628 != nil:
    section.add "EngineInstallationMediaPath", valid_21629628
  var valid_21629629 = formData.getOrDefault("Engine")
  valid_21629629 = validateParameter(valid_21629629, JString, required = true,
                                   default = nil)
  if valid_21629629 != nil:
    section.add "Engine", valid_21629629
  var valid_21629630 = formData.getOrDefault("OSInstallationMediaPath")
  valid_21629630 = validateParameter(valid_21629630, JString, required = true,
                                   default = nil)
  if valid_21629630 != nil:
    section.add "OSInstallationMediaPath", valid_21629630
  var valid_21629631 = formData.getOrDefault("CustomAvailabilityZoneId")
  valid_21629631 = validateParameter(valid_21629631, JString, required = true,
                                   default = nil)
  if valid_21629631 != nil:
    section.add "CustomAvailabilityZoneId", valid_21629631
  var valid_21629632 = formData.getOrDefault("EngineVersion")
  valid_21629632 = validateParameter(valid_21629632, JString, required = true,
                                   default = nil)
  if valid_21629632 != nil:
    section.add "EngineVersion", valid_21629632
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629633: Call_PostImportInstallationMedia_21629616;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  let valid = call_21629633.validator(path, query, header, formData, body, _)
  let scheme = call_21629633.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629633.makeUrl(scheme.get, call_21629633.host, call_21629633.base,
                               call_21629633.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629633, uri, valid, _)

proc call*(call_21629634: Call_PostImportInstallationMedia_21629616;
          EngineInstallationMediaPath: string; Engine: string;
          OSInstallationMediaPath: string; CustomAvailabilityZoneId: string;
          EngineVersion: string; Action: string = "ImportInstallationMedia";
          Version: string = "2014-10-31"): Recallable =
  ## postImportInstallationMedia
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ##   EngineInstallationMediaPath: string (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   OSInstallationMediaPath: string (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   EngineVersion: string (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Version: string (required)
  var query_21629635 = newJObject()
  var formData_21629636 = newJObject()
  add(formData_21629636, "EngineInstallationMediaPath",
      newJString(EngineInstallationMediaPath))
  add(formData_21629636, "Engine", newJString(Engine))
  add(formData_21629636, "OSInstallationMediaPath",
      newJString(OSInstallationMediaPath))
  add(query_21629635, "Action", newJString(Action))
  add(formData_21629636, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(formData_21629636, "EngineVersion", newJString(EngineVersion))
  add(query_21629635, "Version", newJString(Version))
  result = call_21629634.call(nil, query_21629635, nil, formData_21629636, nil)

var postImportInstallationMedia* = Call_PostImportInstallationMedia_21629616(
    name: "postImportInstallationMedia", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ImportInstallationMedia",
    validator: validate_PostImportInstallationMedia_21629617, base: "/",
    makeUrl: url_PostImportInstallationMedia_21629618,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetImportInstallationMedia_21629596 = ref object of OpenApiRestCall_21625435
proc url_GetImportInstallationMedia_21629598(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetImportInstallationMedia_21629597(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   EngineInstallationMediaPath: JString (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   Action: JString (required)
  ##   CustomAvailabilityZoneId: JString (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   EngineVersion: JString (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   OSInstallationMediaPath: JString (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_21629599 = query.getOrDefault("Engine")
  valid_21629599 = validateParameter(valid_21629599, JString, required = true,
                                   default = nil)
  if valid_21629599 != nil:
    section.add "Engine", valid_21629599
  var valid_21629600 = query.getOrDefault("EngineInstallationMediaPath")
  valid_21629600 = validateParameter(valid_21629600, JString, required = true,
                                   default = nil)
  if valid_21629600 != nil:
    section.add "EngineInstallationMediaPath", valid_21629600
  var valid_21629601 = query.getOrDefault("Action")
  valid_21629601 = validateParameter(valid_21629601, JString, required = true, default = newJString(
      "ImportInstallationMedia"))
  if valid_21629601 != nil:
    section.add "Action", valid_21629601
  var valid_21629602 = query.getOrDefault("CustomAvailabilityZoneId")
  valid_21629602 = validateParameter(valid_21629602, JString, required = true,
                                   default = nil)
  if valid_21629602 != nil:
    section.add "CustomAvailabilityZoneId", valid_21629602
  var valid_21629603 = query.getOrDefault("EngineVersion")
  valid_21629603 = validateParameter(valid_21629603, JString, required = true,
                                   default = nil)
  if valid_21629603 != nil:
    section.add "EngineVersion", valid_21629603
  var valid_21629604 = query.getOrDefault("OSInstallationMediaPath")
  valid_21629604 = validateParameter(valid_21629604, JString, required = true,
                                   default = nil)
  if valid_21629604 != nil:
    section.add "OSInstallationMediaPath", valid_21629604
  var valid_21629605 = query.getOrDefault("Version")
  valid_21629605 = validateParameter(valid_21629605, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629605 != nil:
    section.add "Version", valid_21629605
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629606 = header.getOrDefault("X-Amz-Date")
  valid_21629606 = validateParameter(valid_21629606, JString, required = false,
                                   default = nil)
  if valid_21629606 != nil:
    section.add "X-Amz-Date", valid_21629606
  var valid_21629607 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629607 = validateParameter(valid_21629607, JString, required = false,
                                   default = nil)
  if valid_21629607 != nil:
    section.add "X-Amz-Security-Token", valid_21629607
  var valid_21629608 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629608 = validateParameter(valid_21629608, JString, required = false,
                                   default = nil)
  if valid_21629608 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629608
  var valid_21629609 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629609 = validateParameter(valid_21629609, JString, required = false,
                                   default = nil)
  if valid_21629609 != nil:
    section.add "X-Amz-Algorithm", valid_21629609
  var valid_21629610 = header.getOrDefault("X-Amz-Signature")
  valid_21629610 = validateParameter(valid_21629610, JString, required = false,
                                   default = nil)
  if valid_21629610 != nil:
    section.add "X-Amz-Signature", valid_21629610
  var valid_21629611 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629611 = validateParameter(valid_21629611, JString, required = false,
                                   default = nil)
  if valid_21629611 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629611
  var valid_21629612 = header.getOrDefault("X-Amz-Credential")
  valid_21629612 = validateParameter(valid_21629612, JString, required = false,
                                   default = nil)
  if valid_21629612 != nil:
    section.add "X-Amz-Credential", valid_21629612
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629613: Call_GetImportInstallationMedia_21629596;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ## 
  let valid = call_21629613.validator(path, query, header, formData, body, _)
  let scheme = call_21629613.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629613.makeUrl(scheme.get, call_21629613.host, call_21629613.base,
                               call_21629613.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629613, uri, valid, _)

proc call*(call_21629614: Call_GetImportInstallationMedia_21629596; Engine: string;
          EngineInstallationMediaPath: string; CustomAvailabilityZoneId: string;
          EngineVersion: string; OSInstallationMediaPath: string;
          Action: string = "ImportInstallationMedia"; Version: string = "2014-10-31"): Recallable =
  ## getImportInstallationMedia
  ## Imports the installation media for a DB engine that requires an on-premises customer provided license, such as SQL Server.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>The list only includes supported DB engines that require an on-premises customer provided license. </p> <p>Valid Values: </p> <ul> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   EngineInstallationMediaPath: string (required)
  ##                              : <p>The path to the installation medium for the specified DB engine.</p> <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code> </p>
  ##   Action: string (required)
  ##   CustomAvailabilityZoneId: string (required)
  ##                           : The identifier of the custom Availability Zone (AZ) to import the installation media to.
  ##   EngineVersion: string (required)
  ##                : <p>The version number of the database engine to use.</p> <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p> <p>The following are the database engines and links to information about the major and minor versions. The list only includes DB engines that require an on-premises customer provided license.</p> <p> <b>Microsoft SQL Server</b> </p> <p>See <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.FeatureSupport">Version and Feature Support on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   OSInstallationMediaPath: string (required)
  ##                          : <p>The path to the installation medium for the operating system associated with the specified DB engine.</p> <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code> </p>
  ##   Version: string (required)
  var query_21629615 = newJObject()
  add(query_21629615, "Engine", newJString(Engine))
  add(query_21629615, "EngineInstallationMediaPath",
      newJString(EngineInstallationMediaPath))
  add(query_21629615, "Action", newJString(Action))
  add(query_21629615, "CustomAvailabilityZoneId",
      newJString(CustomAvailabilityZoneId))
  add(query_21629615, "EngineVersion", newJString(EngineVersion))
  add(query_21629615, "OSInstallationMediaPath",
      newJString(OSInstallationMediaPath))
  add(query_21629615, "Version", newJString(Version))
  result = call_21629614.call(nil, query_21629615, nil, nil, nil)

var getImportInstallationMedia* = Call_GetImportInstallationMedia_21629596(
    name: "getImportInstallationMedia", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ImportInstallationMedia",
    validator: validate_GetImportInstallationMedia_21629597, base: "/",
    makeUrl: url_GetImportInstallationMedia_21629598,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostListTagsForResource_21629654 = ref object of OpenApiRestCall_21625435
proc url_PostListTagsForResource_21629656(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostListTagsForResource_21629655(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629657 = query.getOrDefault("Action")
  valid_21629657 = validateParameter(valid_21629657, JString, required = true,
                                   default = newJString("ListTagsForResource"))
  if valid_21629657 != nil:
    section.add "Action", valid_21629657
  var valid_21629658 = query.getOrDefault("Version")
  valid_21629658 = validateParameter(valid_21629658, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629658 != nil:
    section.add "Version", valid_21629658
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629659 = header.getOrDefault("X-Amz-Date")
  valid_21629659 = validateParameter(valid_21629659, JString, required = false,
                                   default = nil)
  if valid_21629659 != nil:
    section.add "X-Amz-Date", valid_21629659
  var valid_21629660 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629660 = validateParameter(valid_21629660, JString, required = false,
                                   default = nil)
  if valid_21629660 != nil:
    section.add "X-Amz-Security-Token", valid_21629660
  var valid_21629661 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629661 = validateParameter(valid_21629661, JString, required = false,
                                   default = nil)
  if valid_21629661 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629661
  var valid_21629662 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629662 = validateParameter(valid_21629662, JString, required = false,
                                   default = nil)
  if valid_21629662 != nil:
    section.add "X-Amz-Algorithm", valid_21629662
  var valid_21629663 = header.getOrDefault("X-Amz-Signature")
  valid_21629663 = validateParameter(valid_21629663, JString, required = false,
                                   default = nil)
  if valid_21629663 != nil:
    section.add "X-Amz-Signature", valid_21629663
  var valid_21629664 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629664 = validateParameter(valid_21629664, JString, required = false,
                                   default = nil)
  if valid_21629664 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629664
  var valid_21629665 = header.getOrDefault("X-Amz-Credential")
  valid_21629665 = validateParameter(valid_21629665, JString, required = false,
                                   default = nil)
  if valid_21629665 != nil:
    section.add "X-Amz-Credential", valid_21629665
  result.add "header", section
  ## parameters in `formData` object:
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  section = newJObject()
  var valid_21629666 = formData.getOrDefault("Filters")
  valid_21629666 = validateParameter(valid_21629666, JArray, required = false,
                                   default = nil)
  if valid_21629666 != nil:
    section.add "Filters", valid_21629666
  assert formData != nil,
        "formData argument is necessary due to required `ResourceName` field"
  var valid_21629667 = formData.getOrDefault("ResourceName")
  valid_21629667 = validateParameter(valid_21629667, JString, required = true,
                                   default = nil)
  if valid_21629667 != nil:
    section.add "ResourceName", valid_21629667
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629668: Call_PostListTagsForResource_21629654;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  let valid = call_21629668.validator(path, query, header, formData, body, _)
  let scheme = call_21629668.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629668.makeUrl(scheme.get, call_21629668.host, call_21629668.base,
                               call_21629668.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629668, uri, valid, _)

proc call*(call_21629669: Call_PostListTagsForResource_21629654;
          ResourceName: string; Action: string = "ListTagsForResource";
          Filters: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postListTagsForResource
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   Action: string (required)
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Version: string (required)
  var query_21629670 = newJObject()
  var formData_21629671 = newJObject()
  add(query_21629670, "Action", newJString(Action))
  if Filters != nil:
    formData_21629671.add "Filters", Filters
  add(formData_21629671, "ResourceName", newJString(ResourceName))
  add(query_21629670, "Version", newJString(Version))
  result = call_21629669.call(nil, query_21629670, nil, formData_21629671, nil)

var postListTagsForResource* = Call_PostListTagsForResource_21629654(
    name: "postListTagsForResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_PostListTagsForResource_21629655, base: "/",
    makeUrl: url_PostListTagsForResource_21629656,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetListTagsForResource_21629637 = ref object of OpenApiRestCall_21625435
proc url_GetListTagsForResource_21629639(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetListTagsForResource_21629638(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629640 = query.getOrDefault("Filters")
  valid_21629640 = validateParameter(valid_21629640, JArray, required = false,
                                   default = nil)
  if valid_21629640 != nil:
    section.add "Filters", valid_21629640
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_21629641 = query.getOrDefault("ResourceName")
  valid_21629641 = validateParameter(valid_21629641, JString, required = true,
                                   default = nil)
  if valid_21629641 != nil:
    section.add "ResourceName", valid_21629641
  var valid_21629642 = query.getOrDefault("Action")
  valid_21629642 = validateParameter(valid_21629642, JString, required = true,
                                   default = newJString("ListTagsForResource"))
  if valid_21629642 != nil:
    section.add "Action", valid_21629642
  var valid_21629643 = query.getOrDefault("Version")
  valid_21629643 = validateParameter(valid_21629643, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629643 != nil:
    section.add "Version", valid_21629643
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629644 = header.getOrDefault("X-Amz-Date")
  valid_21629644 = validateParameter(valid_21629644, JString, required = false,
                                   default = nil)
  if valid_21629644 != nil:
    section.add "X-Amz-Date", valid_21629644
  var valid_21629645 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629645 = validateParameter(valid_21629645, JString, required = false,
                                   default = nil)
  if valid_21629645 != nil:
    section.add "X-Amz-Security-Token", valid_21629645
  var valid_21629646 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629646 = validateParameter(valid_21629646, JString, required = false,
                                   default = nil)
  if valid_21629646 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629646
  var valid_21629647 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629647 = validateParameter(valid_21629647, JString, required = false,
                                   default = nil)
  if valid_21629647 != nil:
    section.add "X-Amz-Algorithm", valid_21629647
  var valid_21629648 = header.getOrDefault("X-Amz-Signature")
  valid_21629648 = validateParameter(valid_21629648, JString, required = false,
                                   default = nil)
  if valid_21629648 != nil:
    section.add "X-Amz-Signature", valid_21629648
  var valid_21629649 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629649 = validateParameter(valid_21629649, JString, required = false,
                                   default = nil)
  if valid_21629649 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629649
  var valid_21629650 = header.getOrDefault("X-Amz-Credential")
  valid_21629650 = validateParameter(valid_21629650, JString, required = false,
                                   default = nil)
  if valid_21629650 != nil:
    section.add "X-Amz-Credential", valid_21629650
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629651: Call_GetListTagsForResource_21629637;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ## 
  let valid = call_21629651.validator(path, query, header, formData, body, _)
  let scheme = call_21629651.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629651.makeUrl(scheme.get, call_21629651.host, call_21629651.base,
                               call_21629651.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629651, uri, valid, _)

proc call*(call_21629652: Call_GetListTagsForResource_21629637;
          ResourceName: string; Filters: JsonNode = nil;
          Action: string = "ListTagsForResource"; Version: string = "2014-10-31"): Recallable =
  ## getListTagsForResource
  ## <p>Lists all tags on an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   Filters: JArray
  ##          : This parameter isn't currently supported.
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21629653 = newJObject()
  if Filters != nil:
    query_21629653.add "Filters", Filters
  add(query_21629653, "ResourceName", newJString(ResourceName))
  add(query_21629653, "Action", newJString(Action))
  add(query_21629653, "Version", newJString(Version))
  result = call_21629652.call(nil, query_21629653, nil, nil, nil)

var getListTagsForResource* = Call_GetListTagsForResource_21629637(
    name: "getListTagsForResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ListTagsForResource",
    validator: validate_GetListTagsForResource_21629638, base: "/",
    makeUrl: url_GetListTagsForResource_21629639,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCertificates_21629689 = ref object of OpenApiRestCall_21625435
proc url_PostModifyCertificates_21629691(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyCertificates_21629690(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances temporarily, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629692 = query.getOrDefault("Action")
  valid_21629692 = validateParameter(valid_21629692, JString, required = true,
                                   default = newJString("ModifyCertificates"))
  if valid_21629692 != nil:
    section.add "Action", valid_21629692
  var valid_21629693 = query.getOrDefault("Version")
  valid_21629693 = validateParameter(valid_21629693, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629693 != nil:
    section.add "Version", valid_21629693
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629694 = header.getOrDefault("X-Amz-Date")
  valid_21629694 = validateParameter(valid_21629694, JString, required = false,
                                   default = nil)
  if valid_21629694 != nil:
    section.add "X-Amz-Date", valid_21629694
  var valid_21629695 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629695 = validateParameter(valid_21629695, JString, required = false,
                                   default = nil)
  if valid_21629695 != nil:
    section.add "X-Amz-Security-Token", valid_21629695
  var valid_21629696 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629696 = validateParameter(valid_21629696, JString, required = false,
                                   default = nil)
  if valid_21629696 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629696
  var valid_21629697 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629697 = validateParameter(valid_21629697, JString, required = false,
                                   default = nil)
  if valid_21629697 != nil:
    section.add "X-Amz-Algorithm", valid_21629697
  var valid_21629698 = header.getOrDefault("X-Amz-Signature")
  valid_21629698 = validateParameter(valid_21629698, JString, required = false,
                                   default = nil)
  if valid_21629698 != nil:
    section.add "X-Amz-Signature", valid_21629698
  var valid_21629699 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629699 = validateParameter(valid_21629699, JString, required = false,
                                   default = nil)
  if valid_21629699 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629699
  var valid_21629700 = header.getOrDefault("X-Amz-Credential")
  valid_21629700 = validateParameter(valid_21629700, JString, required = false,
                                   default = nil)
  if valid_21629700 != nil:
    section.add "X-Amz-Credential", valid_21629700
  result.add "header", section
  ## parameters in `formData` object:
  ##   CertificateIdentifier: JString
  ##                        : <p>The new default certificate identifier to override the current one with.</p> <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI command or the <code>DescribeCertificates</code> API operation.</p>
  ##   RemoveCustomerOverride: JBool
  ##                         : A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
  section = newJObject()
  var valid_21629701 = formData.getOrDefault("CertificateIdentifier")
  valid_21629701 = validateParameter(valid_21629701, JString, required = false,
                                   default = nil)
  if valid_21629701 != nil:
    section.add "CertificateIdentifier", valid_21629701
  var valid_21629702 = formData.getOrDefault("RemoveCustomerOverride")
  valid_21629702 = validateParameter(valid_21629702, JBool, required = false,
                                   default = nil)
  if valid_21629702 != nil:
    section.add "RemoveCustomerOverride", valid_21629702
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629703: Call_PostModifyCertificates_21629689;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances temporarily, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_21629703.validator(path, query, header, formData, body, _)
  let scheme = call_21629703.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629703.makeUrl(scheme.get, call_21629703.host, call_21629703.base,
                               call_21629703.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629703, uri, valid, _)

proc call*(call_21629704: Call_PostModifyCertificates_21629689;
          CertificateIdentifier: string = ""; Action: string = "ModifyCertificates";
          RemoveCustomerOverride: bool = false; Version: string = "2014-10-31"): Recallable =
  ## postModifyCertificates
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances temporarily, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   CertificateIdentifier: string
  ##                        : <p>The new default certificate identifier to override the current one with.</p> <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI command or the <code>DescribeCertificates</code> API operation.</p>
  ##   Action: string (required)
  ##   RemoveCustomerOverride: bool
  ##                         : A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
  ##   Version: string (required)
  var query_21629705 = newJObject()
  var formData_21629706 = newJObject()
  add(formData_21629706, "CertificateIdentifier",
      newJString(CertificateIdentifier))
  add(query_21629705, "Action", newJString(Action))
  add(formData_21629706, "RemoveCustomerOverride",
      newJBool(RemoveCustomerOverride))
  add(query_21629705, "Version", newJString(Version))
  result = call_21629704.call(nil, query_21629705, nil, formData_21629706, nil)

var postModifyCertificates* = Call_PostModifyCertificates_21629689(
    name: "postModifyCertificates", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCertificates",
    validator: validate_PostModifyCertificates_21629690, base: "/",
    makeUrl: url_PostModifyCertificates_21629691,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCertificates_21629672 = ref object of OpenApiRestCall_21625435
proc url_GetModifyCertificates_21629674(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyCertificates_21629673(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances temporarily, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   CertificateIdentifier: JString
  ##                        : <p>The new default certificate identifier to override the current one with.</p> <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI command or the <code>DescribeCertificates</code> API operation.</p>
  ##   RemoveCustomerOverride: JBool
  ##                         : A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629675 = query.getOrDefault("CertificateIdentifier")
  valid_21629675 = validateParameter(valid_21629675, JString, required = false,
                                   default = nil)
  if valid_21629675 != nil:
    section.add "CertificateIdentifier", valid_21629675
  var valid_21629676 = query.getOrDefault("RemoveCustomerOverride")
  valid_21629676 = validateParameter(valid_21629676, JBool, required = false,
                                   default = nil)
  if valid_21629676 != nil:
    section.add "RemoveCustomerOverride", valid_21629676
  var valid_21629677 = query.getOrDefault("Action")
  valid_21629677 = validateParameter(valid_21629677, JString, required = true,
                                   default = newJString("ModifyCertificates"))
  if valid_21629677 != nil:
    section.add "Action", valid_21629677
  var valid_21629678 = query.getOrDefault("Version")
  valid_21629678 = validateParameter(valid_21629678, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629678 != nil:
    section.add "Version", valid_21629678
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629679 = header.getOrDefault("X-Amz-Date")
  valid_21629679 = validateParameter(valid_21629679, JString, required = false,
                                   default = nil)
  if valid_21629679 != nil:
    section.add "X-Amz-Date", valid_21629679
  var valid_21629680 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629680 = validateParameter(valid_21629680, JString, required = false,
                                   default = nil)
  if valid_21629680 != nil:
    section.add "X-Amz-Security-Token", valid_21629680
  var valid_21629681 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629681 = validateParameter(valid_21629681, JString, required = false,
                                   default = nil)
  if valid_21629681 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629681
  var valid_21629682 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629682 = validateParameter(valid_21629682, JString, required = false,
                                   default = nil)
  if valid_21629682 != nil:
    section.add "X-Amz-Algorithm", valid_21629682
  var valid_21629683 = header.getOrDefault("X-Amz-Signature")
  valid_21629683 = validateParameter(valid_21629683, JString, required = false,
                                   default = nil)
  if valid_21629683 != nil:
    section.add "X-Amz-Signature", valid_21629683
  var valid_21629684 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629684 = validateParameter(valid_21629684, JString, required = false,
                                   default = nil)
  if valid_21629684 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629684
  var valid_21629685 = header.getOrDefault("X-Amz-Credential")
  valid_21629685 = validateParameter(valid_21629685, JString, required = false,
                                   default = nil)
  if valid_21629685 != nil:
    section.add "X-Amz-Credential", valid_21629685
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629686: Call_GetModifyCertificates_21629672;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances temporarily, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_21629686.validator(path, query, header, formData, body, _)
  let scheme = call_21629686.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629686.makeUrl(scheme.get, call_21629686.host, call_21629686.base,
                               call_21629686.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629686, uri, valid, _)

proc call*(call_21629687: Call_GetModifyCertificates_21629672;
          CertificateIdentifier: string = ""; RemoveCustomerOverride: bool = false;
          Action: string = "ModifyCertificates"; Version: string = "2014-10-31"): Recallable =
  ## getModifyCertificates
  ## <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances temporarily, or remove the override.</p> <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p> <p>You might need to override the default certificate in the following situations:</p> <ul> <li> <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified AWS Region.</p> </li> <li> <p>RDS has already moved to a new default CA certificate for the specified AWS Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p> </li> </ul> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   CertificateIdentifier: string
  ##                        : <p>The new default certificate identifier to override the current one with.</p> <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI command or the <code>DescribeCertificates</code> API operation.</p>
  ##   RemoveCustomerOverride: bool
  ##                         : A value that indicates whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21629688 = newJObject()
  add(query_21629688, "CertificateIdentifier", newJString(CertificateIdentifier))
  add(query_21629688, "RemoveCustomerOverride", newJBool(RemoveCustomerOverride))
  add(query_21629688, "Action", newJString(Action))
  add(query_21629688, "Version", newJString(Version))
  result = call_21629687.call(nil, query_21629688, nil, nil, nil)

var getModifyCertificates* = Call_GetModifyCertificates_21629672(
    name: "getModifyCertificates", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCertificates",
    validator: validate_GetModifyCertificates_21629673, base: "/",
    makeUrl: url_GetModifyCertificates_21629674,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyCurrentDBClusterCapacity_21629726 = ref object of OpenApiRestCall_21625435
proc url_PostModifyCurrentDBClusterCapacity_21629728(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyCurrentDBClusterCapacity_21629727(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629729 = query.getOrDefault("Action")
  valid_21629729 = validateParameter(valid_21629729, JString, required = true, default = newJString(
      "ModifyCurrentDBClusterCapacity"))
  if valid_21629729 != nil:
    section.add "Action", valid_21629729
  var valid_21629730 = query.getOrDefault("Version")
  valid_21629730 = validateParameter(valid_21629730, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629730 != nil:
    section.add "Version", valid_21629730
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629731 = header.getOrDefault("X-Amz-Date")
  valid_21629731 = validateParameter(valid_21629731, JString, required = false,
                                   default = nil)
  if valid_21629731 != nil:
    section.add "X-Amz-Date", valid_21629731
  var valid_21629732 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629732 = validateParameter(valid_21629732, JString, required = false,
                                   default = nil)
  if valid_21629732 != nil:
    section.add "X-Amz-Security-Token", valid_21629732
  var valid_21629733 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629733 = validateParameter(valid_21629733, JString, required = false,
                                   default = nil)
  if valid_21629733 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629733
  var valid_21629734 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629734 = validateParameter(valid_21629734, JString, required = false,
                                   default = nil)
  if valid_21629734 != nil:
    section.add "X-Amz-Algorithm", valid_21629734
  var valid_21629735 = header.getOrDefault("X-Amz-Signature")
  valid_21629735 = validateParameter(valid_21629735, JString, required = false,
                                   default = nil)
  if valid_21629735 != nil:
    section.add "X-Amz-Signature", valid_21629735
  var valid_21629736 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629736 = validateParameter(valid_21629736, JString, required = false,
                                   default = nil)
  if valid_21629736 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629736
  var valid_21629737 = header.getOrDefault("X-Amz-Credential")
  valid_21629737 = validateParameter(valid_21629737, JString, required = false,
                                   default = nil)
  if valid_21629737 != nil:
    section.add "X-Amz-Credential", valid_21629737
  result.add "header", section
  ## parameters in `formData` object:
  ##   TimeoutAction: JString
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   SecondsBeforeTimeout: JInt
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Capacity: JInt
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  section = newJObject()
  var valid_21629738 = formData.getOrDefault("TimeoutAction")
  valid_21629738 = validateParameter(valid_21629738, JString, required = false,
                                   default = nil)
  if valid_21629738 != nil:
    section.add "TimeoutAction", valid_21629738
  var valid_21629739 = formData.getOrDefault("SecondsBeforeTimeout")
  valid_21629739 = validateParameter(valid_21629739, JInt, required = false,
                                   default = nil)
  if valid_21629739 != nil:
    section.add "SecondsBeforeTimeout", valid_21629739
  var valid_21629740 = formData.getOrDefault("Capacity")
  valid_21629740 = validateParameter(valid_21629740, JInt, required = false,
                                   default = nil)
  if valid_21629740 != nil:
    section.add "Capacity", valid_21629740
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21629741 = formData.getOrDefault("DBClusterIdentifier")
  valid_21629741 = validateParameter(valid_21629741, JString, required = true,
                                   default = nil)
  if valid_21629741 != nil:
    section.add "DBClusterIdentifier", valid_21629741
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629742: Call_PostModifyCurrentDBClusterCapacity_21629726;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21629742.validator(path, query, header, formData, body, _)
  let scheme = call_21629742.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629742.makeUrl(scheme.get, call_21629742.host, call_21629742.base,
                               call_21629742.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629742, uri, valid, _)

proc call*(call_21629743: Call_PostModifyCurrentDBClusterCapacity_21629726;
          DBClusterIdentifier: string; TimeoutAction: string = "";
          SecondsBeforeTimeout: int = 0;
          Action: string = "ModifyCurrentDBClusterCapacity"; Capacity: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## postModifyCurrentDBClusterCapacity
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   TimeoutAction: string
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   SecondsBeforeTimeout: int
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   Action: string (required)
  ##   Capacity: int
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_21629744 = newJObject()
  var formData_21629745 = newJObject()
  add(formData_21629745, "TimeoutAction", newJString(TimeoutAction))
  add(formData_21629745, "SecondsBeforeTimeout", newJInt(SecondsBeforeTimeout))
  add(query_21629744, "Action", newJString(Action))
  add(formData_21629745, "Capacity", newJInt(Capacity))
  add(formData_21629745, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21629744, "Version", newJString(Version))
  result = call_21629743.call(nil, query_21629744, nil, formData_21629745, nil)

var postModifyCurrentDBClusterCapacity* = Call_PostModifyCurrentDBClusterCapacity_21629726(
    name: "postModifyCurrentDBClusterCapacity", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCurrentDBClusterCapacity",
    validator: validate_PostModifyCurrentDBClusterCapacity_21629727, base: "/",
    makeUrl: url_PostModifyCurrentDBClusterCapacity_21629728,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyCurrentDBClusterCapacity_21629707 = ref object of OpenApiRestCall_21625435
proc url_GetModifyCurrentDBClusterCapacity_21629709(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyCurrentDBClusterCapacity_21629708(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SecondsBeforeTimeout: JInt
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   TimeoutAction: JString
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   Action: JString (required)
  ##   Capacity: JInt
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629710 = query.getOrDefault("SecondsBeforeTimeout")
  valid_21629710 = validateParameter(valid_21629710, JInt, required = false,
                                   default = nil)
  if valid_21629710 != nil:
    section.add "SecondsBeforeTimeout", valid_21629710
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21629711 = query.getOrDefault("DBClusterIdentifier")
  valid_21629711 = validateParameter(valid_21629711, JString, required = true,
                                   default = nil)
  if valid_21629711 != nil:
    section.add "DBClusterIdentifier", valid_21629711
  var valid_21629712 = query.getOrDefault("TimeoutAction")
  valid_21629712 = validateParameter(valid_21629712, JString, required = false,
                                   default = nil)
  if valid_21629712 != nil:
    section.add "TimeoutAction", valid_21629712
  var valid_21629713 = query.getOrDefault("Action")
  valid_21629713 = validateParameter(valid_21629713, JString, required = true, default = newJString(
      "ModifyCurrentDBClusterCapacity"))
  if valid_21629713 != nil:
    section.add "Action", valid_21629713
  var valid_21629714 = query.getOrDefault("Capacity")
  valid_21629714 = validateParameter(valid_21629714, JInt, required = false,
                                   default = nil)
  if valid_21629714 != nil:
    section.add "Capacity", valid_21629714
  var valid_21629715 = query.getOrDefault("Version")
  valid_21629715 = validateParameter(valid_21629715, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629715 != nil:
    section.add "Version", valid_21629715
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629716 = header.getOrDefault("X-Amz-Date")
  valid_21629716 = validateParameter(valid_21629716, JString, required = false,
                                   default = nil)
  if valid_21629716 != nil:
    section.add "X-Amz-Date", valid_21629716
  var valid_21629717 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629717 = validateParameter(valid_21629717, JString, required = false,
                                   default = nil)
  if valid_21629717 != nil:
    section.add "X-Amz-Security-Token", valid_21629717
  var valid_21629718 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629718 = validateParameter(valid_21629718, JString, required = false,
                                   default = nil)
  if valid_21629718 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629718
  var valid_21629719 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629719 = validateParameter(valid_21629719, JString, required = false,
                                   default = nil)
  if valid_21629719 != nil:
    section.add "X-Amz-Algorithm", valid_21629719
  var valid_21629720 = header.getOrDefault("X-Amz-Signature")
  valid_21629720 = validateParameter(valid_21629720, JString, required = false,
                                   default = nil)
  if valid_21629720 != nil:
    section.add "X-Amz-Signature", valid_21629720
  var valid_21629721 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629721 = validateParameter(valid_21629721, JString, required = false,
                                   default = nil)
  if valid_21629721 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629721
  var valid_21629722 = header.getOrDefault("X-Amz-Credential")
  valid_21629722 = validateParameter(valid_21629722, JString, required = false,
                                   default = nil)
  if valid_21629722 != nil:
    section.add "X-Amz-Credential", valid_21629722
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629723: Call_GetModifyCurrentDBClusterCapacity_21629707;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21629723.validator(path, query, header, formData, body, _)
  let scheme = call_21629723.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629723.makeUrl(scheme.get, call_21629723.host, call_21629723.base,
                               call_21629723.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629723, uri, valid, _)

proc call*(call_21629724: Call_GetModifyCurrentDBClusterCapacity_21629707;
          DBClusterIdentifier: string; SecondsBeforeTimeout: int = 0;
          TimeoutAction: string = "";
          Action: string = "ModifyCurrentDBClusterCapacity"; Capacity: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## getModifyCurrentDBClusterCapacity
  ## <p>Set the capacity of an Aurora Serverless DB cluster to a specific value.</p> <p>Aurora Serverless scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code> to set the capacity explicitly.</p> <p>After this call sets the DB cluster capacity, Aurora Serverless can automatically scale the DB cluster based on the cooldown period for scaling up and the cooldown period for scaling down.</p> <p>For more information about Aurora Serverless, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <important> <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped. For more information about scaling points, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SecondsBeforeTimeout: int
  ##                       : <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.</p> <ul> <li> <p>Value must be from 10 through 600.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB cluster.</p> </li> </ul>
  ##   TimeoutAction: string
  ##                : <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
  ##   Action: string (required)
  ##   Capacity: int
  ##           : <p>The DB cluster capacity.</p> <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p> <p>Constraints:</p> <ul> <li> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> </li> <li> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> </li> </ul>
  ##   Version: string (required)
  var query_21629725 = newJObject()
  add(query_21629725, "SecondsBeforeTimeout", newJInt(SecondsBeforeTimeout))
  add(query_21629725, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21629725, "TimeoutAction", newJString(TimeoutAction))
  add(query_21629725, "Action", newJString(Action))
  add(query_21629725, "Capacity", newJInt(Capacity))
  add(query_21629725, "Version", newJString(Version))
  result = call_21629724.call(nil, query_21629725, nil, nil, nil)

var getModifyCurrentDBClusterCapacity* = Call_GetModifyCurrentDBClusterCapacity_21629707(
    name: "getModifyCurrentDBClusterCapacity", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyCurrentDBClusterCapacity",
    validator: validate_GetModifyCurrentDBClusterCapacity_21629708, base: "/",
    makeUrl: url_GetModifyCurrentDBClusterCapacity_21629709,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBCluster_21629789 = ref object of OpenApiRestCall_21625435
proc url_PostModifyDBCluster_21629791(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBCluster_21629790(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629792 = query.getOrDefault("Action")
  valid_21629792 = validateParameter(valid_21629792, JString, required = true,
                                   default = newJString("ModifyDBCluster"))
  if valid_21629792 != nil:
    section.add "Action", valid_21629792
  var valid_21629793 = query.getOrDefault("Version")
  valid_21629793 = validateParameter(valid_21629793, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629793 != nil:
    section.add "Version", valid_21629793
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629794 = header.getOrDefault("X-Amz-Date")
  valid_21629794 = validateParameter(valid_21629794, JString, required = false,
                                   default = nil)
  if valid_21629794 != nil:
    section.add "X-Amz-Date", valid_21629794
  var valid_21629795 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629795 = validateParameter(valid_21629795, JString, required = false,
                                   default = nil)
  if valid_21629795 != nil:
    section.add "X-Amz-Security-Token", valid_21629795
  var valid_21629796 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629796 = validateParameter(valid_21629796, JString, required = false,
                                   default = nil)
  if valid_21629796 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629796
  var valid_21629797 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629797 = validateParameter(valid_21629797, JString, required = false,
                                   default = nil)
  if valid_21629797 != nil:
    section.add "X-Amz-Algorithm", valid_21629797
  var valid_21629798 = header.getOrDefault("X-Amz-Signature")
  valid_21629798 = validateParameter(valid_21629798, JString, required = false,
                                   default = nil)
  if valid_21629798 != nil:
    section.add "X-Amz-Signature", valid_21629798
  var valid_21629799 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629799 = validateParameter(valid_21629799, JString, required = false,
                                   default = nil)
  if valid_21629799 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629799
  var valid_21629800 = header.getOrDefault("X-Amz-Credential")
  valid_21629800 = validateParameter(valid_21629800, JString, required = false,
                                   default = nil)
  if valid_21629800 != nil:
    section.add "X-Amz-Credential", valid_21629800
  result.add "header", section
  ## parameters in `formData` object:
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DBInstanceParameterGroupName: JString
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   Domain: JString
  ##         : The Active Directory directory ID to move the DB cluster to. Specify <code>none</code> to remove the cluster from its current domain. The domain must be created prior to this operation. 
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  section = newJObject()
  var valid_21629801 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_21629801 = validateParameter(valid_21629801, JString, required = false,
                                   default = nil)
  if valid_21629801 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_21629801
  var valid_21629802 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_21629802 = validateParameter(valid_21629802, JString, required = false,
                                   default = nil)
  if valid_21629802 != nil:
    section.add "PreferredMaintenanceWindow", valid_21629802
  var valid_21629803 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_21629803 = validateParameter(valid_21629803, JString, required = false,
                                   default = nil)
  if valid_21629803 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_21629803
  var valid_21629804 = formData.getOrDefault(
      "CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_21629804 = validateParameter(valid_21629804, JArray, required = false,
                                   default = nil)
  if valid_21629804 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_21629804
  var valid_21629805 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_21629805 = validateParameter(valid_21629805, JString, required = false,
                                   default = nil)
  if valid_21629805 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_21629805
  var valid_21629806 = formData.getOrDefault("EnableHttpEndpoint")
  valid_21629806 = validateParameter(valid_21629806, JBool, required = false,
                                   default = nil)
  if valid_21629806 != nil:
    section.add "EnableHttpEndpoint", valid_21629806
  var valid_21629807 = formData.getOrDefault("ApplyImmediately")
  valid_21629807 = validateParameter(valid_21629807, JBool, required = false,
                                   default = nil)
  if valid_21629807 != nil:
    section.add "ApplyImmediately", valid_21629807
  var valid_21629808 = formData.getOrDefault("Port")
  valid_21629808 = validateParameter(valid_21629808, JInt, required = false,
                                   default = nil)
  if valid_21629808 != nil:
    section.add "Port", valid_21629808
  var valid_21629809 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_21629809 = validateParameter(valid_21629809, JArray, required = false,
                                   default = nil)
  if valid_21629809 != nil:
    section.add "VpcSecurityGroupIds", valid_21629809
  var valid_21629810 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_21629810 = validateParameter(valid_21629810, JBool, required = false,
                                   default = nil)
  if valid_21629810 != nil:
    section.add "CopyTagsToSnapshot", valid_21629810
  var valid_21629811 = formData.getOrDefault("DBInstanceParameterGroupName")
  valid_21629811 = validateParameter(valid_21629811, JString, required = false,
                                   default = nil)
  if valid_21629811 != nil:
    section.add "DBInstanceParameterGroupName", valid_21629811
  var valid_21629812 = formData.getOrDefault("OptionGroupName")
  valid_21629812 = validateParameter(valid_21629812, JString, required = false,
                                   default = nil)
  if valid_21629812 != nil:
    section.add "OptionGroupName", valid_21629812
  var valid_21629813 = formData.getOrDefault("BackupRetentionPeriod")
  valid_21629813 = validateParameter(valid_21629813, JInt, required = false,
                                   default = nil)
  if valid_21629813 != nil:
    section.add "BackupRetentionPeriod", valid_21629813
  var valid_21629814 = formData.getOrDefault("BacktrackWindow")
  valid_21629814 = validateParameter(valid_21629814, JInt, required = false,
                                   default = nil)
  if valid_21629814 != nil:
    section.add "BacktrackWindow", valid_21629814
  var valid_21629815 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_21629815 = validateParameter(valid_21629815, JString, required = false,
                                   default = nil)
  if valid_21629815 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_21629815
  var valid_21629816 = formData.getOrDefault("MasterUserPassword")
  valid_21629816 = validateParameter(valid_21629816, JString, required = false,
                                   default = nil)
  if valid_21629816 != nil:
    section.add "MasterUserPassword", valid_21629816
  var valid_21629817 = formData.getOrDefault("DeletionProtection")
  valid_21629817 = validateParameter(valid_21629817, JBool, required = false,
                                   default = nil)
  if valid_21629817 != nil:
    section.add "DeletionProtection", valid_21629817
  var valid_21629818 = formData.getOrDefault("NewDBClusterIdentifier")
  valid_21629818 = validateParameter(valid_21629818, JString, required = false,
                                   default = nil)
  if valid_21629818 != nil:
    section.add "NewDBClusterIdentifier", valid_21629818
  var valid_21629819 = formData.getOrDefault(
      "CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_21629819 = validateParameter(valid_21629819, JArray, required = false,
                                   default = nil)
  if valid_21629819 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_21629819
  var valid_21629820 = formData.getOrDefault("DomainIAMRoleName")
  valid_21629820 = validateParameter(valid_21629820, JString, required = false,
                                   default = nil)
  if valid_21629820 != nil:
    section.add "DomainIAMRoleName", valid_21629820
  var valid_21629821 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_21629821 = validateParameter(valid_21629821, JString, required = false,
                                   default = nil)
  if valid_21629821 != nil:
    section.add "DBClusterParameterGroupName", valid_21629821
  var valid_21629822 = formData.getOrDefault(
      "ScalingConfiguration.SecondsUntilAutoPause")
  valid_21629822 = validateParameter(valid_21629822, JString, required = false,
                                   default = nil)
  if valid_21629822 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_21629822
  var valid_21629823 = formData.getOrDefault("Domain")
  valid_21629823 = validateParameter(valid_21629823, JString, required = false,
                                   default = nil)
  if valid_21629823 != nil:
    section.add "Domain", valid_21629823
  var valid_21629824 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21629824 = validateParameter(valid_21629824, JBool, required = false,
                                   default = nil)
  if valid_21629824 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21629824
  var valid_21629825 = formData.getOrDefault("PreferredBackupWindow")
  valid_21629825 = validateParameter(valid_21629825, JString, required = false,
                                   default = nil)
  if valid_21629825 != nil:
    section.add "PreferredBackupWindow", valid_21629825
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21629826 = formData.getOrDefault("DBClusterIdentifier")
  valid_21629826 = validateParameter(valid_21629826, JString, required = true,
                                   default = nil)
  if valid_21629826 != nil:
    section.add "DBClusterIdentifier", valid_21629826
  var valid_21629827 = formData.getOrDefault("EngineVersion")
  valid_21629827 = validateParameter(valid_21629827, JString, required = false,
                                   default = nil)
  if valid_21629827 != nil:
    section.add "EngineVersion", valid_21629827
  var valid_21629828 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_21629828 = validateParameter(valid_21629828, JBool, required = false,
                                   default = nil)
  if valid_21629828 != nil:
    section.add "AllowMajorVersionUpgrade", valid_21629828
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629829: Call_PostModifyDBCluster_21629789; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21629829.validator(path, query, header, formData, body, _)
  let scheme = call_21629829.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629829.makeUrl(scheme.get, call_21629829.host, call_21629829.base,
                               call_21629829.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629829, uri, valid, _)

proc call*(call_21629830: Call_PostModifyDBCluster_21629789;
          DBClusterIdentifier: string;
          ScalingConfigurationTimeoutAction: string = "";
          PreferredMaintenanceWindow: string = "";
          ScalingConfigurationMaxCapacity: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          ScalingConfigurationAutoPause: string = "";
          EnableHttpEndpoint: bool = false; ApplyImmediately: bool = false;
          Port: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          CopyTagsToSnapshot: bool = false;
          DBInstanceParameterGroupName: string = ""; OptionGroupName: string = "";
          BackupRetentionPeriod: int = 0; BacktrackWindow: int = 0;
          ScalingConfigurationMinCapacity: string = "";
          MasterUserPassword: string = ""; DeletionProtection: bool = false;
          NewDBClusterIdentifier: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          DomainIAMRoleName: string = ""; Action: string = "ModifyDBCluster";
          DBClusterParameterGroupName: string = "";
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          Domain: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; EngineVersion: string = "";
          Version: string = "2014-10-31"; AllowMajorVersionUpgrade: bool = false): Recallable =
  ## postModifyDBCluster
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DBInstanceParameterGroupName: string
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   Domain: string
  ##         : The Active Directory directory ID to move the DB cluster to. Specify <code>none</code> to remove the cluster from its current domain. The domain must be created prior to this operation. 
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   Version: string (required)
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  var query_21629831 = newJObject()
  var formData_21629832 = newJObject()
  add(formData_21629832, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_21629832, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(formData_21629832, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_21629832.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                         CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_21629832, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_21629832, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(formData_21629832, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_21629832, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_21629832.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_21629832, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_21629832, "DBInstanceParameterGroupName",
      newJString(DBInstanceParameterGroupName))
  add(formData_21629832, "OptionGroupName", newJString(OptionGroupName))
  add(formData_21629832, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_21629832, "BacktrackWindow", newJInt(BacktrackWindow))
  add(formData_21629832, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_21629832, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_21629832, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_21629832, "NewDBClusterIdentifier",
      newJString(NewDBClusterIdentifier))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_21629832.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                         CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_21629832, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_21629831, "Action", newJString(Action))
  add(formData_21629832, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_21629832, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_21629832, "Domain", newJString(Domain))
  add(formData_21629832, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_21629832, "PreferredBackupWindow",
      newJString(PreferredBackupWindow))
  add(formData_21629832, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_21629832, "EngineVersion", newJString(EngineVersion))
  add(query_21629831, "Version", newJString(Version))
  add(formData_21629832, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  result = call_21629830.call(nil, query_21629831, nil, formData_21629832, nil)

var postModifyDBCluster* = Call_PostModifyDBCluster_21629789(
    name: "postModifyDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBCluster",
    validator: validate_PostModifyDBCluster_21629790, base: "/",
    makeUrl: url_PostModifyDBCluster_21629791,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBCluster_21629746 = ref object of OpenApiRestCall_21625435
proc url_GetModifyDBCluster_21629748(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBCluster_21629747(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   NewDBClusterIdentifier: JString
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   EnableHttpEndpoint: JBool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   Action: JString (required)
  ##   Domain: JString
  ##         : The Active Directory directory ID to move the DB cluster to. Specify <code>none</code> to remove the cluster from its current domain. The domain must be created prior to this operation. 
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   DBInstanceParameterGroupName: JString
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  section = newJObject()
  var valid_21629749 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_21629749 = validateParameter(valid_21629749, JString, required = false,
                                   default = nil)
  if valid_21629749 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_21629749
  var valid_21629750 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_21629750 = validateParameter(valid_21629750, JString, required = false,
                                   default = nil)
  if valid_21629750 != nil:
    section.add "PreferredMaintenanceWindow", valid_21629750
  var valid_21629751 = query.getOrDefault("DBClusterParameterGroupName")
  valid_21629751 = validateParameter(valid_21629751, JString, required = false,
                                   default = nil)
  if valid_21629751 != nil:
    section.add "DBClusterParameterGroupName", valid_21629751
  var valid_21629752 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21629752 = validateParameter(valid_21629752, JBool, required = false,
                                   default = nil)
  if valid_21629752 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21629752
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21629753 = query.getOrDefault("DBClusterIdentifier")
  valid_21629753 = validateParameter(valid_21629753, JString, required = true,
                                   default = nil)
  if valid_21629753 != nil:
    section.add "DBClusterIdentifier", valid_21629753
  var valid_21629754 = query.getOrDefault("OptionGroupName")
  valid_21629754 = validateParameter(valid_21629754, JString, required = false,
                                   default = nil)
  if valid_21629754 != nil:
    section.add "OptionGroupName", valid_21629754
  var valid_21629755 = query.getOrDefault("MasterUserPassword")
  valid_21629755 = validateParameter(valid_21629755, JString, required = false,
                                   default = nil)
  if valid_21629755 != nil:
    section.add "MasterUserPassword", valid_21629755
  var valid_21629756 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_21629756 = validateParameter(valid_21629756, JArray, required = false,
                                   default = nil)
  if valid_21629756 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_21629756
  var valid_21629757 = query.getOrDefault("VpcSecurityGroupIds")
  valid_21629757 = validateParameter(valid_21629757, JArray, required = false,
                                   default = nil)
  if valid_21629757 != nil:
    section.add "VpcSecurityGroupIds", valid_21629757
  var valid_21629758 = query.getOrDefault("DomainIAMRoleName")
  valid_21629758 = validateParameter(valid_21629758, JString, required = false,
                                   default = nil)
  if valid_21629758 != nil:
    section.add "DomainIAMRoleName", valid_21629758
  var valid_21629759 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_21629759 = validateParameter(valid_21629759, JArray, required = false,
                                   default = nil)
  if valid_21629759 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_21629759
  var valid_21629760 = query.getOrDefault("BackupRetentionPeriod")
  valid_21629760 = validateParameter(valid_21629760, JInt, required = false,
                                   default = nil)
  if valid_21629760 != nil:
    section.add "BackupRetentionPeriod", valid_21629760
  var valid_21629761 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_21629761 = validateParameter(valid_21629761, JString, required = false,
                                   default = nil)
  if valid_21629761 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_21629761
  var valid_21629762 = query.getOrDefault("NewDBClusterIdentifier")
  valid_21629762 = validateParameter(valid_21629762, JString, required = false,
                                   default = nil)
  if valid_21629762 != nil:
    section.add "NewDBClusterIdentifier", valid_21629762
  var valid_21629763 = query.getOrDefault("CopyTagsToSnapshot")
  valid_21629763 = validateParameter(valid_21629763, JBool, required = false,
                                   default = nil)
  if valid_21629763 != nil:
    section.add "CopyTagsToSnapshot", valid_21629763
  var valid_21629764 = query.getOrDefault("DeletionProtection")
  valid_21629764 = validateParameter(valid_21629764, JBool, required = false,
                                   default = nil)
  if valid_21629764 != nil:
    section.add "DeletionProtection", valid_21629764
  var valid_21629765 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_21629765 = validateParameter(valid_21629765, JBool, required = false,
                                   default = nil)
  if valid_21629765 != nil:
    section.add "AllowMajorVersionUpgrade", valid_21629765
  var valid_21629766 = query.getOrDefault("EnableHttpEndpoint")
  valid_21629766 = validateParameter(valid_21629766, JBool, required = false,
                                   default = nil)
  if valid_21629766 != nil:
    section.add "EnableHttpEndpoint", valid_21629766
  var valid_21629767 = query.getOrDefault("Action")
  valid_21629767 = validateParameter(valid_21629767, JString, required = true,
                                   default = newJString("ModifyDBCluster"))
  if valid_21629767 != nil:
    section.add "Action", valid_21629767
  var valid_21629768 = query.getOrDefault("Domain")
  valid_21629768 = validateParameter(valid_21629768, JString, required = false,
                                   default = nil)
  if valid_21629768 != nil:
    section.add "Domain", valid_21629768
  var valid_21629769 = query.getOrDefault("BacktrackWindow")
  valid_21629769 = validateParameter(valid_21629769, JInt, required = false,
                                   default = nil)
  if valid_21629769 != nil:
    section.add "BacktrackWindow", valid_21629769
  var valid_21629770 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_21629770 = validateParameter(valid_21629770, JString, required = false,
                                   default = nil)
  if valid_21629770 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_21629770
  var valid_21629771 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_21629771 = validateParameter(valid_21629771, JString, required = false,
                                   default = nil)
  if valid_21629771 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_21629771
  var valid_21629772 = query.getOrDefault("EngineVersion")
  valid_21629772 = validateParameter(valid_21629772, JString, required = false,
                                   default = nil)
  if valid_21629772 != nil:
    section.add "EngineVersion", valid_21629772
  var valid_21629773 = query.getOrDefault("Port")
  valid_21629773 = validateParameter(valid_21629773, JInt, required = false,
                                   default = nil)
  if valid_21629773 != nil:
    section.add "Port", valid_21629773
  var valid_21629774 = query.getOrDefault("PreferredBackupWindow")
  valid_21629774 = validateParameter(valid_21629774, JString, required = false,
                                   default = nil)
  if valid_21629774 != nil:
    section.add "PreferredBackupWindow", valid_21629774
  var valid_21629775 = query.getOrDefault("Version")
  valid_21629775 = validateParameter(valid_21629775, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629775 != nil:
    section.add "Version", valid_21629775
  var valid_21629776 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_21629776 = validateParameter(valid_21629776, JString, required = false,
                                   default = nil)
  if valid_21629776 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_21629776
  var valid_21629777 = query.getOrDefault("ApplyImmediately")
  valid_21629777 = validateParameter(valid_21629777, JBool, required = false,
                                   default = nil)
  if valid_21629777 != nil:
    section.add "ApplyImmediately", valid_21629777
  var valid_21629778 = query.getOrDefault("DBInstanceParameterGroupName")
  valid_21629778 = validateParameter(valid_21629778, JString, required = false,
                                   default = nil)
  if valid_21629778 != nil:
    section.add "DBInstanceParameterGroupName", valid_21629778
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629779 = header.getOrDefault("X-Amz-Date")
  valid_21629779 = validateParameter(valid_21629779, JString, required = false,
                                   default = nil)
  if valid_21629779 != nil:
    section.add "X-Amz-Date", valid_21629779
  var valid_21629780 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629780 = validateParameter(valid_21629780, JString, required = false,
                                   default = nil)
  if valid_21629780 != nil:
    section.add "X-Amz-Security-Token", valid_21629780
  var valid_21629781 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629781 = validateParameter(valid_21629781, JString, required = false,
                                   default = nil)
  if valid_21629781 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629781
  var valid_21629782 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629782 = validateParameter(valid_21629782, JString, required = false,
                                   default = nil)
  if valid_21629782 != nil:
    section.add "X-Amz-Algorithm", valid_21629782
  var valid_21629783 = header.getOrDefault("X-Amz-Signature")
  valid_21629783 = validateParameter(valid_21629783, JString, required = false,
                                   default = nil)
  if valid_21629783 != nil:
    section.add "X-Amz-Signature", valid_21629783
  var valid_21629784 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629784 = validateParameter(valid_21629784, JString, required = false,
                                   default = nil)
  if valid_21629784 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629784
  var valid_21629785 = header.getOrDefault("X-Amz-Credential")
  valid_21629785 = validateParameter(valid_21629785, JString, required = false,
                                   default = nil)
  if valid_21629785 != nil:
    section.add "X-Amz-Credential", valid_21629785
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629786: Call_GetModifyDBCluster_21629746; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21629786.validator(path, query, header, formData, body, _)
  let scheme = call_21629786.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629786.makeUrl(scheme.get, call_21629786.host, call_21629786.base,
                               call_21629786.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629786, uri, valid, _)

proc call*(call_21629787: Call_GetModifyDBCluster_21629746;
          DBClusterIdentifier: string;
          ScalingConfigurationMinCapacity: string = "";
          PreferredMaintenanceWindow: string = "";
          DBClusterParameterGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          OptionGroupName: string = ""; MasterUserPassword: string = "";
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          VpcSecurityGroupIds: JsonNode = nil; DomainIAMRoleName: string = "";
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          BackupRetentionPeriod: int = 0;
          ScalingConfigurationAutoPause: string = "";
          NewDBClusterIdentifier: string = ""; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false; AllowMajorVersionUpgrade: bool = false;
          EnableHttpEndpoint: bool = false; Action: string = "ModifyDBCluster";
          Domain: string = ""; BacktrackWindow: int = 0;
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          ScalingConfigurationMaxCapacity: string = ""; EngineVersion: string = "";
          Port: int = 0; PreferredBackupWindow: string = "";
          Version: string = "2014-10-31";
          ScalingConfigurationTimeoutAction: string = "";
          ApplyImmediately: bool = false; DBInstanceParameterGroupName: string = ""): Recallable =
  ## getModifyDBCluster
  ## <p>Modify a setting for an Amazon Aurora DB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : The name of the DB cluster parameter group to use for the DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p> <p>Constraints: This identifier must match the identifier of an existing DB cluster.</p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the DB cluster will belong to.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   NewDBClusterIdentifier: string
  ##                         : <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed.</p> <p>Constraints: You must allow major version upgrades when specifying a value for the <code>EngineVersion</code> parameter that is a different major version than the DB cluster's current version.</p>
  ##   EnableHttpEndpoint: bool
  ##                     : <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled.</p> <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   Action: string (required)
  ##   Domain: string
  ##         : The Active Directory directory ID to move the DB cluster to. Specify <code>none</code> to remove the cluster from its current domain. The domain must be created prior to this operation. 
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the DB cluster accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB cluster. If this parameter is disabled, changes to the DB cluster are applied during the next maintenance window.</p> <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code> parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p>By default, this parameter is disabled.</p>
  ##   DBInstanceParameterGroupName: string
  ##                               : <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p> <note> <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB cluster isn't rebooted automatically. Also, parameter changes aren't applied during the next maintenance window but instead are applied immediately.</p> </note> <p>Default: The existing name setting</p> <p>Constraints:</p> <ul> <li> <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p> </li> <li> <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with the <code>AllowMajorVersionUpgrade</code> parameter.</p> </li> </ul>
  var query_21629788 = newJObject()
  add(query_21629788, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_21629788, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_21629788, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_21629788, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_21629788, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21629788, "OptionGroupName", newJString(OptionGroupName))
  add(query_21629788, "MasterUserPassword", newJString(MasterUserPassword))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_21629788.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                      CloudwatchLogsExportConfigurationEnableLogTypes
  if VpcSecurityGroupIds != nil:
    query_21629788.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_21629788, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_21629788.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                      CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_21629788, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_21629788, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_21629788, "NewDBClusterIdentifier", newJString(NewDBClusterIdentifier))
  add(query_21629788, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_21629788, "DeletionProtection", newJBool(DeletionProtection))
  add(query_21629788, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(query_21629788, "EnableHttpEndpoint", newJBool(EnableHttpEndpoint))
  add(query_21629788, "Action", newJString(Action))
  add(query_21629788, "Domain", newJString(Domain))
  add(query_21629788, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_21629788, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_21629788, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_21629788, "EngineVersion", newJString(EngineVersion))
  add(query_21629788, "Port", newJInt(Port))
  add(query_21629788, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_21629788, "Version", newJString(Version))
  add(query_21629788, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(query_21629788, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_21629788, "DBInstanceParameterGroupName",
      newJString(DBInstanceParameterGroupName))
  result = call_21629787.call(nil, query_21629788, nil, nil, nil)

var getModifyDBCluster* = Call_GetModifyDBCluster_21629746(
    name: "getModifyDBCluster", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBCluster", validator: validate_GetModifyDBCluster_21629747,
    base: "/", makeUrl: url_GetModifyDBCluster_21629748,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterEndpoint_21629852 = ref object of OpenApiRestCall_21625435
proc url_PostModifyDBClusterEndpoint_21629854(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterEndpoint_21629853(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629855 = query.getOrDefault("Action")
  valid_21629855 = validateParameter(valid_21629855, JString, required = true, default = newJString(
      "ModifyDBClusterEndpoint"))
  if valid_21629855 != nil:
    section.add "Action", valid_21629855
  var valid_21629856 = query.getOrDefault("Version")
  valid_21629856 = validateParameter(valid_21629856, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629856 != nil:
    section.add "Version", valid_21629856
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629857 = header.getOrDefault("X-Amz-Date")
  valid_21629857 = validateParameter(valid_21629857, JString, required = false,
                                   default = nil)
  if valid_21629857 != nil:
    section.add "X-Amz-Date", valid_21629857
  var valid_21629858 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629858 = validateParameter(valid_21629858, JString, required = false,
                                   default = nil)
  if valid_21629858 != nil:
    section.add "X-Amz-Security-Token", valid_21629858
  var valid_21629859 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629859 = validateParameter(valid_21629859, JString, required = false,
                                   default = nil)
  if valid_21629859 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629859
  var valid_21629860 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629860 = validateParameter(valid_21629860, JString, required = false,
                                   default = nil)
  if valid_21629860 != nil:
    section.add "X-Amz-Algorithm", valid_21629860
  var valid_21629861 = header.getOrDefault("X-Amz-Signature")
  valid_21629861 = validateParameter(valid_21629861, JString, required = false,
                                   default = nil)
  if valid_21629861 != nil:
    section.add "X-Amz-Signature", valid_21629861
  var valid_21629862 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629862 = validateParameter(valid_21629862, JString, required = false,
                                   default = nil)
  if valid_21629862 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629862
  var valid_21629863 = header.getOrDefault("X-Amz-Credential")
  valid_21629863 = validateParameter(valid_21629863, JString, required = false,
                                   default = nil)
  if valid_21629863 != nil:
    section.add "X-Amz-Credential", valid_21629863
  result.add "header", section
  ## parameters in `formData` object:
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   EndpointType: JString
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  section = newJObject()
  var valid_21629864 = formData.getOrDefault("ExcludedMembers")
  valid_21629864 = validateParameter(valid_21629864, JArray, required = false,
                                   default = nil)
  if valid_21629864 != nil:
    section.add "ExcludedMembers", valid_21629864
  var valid_21629865 = formData.getOrDefault("EndpointType")
  valid_21629865 = validateParameter(valid_21629865, JString, required = false,
                                   default = nil)
  if valid_21629865 != nil:
    section.add "EndpointType", valid_21629865
  assert formData != nil, "formData argument is necessary due to required `DBClusterEndpointIdentifier` field"
  var valid_21629866 = formData.getOrDefault("DBClusterEndpointIdentifier")
  valid_21629866 = validateParameter(valid_21629866, JString, required = true,
                                   default = nil)
  if valid_21629866 != nil:
    section.add "DBClusterEndpointIdentifier", valid_21629866
  var valid_21629867 = formData.getOrDefault("StaticMembers")
  valid_21629867 = validateParameter(valid_21629867, JArray, required = false,
                                   default = nil)
  if valid_21629867 != nil:
    section.add "StaticMembers", valid_21629867
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629868: Call_PostModifyDBClusterEndpoint_21629852;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21629868.validator(path, query, header, formData, body, _)
  let scheme = call_21629868.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629868.makeUrl(scheme.get, call_21629868.host, call_21629868.base,
                               call_21629868.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629868, uri, valid, _)

proc call*(call_21629869: Call_PostModifyDBClusterEndpoint_21629852;
          DBClusterEndpointIdentifier: string; ExcludedMembers: JsonNode = nil;
          EndpointType: string = ""; Action: string = "ModifyDBClusterEndpoint";
          StaticMembers: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterEndpoint
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   EndpointType: string
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   Action: string (required)
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Version: string (required)
  var query_21629870 = newJObject()
  var formData_21629871 = newJObject()
  if ExcludedMembers != nil:
    formData_21629871.add "ExcludedMembers", ExcludedMembers
  add(formData_21629871, "EndpointType", newJString(EndpointType))
  add(query_21629870, "Action", newJString(Action))
  add(formData_21629871, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if StaticMembers != nil:
    formData_21629871.add "StaticMembers", StaticMembers
  add(query_21629870, "Version", newJString(Version))
  result = call_21629869.call(nil, query_21629870, nil, formData_21629871, nil)

var postModifyDBClusterEndpoint* = Call_PostModifyDBClusterEndpoint_21629852(
    name: "postModifyDBClusterEndpoint", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterEndpoint",
    validator: validate_PostModifyDBClusterEndpoint_21629853, base: "/",
    makeUrl: url_PostModifyDBClusterEndpoint_21629854,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterEndpoint_21629833 = ref object of OpenApiRestCall_21625435
proc url_GetModifyDBClusterEndpoint_21629835(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterEndpoint_21629834(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EndpointType: JString
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: JString (required)
  ##   DBClusterEndpointIdentifier: JString (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629836 = query.getOrDefault("EndpointType")
  valid_21629836 = validateParameter(valid_21629836, JString, required = false,
                                   default = nil)
  if valid_21629836 != nil:
    section.add "EndpointType", valid_21629836
  var valid_21629837 = query.getOrDefault("StaticMembers")
  valid_21629837 = validateParameter(valid_21629837, JArray, required = false,
                                   default = nil)
  if valid_21629837 != nil:
    section.add "StaticMembers", valid_21629837
  var valid_21629838 = query.getOrDefault("Action")
  valid_21629838 = validateParameter(valid_21629838, JString, required = true, default = newJString(
      "ModifyDBClusterEndpoint"))
  if valid_21629838 != nil:
    section.add "Action", valid_21629838
  var valid_21629839 = query.getOrDefault("DBClusterEndpointIdentifier")
  valid_21629839 = validateParameter(valid_21629839, JString, required = true,
                                   default = nil)
  if valid_21629839 != nil:
    section.add "DBClusterEndpointIdentifier", valid_21629839
  var valid_21629840 = query.getOrDefault("ExcludedMembers")
  valid_21629840 = validateParameter(valid_21629840, JArray, required = false,
                                   default = nil)
  if valid_21629840 != nil:
    section.add "ExcludedMembers", valid_21629840
  var valid_21629841 = query.getOrDefault("Version")
  valid_21629841 = validateParameter(valid_21629841, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629841 != nil:
    section.add "Version", valid_21629841
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629842 = header.getOrDefault("X-Amz-Date")
  valid_21629842 = validateParameter(valid_21629842, JString, required = false,
                                   default = nil)
  if valid_21629842 != nil:
    section.add "X-Amz-Date", valid_21629842
  var valid_21629843 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629843 = validateParameter(valid_21629843, JString, required = false,
                                   default = nil)
  if valid_21629843 != nil:
    section.add "X-Amz-Security-Token", valid_21629843
  var valid_21629844 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629844 = validateParameter(valid_21629844, JString, required = false,
                                   default = nil)
  if valid_21629844 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629844
  var valid_21629845 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629845 = validateParameter(valid_21629845, JString, required = false,
                                   default = nil)
  if valid_21629845 != nil:
    section.add "X-Amz-Algorithm", valid_21629845
  var valid_21629846 = header.getOrDefault("X-Amz-Signature")
  valid_21629846 = validateParameter(valid_21629846, JString, required = false,
                                   default = nil)
  if valid_21629846 != nil:
    section.add "X-Amz-Signature", valid_21629846
  var valid_21629847 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629847 = validateParameter(valid_21629847, JString, required = false,
                                   default = nil)
  if valid_21629847 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629847
  var valid_21629848 = header.getOrDefault("X-Amz-Credential")
  valid_21629848 = validateParameter(valid_21629848, JString, required = false,
                                   default = nil)
  if valid_21629848 != nil:
    section.add "X-Amz-Credential", valid_21629848
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629849: Call_GetModifyDBClusterEndpoint_21629833;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21629849.validator(path, query, header, formData, body, _)
  let scheme = call_21629849.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629849.makeUrl(scheme.get, call_21629849.host, call_21629849.base,
                               call_21629849.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629849, uri, valid, _)

proc call*(call_21629850: Call_GetModifyDBClusterEndpoint_21629833;
          DBClusterEndpointIdentifier: string; EndpointType: string = "";
          StaticMembers: JsonNode = nil; Action: string = "ModifyDBClusterEndpoint";
          ExcludedMembers: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterEndpoint
  ## <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   EndpointType: string
  ##               : The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.
  ##   StaticMembers: JArray
  ##                : List of DB instance identifiers that are part of the custom endpoint group.
  ##   Action: string (required)
  ##   DBClusterEndpointIdentifier: string (required)
  ##                              : The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
  ##   ExcludedMembers: JArray
  ##                  : List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
  ##   Version: string (required)
  var query_21629851 = newJObject()
  add(query_21629851, "EndpointType", newJString(EndpointType))
  if StaticMembers != nil:
    query_21629851.add "StaticMembers", StaticMembers
  add(query_21629851, "Action", newJString(Action))
  add(query_21629851, "DBClusterEndpointIdentifier",
      newJString(DBClusterEndpointIdentifier))
  if ExcludedMembers != nil:
    query_21629851.add "ExcludedMembers", ExcludedMembers
  add(query_21629851, "Version", newJString(Version))
  result = call_21629850.call(nil, query_21629851, nil, nil, nil)

var getModifyDBClusterEndpoint* = Call_GetModifyDBClusterEndpoint_21629833(
    name: "getModifyDBClusterEndpoint", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterEndpoint",
    validator: validate_GetModifyDBClusterEndpoint_21629834, base: "/",
    makeUrl: url_GetModifyDBClusterEndpoint_21629835,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterParameterGroup_21629889 = ref object of OpenApiRestCall_21625435
proc url_PostModifyDBClusterParameterGroup_21629891(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterParameterGroup_21629890(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629892 = query.getOrDefault("Action")
  valid_21629892 = validateParameter(valid_21629892, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_21629892 != nil:
    section.add "Action", valid_21629892
  var valid_21629893 = query.getOrDefault("Version")
  valid_21629893 = validateParameter(valid_21629893, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629893 != nil:
    section.add "Version", valid_21629893
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629894 = header.getOrDefault("X-Amz-Date")
  valid_21629894 = validateParameter(valid_21629894, JString, required = false,
                                   default = nil)
  if valid_21629894 != nil:
    section.add "X-Amz-Date", valid_21629894
  var valid_21629895 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629895 = validateParameter(valid_21629895, JString, required = false,
                                   default = nil)
  if valid_21629895 != nil:
    section.add "X-Amz-Security-Token", valid_21629895
  var valid_21629896 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629896 = validateParameter(valid_21629896, JString, required = false,
                                   default = nil)
  if valid_21629896 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629896
  var valid_21629897 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629897 = validateParameter(valid_21629897, JString, required = false,
                                   default = nil)
  if valid_21629897 != nil:
    section.add "X-Amz-Algorithm", valid_21629897
  var valid_21629898 = header.getOrDefault("X-Amz-Signature")
  valid_21629898 = validateParameter(valid_21629898, JString, required = false,
                                   default = nil)
  if valid_21629898 != nil:
    section.add "X-Amz-Signature", valid_21629898
  var valid_21629899 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629899 = validateParameter(valid_21629899, JString, required = false,
                                   default = nil)
  if valid_21629899 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629899
  var valid_21629900 = header.getOrDefault("X-Amz-Credential")
  valid_21629900 = validateParameter(valid_21629900, JString, required = false,
                                   default = nil)
  if valid_21629900 != nil:
    section.add "X-Amz-Credential", valid_21629900
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `Parameters` field"
  var valid_21629901 = formData.getOrDefault("Parameters")
  valid_21629901 = validateParameter(valid_21629901, JArray, required = true,
                                   default = nil)
  if valid_21629901 != nil:
    section.add "Parameters", valid_21629901
  var valid_21629902 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_21629902 = validateParameter(valid_21629902, JString, required = true,
                                   default = nil)
  if valid_21629902 != nil:
    section.add "DBClusterParameterGroupName", valid_21629902
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629903: Call_PostModifyDBClusterParameterGroup_21629889;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21629903.validator(path, query, header, formData, body, _)
  let scheme = call_21629903.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629903.makeUrl(scheme.get, call_21629903.host, call_21629903.base,
                               call_21629903.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629903, uri, valid, _)

proc call*(call_21629904: Call_PostModifyDBClusterParameterGroup_21629889;
          Parameters: JsonNode; DBClusterParameterGroupName: string;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Version: string (required)
  var query_21629905 = newJObject()
  var formData_21629906 = newJObject()
  if Parameters != nil:
    formData_21629906.add "Parameters", Parameters
  add(query_21629905, "Action", newJString(Action))
  add(formData_21629906, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_21629905, "Version", newJString(Version))
  result = call_21629904.call(nil, query_21629905, nil, formData_21629906, nil)

var postModifyDBClusterParameterGroup* = Call_PostModifyDBClusterParameterGroup_21629889(
    name: "postModifyDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_PostModifyDBClusterParameterGroup_21629890, base: "/",
    makeUrl: url_PostModifyDBClusterParameterGroup_21629891,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterParameterGroup_21629872 = ref object of OpenApiRestCall_21625435
proc url_GetModifyDBClusterParameterGroup_21629874(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterParameterGroup_21629873(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_21629875 = query.getOrDefault("DBClusterParameterGroupName")
  valid_21629875 = validateParameter(valid_21629875, JString, required = true,
                                   default = nil)
  if valid_21629875 != nil:
    section.add "DBClusterParameterGroupName", valid_21629875
  var valid_21629876 = query.getOrDefault("Parameters")
  valid_21629876 = validateParameter(valid_21629876, JArray, required = true,
                                   default = nil)
  if valid_21629876 != nil:
    section.add "Parameters", valid_21629876
  var valid_21629877 = query.getOrDefault("Action")
  valid_21629877 = validateParameter(valid_21629877, JString, required = true, default = newJString(
      "ModifyDBClusterParameterGroup"))
  if valid_21629877 != nil:
    section.add "Action", valid_21629877
  var valid_21629878 = query.getOrDefault("Version")
  valid_21629878 = validateParameter(valid_21629878, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629878 != nil:
    section.add "Version", valid_21629878
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629879 = header.getOrDefault("X-Amz-Date")
  valid_21629879 = validateParameter(valid_21629879, JString, required = false,
                                   default = nil)
  if valid_21629879 != nil:
    section.add "X-Amz-Date", valid_21629879
  var valid_21629880 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629880 = validateParameter(valid_21629880, JString, required = false,
                                   default = nil)
  if valid_21629880 != nil:
    section.add "X-Amz-Security-Token", valid_21629880
  var valid_21629881 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629881 = validateParameter(valid_21629881, JString, required = false,
                                   default = nil)
  if valid_21629881 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629881
  var valid_21629882 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629882 = validateParameter(valid_21629882, JString, required = false,
                                   default = nil)
  if valid_21629882 != nil:
    section.add "X-Amz-Algorithm", valid_21629882
  var valid_21629883 = header.getOrDefault("X-Amz-Signature")
  valid_21629883 = validateParameter(valid_21629883, JString, required = false,
                                   default = nil)
  if valid_21629883 != nil:
    section.add "X-Amz-Signature", valid_21629883
  var valid_21629884 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629884 = validateParameter(valid_21629884, JString, required = false,
                                   default = nil)
  if valid_21629884 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629884
  var valid_21629885 = header.getOrDefault("X-Amz-Credential")
  valid_21629885 = validateParameter(valid_21629885, JString, required = false,
                                   default = nil)
  if valid_21629885 != nil:
    section.add "X-Amz-Credential", valid_21629885
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629886: Call_GetModifyDBClusterParameterGroup_21629872;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21629886.validator(path, query, header, formData, body, _)
  let scheme = call_21629886.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629886.makeUrl(scheme.get, call_21629886.host, call_21629886.base,
                               call_21629886.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629886, uri, valid, _)

proc call*(call_21629887: Call_GetModifyDBClusterParameterGroup_21629872;
          DBClusterParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBClusterParameterGroup";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB cluster associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you create a DB cluster parameter group, you should wait at least 5 minutes before creating your first DB cluster that uses that DB cluster parameter group as the default parameter group. This allows Amazon RDS to fully complete the create action before the parameter group is used as the default for a new DB cluster. This is especially important for parameters that are critical when creating the default database for a DB cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <code>DescribeDBClusterParameters</code> action to verify that your DB cluster parameter group has been created or modified.</p> <p>If the modified DB cluster parameter group is used by an Aurora Serverless cluster, Aurora applies the update immediately. The cluster restart might interrupt your workload. In that case, your application must reopen any connections and retry any transactions that were active when the parameter changes took effect.</p> </important> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to modify.
  ##   Parameters: JArray (required)
  ##             : A list of parameters in the DB cluster parameter group to modify.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21629888 = newJObject()
  add(query_21629888, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Parameters != nil:
    query_21629888.add "Parameters", Parameters
  add(query_21629888, "Action", newJString(Action))
  add(query_21629888, "Version", newJString(Version))
  result = call_21629887.call(nil, query_21629888, nil, nil, nil)

var getModifyDBClusterParameterGroup* = Call_GetModifyDBClusterParameterGroup_21629872(
    name: "getModifyDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterParameterGroup",
    validator: validate_GetModifyDBClusterParameterGroup_21629873, base: "/",
    makeUrl: url_GetModifyDBClusterParameterGroup_21629874,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBClusterSnapshotAttribute_21629926 = ref object of OpenApiRestCall_21625435
proc url_PostModifyDBClusterSnapshotAttribute_21629928(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBClusterSnapshotAttribute_21629927(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21629929 = query.getOrDefault("Action")
  valid_21629929 = validateParameter(valid_21629929, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_21629929 != nil:
    section.add "Action", valid_21629929
  var valid_21629930 = query.getOrDefault("Version")
  valid_21629930 = validateParameter(valid_21629930, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629930 != nil:
    section.add "Version", valid_21629930
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629931 = header.getOrDefault("X-Amz-Date")
  valid_21629931 = validateParameter(valid_21629931, JString, required = false,
                                   default = nil)
  if valid_21629931 != nil:
    section.add "X-Amz-Date", valid_21629931
  var valid_21629932 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629932 = validateParameter(valid_21629932, JString, required = false,
                                   default = nil)
  if valid_21629932 != nil:
    section.add "X-Amz-Security-Token", valid_21629932
  var valid_21629933 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629933 = validateParameter(valid_21629933, JString, required = false,
                                   default = nil)
  if valid_21629933 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629933
  var valid_21629934 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629934 = validateParameter(valid_21629934, JString, required = false,
                                   default = nil)
  if valid_21629934 != nil:
    section.add "X-Amz-Algorithm", valid_21629934
  var valid_21629935 = header.getOrDefault("X-Amz-Signature")
  valid_21629935 = validateParameter(valid_21629935, JString, required = false,
                                   default = nil)
  if valid_21629935 != nil:
    section.add "X-Amz-Signature", valid_21629935
  var valid_21629936 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629936 = validateParameter(valid_21629936, JString, required = false,
                                   default = nil)
  if valid_21629936 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629936
  var valid_21629937 = header.getOrDefault("X-Amz-Credential")
  valid_21629937 = validateParameter(valid_21629937, JString, required = false,
                                   default = nil)
  if valid_21629937 != nil:
    section.add "X-Amz-Credential", valid_21629937
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_21629938 = formData.getOrDefault("AttributeName")
  valid_21629938 = validateParameter(valid_21629938, JString, required = true,
                                   default = nil)
  if valid_21629938 != nil:
    section.add "AttributeName", valid_21629938
  var valid_21629939 = formData.getOrDefault("DBClusterSnapshotIdentifier")
  valid_21629939 = validateParameter(valid_21629939, JString, required = true,
                                   default = nil)
  if valid_21629939 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_21629939
  var valid_21629940 = formData.getOrDefault("ValuesToRemove")
  valid_21629940 = validateParameter(valid_21629940, JArray, required = false,
                                   default = nil)
  if valid_21629940 != nil:
    section.add "ValuesToRemove", valid_21629940
  var valid_21629941 = formData.getOrDefault("ValuesToAdd")
  valid_21629941 = validateParameter(valid_21629941, JArray, required = false,
                                   default = nil)
  if valid_21629941 != nil:
    section.add "ValuesToAdd", valid_21629941
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629942: Call_PostModifyDBClusterSnapshotAttribute_21629926;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21629942.validator(path, query, header, formData, body, _)
  let scheme = call_21629942.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629942.makeUrl(scheme.get, call_21629942.host, call_21629942.base,
                               call_21629942.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629942, uri, valid, _)

proc call*(call_21629943: Call_PostModifyDBClusterSnapshotAttribute_21629926;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; ValuesToAdd: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_21629944 = newJObject()
  var formData_21629945 = newJObject()
  add(formData_21629945, "AttributeName", newJString(AttributeName))
  add(formData_21629945, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  add(query_21629944, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_21629945.add "ValuesToRemove", ValuesToRemove
  if ValuesToAdd != nil:
    formData_21629945.add "ValuesToAdd", ValuesToAdd
  add(query_21629944, "Version", newJString(Version))
  result = call_21629943.call(nil, query_21629944, nil, formData_21629945, nil)

var postModifyDBClusterSnapshotAttribute* = Call_PostModifyDBClusterSnapshotAttribute_21629926(
    name: "postModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_PostModifyDBClusterSnapshotAttribute_21629927, base: "/",
    makeUrl: url_PostModifyDBClusterSnapshotAttribute_21629928,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBClusterSnapshotAttribute_21629907 = ref object of OpenApiRestCall_21625435
proc url_GetModifyDBClusterSnapshotAttribute_21629909(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBClusterSnapshotAttribute_21629908(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: JString (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Action: JString (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AttributeName` field"
  var valid_21629910 = query.getOrDefault("AttributeName")
  valid_21629910 = validateParameter(valid_21629910, JString, required = true,
                                   default = nil)
  if valid_21629910 != nil:
    section.add "AttributeName", valid_21629910
  var valid_21629911 = query.getOrDefault("DBClusterSnapshotIdentifier")
  valid_21629911 = validateParameter(valid_21629911, JString, required = true,
                                   default = nil)
  if valid_21629911 != nil:
    section.add "DBClusterSnapshotIdentifier", valid_21629911
  var valid_21629912 = query.getOrDefault("ValuesToAdd")
  valid_21629912 = validateParameter(valid_21629912, JArray, required = false,
                                   default = nil)
  if valid_21629912 != nil:
    section.add "ValuesToAdd", valid_21629912
  var valid_21629913 = query.getOrDefault("Action")
  valid_21629913 = validateParameter(valid_21629913, JString, required = true, default = newJString(
      "ModifyDBClusterSnapshotAttribute"))
  if valid_21629913 != nil:
    section.add "Action", valid_21629913
  var valid_21629914 = query.getOrDefault("ValuesToRemove")
  valid_21629914 = validateParameter(valid_21629914, JArray, required = false,
                                   default = nil)
  if valid_21629914 != nil:
    section.add "ValuesToRemove", valid_21629914
  var valid_21629915 = query.getOrDefault("Version")
  valid_21629915 = validateParameter(valid_21629915, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629915 != nil:
    section.add "Version", valid_21629915
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629916 = header.getOrDefault("X-Amz-Date")
  valid_21629916 = validateParameter(valid_21629916, JString, required = false,
                                   default = nil)
  if valid_21629916 != nil:
    section.add "X-Amz-Date", valid_21629916
  var valid_21629917 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629917 = validateParameter(valid_21629917, JString, required = false,
                                   default = nil)
  if valid_21629917 != nil:
    section.add "X-Amz-Security-Token", valid_21629917
  var valid_21629918 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629918 = validateParameter(valid_21629918, JString, required = false,
                                   default = nil)
  if valid_21629918 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629918
  var valid_21629919 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629919 = validateParameter(valid_21629919, JString, required = false,
                                   default = nil)
  if valid_21629919 != nil:
    section.add "X-Amz-Algorithm", valid_21629919
  var valid_21629920 = header.getOrDefault("X-Amz-Signature")
  valid_21629920 = validateParameter(valid_21629920, JString, required = false,
                                   default = nil)
  if valid_21629920 != nil:
    section.add "X-Amz-Signature", valid_21629920
  var valid_21629921 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629921 = validateParameter(valid_21629921, JString, required = false,
                                   default = nil)
  if valid_21629921 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629921
  var valid_21629922 = header.getOrDefault("X-Amz-Credential")
  valid_21629922 = validateParameter(valid_21629922, JString, required = false,
                                   default = nil)
  if valid_21629922 != nil:
    section.add "X-Amz-Credential", valid_21629922
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21629923: Call_GetModifyDBClusterSnapshotAttribute_21629907;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21629923.validator(path, query, header, formData, body, _)
  let scheme = call_21629923.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21629923.makeUrl(scheme.get, call_21629923.host, call_21629923.base,
                               call_21629923.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21629923, uri, valid, _)

proc call*(call_21629924: Call_GetModifyDBClusterSnapshotAttribute_21629907;
          AttributeName: string; DBClusterSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil;
          Action: string = "ModifyDBClusterSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBClusterSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p> <p>To share a manual DB cluster snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to make the manual DB cluster snapshot public, which means that it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts. If a manual DB cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB cluster snapshot, or whether a manual DB cluster snapshot public or private, use the <code>DescribeDBClusterSnapshotAttributes</code> API action.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB cluster snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to <code>restore</code>.</p>
  ##   DBClusterSnapshotIdentifier: string (required)
  ##                              : The identifier for the DB cluster snapshot to modify the attributes for.
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore a manual DB cluster snapshot.</p>
  ##   Version: string (required)
  var query_21629925 = newJObject()
  add(query_21629925, "AttributeName", newJString(AttributeName))
  add(query_21629925, "DBClusterSnapshotIdentifier",
      newJString(DBClusterSnapshotIdentifier))
  if ValuesToAdd != nil:
    query_21629925.add "ValuesToAdd", ValuesToAdd
  add(query_21629925, "Action", newJString(Action))
  if ValuesToRemove != nil:
    query_21629925.add "ValuesToRemove", ValuesToRemove
  add(query_21629925, "Version", newJString(Version))
  result = call_21629924.call(nil, query_21629925, nil, nil, nil)

var getModifyDBClusterSnapshotAttribute* = Call_GetModifyDBClusterSnapshotAttribute_21629907(
    name: "getModifyDBClusterSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBClusterSnapshotAttribute",
    validator: validate_GetModifyDBClusterSnapshotAttribute_21629908, base: "/",
    makeUrl: url_GetModifyDBClusterSnapshotAttribute_21629909,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBInstance_21630004 = ref object of OpenApiRestCall_21625435
proc url_PostModifyDBInstance_21630006(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBInstance_21630005(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630007 = query.getOrDefault("Action")
  valid_21630007 = validateParameter(valid_21630007, JString, required = true,
                                   default = newJString("ModifyDBInstance"))
  if valid_21630007 != nil:
    section.add "Action", valid_21630007
  var valid_21630008 = query.getOrDefault("Version")
  valid_21630008 = validateParameter(valid_21630008, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630008 != nil:
    section.add "Version", valid_21630008
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630009 = header.getOrDefault("X-Amz-Date")
  valid_21630009 = validateParameter(valid_21630009, JString, required = false,
                                   default = nil)
  if valid_21630009 != nil:
    section.add "X-Amz-Date", valid_21630009
  var valid_21630010 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630010 = validateParameter(valid_21630010, JString, required = false,
                                   default = nil)
  if valid_21630010 != nil:
    section.add "X-Amz-Security-Token", valid_21630010
  var valid_21630011 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630011 = validateParameter(valid_21630011, JString, required = false,
                                   default = nil)
  if valid_21630011 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630011
  var valid_21630012 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630012 = validateParameter(valid_21630012, JString, required = false,
                                   default = nil)
  if valid_21630012 != nil:
    section.add "X-Amz-Algorithm", valid_21630012
  var valid_21630013 = header.getOrDefault("X-Amz-Signature")
  valid_21630013 = validateParameter(valid_21630013, JString, required = false,
                                   default = nil)
  if valid_21630013 != nil:
    section.add "X-Amz-Signature", valid_21630013
  var valid_21630014 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630014 = validateParameter(valid_21630014, JString, required = false,
                                   default = nil)
  if valid_21630014 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630014
  var valid_21630015 = header.getOrDefault("X-Amz-Credential")
  valid_21630015 = validateParameter(valid_21630015, JString, required = false,
                                   default = nil)
  if valid_21630015 != nil:
    section.add "X-Amz-Credential", valid_21630015
  result.add "header", section
  ## parameters in `formData` object:
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   LicenseModel: JString
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   DomainIAMRoleName: JString
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   CertificateRotationRestart: JBool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  section = newJObject()
  var valid_21630016 = formData.getOrDefault("ProcessorFeatures")
  valid_21630016 = validateParameter(valid_21630016, JArray, required = false,
                                   default = nil)
  if valid_21630016 != nil:
    section.add "ProcessorFeatures", valid_21630016
  var valid_21630017 = formData.getOrDefault(
      "CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_21630017 = validateParameter(valid_21630017, JArray, required = false,
                                   default = nil)
  if valid_21630017 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_21630017
  var valid_21630018 = formData.getOrDefault("ApplyImmediately")
  valid_21630018 = validateParameter(valid_21630018, JBool, required = false,
                                   default = nil)
  if valid_21630018 != nil:
    section.add "ApplyImmediately", valid_21630018
  var valid_21630019 = formData.getOrDefault("EnablePerformanceInsights")
  valid_21630019 = validateParameter(valid_21630019, JBool, required = false,
                                   default = nil)
  if valid_21630019 != nil:
    section.add "EnablePerformanceInsights", valid_21630019
  var valid_21630020 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_21630020 = validateParameter(valid_21630020, JArray, required = false,
                                   default = nil)
  if valid_21630020 != nil:
    section.add "VpcSecurityGroupIds", valid_21630020
  var valid_21630021 = formData.getOrDefault("Iops")
  valid_21630021 = validateParameter(valid_21630021, JInt, required = false,
                                   default = nil)
  if valid_21630021 != nil:
    section.add "Iops", valid_21630021
  var valid_21630022 = formData.getOrDefault("BackupRetentionPeriod")
  valid_21630022 = validateParameter(valid_21630022, JInt, required = false,
                                   default = nil)
  if valid_21630022 != nil:
    section.add "BackupRetentionPeriod", valid_21630022
  var valid_21630023 = formData.getOrDefault("MaxAllocatedStorage")
  valid_21630023 = validateParameter(valid_21630023, JInt, required = false,
                                   default = nil)
  if valid_21630023 != nil:
    section.add "MaxAllocatedStorage", valid_21630023
  var valid_21630024 = formData.getOrDefault("TdeCredentialArn")
  valid_21630024 = validateParameter(valid_21630024, JString, required = false,
                                   default = nil)
  if valid_21630024 != nil:
    section.add "TdeCredentialArn", valid_21630024
  var valid_21630025 = formData.getOrDefault("DeletionProtection")
  valid_21630025 = validateParameter(valid_21630025, JBool, required = false,
                                   default = nil)
  if valid_21630025 != nil:
    section.add "DeletionProtection", valid_21630025
  var valid_21630026 = formData.getOrDefault("DBSubnetGroupName")
  valid_21630026 = validateParameter(valid_21630026, JString, required = false,
                                   default = nil)
  if valid_21630026 != nil:
    section.add "DBSubnetGroupName", valid_21630026
  var valid_21630027 = formData.getOrDefault("MultiAZ")
  valid_21630027 = validateParameter(valid_21630027, JBool, required = false,
                                   default = nil)
  if valid_21630027 != nil:
    section.add "MultiAZ", valid_21630027
  var valid_21630028 = formData.getOrDefault("DBPortNumber")
  valid_21630028 = validateParameter(valid_21630028, JInt, required = false,
                                   default = nil)
  if valid_21630028 != nil:
    section.add "DBPortNumber", valid_21630028
  var valid_21630029 = formData.getOrDefault("PubliclyAccessible")
  valid_21630029 = validateParameter(valid_21630029, JBool, required = false,
                                   default = nil)
  if valid_21630029 != nil:
    section.add "PubliclyAccessible", valid_21630029
  var valid_21630030 = formData.getOrDefault("StorageType")
  valid_21630030 = validateParameter(valid_21630030, JString, required = false,
                                   default = nil)
  if valid_21630030 != nil:
    section.add "StorageType", valid_21630030
  var valid_21630031 = formData.getOrDefault("Domain")
  valid_21630031 = validateParameter(valid_21630031, JString, required = false,
                                   default = nil)
  if valid_21630031 != nil:
    section.add "Domain", valid_21630031
  var valid_21630032 = formData.getOrDefault("LicenseModel")
  valid_21630032 = validateParameter(valid_21630032, JString, required = false,
                                   default = nil)
  if valid_21630032 != nil:
    section.add "LicenseModel", valid_21630032
  var valid_21630033 = formData.getOrDefault("MonitoringRoleArn")
  valid_21630033 = validateParameter(valid_21630033, JString, required = false,
                                   default = nil)
  if valid_21630033 != nil:
    section.add "MonitoringRoleArn", valid_21630033
  var valid_21630034 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_21630034 = validateParameter(valid_21630034, JInt, required = false,
                                   default = nil)
  if valid_21630034 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_21630034
  var valid_21630035 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_21630035 = validateParameter(valid_21630035, JBool, required = false,
                                   default = nil)
  if valid_21630035 != nil:
    section.add "UseDefaultProcessorFeatures", valid_21630035
  var valid_21630036 = formData.getOrDefault("AllowMajorVersionUpgrade")
  valid_21630036 = validateParameter(valid_21630036, JBool, required = false,
                                   default = nil)
  if valid_21630036 != nil:
    section.add "AllowMajorVersionUpgrade", valid_21630036
  var valid_21630037 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_21630037 = validateParameter(valid_21630037, JString, required = false,
                                   default = nil)
  if valid_21630037 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_21630037
  var valid_21630038 = formData.getOrDefault("DBSecurityGroups")
  valid_21630038 = validateParameter(valid_21630038, JArray, required = false,
                                   default = nil)
  if valid_21630038 != nil:
    section.add "DBSecurityGroups", valid_21630038
  var valid_21630039 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_21630039 = validateParameter(valid_21630039, JBool, required = false,
                                   default = nil)
  if valid_21630039 != nil:
    section.add "CopyTagsToSnapshot", valid_21630039
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_21630040 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21630040 = validateParameter(valid_21630040, JString, required = true,
                                   default = nil)
  if valid_21630040 != nil:
    section.add "DBInstanceIdentifier", valid_21630040
  var valid_21630041 = formData.getOrDefault("OptionGroupName")
  valid_21630041 = validateParameter(valid_21630041, JString, required = false,
                                   default = nil)
  if valid_21630041 != nil:
    section.add "OptionGroupName", valid_21630041
  var valid_21630042 = formData.getOrDefault("DBParameterGroupName")
  valid_21630042 = validateParameter(valid_21630042, JString, required = false,
                                   default = nil)
  if valid_21630042 != nil:
    section.add "DBParameterGroupName", valid_21630042
  var valid_21630043 = formData.getOrDefault("CACertificateIdentifier")
  valid_21630043 = validateParameter(valid_21630043, JString, required = false,
                                   default = nil)
  if valid_21630043 != nil:
    section.add "CACertificateIdentifier", valid_21630043
  var valid_21630044 = formData.getOrDefault("MasterUserPassword")
  valid_21630044 = validateParameter(valid_21630044, JString, required = false,
                                   default = nil)
  if valid_21630044 != nil:
    section.add "MasterUserPassword", valid_21630044
  var valid_21630045 = formData.getOrDefault("NewDBInstanceIdentifier")
  valid_21630045 = validateParameter(valid_21630045, JString, required = false,
                                   default = nil)
  if valid_21630045 != nil:
    section.add "NewDBInstanceIdentifier", valid_21630045
  var valid_21630046 = formData.getOrDefault("TdeCredentialPassword")
  valid_21630046 = validateParameter(valid_21630046, JString, required = false,
                                   default = nil)
  if valid_21630046 != nil:
    section.add "TdeCredentialPassword", valid_21630046
  var valid_21630047 = formData.getOrDefault("MonitoringInterval")
  valid_21630047 = validateParameter(valid_21630047, JInt, required = false,
                                   default = nil)
  if valid_21630047 != nil:
    section.add "MonitoringInterval", valid_21630047
  var valid_21630048 = formData.getOrDefault(
      "CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_21630048 = validateParameter(valid_21630048, JArray, required = false,
                                   default = nil)
  if valid_21630048 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_21630048
  var valid_21630049 = formData.getOrDefault("DomainIAMRoleName")
  valid_21630049 = validateParameter(valid_21630049, JString, required = false,
                                   default = nil)
  if valid_21630049 != nil:
    section.add "DomainIAMRoleName", valid_21630049
  var valid_21630050 = formData.getOrDefault("AllocatedStorage")
  valid_21630050 = validateParameter(valid_21630050, JInt, required = false,
                                   default = nil)
  if valid_21630050 != nil:
    section.add "AllocatedStorage", valid_21630050
  var valid_21630051 = formData.getOrDefault("PromotionTier")
  valid_21630051 = validateParameter(valid_21630051, JInt, required = false,
                                   default = nil)
  if valid_21630051 != nil:
    section.add "PromotionTier", valid_21630051
  var valid_21630052 = formData.getOrDefault("DBInstanceClass")
  valid_21630052 = validateParameter(valid_21630052, JString, required = false,
                                   default = nil)
  if valid_21630052 != nil:
    section.add "DBInstanceClass", valid_21630052
  var valid_21630053 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21630053 = validateParameter(valid_21630053, JBool, required = false,
                                   default = nil)
  if valid_21630053 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21630053
  var valid_21630054 = formData.getOrDefault("PreferredBackupWindow")
  valid_21630054 = validateParameter(valid_21630054, JString, required = false,
                                   default = nil)
  if valid_21630054 != nil:
    section.add "PreferredBackupWindow", valid_21630054
  var valid_21630055 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_21630055 = validateParameter(valid_21630055, JBool, required = false,
                                   default = nil)
  if valid_21630055 != nil:
    section.add "AutoMinorVersionUpgrade", valid_21630055
  var valid_21630056 = formData.getOrDefault("CertificateRotationRestart")
  valid_21630056 = validateParameter(valid_21630056, JBool, required = false,
                                   default = nil)
  if valid_21630056 != nil:
    section.add "CertificateRotationRestart", valid_21630056
  var valid_21630057 = formData.getOrDefault("EngineVersion")
  valid_21630057 = validateParameter(valid_21630057, JString, required = false,
                                   default = nil)
  if valid_21630057 != nil:
    section.add "EngineVersion", valid_21630057
  var valid_21630058 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_21630058 = validateParameter(valid_21630058, JString, required = false,
                                   default = nil)
  if valid_21630058 != nil:
    section.add "PreferredMaintenanceWindow", valid_21630058
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630059: Call_PostModifyDBInstance_21630004; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_21630059.validator(path, query, header, formData, body, _)
  let scheme = call_21630059.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630059.makeUrl(scheme.get, call_21630059.host, call_21630059.base,
                               call_21630059.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630059, uri, valid, _)

proc call*(call_21630060: Call_PostModifyDBInstance_21630004;
          DBInstanceIdentifier: string; ProcessorFeatures: JsonNode = nil;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          ApplyImmediately: bool = false; EnablePerformanceInsights: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; Iops: int = 0;
          BackupRetentionPeriod: int = 0; MaxAllocatedStorage: int = 0;
          TdeCredentialArn: string = ""; DeletionProtection: bool = false;
          DBSubnetGroupName: string = ""; MultiAZ: bool = false; DBPortNumber: int = 0;
          PubliclyAccessible: bool = false; StorageType: string = "";
          Domain: string = ""; LicenseModel: string = "";
          MonitoringRoleArn: string = "";
          PerformanceInsightsRetentionPeriod: int = 0;
          UseDefaultProcessorFeatures: bool = false;
          AllowMajorVersionUpgrade: bool = false;
          PerformanceInsightsKMSKeyId: string = "";
          DBSecurityGroups: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          OptionGroupName: string = ""; DBParameterGroupName: string = "";
          CACertificateIdentifier: string = ""; MasterUserPassword: string = "";
          NewDBInstanceIdentifier: string = ""; TdeCredentialPassword: string = "";
          MonitoringInterval: int = 0;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          DomainIAMRoleName: string = ""; Action: string = "ModifyDBInstance";
          AllocatedStorage: int = 0; PromotionTier: int = 0;
          DBInstanceClass: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          CertificateRotationRestart: bool = false; EngineVersion: string = "";
          Version: string = "2014-10-31"; PreferredMaintenanceWindow: string = ""): Recallable =
  ## postModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   LicenseModel: string
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   DomainIAMRoleName: string
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   Action: string (required)
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   CertificateRotationRestart: bool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  var query_21630061 = newJObject()
  var formData_21630062 = newJObject()
  if ProcessorFeatures != nil:
    formData_21630062.add "ProcessorFeatures", ProcessorFeatures
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    formData_21630062.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                         CloudwatchLogsExportConfigurationEnableLogTypes
  add(formData_21630062, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_21630062, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  if VpcSecurityGroupIds != nil:
    formData_21630062.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_21630062, "Iops", newJInt(Iops))
  add(formData_21630062, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_21630062, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(formData_21630062, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(formData_21630062, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_21630062, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_21630062, "MultiAZ", newJBool(MultiAZ))
  add(formData_21630062, "DBPortNumber", newJInt(DBPortNumber))
  add(formData_21630062, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_21630062, "StorageType", newJString(StorageType))
  add(formData_21630062, "Domain", newJString(Domain))
  add(formData_21630062, "LicenseModel", newJString(LicenseModel))
  add(formData_21630062, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_21630062, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_21630062, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_21630062, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(formData_21630062, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  if DBSecurityGroups != nil:
    formData_21630062.add "DBSecurityGroups", DBSecurityGroups
  add(formData_21630062, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_21630062, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_21630062, "OptionGroupName", newJString(OptionGroupName))
  add(formData_21630062, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_21630062, "CACertificateIdentifier",
      newJString(CACertificateIdentifier))
  add(formData_21630062, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_21630062, "NewDBInstanceIdentifier",
      newJString(NewDBInstanceIdentifier))
  add(formData_21630062, "TdeCredentialPassword",
      newJString(TdeCredentialPassword))
  add(formData_21630062, "MonitoringInterval", newJInt(MonitoringInterval))
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    formData_21630062.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                         CloudwatchLogsExportConfigurationDisableLogTypes
  add(formData_21630062, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_21630061, "Action", newJString(Action))
  add(formData_21630062, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_21630062, "PromotionTier", newJInt(PromotionTier))
  add(formData_21630062, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_21630062, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_21630062, "PreferredBackupWindow",
      newJString(PreferredBackupWindow))
  add(formData_21630062, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_21630062, "CertificateRotationRestart",
      newJBool(CertificateRotationRestart))
  add(formData_21630062, "EngineVersion", newJString(EngineVersion))
  add(query_21630061, "Version", newJString(Version))
  add(formData_21630062, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_21630060.call(nil, query_21630061, nil, formData_21630062, nil)

var postModifyDBInstance* = Call_PostModifyDBInstance_21630004(
    name: "postModifyDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_PostModifyDBInstance_21630005, base: "/",
    makeUrl: url_PostModifyDBInstance_21630006,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBInstance_21629946 = ref object of OpenApiRestCall_21625435
proc url_GetModifyDBInstance_21629948(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBInstance_21629947(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   PromotionTier: JInt
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MaxAllocatedStorage: JInt
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   AllocatedStorage: JInt
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   MasterUserPassword: JString
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: JString
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   CopyTagsToSnapshot: JBool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   CertificateRotationRestart: JBool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   NewDBInstanceIdentifier: JString
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSubnetGroupName: JString
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   Domain: JString
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   EngineVersion: JString
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   CACertificateIdentifier: JString
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   OptionGroupName: JString
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Iops: JInt
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   CloudwatchLogsExportConfiguration.EnableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   CloudwatchLogsExportConfiguration.DisableLogTypes: JArray
  ##                                                    : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   LicenseModel: JString
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBPortNumber: JInt
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   DBInstanceClass: JString
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   AllowMajorVersionUpgrade: JBool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   Action: JString (required)
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: JBool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  section = newJObject()
  var valid_21629949 = query.getOrDefault("MonitoringInterval")
  valid_21629949 = validateParameter(valid_21629949, JInt, required = false,
                                   default = nil)
  if valid_21629949 != nil:
    section.add "MonitoringInterval", valid_21629949
  var valid_21629950 = query.getOrDefault("PromotionTier")
  valid_21629950 = validateParameter(valid_21629950, JInt, required = false,
                                   default = nil)
  if valid_21629950 != nil:
    section.add "PromotionTier", valid_21629950
  var valid_21629951 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_21629951 = validateParameter(valid_21629951, JBool, required = false,
                                   default = nil)
  if valid_21629951 != nil:
    section.add "UseDefaultProcessorFeatures", valid_21629951
  var valid_21629952 = query.getOrDefault("MaxAllocatedStorage")
  valid_21629952 = validateParameter(valid_21629952, JInt, required = false,
                                   default = nil)
  if valid_21629952 != nil:
    section.add "MaxAllocatedStorage", valid_21629952
  var valid_21629953 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_21629953 = validateParameter(valid_21629953, JInt, required = false,
                                   default = nil)
  if valid_21629953 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_21629953
  var valid_21629954 = query.getOrDefault("AllocatedStorage")
  valid_21629954 = validateParameter(valid_21629954, JInt, required = false,
                                   default = nil)
  if valid_21629954 != nil:
    section.add "AllocatedStorage", valid_21629954
  var valid_21629955 = query.getOrDefault("StorageType")
  valid_21629955 = validateParameter(valid_21629955, JString, required = false,
                                   default = nil)
  if valid_21629955 != nil:
    section.add "StorageType", valid_21629955
  var valid_21629956 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21629956 = validateParameter(valid_21629956, JBool, required = false,
                                   default = nil)
  if valid_21629956 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21629956
  var valid_21629957 = query.getOrDefault("DBSecurityGroups")
  valid_21629957 = validateParameter(valid_21629957, JArray, required = false,
                                   default = nil)
  if valid_21629957 != nil:
    section.add "DBSecurityGroups", valid_21629957
  var valid_21629958 = query.getOrDefault("MasterUserPassword")
  valid_21629958 = validateParameter(valid_21629958, JString, required = false,
                                   default = nil)
  if valid_21629958 != nil:
    section.add "MasterUserPassword", valid_21629958
  var valid_21629959 = query.getOrDefault("MonitoringRoleArn")
  valid_21629959 = validateParameter(valid_21629959, JString, required = false,
                                   default = nil)
  if valid_21629959 != nil:
    section.add "MonitoringRoleArn", valid_21629959
  var valid_21629960 = query.getOrDefault("MultiAZ")
  valid_21629960 = validateParameter(valid_21629960, JBool, required = false,
                                   default = nil)
  if valid_21629960 != nil:
    section.add "MultiAZ", valid_21629960
  var valid_21629961 = query.getOrDefault("TdeCredentialPassword")
  valid_21629961 = validateParameter(valid_21629961, JString, required = false,
                                   default = nil)
  if valid_21629961 != nil:
    section.add "TdeCredentialPassword", valid_21629961
  var valid_21629962 = query.getOrDefault("DomainIAMRoleName")
  valid_21629962 = validateParameter(valid_21629962, JString, required = false,
                                   default = nil)
  if valid_21629962 != nil:
    section.add "DomainIAMRoleName", valid_21629962
  var valid_21629963 = query.getOrDefault("BackupRetentionPeriod")
  valid_21629963 = validateParameter(valid_21629963, JInt, required = false,
                                   default = nil)
  if valid_21629963 != nil:
    section.add "BackupRetentionPeriod", valid_21629963
  var valid_21629964 = query.getOrDefault("CopyTagsToSnapshot")
  valid_21629964 = validateParameter(valid_21629964, JBool, required = false,
                                   default = nil)
  if valid_21629964 != nil:
    section.add "CopyTagsToSnapshot", valid_21629964
  var valid_21629965 = query.getOrDefault("DeletionProtection")
  valid_21629965 = validateParameter(valid_21629965, JBool, required = false,
                                   default = nil)
  if valid_21629965 != nil:
    section.add "DeletionProtection", valid_21629965
  var valid_21629966 = query.getOrDefault("CertificateRotationRestart")
  valid_21629966 = validateParameter(valid_21629966, JBool, required = false,
                                   default = nil)
  if valid_21629966 != nil:
    section.add "CertificateRotationRestart", valid_21629966
  var valid_21629967 = query.getOrDefault("NewDBInstanceIdentifier")
  valid_21629967 = validateParameter(valid_21629967, JString, required = false,
                                   default = nil)
  if valid_21629967 != nil:
    section.add "NewDBInstanceIdentifier", valid_21629967
  var valid_21629968 = query.getOrDefault("DBSubnetGroupName")
  valid_21629968 = validateParameter(valid_21629968, JString, required = false,
                                   default = nil)
  if valid_21629968 != nil:
    section.add "DBSubnetGroupName", valid_21629968
  var valid_21629969 = query.getOrDefault("Domain")
  valid_21629969 = validateParameter(valid_21629969, JString, required = false,
                                   default = nil)
  if valid_21629969 != nil:
    section.add "Domain", valid_21629969
  var valid_21629970 = query.getOrDefault("EngineVersion")
  valid_21629970 = validateParameter(valid_21629970, JString, required = false,
                                   default = nil)
  if valid_21629970 != nil:
    section.add "EngineVersion", valid_21629970
  var valid_21629971 = query.getOrDefault("PreferredBackupWindow")
  valid_21629971 = validateParameter(valid_21629971, JString, required = false,
                                   default = nil)
  if valid_21629971 != nil:
    section.add "PreferredBackupWindow", valid_21629971
  assert query != nil, "query argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_21629972 = query.getOrDefault("DBInstanceIdentifier")
  valid_21629972 = validateParameter(valid_21629972, JString, required = true,
                                   default = nil)
  if valid_21629972 != nil:
    section.add "DBInstanceIdentifier", valid_21629972
  var valid_21629973 = query.getOrDefault("CACertificateIdentifier")
  valid_21629973 = validateParameter(valid_21629973, JString, required = false,
                                   default = nil)
  if valid_21629973 != nil:
    section.add "CACertificateIdentifier", valid_21629973
  var valid_21629974 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_21629974 = validateParameter(valid_21629974, JString, required = false,
                                   default = nil)
  if valid_21629974 != nil:
    section.add "PreferredMaintenanceWindow", valid_21629974
  var valid_21629975 = query.getOrDefault("ProcessorFeatures")
  valid_21629975 = validateParameter(valid_21629975, JArray, required = false,
                                   default = nil)
  if valid_21629975 != nil:
    section.add "ProcessorFeatures", valid_21629975
  var valid_21629976 = query.getOrDefault("OptionGroupName")
  valid_21629976 = validateParameter(valid_21629976, JString, required = false,
                                   default = nil)
  if valid_21629976 != nil:
    section.add "OptionGroupName", valid_21629976
  var valid_21629977 = query.getOrDefault("Iops")
  valid_21629977 = validateParameter(valid_21629977, JInt, required = false,
                                   default = nil)
  if valid_21629977 != nil:
    section.add "Iops", valid_21629977
  var valid_21629978 = query.getOrDefault("CloudwatchLogsExportConfiguration.EnableLogTypes")
  valid_21629978 = validateParameter(valid_21629978, JArray, required = false,
                                   default = nil)
  if valid_21629978 != nil:
    section.add "CloudwatchLogsExportConfiguration.EnableLogTypes", valid_21629978
  var valid_21629979 = query.getOrDefault("VpcSecurityGroupIds")
  valid_21629979 = validateParameter(valid_21629979, JArray, required = false,
                                   default = nil)
  if valid_21629979 != nil:
    section.add "VpcSecurityGroupIds", valid_21629979
  var valid_21629980 = query.getOrDefault("CloudwatchLogsExportConfiguration.DisableLogTypes")
  valid_21629980 = validateParameter(valid_21629980, JArray, required = false,
                                   default = nil)
  if valid_21629980 != nil:
    section.add "CloudwatchLogsExportConfiguration.DisableLogTypes", valid_21629980
  var valid_21629981 = query.getOrDefault("LicenseModel")
  valid_21629981 = validateParameter(valid_21629981, JString, required = false,
                                   default = nil)
  if valid_21629981 != nil:
    section.add "LicenseModel", valid_21629981
  var valid_21629982 = query.getOrDefault("DBPortNumber")
  valid_21629982 = validateParameter(valid_21629982, JInt, required = false,
                                   default = nil)
  if valid_21629982 != nil:
    section.add "DBPortNumber", valid_21629982
  var valid_21629983 = query.getOrDefault("DBParameterGroupName")
  valid_21629983 = validateParameter(valid_21629983, JString, required = false,
                                   default = nil)
  if valid_21629983 != nil:
    section.add "DBParameterGroupName", valid_21629983
  var valid_21629984 = query.getOrDefault("DBInstanceClass")
  valid_21629984 = validateParameter(valid_21629984, JString, required = false,
                                   default = nil)
  if valid_21629984 != nil:
    section.add "DBInstanceClass", valid_21629984
  var valid_21629985 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_21629985 = validateParameter(valid_21629985, JString, required = false,
                                   default = nil)
  if valid_21629985 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_21629985
  var valid_21629986 = query.getOrDefault("AllowMajorVersionUpgrade")
  valid_21629986 = validateParameter(valid_21629986, JBool, required = false,
                                   default = nil)
  if valid_21629986 != nil:
    section.add "AllowMajorVersionUpgrade", valid_21629986
  var valid_21629987 = query.getOrDefault("Action")
  valid_21629987 = validateParameter(valid_21629987, JString, required = true,
                                   default = newJString("ModifyDBInstance"))
  if valid_21629987 != nil:
    section.add "Action", valid_21629987
  var valid_21629988 = query.getOrDefault("TdeCredentialArn")
  valid_21629988 = validateParameter(valid_21629988, JString, required = false,
                                   default = nil)
  if valid_21629988 != nil:
    section.add "TdeCredentialArn", valid_21629988
  var valid_21629989 = query.getOrDefault("PubliclyAccessible")
  valid_21629989 = validateParameter(valid_21629989, JBool, required = false,
                                   default = nil)
  if valid_21629989 != nil:
    section.add "PubliclyAccessible", valid_21629989
  var valid_21629990 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_21629990 = validateParameter(valid_21629990, JBool, required = false,
                                   default = nil)
  if valid_21629990 != nil:
    section.add "AutoMinorVersionUpgrade", valid_21629990
  var valid_21629991 = query.getOrDefault("EnablePerformanceInsights")
  valid_21629991 = validateParameter(valid_21629991, JBool, required = false,
                                   default = nil)
  if valid_21629991 != nil:
    section.add "EnablePerformanceInsights", valid_21629991
  var valid_21629992 = query.getOrDefault("Version")
  valid_21629992 = validateParameter(valid_21629992, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21629992 != nil:
    section.add "Version", valid_21629992
  var valid_21629993 = query.getOrDefault("ApplyImmediately")
  valid_21629993 = validateParameter(valid_21629993, JBool, required = false,
                                   default = nil)
  if valid_21629993 != nil:
    section.add "ApplyImmediately", valid_21629993
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21629994 = header.getOrDefault("X-Amz-Date")
  valid_21629994 = validateParameter(valid_21629994, JString, required = false,
                                   default = nil)
  if valid_21629994 != nil:
    section.add "X-Amz-Date", valid_21629994
  var valid_21629995 = header.getOrDefault("X-Amz-Security-Token")
  valid_21629995 = validateParameter(valid_21629995, JString, required = false,
                                   default = nil)
  if valid_21629995 != nil:
    section.add "X-Amz-Security-Token", valid_21629995
  var valid_21629996 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21629996 = validateParameter(valid_21629996, JString, required = false,
                                   default = nil)
  if valid_21629996 != nil:
    section.add "X-Amz-Content-Sha256", valid_21629996
  var valid_21629997 = header.getOrDefault("X-Amz-Algorithm")
  valid_21629997 = validateParameter(valid_21629997, JString, required = false,
                                   default = nil)
  if valid_21629997 != nil:
    section.add "X-Amz-Algorithm", valid_21629997
  var valid_21629998 = header.getOrDefault("X-Amz-Signature")
  valid_21629998 = validateParameter(valid_21629998, JString, required = false,
                                   default = nil)
  if valid_21629998 != nil:
    section.add "X-Amz-Signature", valid_21629998
  var valid_21629999 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21629999 = validateParameter(valid_21629999, JString, required = false,
                                   default = nil)
  if valid_21629999 != nil:
    section.add "X-Amz-SignedHeaders", valid_21629999
  var valid_21630000 = header.getOrDefault("X-Amz-Credential")
  valid_21630000 = validateParameter(valid_21630000, JString, required = false,
                                   default = nil)
  if valid_21630000 != nil:
    section.add "X-Amz-Credential", valid_21630000
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630001: Call_GetModifyDBInstance_21629946; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ## 
  let valid = call_21630001.validator(path, query, header, formData, body, _)
  let scheme = call_21630001.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630001.makeUrl(scheme.get, call_21630001.host, call_21630001.base,
                               call_21630001.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630001, uri, valid, _)

proc call*(call_21630002: Call_GetModifyDBInstance_21629946;
          DBInstanceIdentifier: string; MonitoringInterval: int = 0;
          PromotionTier: int = 0; UseDefaultProcessorFeatures: bool = false;
          MaxAllocatedStorage: int = 0; PerformanceInsightsRetentionPeriod: int = 0;
          AllocatedStorage: int = 0; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          DBSecurityGroups: JsonNode = nil; MasterUserPassword: string = "";
          MonitoringRoleArn: string = ""; MultiAZ: bool = false;
          TdeCredentialPassword: string = ""; DomainIAMRoleName: string = "";
          BackupRetentionPeriod: int = 0; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false;
          CertificateRotationRestart: bool = false;
          NewDBInstanceIdentifier: string = ""; DBSubnetGroupName: string = "";
          Domain: string = ""; EngineVersion: string = "";
          PreferredBackupWindow: string = ""; CACertificateIdentifier: string = "";
          PreferredMaintenanceWindow: string = "";
          ProcessorFeatures: JsonNode = nil; OptionGroupName: string = "";
          Iops: int = 0;
          CloudwatchLogsExportConfigurationEnableLogTypes: JsonNode = nil;
          VpcSecurityGroupIds: JsonNode = nil;
          CloudwatchLogsExportConfigurationDisableLogTypes: JsonNode = nil;
          LicenseModel: string = ""; DBPortNumber: int = 0;
          DBParameterGroupName: string = ""; DBInstanceClass: string = "";
          PerformanceInsightsKMSKeyId: string = "";
          AllowMajorVersionUpgrade: bool = false;
          Action: string = "ModifyDBInstance"; TdeCredentialArn: string = "";
          PubliclyAccessible: bool = false; AutoMinorVersionUpgrade: bool = false;
          EnablePerformanceInsights: bool = false; Version: string = "2014-10-31";
          ApplyImmediately: bool = false): Recallable =
  ## getModifyDBInstance
  ## Modifies settings for a DB instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. To learn what modifications you can make to your DB instance, call <code>DescribeValidDBInstanceModifications</code> before you call <code>ModifyDBInstance</code>. 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0.</p> <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
  ##   PromotionTier: int
  ##                : <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>. </p> <p>Default: 1</p> <p>Valid Values: 0 - 15</p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   MaxAllocatedStorage: int
  ##                      : The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   AllocatedStorage: int
  ##                   : <p>The new amount of storage (in gibibytes) to allocate for the DB instance. </p> <p>For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>For the valid values for allocated storage for each engine, see <code>CreateDBInstance</code>. </p>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>If you specify Provisioned IOPS (<code>io1</code>), you must also include a value for the <code>Iops</code> parameter. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing DBSecurityGroups.</p> </li> </ul>
  ##   MasterUserPassword: string
  ##                     : <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p> <p> Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the <code>MasterUserPassword</code> element exists in the <code>PendingModifiedValues</code> element of the operation response. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The password for the master user is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>. </p> <p>Default: Uses existing setting</p> <p> <b>MariaDB</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Microsoft SQL Server</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <p> <b>MySQL</b> </p> <p>Constraints: Must contain from 8 to 41 characters.</p> <p> <b>Oracle</b> </p> <p>Constraints: Must contain from 8 to 30 characters.</p> <p> <b>PostgreSQL</b> </p> <p>Constraints: Must contain from 8 to 128 characters.</p> <note> <p>Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked. </p> </note>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, go to <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. 
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   DomainIAMRoleName: string
  ##                    : The name of the IAM role to use when making API calls to the Directory Service.
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Default: Uses existing setting</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35</p> </li> <li> <p>Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later</p> </li> <li> <p>Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas</p> </li> </ul>
  ##   CopyTagsToSnapshot: bool
  ##                     : <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>ModifyDBCluster</code>.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   CertificateRotationRestart: bool
  ##                             : <p>A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.</p> <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.</p> <important> <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p> </important> <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate:</p> <ul> <li> <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i> </p> </li> <li> <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i> </p> </li> </ul>
  ##   NewDBInstanceIdentifier: string
  ##                          : <p> The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   DBSubnetGroupName: string
  ##                    : <p>The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Updating the VPC for a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you enable <code>ApplyImmediately</code>. </p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetGroup</code> </p>
  ##   Domain: string
  ##         : <p>The Active Directory directory ID to move the DB instance to. Specify <code>none</code> to remove the instance from its current domain. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   EngineVersion: string
  ##                : <p> The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is eanbled for this request. </p> <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family.</p> <p>For information about valid engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code> parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. </p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>Must be in the format hh24:mi-hh24:mi</p> </li> <li> <p>Must be in Universal Time Coordinated (UTC)</p> </li> <li> <p>Must not conflict with the preferred maintenance window</p> </li> <li> <p>Must be at least 30 minutes</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   CACertificateIdentifier: string
  ##                          : Indicates the certificate that needs to be associated with the instance.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied.</p> <p>Default: Uses existing setting</p> <p>Format: ddd:hh24:mi-ddd:hh24:mi</p> <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p> <p>Constraints: Must be at least 30 minutes</p>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   OptionGroupName: string
  ##                  : <p> Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted. </p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   Iops: int
  ##       : <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance. </p> <p>Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect. </p> <p>If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance. </p> <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value. </p> <p>Default: Uses existing setting</p>
  ##   CloudwatchLogsExportConfigurationEnableLogTypes: JArray
  ##                                                  : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to enable.
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p> <p> <b>Amazon Aurora</b> </p> <p>Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match existing VpcSecurityGroupIds.</p> </li> </ul>
  ##   CloudwatchLogsExportConfigurationDisableLogTypes: JArray
  ##                                                   : <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance or DB cluster.</p> <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
  ## The list of log types to disable.
  ##   LicenseModel: string
  ##               : <p>The license model for the DB instance.</p> <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   DBPortNumber: int
  ##               : <p>The port number on which the database accepts connections.</p> <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option group for the DB instance.</p> <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code> parameter.</p> <p> <b>MySQL</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>MariaDB</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>PostgreSQL</b> </p> <p> Default: <code>5432</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p>Type: Integer</p> <p> <b>Oracle</b> </p> <p> Default: <code>1521</code> </p> <p> Valid Values: <code>1150-65535</code> </p> <p> <b>SQL Server</b> </p> <p> Default: <code>1433</code> </p> <p> Valid Values: <code>1150-65535</code> except for <code>1434</code>, <code>3389</code>, <code>47001</code>, <code>49152</code>, and <code>49152</code> through <code>49156</code>. </p> <p> <b>Amazon Aurora</b> </p> <p> Default: <code>3306</code> </p> <p> Valid Values: <code>1150-65535</code> </p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. In this case, the DB instance isn't rebooted automatically and the parameter changes isn't applied during the next maintenance window.</p> <p>Default: Uses existing setting</p> <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
  ##   DBInstanceClass: string
  ##                  : <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless <code>ApplyImmediately</code> is enabled for this request. </p> <p>Default: Uses existing setting</p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.</p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   AllowMajorVersionUpgrade: bool
  ##                           : <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p> <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
  ##   Action: string (required)
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: bool
  ##                     : <p>A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. </p> <p> <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible. </p> <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          :  A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage results if this parameter is enabled during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Version: string (required)
  ##   ApplyImmediately: bool
  ##                   : <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled. </p> <p> If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the <i>Amazon RDS User Guide.</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied. </p>
  var query_21630003 = newJObject()
  add(query_21630003, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_21630003, "PromotionTier", newJInt(PromotionTier))
  add(query_21630003, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_21630003, "MaxAllocatedStorage", newJInt(MaxAllocatedStorage))
  add(query_21630003, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_21630003, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_21630003, "StorageType", newJString(StorageType))
  add(query_21630003, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if DBSecurityGroups != nil:
    query_21630003.add "DBSecurityGroups", DBSecurityGroups
  add(query_21630003, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_21630003, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_21630003, "MultiAZ", newJBool(MultiAZ))
  add(query_21630003, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_21630003, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_21630003, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_21630003, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_21630003, "DeletionProtection", newJBool(DeletionProtection))
  add(query_21630003, "CertificateRotationRestart",
      newJBool(CertificateRotationRestart))
  add(query_21630003, "NewDBInstanceIdentifier",
      newJString(NewDBInstanceIdentifier))
  add(query_21630003, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21630003, "Domain", newJString(Domain))
  add(query_21630003, "EngineVersion", newJString(EngineVersion))
  add(query_21630003, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_21630003, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_21630003, "CACertificateIdentifier",
      newJString(CACertificateIdentifier))
  add(query_21630003, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  if ProcessorFeatures != nil:
    query_21630003.add "ProcessorFeatures", ProcessorFeatures
  add(query_21630003, "OptionGroupName", newJString(OptionGroupName))
  add(query_21630003, "Iops", newJInt(Iops))
  if CloudwatchLogsExportConfigurationEnableLogTypes != nil:
    query_21630003.add "CloudwatchLogsExportConfiguration.EnableLogTypes",
                      CloudwatchLogsExportConfigurationEnableLogTypes
  if VpcSecurityGroupIds != nil:
    query_21630003.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if CloudwatchLogsExportConfigurationDisableLogTypes != nil:
    query_21630003.add "CloudwatchLogsExportConfiguration.DisableLogTypes",
                      CloudwatchLogsExportConfigurationDisableLogTypes
  add(query_21630003, "LicenseModel", newJString(LicenseModel))
  add(query_21630003, "DBPortNumber", newJInt(DBPortNumber))
  add(query_21630003, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_21630003, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_21630003, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_21630003, "AllowMajorVersionUpgrade",
      newJBool(AllowMajorVersionUpgrade))
  add(query_21630003, "Action", newJString(Action))
  add(query_21630003, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_21630003, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_21630003, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_21630003, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_21630003, "Version", newJString(Version))
  add(query_21630003, "ApplyImmediately", newJBool(ApplyImmediately))
  result = call_21630002.call(nil, query_21630003, nil, nil, nil)

var getModifyDBInstance* = Call_GetModifyDBInstance_21629946(
    name: "getModifyDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBInstance",
    validator: validate_GetModifyDBInstance_21629947, base: "/",
    makeUrl: url_GetModifyDBInstance_21629948,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBParameterGroup_21630080 = ref object of OpenApiRestCall_21625435
proc url_PostModifyDBParameterGroup_21630082(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBParameterGroup_21630081(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630083 = query.getOrDefault("Action")
  valid_21630083 = validateParameter(valid_21630083, JString, required = true, default = newJString(
      "ModifyDBParameterGroup"))
  if valid_21630083 != nil:
    section.add "Action", valid_21630083
  var valid_21630084 = query.getOrDefault("Version")
  valid_21630084 = validateParameter(valid_21630084, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630084 != nil:
    section.add "Version", valid_21630084
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630085 = header.getOrDefault("X-Amz-Date")
  valid_21630085 = validateParameter(valid_21630085, JString, required = false,
                                   default = nil)
  if valid_21630085 != nil:
    section.add "X-Amz-Date", valid_21630085
  var valid_21630086 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630086 = validateParameter(valid_21630086, JString, required = false,
                                   default = nil)
  if valid_21630086 != nil:
    section.add "X-Amz-Security-Token", valid_21630086
  var valid_21630087 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630087 = validateParameter(valid_21630087, JString, required = false,
                                   default = nil)
  if valid_21630087 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630087
  var valid_21630088 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630088 = validateParameter(valid_21630088, JString, required = false,
                                   default = nil)
  if valid_21630088 != nil:
    section.add "X-Amz-Algorithm", valid_21630088
  var valid_21630089 = header.getOrDefault("X-Amz-Signature")
  valid_21630089 = validateParameter(valid_21630089, JString, required = false,
                                   default = nil)
  if valid_21630089 != nil:
    section.add "X-Amz-Signature", valid_21630089
  var valid_21630090 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630090 = validateParameter(valid_21630090, JString, required = false,
                                   default = nil)
  if valid_21630090 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630090
  var valid_21630091 = header.getOrDefault("X-Amz-Credential")
  valid_21630091 = validateParameter(valid_21630091, JString, required = false,
                                   default = nil)
  if valid_21630091 != nil:
    section.add "X-Amz-Credential", valid_21630091
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; later arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_21630092 = formData.getOrDefault("DBParameterGroupName")
  valid_21630092 = validateParameter(valid_21630092, JString, required = true,
                                   default = nil)
  if valid_21630092 != nil:
    section.add "DBParameterGroupName", valid_21630092
  var valid_21630093 = formData.getOrDefault("Parameters")
  valid_21630093 = validateParameter(valid_21630093, JArray, required = true,
                                   default = nil)
  if valid_21630093 != nil:
    section.add "Parameters", valid_21630093
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630094: Call_PostModifyDBParameterGroup_21630080;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_21630094.validator(path, query, header, formData, body, _)
  let scheme = call_21630094.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630094.makeUrl(scheme.get, call_21630094.host, call_21630094.base,
                               call_21630094.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630094, uri, valid, _)

proc call*(call_21630095: Call_PostModifyDBParameterGroup_21630080;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBParameterGroup
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; later arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630096 = newJObject()
  var formData_21630097 = newJObject()
  add(formData_21630097, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    formData_21630097.add "Parameters", Parameters
  add(query_21630096, "Action", newJString(Action))
  add(query_21630096, "Version", newJString(Version))
  result = call_21630095.call(nil, query_21630096, nil, formData_21630097, nil)

var postModifyDBParameterGroup* = Call_PostModifyDBParameterGroup_21630080(
    name: "postModifyDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_PostModifyDBParameterGroup_21630081, base: "/",
    makeUrl: url_PostModifyDBParameterGroup_21630082,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBParameterGroup_21630063 = ref object of OpenApiRestCall_21625435
proc url_GetModifyDBParameterGroup_21630065(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBParameterGroup_21630064(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; later arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_21630066 = query.getOrDefault("DBParameterGroupName")
  valid_21630066 = validateParameter(valid_21630066, JString, required = true,
                                   default = nil)
  if valid_21630066 != nil:
    section.add "DBParameterGroupName", valid_21630066
  var valid_21630067 = query.getOrDefault("Parameters")
  valid_21630067 = validateParameter(valid_21630067, JArray, required = true,
                                   default = nil)
  if valid_21630067 != nil:
    section.add "Parameters", valid_21630067
  var valid_21630068 = query.getOrDefault("Action")
  valid_21630068 = validateParameter(valid_21630068, JString, required = true, default = newJString(
      "ModifyDBParameterGroup"))
  if valid_21630068 != nil:
    section.add "Action", valid_21630068
  var valid_21630069 = query.getOrDefault("Version")
  valid_21630069 = validateParameter(valid_21630069, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630069 != nil:
    section.add "Version", valid_21630069
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630070 = header.getOrDefault("X-Amz-Date")
  valid_21630070 = validateParameter(valid_21630070, JString, required = false,
                                   default = nil)
  if valid_21630070 != nil:
    section.add "X-Amz-Date", valid_21630070
  var valid_21630071 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630071 = validateParameter(valid_21630071, JString, required = false,
                                   default = nil)
  if valid_21630071 != nil:
    section.add "X-Amz-Security-Token", valid_21630071
  var valid_21630072 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630072 = validateParameter(valid_21630072, JString, required = false,
                                   default = nil)
  if valid_21630072 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630072
  var valid_21630073 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630073 = validateParameter(valid_21630073, JString, required = false,
                                   default = nil)
  if valid_21630073 != nil:
    section.add "X-Amz-Algorithm", valid_21630073
  var valid_21630074 = header.getOrDefault("X-Amz-Signature")
  valid_21630074 = validateParameter(valid_21630074, JString, required = false,
                                   default = nil)
  if valid_21630074 != nil:
    section.add "X-Amz-Signature", valid_21630074
  var valid_21630075 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630075 = validateParameter(valid_21630075, JString, required = false,
                                   default = nil)
  if valid_21630075 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630075
  var valid_21630076 = header.getOrDefault("X-Amz-Credential")
  valid_21630076 = validateParameter(valid_21630076, JString, required = false,
                                   default = nil)
  if valid_21630076 != nil:
    section.add "X-Amz-Credential", valid_21630076
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630077: Call_GetModifyDBParameterGroup_21630063;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ## 
  let valid = call_21630077.validator(path, query, header, formData, body, _)
  let scheme = call_21630077.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630077.makeUrl(scheme.get, call_21630077.host, call_21630077.base,
                               call_21630077.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630077, uri, valid, _)

proc call*(call_21630078: Call_GetModifyDBParameterGroup_21630063;
          DBParameterGroupName: string; Parameters: JsonNode;
          Action: string = "ModifyDBParameterGroup"; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBParameterGroup
  ## <p> Modifies the parameters of a DB parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot without failover to the DB instance associated with the parameter group before the change can take effect.</p> </note> <important> <p>After you modify a DB parameter group, you should wait at least 5 minutes before creating your first DB instance that uses that DB parameter group as the default parameter group. This allows Amazon RDS to fully complete the modify action before the parameter group is used as the default for a new DB instance. This is especially important for parameters that are critical when creating the default database for a DB instance, such as the character set for the default database defined by the <code>character_set_database</code> parameter. You can use the <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the <i>DescribeDBParameters</i> command to verify that your DB parameter group has been created or modified.</p> </important>
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray (required)
  ##             : <p>An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; later arguments are optional. A maximum of 20 parameters can be modified in a single request.</p> <p>Valid Values (for the application method): <code>immediate | pending-reboot</code> </p> <note> <p>You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover.</p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630079 = newJObject()
  add(query_21630079, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_21630079.add "Parameters", Parameters
  add(query_21630079, "Action", newJString(Action))
  add(query_21630079, "Version", newJString(Version))
  result = call_21630078.call(nil, query_21630079, nil, nil, nil)

var getModifyDBParameterGroup* = Call_GetModifyDBParameterGroup_21630063(
    name: "getModifyDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBParameterGroup",
    validator: validate_GetModifyDBParameterGroup_21630064, base: "/",
    makeUrl: url_GetModifyDBParameterGroup_21630065,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBProxy_21630121 = ref object of OpenApiRestCall_21625435
proc url_PostModifyDBProxy_21630123(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBProxy_21630122(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630124 = query.getOrDefault("Action")
  valid_21630124 = validateParameter(valid_21630124, JString, required = true,
                                   default = newJString("ModifyDBProxy"))
  if valid_21630124 != nil:
    section.add "Action", valid_21630124
  var valid_21630125 = query.getOrDefault("Version")
  valid_21630125 = validateParameter(valid_21630125, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630125 != nil:
    section.add "Version", valid_21630125
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630126 = header.getOrDefault("X-Amz-Date")
  valid_21630126 = validateParameter(valid_21630126, JString, required = false,
                                   default = nil)
  if valid_21630126 != nil:
    section.add "X-Amz-Date", valid_21630126
  var valid_21630127 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630127 = validateParameter(valid_21630127, JString, required = false,
                                   default = nil)
  if valid_21630127 != nil:
    section.add "X-Amz-Security-Token", valid_21630127
  var valid_21630128 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630128 = validateParameter(valid_21630128, JString, required = false,
                                   default = nil)
  if valid_21630128 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630128
  var valid_21630129 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630129 = validateParameter(valid_21630129, JString, required = false,
                                   default = nil)
  if valid_21630129 != nil:
    section.add "X-Amz-Algorithm", valid_21630129
  var valid_21630130 = header.getOrDefault("X-Amz-Signature")
  valid_21630130 = validateParameter(valid_21630130, JString, required = false,
                                   default = nil)
  if valid_21630130 != nil:
    section.add "X-Amz-Signature", valid_21630130
  var valid_21630131 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630131 = validateParameter(valid_21630131, JString, required = false,
                                   default = nil)
  if valid_21630131 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630131
  var valid_21630132 = header.getOrDefault("X-Amz-Credential")
  valid_21630132 = validateParameter(valid_21630132, JString, required = false,
                                   default = nil)
  if valid_21630132 != nil:
    section.add "X-Amz-Credential", valid_21630132
  result.add "header", section
  ## parameters in `formData` object:
  ##   NewDBProxyName: JString
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   RoleArn: JString
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RequireTLS: JBool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  section = newJObject()
  var valid_21630133 = formData.getOrDefault("NewDBProxyName")
  valid_21630133 = validateParameter(valid_21630133, JString, required = false,
                                   default = nil)
  if valid_21630133 != nil:
    section.add "NewDBProxyName", valid_21630133
  var valid_21630134 = formData.getOrDefault("RoleArn")
  valid_21630134 = validateParameter(valid_21630134, JString, required = false,
                                   default = nil)
  if valid_21630134 != nil:
    section.add "RoleArn", valid_21630134
  var valid_21630135 = formData.getOrDefault("IdleClientTimeout")
  valid_21630135 = validateParameter(valid_21630135, JInt, required = false,
                                   default = nil)
  if valid_21630135 != nil:
    section.add "IdleClientTimeout", valid_21630135
  var valid_21630136 = formData.getOrDefault("SecurityGroups")
  valid_21630136 = validateParameter(valid_21630136, JArray, required = false,
                                   default = nil)
  if valid_21630136 != nil:
    section.add "SecurityGroups", valid_21630136
  var valid_21630137 = formData.getOrDefault("DebugLogging")
  valid_21630137 = validateParameter(valid_21630137, JBool, required = false,
                                   default = nil)
  if valid_21630137 != nil:
    section.add "DebugLogging", valid_21630137
  var valid_21630138 = formData.getOrDefault("RequireTLS")
  valid_21630138 = validateParameter(valid_21630138, JBool, required = false,
                                   default = nil)
  if valid_21630138 != nil:
    section.add "RequireTLS", valid_21630138
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_21630139 = formData.getOrDefault("DBProxyName")
  valid_21630139 = validateParameter(valid_21630139, JString, required = true,
                                   default = nil)
  if valid_21630139 != nil:
    section.add "DBProxyName", valid_21630139
  var valid_21630140 = formData.getOrDefault("Auth")
  valid_21630140 = validateParameter(valid_21630140, JArray, required = false,
                                   default = nil)
  if valid_21630140 != nil:
    section.add "Auth", valid_21630140
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630141: Call_PostModifyDBProxy_21630121; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  let valid = call_21630141.validator(path, query, header, formData, body, _)
  let scheme = call_21630141.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630141.makeUrl(scheme.get, call_21630141.host, call_21630141.base,
                               call_21630141.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630141, uri, valid, _)

proc call*(call_21630142: Call_PostModifyDBProxy_21630121; DBProxyName: string;
          NewDBProxyName: string = ""; RoleArn: string = "";
          Action: string = "ModifyDBProxy"; IdleClientTimeout: int = 0;
          SecurityGroups: JsonNode = nil; DebugLogging: bool = false;
          RequireTLS: bool = false; Auth: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ##   NewDBProxyName: string
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   RoleArn: string
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Action: string (required)
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   RequireTLS: bool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   DBProxyName: string (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   Version: string (required)
  var query_21630143 = newJObject()
  var formData_21630144 = newJObject()
  add(formData_21630144, "NewDBProxyName", newJString(NewDBProxyName))
  add(formData_21630144, "RoleArn", newJString(RoleArn))
  add(query_21630143, "Action", newJString(Action))
  add(formData_21630144, "IdleClientTimeout", newJInt(IdleClientTimeout))
  if SecurityGroups != nil:
    formData_21630144.add "SecurityGroups", SecurityGroups
  add(formData_21630144, "DebugLogging", newJBool(DebugLogging))
  add(formData_21630144, "RequireTLS", newJBool(RequireTLS))
  add(formData_21630144, "DBProxyName", newJString(DBProxyName))
  if Auth != nil:
    formData_21630144.add "Auth", Auth
  add(query_21630143, "Version", newJString(Version))
  result = call_21630142.call(nil, query_21630143, nil, formData_21630144, nil)

var postModifyDBProxy* = Call_PostModifyDBProxy_21630121(name: "postModifyDBProxy",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBProxy", validator: validate_PostModifyDBProxy_21630122,
    base: "/", makeUrl: url_PostModifyDBProxy_21630123,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBProxy_21630098 = ref object of OpenApiRestCall_21625435
proc url_GetModifyDBProxy_21630100(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBProxy_21630099(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   Action: JString (required)
  ##   DebugLogging: JBool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   NewDBProxyName: JString
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   DBProxyName: JString (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  ##   RequireTLS: JBool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   IdleClientTimeout: JInt
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   Version: JString (required)
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  section = newJObject()
  var valid_21630101 = query.getOrDefault("RoleArn")
  valid_21630101 = validateParameter(valid_21630101, JString, required = false,
                                   default = nil)
  if valid_21630101 != nil:
    section.add "RoleArn", valid_21630101
  var valid_21630102 = query.getOrDefault("Auth")
  valid_21630102 = validateParameter(valid_21630102, JArray, required = false,
                                   default = nil)
  if valid_21630102 != nil:
    section.add "Auth", valid_21630102
  var valid_21630103 = query.getOrDefault("Action")
  valid_21630103 = validateParameter(valid_21630103, JString, required = true,
                                   default = newJString("ModifyDBProxy"))
  if valid_21630103 != nil:
    section.add "Action", valid_21630103
  var valid_21630104 = query.getOrDefault("DebugLogging")
  valid_21630104 = validateParameter(valid_21630104, JBool, required = false,
                                   default = nil)
  if valid_21630104 != nil:
    section.add "DebugLogging", valid_21630104
  var valid_21630105 = query.getOrDefault("NewDBProxyName")
  valid_21630105 = validateParameter(valid_21630105, JString, required = false,
                                   default = nil)
  if valid_21630105 != nil:
    section.add "NewDBProxyName", valid_21630105
  var valid_21630106 = query.getOrDefault("DBProxyName")
  valid_21630106 = validateParameter(valid_21630106, JString, required = true,
                                   default = nil)
  if valid_21630106 != nil:
    section.add "DBProxyName", valid_21630106
  var valid_21630107 = query.getOrDefault("RequireTLS")
  valid_21630107 = validateParameter(valid_21630107, JBool, required = false,
                                   default = nil)
  if valid_21630107 != nil:
    section.add "RequireTLS", valid_21630107
  var valid_21630108 = query.getOrDefault("IdleClientTimeout")
  valid_21630108 = validateParameter(valid_21630108, JInt, required = false,
                                   default = nil)
  if valid_21630108 != nil:
    section.add "IdleClientTimeout", valid_21630108
  var valid_21630109 = query.getOrDefault("Version")
  valid_21630109 = validateParameter(valid_21630109, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630109 != nil:
    section.add "Version", valid_21630109
  var valid_21630110 = query.getOrDefault("SecurityGroups")
  valid_21630110 = validateParameter(valid_21630110, JArray, required = false,
                                   default = nil)
  if valid_21630110 != nil:
    section.add "SecurityGroups", valid_21630110
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630111 = header.getOrDefault("X-Amz-Date")
  valid_21630111 = validateParameter(valid_21630111, JString, required = false,
                                   default = nil)
  if valid_21630111 != nil:
    section.add "X-Amz-Date", valid_21630111
  var valid_21630112 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630112 = validateParameter(valid_21630112, JString, required = false,
                                   default = nil)
  if valid_21630112 != nil:
    section.add "X-Amz-Security-Token", valid_21630112
  var valid_21630113 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630113 = validateParameter(valid_21630113, JString, required = false,
                                   default = nil)
  if valid_21630113 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630113
  var valid_21630114 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630114 = validateParameter(valid_21630114, JString, required = false,
                                   default = nil)
  if valid_21630114 != nil:
    section.add "X-Amz-Algorithm", valid_21630114
  var valid_21630115 = header.getOrDefault("X-Amz-Signature")
  valid_21630115 = validateParameter(valid_21630115, JString, required = false,
                                   default = nil)
  if valid_21630115 != nil:
    section.add "X-Amz-Signature", valid_21630115
  var valid_21630116 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630116 = validateParameter(valid_21630116, JString, required = false,
                                   default = nil)
  if valid_21630116 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630116
  var valid_21630117 = header.getOrDefault("X-Amz-Credential")
  valid_21630117 = validateParameter(valid_21630117, JString, required = false,
                                   default = nil)
  if valid_21630117 != nil:
    section.add "X-Amz-Credential", valid_21630117
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630118: Call_GetModifyDBProxy_21630098; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ## 
  let valid = call_21630118.validator(path, query, header, formData, body, _)
  let scheme = call_21630118.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630118.makeUrl(scheme.get, call_21630118.host, call_21630118.base,
                               call_21630118.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630118, uri, valid, _)

proc call*(call_21630119: Call_GetModifyDBProxy_21630098; DBProxyName: string;
          RoleArn: string = ""; Auth: JsonNode = nil; Action: string = "ModifyDBProxy";
          DebugLogging: bool = false; NewDBProxyName: string = "";
          RequireTLS: bool = false; IdleClientTimeout: int = 0;
          Version: string = "2014-10-31"; SecurityGroups: JsonNode = nil): Recallable =
  ## getModifyDBProxy
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Changes the settings for an existing DB proxy.</p>
  ##   RoleArn: string
  ##          : The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.
  ##   Auth: JArray
  ##       : The new authentication settings for the <code>DBProxy</code>.
  ##   Action: string (required)
  ##   DebugLogging: bool
  ##               : Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.
  ##   NewDBProxyName: string
  ##                 : The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   DBProxyName: string (required)
  ##              : The identifier for the <code>DBProxy</code> to modify.
  ##   RequireTLS: bool
  ##             : Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.
  ##   IdleClientTimeout: int
  ##                    : The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.
  ##   Version: string (required)
  ##   SecurityGroups: JArray
  ##                 : The new list of security groups for the <code>DBProxy</code>.
  var query_21630120 = newJObject()
  add(query_21630120, "RoleArn", newJString(RoleArn))
  if Auth != nil:
    query_21630120.add "Auth", Auth
  add(query_21630120, "Action", newJString(Action))
  add(query_21630120, "DebugLogging", newJBool(DebugLogging))
  add(query_21630120, "NewDBProxyName", newJString(NewDBProxyName))
  add(query_21630120, "DBProxyName", newJString(DBProxyName))
  add(query_21630120, "RequireTLS", newJBool(RequireTLS))
  add(query_21630120, "IdleClientTimeout", newJInt(IdleClientTimeout))
  add(query_21630120, "Version", newJString(Version))
  if SecurityGroups != nil:
    query_21630120.add "SecurityGroups", SecurityGroups
  result = call_21630119.call(nil, query_21630120, nil, nil, nil)

var getModifyDBProxy* = Call_GetModifyDBProxy_21630098(name: "getModifyDBProxy",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=ModifyDBProxy", validator: validate_GetModifyDBProxy_21630099,
    base: "/", makeUrl: url_GetModifyDBProxy_21630100,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBProxyTargetGroup_21630168 = ref object of OpenApiRestCall_21625435
proc url_PostModifyDBProxyTargetGroup_21630170(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBProxyTargetGroup_21630169(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630171 = query.getOrDefault("Action")
  valid_21630171 = validateParameter(valid_21630171, JString, required = true, default = newJString(
      "ModifyDBProxyTargetGroup"))
  if valid_21630171 != nil:
    section.add "Action", valid_21630171
  var valid_21630172 = query.getOrDefault("Version")
  valid_21630172 = validateParameter(valid_21630172, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630172 != nil:
    section.add "Version", valid_21630172
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630173 = header.getOrDefault("X-Amz-Date")
  valid_21630173 = validateParameter(valid_21630173, JString, required = false,
                                   default = nil)
  if valid_21630173 != nil:
    section.add "X-Amz-Date", valid_21630173
  var valid_21630174 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630174 = validateParameter(valid_21630174, JString, required = false,
                                   default = nil)
  if valid_21630174 != nil:
    section.add "X-Amz-Security-Token", valid_21630174
  var valid_21630175 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630175 = validateParameter(valid_21630175, JString, required = false,
                                   default = nil)
  if valid_21630175 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630175
  var valid_21630176 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630176 = validateParameter(valid_21630176, JString, required = false,
                                   default = nil)
  if valid_21630176 != nil:
    section.add "X-Amz-Algorithm", valid_21630176
  var valid_21630177 = header.getOrDefault("X-Amz-Signature")
  valid_21630177 = validateParameter(valid_21630177, JString, required = false,
                                   default = nil)
  if valid_21630177 != nil:
    section.add "X-Amz-Signature", valid_21630177
  var valid_21630178 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630178 = validateParameter(valid_21630178, JString, required = false,
                                   default = nil)
  if valid_21630178 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630178
  var valid_21630179 = header.getOrDefault("X-Amz-Credential")
  valid_21630179 = validateParameter(valid_21630179, JString, required = false,
                                   default = nil)
  if valid_21630179 != nil:
    section.add "X-Amz-Credential", valid_21630179
  result.add "header", section
  ## parameters in `formData` object:
  ##   ConnectionPoolConfig.InitQuery: JString
  ##                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   ConnectionPoolConfig.SessionPinningFilters: JArray
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  ##   ConnectionPoolConfig.MaxIdleConnectionsPercent: JString
  ##                                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   NewName: JString
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfig.MaxConnectionsPercent: JString
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   TargetGroupName: JString (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   ConnectionPoolConfig.ConnectionBorrowTimeout: JString
  ##                                               : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   DBProxyName: JString (required)
  ##              : The name of the new proxy to which to assign the target group.
  section = newJObject()
  var valid_21630180 = formData.getOrDefault("ConnectionPoolConfig.InitQuery")
  valid_21630180 = validateParameter(valid_21630180, JString, required = false,
                                   default = nil)
  if valid_21630180 != nil:
    section.add "ConnectionPoolConfig.InitQuery", valid_21630180
  var valid_21630181 = formData.getOrDefault(
      "ConnectionPoolConfig.SessionPinningFilters")
  valid_21630181 = validateParameter(valid_21630181, JArray, required = false,
                                   default = nil)
  if valid_21630181 != nil:
    section.add "ConnectionPoolConfig.SessionPinningFilters", valid_21630181
  var valid_21630182 = formData.getOrDefault(
      "ConnectionPoolConfig.MaxIdleConnectionsPercent")
  valid_21630182 = validateParameter(valid_21630182, JString, required = false,
                                   default = nil)
  if valid_21630182 != nil:
    section.add "ConnectionPoolConfig.MaxIdleConnectionsPercent", valid_21630182
  var valid_21630183 = formData.getOrDefault("NewName")
  valid_21630183 = validateParameter(valid_21630183, JString, required = false,
                                   default = nil)
  if valid_21630183 != nil:
    section.add "NewName", valid_21630183
  var valid_21630184 = formData.getOrDefault(
      "ConnectionPoolConfig.MaxConnectionsPercent")
  valid_21630184 = validateParameter(valid_21630184, JString, required = false,
                                   default = nil)
  if valid_21630184 != nil:
    section.add "ConnectionPoolConfig.MaxConnectionsPercent", valid_21630184
  assert formData != nil, "formData argument is necessary due to required `TargetGroupName` field"
  var valid_21630185 = formData.getOrDefault("TargetGroupName")
  valid_21630185 = validateParameter(valid_21630185, JString, required = true,
                                   default = nil)
  if valid_21630185 != nil:
    section.add "TargetGroupName", valid_21630185
  var valid_21630186 = formData.getOrDefault(
      "ConnectionPoolConfig.ConnectionBorrowTimeout")
  valid_21630186 = validateParameter(valid_21630186, JString, required = false,
                                   default = nil)
  if valid_21630186 != nil:
    section.add "ConnectionPoolConfig.ConnectionBorrowTimeout", valid_21630186
  var valid_21630187 = formData.getOrDefault("DBProxyName")
  valid_21630187 = validateParameter(valid_21630187, JString, required = true,
                                   default = nil)
  if valid_21630187 != nil:
    section.add "DBProxyName", valid_21630187
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630188: Call_PostModifyDBProxyTargetGroup_21630168;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_21630188.validator(path, query, header, formData, body, _)
  let scheme = call_21630188.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630188.makeUrl(scheme.get, call_21630188.host, call_21630188.base,
                               call_21630188.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630188, uri, valid, _)

proc call*(call_21630189: Call_PostModifyDBProxyTargetGroup_21630168;
          TargetGroupName: string; DBProxyName: string;
          ConnectionPoolConfigInitQuery: string = "";
          ConnectionPoolConfigSessionPinningFilters: JsonNode = nil;
          ConnectionPoolConfigMaxIdleConnectionsPercent: string = "";
          NewName: string = "";
          ConnectionPoolConfigMaxConnectionsPercent: string = "";
          Action: string = "ModifyDBProxyTargetGroup";
          ConnectionPoolConfigConnectionBorrowTimeout: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBProxyTargetGroup
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ##   ConnectionPoolConfigInitQuery: string
  ##                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   ConnectionPoolConfigSessionPinningFilters: JArray
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  ##   ConnectionPoolConfigMaxIdleConnectionsPercent: string
  ##                                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   NewName: string
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   ConnectionPoolConfigMaxConnectionsPercent: string
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  ##   Action: string (required)
  ##   TargetGroupName: string (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   ConnectionPoolConfigConnectionBorrowTimeout: string
  ##                                              : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   DBProxyName: string (required)
  ##              : The name of the new proxy to which to assign the target group.
  ##   Version: string (required)
  var query_21630190 = newJObject()
  var formData_21630191 = newJObject()
  add(formData_21630191, "ConnectionPoolConfig.InitQuery",
      newJString(ConnectionPoolConfigInitQuery))
  if ConnectionPoolConfigSessionPinningFilters != nil:
    formData_21630191.add "ConnectionPoolConfig.SessionPinningFilters",
                         ConnectionPoolConfigSessionPinningFilters
  add(formData_21630191, "ConnectionPoolConfig.MaxIdleConnectionsPercent",
      newJString(ConnectionPoolConfigMaxIdleConnectionsPercent))
  add(formData_21630191, "NewName", newJString(NewName))
  add(formData_21630191, "ConnectionPoolConfig.MaxConnectionsPercent",
      newJString(ConnectionPoolConfigMaxConnectionsPercent))
  add(query_21630190, "Action", newJString(Action))
  add(formData_21630191, "TargetGroupName", newJString(TargetGroupName))
  add(formData_21630191, "ConnectionPoolConfig.ConnectionBorrowTimeout",
      newJString(ConnectionPoolConfigConnectionBorrowTimeout))
  add(formData_21630191, "DBProxyName", newJString(DBProxyName))
  add(query_21630190, "Version", newJString(Version))
  result = call_21630189.call(nil, query_21630190, nil, formData_21630191, nil)

var postModifyDBProxyTargetGroup* = Call_PostModifyDBProxyTargetGroup_21630168(
    name: "postModifyDBProxyTargetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBProxyTargetGroup",
    validator: validate_PostModifyDBProxyTargetGroup_21630169, base: "/",
    makeUrl: url_PostModifyDBProxyTargetGroup_21630170,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBProxyTargetGroup_21630145 = ref object of OpenApiRestCall_21625435
proc url_GetModifyDBProxyTargetGroup_21630147(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBProxyTargetGroup_21630146(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ConnectionPoolConfig.SessionPinningFilters: JArray
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  ##   ConnectionPoolConfig.InitQuery: JString
  ##                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   TargetGroupName: JString (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   ConnectionPoolConfig.ConnectionBorrowTimeout: JString
  ##                                               : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   Action: JString (required)
  ##   DBProxyName: JString (required)
  ##              : The name of the new proxy to which to assign the target group.
  ##   ConnectionPoolConfig.MaxIdleConnectionsPercent: JString
  ##                                                 : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   NewName: JString
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   Version: JString (required)
  ##   ConnectionPoolConfig.MaxConnectionsPercent: JString
  ##                                             : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  section = newJObject()
  var valid_21630148 = query.getOrDefault("ConnectionPoolConfig.SessionPinningFilters")
  valid_21630148 = validateParameter(valid_21630148, JArray, required = false,
                                   default = nil)
  if valid_21630148 != nil:
    section.add "ConnectionPoolConfig.SessionPinningFilters", valid_21630148
  var valid_21630149 = query.getOrDefault("ConnectionPoolConfig.InitQuery")
  valid_21630149 = validateParameter(valid_21630149, JString, required = false,
                                   default = nil)
  if valid_21630149 != nil:
    section.add "ConnectionPoolConfig.InitQuery", valid_21630149
  assert query != nil,
        "query argument is necessary due to required `TargetGroupName` field"
  var valid_21630150 = query.getOrDefault("TargetGroupName")
  valid_21630150 = validateParameter(valid_21630150, JString, required = true,
                                   default = nil)
  if valid_21630150 != nil:
    section.add "TargetGroupName", valid_21630150
  var valid_21630151 = query.getOrDefault("ConnectionPoolConfig.ConnectionBorrowTimeout")
  valid_21630151 = validateParameter(valid_21630151, JString, required = false,
                                   default = nil)
  if valid_21630151 != nil:
    section.add "ConnectionPoolConfig.ConnectionBorrowTimeout", valid_21630151
  var valid_21630152 = query.getOrDefault("Action")
  valid_21630152 = validateParameter(valid_21630152, JString, required = true, default = newJString(
      "ModifyDBProxyTargetGroup"))
  if valid_21630152 != nil:
    section.add "Action", valid_21630152
  var valid_21630153 = query.getOrDefault("DBProxyName")
  valid_21630153 = validateParameter(valid_21630153, JString, required = true,
                                   default = nil)
  if valid_21630153 != nil:
    section.add "DBProxyName", valid_21630153
  var valid_21630154 = query.getOrDefault("ConnectionPoolConfig.MaxIdleConnectionsPercent")
  valid_21630154 = validateParameter(valid_21630154, JString, required = false,
                                   default = nil)
  if valid_21630154 != nil:
    section.add "ConnectionPoolConfig.MaxIdleConnectionsPercent", valid_21630154
  var valid_21630155 = query.getOrDefault("NewName")
  valid_21630155 = validateParameter(valid_21630155, JString, required = false,
                                   default = nil)
  if valid_21630155 != nil:
    section.add "NewName", valid_21630155
  var valid_21630156 = query.getOrDefault("Version")
  valid_21630156 = validateParameter(valid_21630156, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630156 != nil:
    section.add "Version", valid_21630156
  var valid_21630157 = query.getOrDefault("ConnectionPoolConfig.MaxConnectionsPercent")
  valid_21630157 = validateParameter(valid_21630157, JString, required = false,
                                   default = nil)
  if valid_21630157 != nil:
    section.add "ConnectionPoolConfig.MaxConnectionsPercent", valid_21630157
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630158 = header.getOrDefault("X-Amz-Date")
  valid_21630158 = validateParameter(valid_21630158, JString, required = false,
                                   default = nil)
  if valid_21630158 != nil:
    section.add "X-Amz-Date", valid_21630158
  var valid_21630159 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630159 = validateParameter(valid_21630159, JString, required = false,
                                   default = nil)
  if valid_21630159 != nil:
    section.add "X-Amz-Security-Token", valid_21630159
  var valid_21630160 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630160 = validateParameter(valid_21630160, JString, required = false,
                                   default = nil)
  if valid_21630160 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630160
  var valid_21630161 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630161 = validateParameter(valid_21630161, JString, required = false,
                                   default = nil)
  if valid_21630161 != nil:
    section.add "X-Amz-Algorithm", valid_21630161
  var valid_21630162 = header.getOrDefault("X-Amz-Signature")
  valid_21630162 = validateParameter(valid_21630162, JString, required = false,
                                   default = nil)
  if valid_21630162 != nil:
    section.add "X-Amz-Signature", valid_21630162
  var valid_21630163 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630163 = validateParameter(valid_21630163, JString, required = false,
                                   default = nil)
  if valid_21630163 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630163
  var valid_21630164 = header.getOrDefault("X-Amz-Credential")
  valid_21630164 = validateParameter(valid_21630164, JString, required = false,
                                   default = nil)
  if valid_21630164 != nil:
    section.add "X-Amz-Credential", valid_21630164
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630165: Call_GetModifyDBProxyTargetGroup_21630145;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_21630165.validator(path, query, header, formData, body, _)
  let scheme = call_21630165.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630165.makeUrl(scheme.get, call_21630165.host, call_21630165.base,
                               call_21630165.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630165, uri, valid, _)

proc call*(call_21630166: Call_GetModifyDBProxyTargetGroup_21630145;
          TargetGroupName: string; DBProxyName: string;
          ConnectionPoolConfigSessionPinningFilters: JsonNode = nil;
          ConnectionPoolConfigInitQuery: string = "";
          ConnectionPoolConfigConnectionBorrowTimeout: string = "";
          Action: string = "ModifyDBProxyTargetGroup";
          ConnectionPoolConfigMaxIdleConnectionsPercent: string = "";
          NewName: string = ""; Version: string = "2014-10-31";
          ConnectionPoolConfigMaxConnectionsPercent: string = ""): Recallable =
  ## getModifyDBProxyTargetGroup
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
  ##   ConnectionPoolConfigSessionPinningFilters: JArray
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior.</p> <p>Default: no session pinning filters</p>
  ##   ConnectionPoolConfigInitQuery: string
  ##                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>. </p> <p>Default: no initialization query</p>
  ##   TargetGroupName: string (required)
  ##                  : The name of the new target group to assign to the proxy.
  ##   ConnectionPoolConfigConnectionBorrowTimeout: string
  ##                                              : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p> <p>Default: 120</p> <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
  ##   Action: string (required)
  ##   DBProxyName: string (required)
  ##              : The name of the new proxy to which to assign the target group.
  ##   ConnectionPoolConfigMaxIdleConnectionsPercent: string
  ##                                                : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p> Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. </p> <p>Default: 50</p> <p>Constraints: between 0 and <code>MaxConnectionsPercent</code> </p>
  ##   NewName: string
  ##          : The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.
  ##   Version: string (required)
  ##   ConnectionPoolConfigMaxConnectionsPercent: string
  ##                                            : <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
  ## <p>The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p> <p>Default: 100</p> <p>Constraints: between 1 and 100</p>
  var query_21630167 = newJObject()
  if ConnectionPoolConfigSessionPinningFilters != nil:
    query_21630167.add "ConnectionPoolConfig.SessionPinningFilters",
                      ConnectionPoolConfigSessionPinningFilters
  add(query_21630167, "ConnectionPoolConfig.InitQuery",
      newJString(ConnectionPoolConfigInitQuery))
  add(query_21630167, "TargetGroupName", newJString(TargetGroupName))
  add(query_21630167, "ConnectionPoolConfig.ConnectionBorrowTimeout",
      newJString(ConnectionPoolConfigConnectionBorrowTimeout))
  add(query_21630167, "Action", newJString(Action))
  add(query_21630167, "DBProxyName", newJString(DBProxyName))
  add(query_21630167, "ConnectionPoolConfig.MaxIdleConnectionsPercent",
      newJString(ConnectionPoolConfigMaxIdleConnectionsPercent))
  add(query_21630167, "NewName", newJString(NewName))
  add(query_21630167, "Version", newJString(Version))
  add(query_21630167, "ConnectionPoolConfig.MaxConnectionsPercent",
      newJString(ConnectionPoolConfigMaxConnectionsPercent))
  result = call_21630166.call(nil, query_21630167, nil, nil, nil)

var getModifyDBProxyTargetGroup* = Call_GetModifyDBProxyTargetGroup_21630145(
    name: "getModifyDBProxyTargetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBProxyTargetGroup",
    validator: validate_GetModifyDBProxyTargetGroup_21630146, base: "/",
    makeUrl: url_GetModifyDBProxyTargetGroup_21630147,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSnapshot_21630210 = ref object of OpenApiRestCall_21625435
proc url_PostModifyDBSnapshot_21630212(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSnapshot_21630211(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630213 = query.getOrDefault("Action")
  valid_21630213 = validateParameter(valid_21630213, JString, required = true,
                                   default = newJString("ModifyDBSnapshot"))
  if valid_21630213 != nil:
    section.add "Action", valid_21630213
  var valid_21630214 = query.getOrDefault("Version")
  valid_21630214 = validateParameter(valid_21630214, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630214 != nil:
    section.add "Version", valid_21630214
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630215 = header.getOrDefault("X-Amz-Date")
  valid_21630215 = validateParameter(valid_21630215, JString, required = false,
                                   default = nil)
  if valid_21630215 != nil:
    section.add "X-Amz-Date", valid_21630215
  var valid_21630216 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630216 = validateParameter(valid_21630216, JString, required = false,
                                   default = nil)
  if valid_21630216 != nil:
    section.add "X-Amz-Security-Token", valid_21630216
  var valid_21630217 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630217 = validateParameter(valid_21630217, JString, required = false,
                                   default = nil)
  if valid_21630217 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630217
  var valid_21630218 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630218 = validateParameter(valid_21630218, JString, required = false,
                                   default = nil)
  if valid_21630218 != nil:
    section.add "X-Amz-Algorithm", valid_21630218
  var valid_21630219 = header.getOrDefault("X-Amz-Signature")
  valid_21630219 = validateParameter(valid_21630219, JString, required = false,
                                   default = nil)
  if valid_21630219 != nil:
    section.add "X-Amz-Signature", valid_21630219
  var valid_21630220 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630220 = validateParameter(valid_21630220, JString, required = false,
                                   default = nil)
  if valid_21630220 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630220
  var valid_21630221 = header.getOrDefault("X-Amz-Credential")
  valid_21630221 = validateParameter(valid_21630221, JString, required = false,
                                   default = nil)
  if valid_21630221 != nil:
    section.add "X-Amz-Credential", valid_21630221
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionGroupName: JString
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   EngineVersion: JString
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  section = newJObject()
  var valid_21630222 = formData.getOrDefault("OptionGroupName")
  valid_21630222 = validateParameter(valid_21630222, JString, required = false,
                                   default = nil)
  if valid_21630222 != nil:
    section.add "OptionGroupName", valid_21630222
  assert formData != nil, "formData argument is necessary due to required `DBSnapshotIdentifier` field"
  var valid_21630223 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_21630223 = validateParameter(valid_21630223, JString, required = true,
                                   default = nil)
  if valid_21630223 != nil:
    section.add "DBSnapshotIdentifier", valid_21630223
  var valid_21630224 = formData.getOrDefault("EngineVersion")
  valid_21630224 = validateParameter(valid_21630224, JString, required = false,
                                   default = nil)
  if valid_21630224 != nil:
    section.add "EngineVersion", valid_21630224
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630225: Call_PostModifyDBSnapshot_21630210; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  let valid = call_21630225.validator(path, query, header, formData, body, _)
  let scheme = call_21630225.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630225.makeUrl(scheme.get, call_21630225.host, call_21630225.base,
                               call_21630225.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630225, uri, valid, _)

proc call*(call_21630226: Call_PostModifyDBSnapshot_21630210;
          DBSnapshotIdentifier: string; OptionGroupName: string = "";
          Action: string = "ModifyDBSnapshot"; EngineVersion: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSnapshot
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ##   OptionGroupName: string
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier of the DB snapshot to modify.
  ##   Action: string (required)
  ##   EngineVersion: string
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   Version: string (required)
  var query_21630227 = newJObject()
  var formData_21630228 = newJObject()
  add(formData_21630228, "OptionGroupName", newJString(OptionGroupName))
  add(formData_21630228, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_21630227, "Action", newJString(Action))
  add(formData_21630228, "EngineVersion", newJString(EngineVersion))
  add(query_21630227, "Version", newJString(Version))
  result = call_21630226.call(nil, query_21630227, nil, formData_21630228, nil)

var postModifyDBSnapshot* = Call_PostModifyDBSnapshot_21630210(
    name: "postModifyDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshot",
    validator: validate_PostModifyDBSnapshot_21630211, base: "/",
    makeUrl: url_PostModifyDBSnapshot_21630212,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSnapshot_21630192 = ref object of OpenApiRestCall_21625435
proc url_GetModifyDBSnapshot_21630194(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSnapshot_21630193(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OptionGroupName: JString
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: JString (required)
  ##   EngineVersion: JString
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   Version: JString (required)
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier of the DB snapshot to modify.
  section = newJObject()
  var valid_21630195 = query.getOrDefault("OptionGroupName")
  valid_21630195 = validateParameter(valid_21630195, JString, required = false,
                                   default = nil)
  if valid_21630195 != nil:
    section.add "OptionGroupName", valid_21630195
  var valid_21630196 = query.getOrDefault("Action")
  valid_21630196 = validateParameter(valid_21630196, JString, required = true,
                                   default = newJString("ModifyDBSnapshot"))
  if valid_21630196 != nil:
    section.add "Action", valid_21630196
  var valid_21630197 = query.getOrDefault("EngineVersion")
  valid_21630197 = validateParameter(valid_21630197, JString, required = false,
                                   default = nil)
  if valid_21630197 != nil:
    section.add "EngineVersion", valid_21630197
  var valid_21630198 = query.getOrDefault("Version")
  valid_21630198 = validateParameter(valid_21630198, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630198 != nil:
    section.add "Version", valid_21630198
  var valid_21630199 = query.getOrDefault("DBSnapshotIdentifier")
  valid_21630199 = validateParameter(valid_21630199, JString, required = true,
                                   default = nil)
  if valid_21630199 != nil:
    section.add "DBSnapshotIdentifier", valid_21630199
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630200 = header.getOrDefault("X-Amz-Date")
  valid_21630200 = validateParameter(valid_21630200, JString, required = false,
                                   default = nil)
  if valid_21630200 != nil:
    section.add "X-Amz-Date", valid_21630200
  var valid_21630201 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630201 = validateParameter(valid_21630201, JString, required = false,
                                   default = nil)
  if valid_21630201 != nil:
    section.add "X-Amz-Security-Token", valid_21630201
  var valid_21630202 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630202 = validateParameter(valid_21630202, JString, required = false,
                                   default = nil)
  if valid_21630202 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630202
  var valid_21630203 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630203 = validateParameter(valid_21630203, JString, required = false,
                                   default = nil)
  if valid_21630203 != nil:
    section.add "X-Amz-Algorithm", valid_21630203
  var valid_21630204 = header.getOrDefault("X-Amz-Signature")
  valid_21630204 = validateParameter(valid_21630204, JString, required = false,
                                   default = nil)
  if valid_21630204 != nil:
    section.add "X-Amz-Signature", valid_21630204
  var valid_21630205 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630205 = validateParameter(valid_21630205, JString, required = false,
                                   default = nil)
  if valid_21630205 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630205
  var valid_21630206 = header.getOrDefault("X-Amz-Credential")
  valid_21630206 = validateParameter(valid_21630206, JString, required = false,
                                   default = nil)
  if valid_21630206 != nil:
    section.add "X-Amz-Credential", valid_21630206
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630207: Call_GetModifyDBSnapshot_21630192; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ## 
  let valid = call_21630207.validator(path, query, header, formData, body, _)
  let scheme = call_21630207.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630207.makeUrl(scheme.get, call_21630207.host, call_21630207.base,
                               call_21630207.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630207, uri, valid, _)

proc call*(call_21630208: Call_GetModifyDBSnapshot_21630192;
          DBSnapshotIdentifier: string; OptionGroupName: string = "";
          Action: string = "ModifyDBSnapshot"; EngineVersion: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSnapshot
  ## <p>Updates a manual DB snapshot, which can be encrypted or not encrypted, with a new engine version. </p> <p>Amazon RDS supports upgrading DB snapshots for MySQL, Oracle, and PostgreSQL. </p>
  ##   OptionGroupName: string
  ##                  : <p>The option group to identify with the upgraded DB snapshot. </p> <p>You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see <a 
  ## href="http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option Group Considerations</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   EngineVersion: string
  ##                : <p>The engine version to upgrade the DB snapshot to. </p> <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot. </p> <p> <b>MySQL</b> </p> <ul> <li> <p> <code>5.5.46</code> (supported for 5.1 DB snapshots)</p> </li> </ul> <p> <b>Oracle</b> </p> <ul> <li> <p> <code>12.1.0.2.v8</code> (supported for 12.1.0.1 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p> </li> <li> <p> <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p> </li> </ul> <p> <b>PostgreSQL</b> </p> <p>For the list of engine versions that are available for upgrading a DB snapshot, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion"> Upgrading the PostgreSQL DB Engine for Amazon RDS</a>. </p>
  ##   Version: string (required)
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier of the DB snapshot to modify.
  var query_21630209 = newJObject()
  add(query_21630209, "OptionGroupName", newJString(OptionGroupName))
  add(query_21630209, "Action", newJString(Action))
  add(query_21630209, "EngineVersion", newJString(EngineVersion))
  add(query_21630209, "Version", newJString(Version))
  add(query_21630209, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_21630208.call(nil, query_21630209, nil, nil, nil)

var getModifyDBSnapshot* = Call_GetModifyDBSnapshot_21630192(
    name: "getModifyDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshot",
    validator: validate_GetModifyDBSnapshot_21630193, base: "/",
    makeUrl: url_GetModifyDBSnapshot_21630194,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSnapshotAttribute_21630248 = ref object of OpenApiRestCall_21625435
proc url_PostModifyDBSnapshotAttribute_21630250(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSnapshotAttribute_21630249(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630251 = query.getOrDefault("Action")
  valid_21630251 = validateParameter(valid_21630251, JString, required = true, default = newJString(
      "ModifyDBSnapshotAttribute"))
  if valid_21630251 != nil:
    section.add "Action", valid_21630251
  var valid_21630252 = query.getOrDefault("Version")
  valid_21630252 = validateParameter(valid_21630252, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630252 != nil:
    section.add "Version", valid_21630252
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630253 = header.getOrDefault("X-Amz-Date")
  valid_21630253 = validateParameter(valid_21630253, JString, required = false,
                                   default = nil)
  if valid_21630253 != nil:
    section.add "X-Amz-Date", valid_21630253
  var valid_21630254 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630254 = validateParameter(valid_21630254, JString, required = false,
                                   default = nil)
  if valid_21630254 != nil:
    section.add "X-Amz-Security-Token", valid_21630254
  var valid_21630255 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630255 = validateParameter(valid_21630255, JString, required = false,
                                   default = nil)
  if valid_21630255 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630255
  var valid_21630256 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630256 = validateParameter(valid_21630256, JString, required = false,
                                   default = nil)
  if valid_21630256 != nil:
    section.add "X-Amz-Algorithm", valid_21630256
  var valid_21630257 = header.getOrDefault("X-Amz-Signature")
  valid_21630257 = validateParameter(valid_21630257, JString, required = false,
                                   default = nil)
  if valid_21630257 != nil:
    section.add "X-Amz-Signature", valid_21630257
  var valid_21630258 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630258 = validateParameter(valid_21630258, JString, required = false,
                                   default = nil)
  if valid_21630258 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630258
  var valid_21630259 = header.getOrDefault("X-Amz-Credential")
  valid_21630259 = validateParameter(valid_21630259, JString, required = false,
                                   default = nil)
  if valid_21630259 != nil:
    section.add "X-Amz-Credential", valid_21630259
  result.add "header", section
  ## parameters in `formData` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `AttributeName` field"
  var valid_21630260 = formData.getOrDefault("AttributeName")
  valid_21630260 = validateParameter(valid_21630260, JString, required = true,
                                   default = nil)
  if valid_21630260 != nil:
    section.add "AttributeName", valid_21630260
  var valid_21630261 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_21630261 = validateParameter(valid_21630261, JString, required = true,
                                   default = nil)
  if valid_21630261 != nil:
    section.add "DBSnapshotIdentifier", valid_21630261
  var valid_21630262 = formData.getOrDefault("ValuesToRemove")
  valid_21630262 = validateParameter(valid_21630262, JArray, required = false,
                                   default = nil)
  if valid_21630262 != nil:
    section.add "ValuesToRemove", valid_21630262
  var valid_21630263 = formData.getOrDefault("ValuesToAdd")
  valid_21630263 = validateParameter(valid_21630263, JArray, required = false,
                                   default = nil)
  if valid_21630263 != nil:
    section.add "ValuesToAdd", valid_21630263
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630264: Call_PostModifyDBSnapshotAttribute_21630248;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  let valid = call_21630264.validator(path, query, header, formData, body, _)
  let scheme = call_21630264.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630264.makeUrl(scheme.get, call_21630264.host, call_21630264.base,
                               call_21630264.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630264, uri, valid, _)

proc call*(call_21630265: Call_PostModifyDBSnapshotAttribute_21630248;
          AttributeName: string; DBSnapshotIdentifier: string;
          Action: string = "ModifyDBSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; ValuesToAdd: JsonNode = nil;
          Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Version: string (required)
  var query_21630266 = newJObject()
  var formData_21630267 = newJObject()
  add(formData_21630267, "AttributeName", newJString(AttributeName))
  add(formData_21630267, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_21630266, "Action", newJString(Action))
  if ValuesToRemove != nil:
    formData_21630267.add "ValuesToRemove", ValuesToRemove
  if ValuesToAdd != nil:
    formData_21630267.add "ValuesToAdd", ValuesToAdd
  add(query_21630266, "Version", newJString(Version))
  result = call_21630265.call(nil, query_21630266, nil, formData_21630267, nil)

var postModifyDBSnapshotAttribute* = Call_PostModifyDBSnapshotAttribute_21630248(
    name: "postModifyDBSnapshotAttribute", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshotAttribute",
    validator: validate_PostModifyDBSnapshotAttribute_21630249, base: "/",
    makeUrl: url_PostModifyDBSnapshotAttribute_21630250,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSnapshotAttribute_21630229 = ref object of OpenApiRestCall_21625435
proc url_GetModifyDBSnapshotAttribute_21630231(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSnapshotAttribute_21630230(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   AttributeName: JString (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Action: JString (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   Version: JString (required)
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `AttributeName` field"
  var valid_21630232 = query.getOrDefault("AttributeName")
  valid_21630232 = validateParameter(valid_21630232, JString, required = true,
                                   default = nil)
  if valid_21630232 != nil:
    section.add "AttributeName", valid_21630232
  var valid_21630233 = query.getOrDefault("ValuesToAdd")
  valid_21630233 = validateParameter(valid_21630233, JArray, required = false,
                                   default = nil)
  if valid_21630233 != nil:
    section.add "ValuesToAdd", valid_21630233
  var valid_21630234 = query.getOrDefault("Action")
  valid_21630234 = validateParameter(valid_21630234, JString, required = true, default = newJString(
      "ModifyDBSnapshotAttribute"))
  if valid_21630234 != nil:
    section.add "Action", valid_21630234
  var valid_21630235 = query.getOrDefault("ValuesToRemove")
  valid_21630235 = validateParameter(valid_21630235, JArray, required = false,
                                   default = nil)
  if valid_21630235 != nil:
    section.add "ValuesToRemove", valid_21630235
  var valid_21630236 = query.getOrDefault("Version")
  valid_21630236 = validateParameter(valid_21630236, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630236 != nil:
    section.add "Version", valid_21630236
  var valid_21630237 = query.getOrDefault("DBSnapshotIdentifier")
  valid_21630237 = validateParameter(valid_21630237, JString, required = true,
                                   default = nil)
  if valid_21630237 != nil:
    section.add "DBSnapshotIdentifier", valid_21630237
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630238 = header.getOrDefault("X-Amz-Date")
  valid_21630238 = validateParameter(valid_21630238, JString, required = false,
                                   default = nil)
  if valid_21630238 != nil:
    section.add "X-Amz-Date", valid_21630238
  var valid_21630239 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630239 = validateParameter(valid_21630239, JString, required = false,
                                   default = nil)
  if valid_21630239 != nil:
    section.add "X-Amz-Security-Token", valid_21630239
  var valid_21630240 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630240 = validateParameter(valid_21630240, JString, required = false,
                                   default = nil)
  if valid_21630240 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630240
  var valid_21630241 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630241 = validateParameter(valid_21630241, JString, required = false,
                                   default = nil)
  if valid_21630241 != nil:
    section.add "X-Amz-Algorithm", valid_21630241
  var valid_21630242 = header.getOrDefault("X-Amz-Signature")
  valid_21630242 = validateParameter(valid_21630242, JString, required = false,
                                   default = nil)
  if valid_21630242 != nil:
    section.add "X-Amz-Signature", valid_21630242
  var valid_21630243 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630243 = validateParameter(valid_21630243, JString, required = false,
                                   default = nil)
  if valid_21630243 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630243
  var valid_21630244 = header.getOrDefault("X-Amz-Credential")
  valid_21630244 = validateParameter(valid_21630244, JString, required = false,
                                   default = nil)
  if valid_21630244 != nil:
    section.add "X-Amz-Credential", valid_21630244
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630245: Call_GetModifyDBSnapshotAttribute_21630229;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ## 
  let valid = call_21630245.validator(path, query, header, formData, body, _)
  let scheme = call_21630245.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630245.makeUrl(scheme.get, call_21630245.host, call_21630245.base,
                               call_21630245.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630245, uri, valid, _)

proc call*(call_21630246: Call_GetModifyDBSnapshotAttribute_21630229;
          AttributeName: string; DBSnapshotIdentifier: string;
          ValuesToAdd: JsonNode = nil; Action: string = "ModifyDBSnapshotAttribute";
          ValuesToRemove: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSnapshotAttribute
  ## <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p> <p>To share a manual DB snapshot with other AWS accounts, specify <code>restore</code> as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the AWS accounts that are authorized to restore the manual DB snapshot. Uses the value <code>all</code> to make the manual DB snapshot public, which means it can be copied or restored by all AWS accounts. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts. If the manual DB snapshot is encrypted, it can be shared, but only by specifying a list of authorized AWS account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> <p>To view which AWS accounts have access to copy or restore a manual DB snapshot, or whether a manual DB snapshot public or private, use the <code>DescribeDBSnapshotAttributes</code> API action.</p>
  ##   AttributeName: string (required)
  ##                : <p>The name of the DB snapshot attribute to modify.</p> <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to <code>restore</code>.</p>
  ##   ValuesToAdd: JArray
  ##              : <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p> <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or <code>all</code> to make the manual DB snapshot restorable by any AWS account. Do not add the <code>all</code> value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.</p>
  ##   Action: string (required)
  ##   ValuesToRemove: JArray
  ##                 : <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p> <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or <code>all</code> to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify <code>all</code>, an AWS account whose account ID is explicitly added to the <code>restore</code> attribute can still copy or restore the manual DB snapshot.</p>
  ##   Version: string (required)
  ##   DBSnapshotIdentifier: string (required)
  ##                       : The identifier for the DB snapshot to modify the attributes for.
  var query_21630247 = newJObject()
  add(query_21630247, "AttributeName", newJString(AttributeName))
  if ValuesToAdd != nil:
    query_21630247.add "ValuesToAdd", ValuesToAdd
  add(query_21630247, "Action", newJString(Action))
  if ValuesToRemove != nil:
    query_21630247.add "ValuesToRemove", ValuesToRemove
  add(query_21630247, "Version", newJString(Version))
  add(query_21630247, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_21630246.call(nil, query_21630247, nil, nil, nil)

var getModifyDBSnapshotAttribute* = Call_GetModifyDBSnapshotAttribute_21630229(
    name: "getModifyDBSnapshotAttribute", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSnapshotAttribute",
    validator: validate_GetModifyDBSnapshotAttribute_21630230, base: "/",
    makeUrl: url_GetModifyDBSnapshotAttribute_21630231,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyDBSubnetGroup_21630286 = ref object of OpenApiRestCall_21625435
proc url_PostModifyDBSubnetGroup_21630288(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyDBSubnetGroup_21630287(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630289 = query.getOrDefault("Action")
  valid_21630289 = validateParameter(valid_21630289, JString, required = true,
                                   default = newJString("ModifyDBSubnetGroup"))
  if valid_21630289 != nil:
    section.add "Action", valid_21630289
  var valid_21630290 = query.getOrDefault("Version")
  valid_21630290 = validateParameter(valid_21630290, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630290 != nil:
    section.add "Version", valid_21630290
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630291 = header.getOrDefault("X-Amz-Date")
  valid_21630291 = validateParameter(valid_21630291, JString, required = false,
                                   default = nil)
  if valid_21630291 != nil:
    section.add "X-Amz-Date", valid_21630291
  var valid_21630292 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630292 = validateParameter(valid_21630292, JString, required = false,
                                   default = nil)
  if valid_21630292 != nil:
    section.add "X-Amz-Security-Token", valid_21630292
  var valid_21630293 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630293 = validateParameter(valid_21630293, JString, required = false,
                                   default = nil)
  if valid_21630293 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630293
  var valid_21630294 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630294 = validateParameter(valid_21630294, JString, required = false,
                                   default = nil)
  if valid_21630294 != nil:
    section.add "X-Amz-Algorithm", valid_21630294
  var valid_21630295 = header.getOrDefault("X-Amz-Signature")
  valid_21630295 = validateParameter(valid_21630295, JString, required = false,
                                   default = nil)
  if valid_21630295 != nil:
    section.add "X-Amz-Signature", valid_21630295
  var valid_21630296 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630296 = validateParameter(valid_21630296, JString, required = false,
                                   default = nil)
  if valid_21630296 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630296
  var valid_21630297 = header.getOrDefault("X-Amz-Credential")
  valid_21630297 = validateParameter(valid_21630297, JString, required = false,
                                   default = nil)
  if valid_21630297 != nil:
    section.add "X-Amz-Credential", valid_21630297
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSubnetGroupName` field"
  var valid_21630298 = formData.getOrDefault("DBSubnetGroupName")
  valid_21630298 = validateParameter(valid_21630298, JString, required = true,
                                   default = nil)
  if valid_21630298 != nil:
    section.add "DBSubnetGroupName", valid_21630298
  var valid_21630299 = formData.getOrDefault("SubnetIds")
  valid_21630299 = validateParameter(valid_21630299, JArray, required = true,
                                   default = nil)
  if valid_21630299 != nil:
    section.add "SubnetIds", valid_21630299
  var valid_21630300 = formData.getOrDefault("DBSubnetGroupDescription")
  valid_21630300 = validateParameter(valid_21630300, JString, required = false,
                                   default = nil)
  if valid_21630300 != nil:
    section.add "DBSubnetGroupDescription", valid_21630300
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630301: Call_PostModifyDBSubnetGroup_21630286;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_21630301.validator(path, query, header, formData, body, _)
  let scheme = call_21630301.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630301.makeUrl(scheme.get, call_21630301.host, call_21630301.base,
                               call_21630301.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630301, uri, valid, _)

proc call*(call_21630302: Call_PostModifyDBSubnetGroup_21630286;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   Action: string (required)
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_21630303 = newJObject()
  var formData_21630304 = newJObject()
  add(formData_21630304, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    formData_21630304.add "SubnetIds", SubnetIds
  add(query_21630303, "Action", newJString(Action))
  add(formData_21630304, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_21630303, "Version", newJString(Version))
  result = call_21630302.call(nil, query_21630303, nil, formData_21630304, nil)

var postModifyDBSubnetGroup* = Call_PostModifyDBSubnetGroup_21630286(
    name: "postModifyDBSubnetGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_PostModifyDBSubnetGroup_21630287, base: "/",
    makeUrl: url_PostModifyDBSubnetGroup_21630288,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyDBSubnetGroup_21630268 = ref object of OpenApiRestCall_21625435
proc url_GetModifyDBSubnetGroup_21630270(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyDBSubnetGroup_21630269(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: JString
  ##                           : The description for the DB subnet group.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630271 = query.getOrDefault("Action")
  valid_21630271 = validateParameter(valid_21630271, JString, required = true,
                                   default = newJString("ModifyDBSubnetGroup"))
  if valid_21630271 != nil:
    section.add "Action", valid_21630271
  var valid_21630272 = query.getOrDefault("DBSubnetGroupName")
  valid_21630272 = validateParameter(valid_21630272, JString, required = true,
                                   default = nil)
  if valid_21630272 != nil:
    section.add "DBSubnetGroupName", valid_21630272
  var valid_21630273 = query.getOrDefault("SubnetIds")
  valid_21630273 = validateParameter(valid_21630273, JArray, required = true,
                                   default = nil)
  if valid_21630273 != nil:
    section.add "SubnetIds", valid_21630273
  var valid_21630274 = query.getOrDefault("DBSubnetGroupDescription")
  valid_21630274 = validateParameter(valid_21630274, JString, required = false,
                                   default = nil)
  if valid_21630274 != nil:
    section.add "DBSubnetGroupDescription", valid_21630274
  var valid_21630275 = query.getOrDefault("Version")
  valid_21630275 = validateParameter(valid_21630275, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630275 != nil:
    section.add "Version", valid_21630275
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630276 = header.getOrDefault("X-Amz-Date")
  valid_21630276 = validateParameter(valid_21630276, JString, required = false,
                                   default = nil)
  if valid_21630276 != nil:
    section.add "X-Amz-Date", valid_21630276
  var valid_21630277 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630277 = validateParameter(valid_21630277, JString, required = false,
                                   default = nil)
  if valid_21630277 != nil:
    section.add "X-Amz-Security-Token", valid_21630277
  var valid_21630278 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630278 = validateParameter(valid_21630278, JString, required = false,
                                   default = nil)
  if valid_21630278 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630278
  var valid_21630279 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630279 = validateParameter(valid_21630279, JString, required = false,
                                   default = nil)
  if valid_21630279 != nil:
    section.add "X-Amz-Algorithm", valid_21630279
  var valid_21630280 = header.getOrDefault("X-Amz-Signature")
  valid_21630280 = validateParameter(valid_21630280, JString, required = false,
                                   default = nil)
  if valid_21630280 != nil:
    section.add "X-Amz-Signature", valid_21630280
  var valid_21630281 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630281 = validateParameter(valid_21630281, JString, required = false,
                                   default = nil)
  if valid_21630281 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630281
  var valid_21630282 = header.getOrDefault("X-Amz-Credential")
  valid_21630282 = validateParameter(valid_21630282, JString, required = false,
                                   default = nil)
  if valid_21630282 != nil:
    section.add "X-Amz-Credential", valid_21630282
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630283: Call_GetModifyDBSubnetGroup_21630268;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ## 
  let valid = call_21630283.validator(path, query, header, formData, body, _)
  let scheme = call_21630283.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630283.makeUrl(scheme.get, call_21630283.host, call_21630283.base,
                               call_21630283.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630283, uri, valid, _)

proc call*(call_21630284: Call_GetModifyDBSubnetGroup_21630268;
          DBSubnetGroupName: string; SubnetIds: JsonNode;
          Action: string = "ModifyDBSubnetGroup";
          DBSubnetGroupDescription: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getModifyDBSubnetGroup
  ## Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the AWS Region.
  ##   Action: string (required)
  ##   DBSubnetGroupName: string (required)
  ##                    : <p>The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group. </p> <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   SubnetIds: JArray (required)
  ##            : The EC2 subnet IDs for the DB subnet group.
  ##   DBSubnetGroupDescription: string
  ##                           : The description for the DB subnet group.
  ##   Version: string (required)
  var query_21630285 = newJObject()
  add(query_21630285, "Action", newJString(Action))
  add(query_21630285, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  if SubnetIds != nil:
    query_21630285.add "SubnetIds", SubnetIds
  add(query_21630285, "DBSubnetGroupDescription",
      newJString(DBSubnetGroupDescription))
  add(query_21630285, "Version", newJString(Version))
  result = call_21630284.call(nil, query_21630285, nil, nil, nil)

var getModifyDBSubnetGroup* = Call_GetModifyDBSubnetGroup_21630268(
    name: "getModifyDBSubnetGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyDBSubnetGroup",
    validator: validate_GetModifyDBSubnetGroup_21630269, base: "/",
    makeUrl: url_GetModifyDBSubnetGroup_21630270,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyEventSubscription_21630325 = ref object of OpenApiRestCall_21625435
proc url_PostModifyEventSubscription_21630327(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyEventSubscription_21630326(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630328 = query.getOrDefault("Action")
  valid_21630328 = validateParameter(valid_21630328, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_21630328 != nil:
    section.add "Action", valid_21630328
  var valid_21630329 = query.getOrDefault("Version")
  valid_21630329 = validateParameter(valid_21630329, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630329 != nil:
    section.add "Version", valid_21630329
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630330 = header.getOrDefault("X-Amz-Date")
  valid_21630330 = validateParameter(valid_21630330, JString, required = false,
                                   default = nil)
  if valid_21630330 != nil:
    section.add "X-Amz-Date", valid_21630330
  var valid_21630331 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630331 = validateParameter(valid_21630331, JString, required = false,
                                   default = nil)
  if valid_21630331 != nil:
    section.add "X-Amz-Security-Token", valid_21630331
  var valid_21630332 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630332 = validateParameter(valid_21630332, JString, required = false,
                                   default = nil)
  if valid_21630332 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630332
  var valid_21630333 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630333 = validateParameter(valid_21630333, JString, required = false,
                                   default = nil)
  if valid_21630333 != nil:
    section.add "X-Amz-Algorithm", valid_21630333
  var valid_21630334 = header.getOrDefault("X-Amz-Signature")
  valid_21630334 = validateParameter(valid_21630334, JString, required = false,
                                   default = nil)
  if valid_21630334 != nil:
    section.add "X-Amz-Signature", valid_21630334
  var valid_21630335 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630335 = validateParameter(valid_21630335, JString, required = false,
                                   default = nil)
  if valid_21630335 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630335
  var valid_21630336 = header.getOrDefault("X-Amz-Credential")
  valid_21630336 = validateParameter(valid_21630336, JString, required = false,
                                   default = nil)
  if valid_21630336 != nil:
    section.add "X-Amz-Credential", valid_21630336
  result.add "header", section
  ## parameters in `formData` object:
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription.
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  section = newJObject()
  var valid_21630337 = formData.getOrDefault("Enabled")
  valid_21630337 = validateParameter(valid_21630337, JBool, required = false,
                                   default = nil)
  if valid_21630337 != nil:
    section.add "Enabled", valid_21630337
  var valid_21630338 = formData.getOrDefault("EventCategories")
  valid_21630338 = validateParameter(valid_21630338, JArray, required = false,
                                   default = nil)
  if valid_21630338 != nil:
    section.add "EventCategories", valid_21630338
  var valid_21630339 = formData.getOrDefault("SnsTopicArn")
  valid_21630339 = validateParameter(valid_21630339, JString, required = false,
                                   default = nil)
  if valid_21630339 != nil:
    section.add "SnsTopicArn", valid_21630339
  assert formData != nil, "formData argument is necessary due to required `SubscriptionName` field"
  var valid_21630340 = formData.getOrDefault("SubscriptionName")
  valid_21630340 = validateParameter(valid_21630340, JString, required = true,
                                   default = nil)
  if valid_21630340 != nil:
    section.add "SubscriptionName", valid_21630340
  var valid_21630341 = formData.getOrDefault("SourceType")
  valid_21630341 = validateParameter(valid_21630341, JString, required = false,
                                   default = nil)
  if valid_21630341 != nil:
    section.add "SourceType", valid_21630341
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630342: Call_PostModifyEventSubscription_21630325;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_21630342.validator(path, query, header, formData, body, _)
  let scheme = call_21630342.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630342.makeUrl(scheme.get, call_21630342.host, call_21630342.base,
                               call_21630342.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630342, uri, valid, _)

proc call*(call_21630343: Call_PostModifyEventSubscription_21630325;
          SubscriptionName: string; Enabled: bool = false;
          EventCategories: JsonNode = nil; SnsTopicArn: string = "";
          Action: string = "ModifyEventSubscription";
          Version: string = "2014-10-31"; SourceType: string = ""): Recallable =
  ## postModifyEventSubscription
  ## <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  var query_21630344 = newJObject()
  var formData_21630345 = newJObject()
  add(formData_21630345, "Enabled", newJBool(Enabled))
  if EventCategories != nil:
    formData_21630345.add "EventCategories", EventCategories
  add(formData_21630345, "SnsTopicArn", newJString(SnsTopicArn))
  add(formData_21630345, "SubscriptionName", newJString(SubscriptionName))
  add(query_21630344, "Action", newJString(Action))
  add(query_21630344, "Version", newJString(Version))
  add(formData_21630345, "SourceType", newJString(SourceType))
  result = call_21630343.call(nil, query_21630344, nil, formData_21630345, nil)

var postModifyEventSubscription* = Call_PostModifyEventSubscription_21630325(
    name: "postModifyEventSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_PostModifyEventSubscription_21630326, base: "/",
    makeUrl: url_PostModifyEventSubscription_21630327,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyEventSubscription_21630305 = ref object of OpenApiRestCall_21625435
proc url_GetModifyEventSubscription_21630307(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyEventSubscription_21630306(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   SourceType: JString
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: JBool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   Action: JString (required)
  ##   SnsTopicArn: JString
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630308 = query.getOrDefault("SourceType")
  valid_21630308 = validateParameter(valid_21630308, JString, required = false,
                                   default = nil)
  if valid_21630308 != nil:
    section.add "SourceType", valid_21630308
  var valid_21630309 = query.getOrDefault("Enabled")
  valid_21630309 = validateParameter(valid_21630309, JBool, required = false,
                                   default = nil)
  if valid_21630309 != nil:
    section.add "Enabled", valid_21630309
  var valid_21630310 = query.getOrDefault("Action")
  valid_21630310 = validateParameter(valid_21630310, JString, required = true, default = newJString(
      "ModifyEventSubscription"))
  if valid_21630310 != nil:
    section.add "Action", valid_21630310
  var valid_21630311 = query.getOrDefault("SnsTopicArn")
  valid_21630311 = validateParameter(valid_21630311, JString, required = false,
                                   default = nil)
  if valid_21630311 != nil:
    section.add "SnsTopicArn", valid_21630311
  var valid_21630312 = query.getOrDefault("EventCategories")
  valid_21630312 = validateParameter(valid_21630312, JArray, required = false,
                                   default = nil)
  if valid_21630312 != nil:
    section.add "EventCategories", valid_21630312
  var valid_21630313 = query.getOrDefault("SubscriptionName")
  valid_21630313 = validateParameter(valid_21630313, JString, required = true,
                                   default = nil)
  if valid_21630313 != nil:
    section.add "SubscriptionName", valid_21630313
  var valid_21630314 = query.getOrDefault("Version")
  valid_21630314 = validateParameter(valid_21630314, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630314 != nil:
    section.add "Version", valid_21630314
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630315 = header.getOrDefault("X-Amz-Date")
  valid_21630315 = validateParameter(valid_21630315, JString, required = false,
                                   default = nil)
  if valid_21630315 != nil:
    section.add "X-Amz-Date", valid_21630315
  var valid_21630316 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630316 = validateParameter(valid_21630316, JString, required = false,
                                   default = nil)
  if valid_21630316 != nil:
    section.add "X-Amz-Security-Token", valid_21630316
  var valid_21630317 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630317 = validateParameter(valid_21630317, JString, required = false,
                                   default = nil)
  if valid_21630317 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630317
  var valid_21630318 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630318 = validateParameter(valid_21630318, JString, required = false,
                                   default = nil)
  if valid_21630318 != nil:
    section.add "X-Amz-Algorithm", valid_21630318
  var valid_21630319 = header.getOrDefault("X-Amz-Signature")
  valid_21630319 = validateParameter(valid_21630319, JString, required = false,
                                   default = nil)
  if valid_21630319 != nil:
    section.add "X-Amz-Signature", valid_21630319
  var valid_21630320 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630320 = validateParameter(valid_21630320, JString, required = false,
                                   default = nil)
  if valid_21630320 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630320
  var valid_21630321 = header.getOrDefault("X-Amz-Credential")
  valid_21630321 = validateParameter(valid_21630321, JString, required = false,
                                   default = nil)
  if valid_21630321 != nil:
    section.add "X-Amz-Credential", valid_21630321
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630322: Call_GetModifyEventSubscription_21630305;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ## 
  let valid = call_21630322.validator(path, query, header, formData, body, _)
  let scheme = call_21630322.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630322.makeUrl(scheme.get, call_21630322.host, call_21630322.base,
                               call_21630322.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630322, uri, valid, _)

proc call*(call_21630323: Call_GetModifyEventSubscription_21630305;
          SubscriptionName: string; SourceType: string = ""; Enabled: bool = false;
          Action: string = "ModifyEventSubscription"; SnsTopicArn: string = "";
          EventCategories: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getModifyEventSubscription
  ## <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p> <p>You can see a list of the event categories for a given SourceType in the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action.</p>
  ##   SourceType: string
  ##             : <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p> <p>Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot</p>
  ##   Enabled: bool
  ##          :  A value that indicates whether to activate the subscription. 
  ##   Action: string (required)
  ##   SnsTopicArn: string
  ##              : The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
  ##   EventCategories: JArray
  ##                  :  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> topic in the <i>Amazon RDS User Guide</i> or by using the <b>DescribeEventCategories</b> action. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription.
  ##   Version: string (required)
  var query_21630324 = newJObject()
  add(query_21630324, "SourceType", newJString(SourceType))
  add(query_21630324, "Enabled", newJBool(Enabled))
  add(query_21630324, "Action", newJString(Action))
  add(query_21630324, "SnsTopicArn", newJString(SnsTopicArn))
  if EventCategories != nil:
    query_21630324.add "EventCategories", EventCategories
  add(query_21630324, "SubscriptionName", newJString(SubscriptionName))
  add(query_21630324, "Version", newJString(Version))
  result = call_21630323.call(nil, query_21630324, nil, nil, nil)

var getModifyEventSubscription* = Call_GetModifyEventSubscription_21630305(
    name: "getModifyEventSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyEventSubscription",
    validator: validate_GetModifyEventSubscription_21630306, base: "/",
    makeUrl: url_GetModifyEventSubscription_21630307,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyGlobalCluster_21630364 = ref object of OpenApiRestCall_21625435
proc url_PostModifyGlobalCluster_21630366(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyGlobalCluster_21630365(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630367 = query.getOrDefault("Action")
  valid_21630367 = validateParameter(valid_21630367, JString, required = true,
                                   default = newJString("ModifyGlobalCluster"))
  if valid_21630367 != nil:
    section.add "Action", valid_21630367
  var valid_21630368 = query.getOrDefault("Version")
  valid_21630368 = validateParameter(valid_21630368, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630368 != nil:
    section.add "Version", valid_21630368
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630369 = header.getOrDefault("X-Amz-Date")
  valid_21630369 = validateParameter(valid_21630369, JString, required = false,
                                   default = nil)
  if valid_21630369 != nil:
    section.add "X-Amz-Date", valid_21630369
  var valid_21630370 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630370 = validateParameter(valid_21630370, JString, required = false,
                                   default = nil)
  if valid_21630370 != nil:
    section.add "X-Amz-Security-Token", valid_21630370
  var valid_21630371 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630371 = validateParameter(valid_21630371, JString, required = false,
                                   default = nil)
  if valid_21630371 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630371
  var valid_21630372 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630372 = validateParameter(valid_21630372, JString, required = false,
                                   default = nil)
  if valid_21630372 != nil:
    section.add "X-Amz-Algorithm", valid_21630372
  var valid_21630373 = header.getOrDefault("X-Amz-Signature")
  valid_21630373 = validateParameter(valid_21630373, JString, required = false,
                                   default = nil)
  if valid_21630373 != nil:
    section.add "X-Amz-Signature", valid_21630373
  var valid_21630374 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630374 = validateParameter(valid_21630374, JString, required = false,
                                   default = nil)
  if valid_21630374 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630374
  var valid_21630375 = header.getOrDefault("X-Amz-Credential")
  valid_21630375 = validateParameter(valid_21630375, JString, required = false,
                                   default = nil)
  if valid_21630375 != nil:
    section.add "X-Amz-Credential", valid_21630375
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   NewGlobalClusterIdentifier: JString
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  section = newJObject()
  var valid_21630376 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_21630376 = validateParameter(valid_21630376, JString, required = false,
                                   default = nil)
  if valid_21630376 != nil:
    section.add "GlobalClusterIdentifier", valid_21630376
  var valid_21630377 = formData.getOrDefault("DeletionProtection")
  valid_21630377 = validateParameter(valid_21630377, JBool, required = false,
                                   default = nil)
  if valid_21630377 != nil:
    section.add "DeletionProtection", valid_21630377
  var valid_21630378 = formData.getOrDefault("NewGlobalClusterIdentifier")
  valid_21630378 = validateParameter(valid_21630378, JString, required = false,
                                   default = nil)
  if valid_21630378 != nil:
    section.add "NewGlobalClusterIdentifier", valid_21630378
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630379: Call_PostModifyGlobalCluster_21630364;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21630379.validator(path, query, header, formData, body, _)
  let scheme = call_21630379.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630379.makeUrl(scheme.get, call_21630379.host, call_21630379.base,
                               call_21630379.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630379, uri, valid, _)

proc call*(call_21630380: Call_PostModifyGlobalCluster_21630364;
          GlobalClusterIdentifier: string = ""; DeletionProtection: bool = false;
          NewGlobalClusterIdentifier: string = "";
          Action: string = "ModifyGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## postModifyGlobalCluster
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   NewGlobalClusterIdentifier: string
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630381 = newJObject()
  var formData_21630382 = newJObject()
  add(formData_21630382, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_21630382, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_21630382, "NewGlobalClusterIdentifier",
      newJString(NewGlobalClusterIdentifier))
  add(query_21630381, "Action", newJString(Action))
  add(query_21630381, "Version", newJString(Version))
  result = call_21630380.call(nil, query_21630381, nil, formData_21630382, nil)

var postModifyGlobalCluster* = Call_PostModifyGlobalCluster_21630364(
    name: "postModifyGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyGlobalCluster",
    validator: validate_PostModifyGlobalCluster_21630365, base: "/",
    makeUrl: url_PostModifyGlobalCluster_21630366,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyGlobalCluster_21630346 = ref object of OpenApiRestCall_21625435
proc url_GetModifyGlobalCluster_21630348(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyGlobalCluster_21630347(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   NewGlobalClusterIdentifier: JString
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   DeletionProtection: JBool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   Action: JString (required)
  ##   GlobalClusterIdentifier: JString
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630349 = query.getOrDefault("NewGlobalClusterIdentifier")
  valid_21630349 = validateParameter(valid_21630349, JString, required = false,
                                   default = nil)
  if valid_21630349 != nil:
    section.add "NewGlobalClusterIdentifier", valid_21630349
  var valid_21630350 = query.getOrDefault("DeletionProtection")
  valid_21630350 = validateParameter(valid_21630350, JBool, required = false,
                                   default = nil)
  if valid_21630350 != nil:
    section.add "DeletionProtection", valid_21630350
  var valid_21630351 = query.getOrDefault("Action")
  valid_21630351 = validateParameter(valid_21630351, JString, required = true,
                                   default = newJString("ModifyGlobalCluster"))
  if valid_21630351 != nil:
    section.add "Action", valid_21630351
  var valid_21630352 = query.getOrDefault("GlobalClusterIdentifier")
  valid_21630352 = validateParameter(valid_21630352, JString, required = false,
                                   default = nil)
  if valid_21630352 != nil:
    section.add "GlobalClusterIdentifier", valid_21630352
  var valid_21630353 = query.getOrDefault("Version")
  valid_21630353 = validateParameter(valid_21630353, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630353 != nil:
    section.add "Version", valid_21630353
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630354 = header.getOrDefault("X-Amz-Date")
  valid_21630354 = validateParameter(valid_21630354, JString, required = false,
                                   default = nil)
  if valid_21630354 != nil:
    section.add "X-Amz-Date", valid_21630354
  var valid_21630355 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630355 = validateParameter(valid_21630355, JString, required = false,
                                   default = nil)
  if valid_21630355 != nil:
    section.add "X-Amz-Security-Token", valid_21630355
  var valid_21630356 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630356 = validateParameter(valid_21630356, JString, required = false,
                                   default = nil)
  if valid_21630356 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630356
  var valid_21630357 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630357 = validateParameter(valid_21630357, JString, required = false,
                                   default = nil)
  if valid_21630357 != nil:
    section.add "X-Amz-Algorithm", valid_21630357
  var valid_21630358 = header.getOrDefault("X-Amz-Signature")
  valid_21630358 = validateParameter(valid_21630358, JString, required = false,
                                   default = nil)
  if valid_21630358 != nil:
    section.add "X-Amz-Signature", valid_21630358
  var valid_21630359 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630359 = validateParameter(valid_21630359, JString, required = false,
                                   default = nil)
  if valid_21630359 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630359
  var valid_21630360 = header.getOrDefault("X-Amz-Credential")
  valid_21630360 = validateParameter(valid_21630360, JString, required = false,
                                   default = nil)
  if valid_21630360 != nil:
    section.add "X-Amz-Credential", valid_21630360
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630361: Call_GetModifyGlobalCluster_21630346;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21630361.validator(path, query, header, formData, body, _)
  let scheme = call_21630361.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630361.makeUrl(scheme.get, call_21630361.host, call_21630361.base,
                               call_21630361.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630361, uri, valid, _)

proc call*(call_21630362: Call_GetModifyGlobalCluster_21630346;
          NewGlobalClusterIdentifier: string = ""; DeletionProtection: bool = false;
          Action: string = "ModifyGlobalCluster";
          GlobalClusterIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getModifyGlobalCluster
  ## <p> Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   NewGlobalClusterIdentifier: string
  ##                             : <p> The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>The first character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-cluster2</code> </p>
  ##   DeletionProtection: bool
  ##                     :  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when deletion protection is enabled. 
  ##   Action: string (required)
  ##   GlobalClusterIdentifier: string
  ##                          : <p> The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing global database cluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_21630363 = newJObject()
  add(query_21630363, "NewGlobalClusterIdentifier",
      newJString(NewGlobalClusterIdentifier))
  add(query_21630363, "DeletionProtection", newJBool(DeletionProtection))
  add(query_21630363, "Action", newJString(Action))
  add(query_21630363, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_21630363, "Version", newJString(Version))
  result = call_21630362.call(nil, query_21630363, nil, nil, nil)

var getModifyGlobalCluster* = Call_GetModifyGlobalCluster_21630346(
    name: "getModifyGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyGlobalCluster",
    validator: validate_GetModifyGlobalCluster_21630347, base: "/",
    makeUrl: url_GetModifyGlobalCluster_21630348,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostModifyOptionGroup_21630402 = ref object of OpenApiRestCall_21625435
proc url_PostModifyOptionGroup_21630404(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostModifyOptionGroup_21630403(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630405 = query.getOrDefault("Action")
  valid_21630405 = validateParameter(valid_21630405, JString, required = true,
                                   default = newJString("ModifyOptionGroup"))
  if valid_21630405 != nil:
    section.add "Action", valid_21630405
  var valid_21630406 = query.getOrDefault("Version")
  valid_21630406 = validateParameter(valid_21630406, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630406 != nil:
    section.add "Version", valid_21630406
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630407 = header.getOrDefault("X-Amz-Date")
  valid_21630407 = validateParameter(valid_21630407, JString, required = false,
                                   default = nil)
  if valid_21630407 != nil:
    section.add "X-Amz-Date", valid_21630407
  var valid_21630408 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630408 = validateParameter(valid_21630408, JString, required = false,
                                   default = nil)
  if valid_21630408 != nil:
    section.add "X-Amz-Security-Token", valid_21630408
  var valid_21630409 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630409 = validateParameter(valid_21630409, JString, required = false,
                                   default = nil)
  if valid_21630409 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630409
  var valid_21630410 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630410 = validateParameter(valid_21630410, JString, required = false,
                                   default = nil)
  if valid_21630410 != nil:
    section.add "X-Amz-Algorithm", valid_21630410
  var valid_21630411 = header.getOrDefault("X-Amz-Signature")
  valid_21630411 = validateParameter(valid_21630411, JString, required = false,
                                   default = nil)
  if valid_21630411 != nil:
    section.add "X-Amz-Signature", valid_21630411
  var valid_21630412 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630412 = validateParameter(valid_21630412, JString, required = false,
                                   default = nil)
  if valid_21630412 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630412
  var valid_21630413 = header.getOrDefault("X-Amz-Credential")
  valid_21630413 = validateParameter(valid_21630413, JString, required = false,
                                   default = nil)
  if valid_21630413 != nil:
    section.add "X-Amz-Credential", valid_21630413
  result.add "header", section
  ## parameters in `formData` object:
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   ApplyImmediately: JBool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  section = newJObject()
  var valid_21630414 = formData.getOrDefault("OptionsToRemove")
  valid_21630414 = validateParameter(valid_21630414, JArray, required = false,
                                   default = nil)
  if valid_21630414 != nil:
    section.add "OptionsToRemove", valid_21630414
  var valid_21630415 = formData.getOrDefault("ApplyImmediately")
  valid_21630415 = validateParameter(valid_21630415, JBool, required = false,
                                   default = nil)
  if valid_21630415 != nil:
    section.add "ApplyImmediately", valid_21630415
  assert formData != nil, "formData argument is necessary due to required `OptionGroupName` field"
  var valid_21630416 = formData.getOrDefault("OptionGroupName")
  valid_21630416 = validateParameter(valid_21630416, JString, required = true,
                                   default = nil)
  if valid_21630416 != nil:
    section.add "OptionGroupName", valid_21630416
  var valid_21630417 = formData.getOrDefault("OptionsToInclude")
  valid_21630417 = validateParameter(valid_21630417, JArray, required = false,
                                   default = nil)
  if valid_21630417 != nil:
    section.add "OptionsToInclude", valid_21630417
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630418: Call_PostModifyOptionGroup_21630402;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies an existing option group.
  ## 
  let valid = call_21630418.validator(path, query, header, formData, body, _)
  let scheme = call_21630418.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630418.makeUrl(scheme.get, call_21630418.host, call_21630418.base,
                               call_21630418.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630418, uri, valid, _)

proc call*(call_21630419: Call_PostModifyOptionGroup_21630402;
          OptionGroupName: string; OptionsToRemove: JsonNode = nil;
          ApplyImmediately: bool = false; OptionsToInclude: JsonNode = nil;
          Action: string = "ModifyOptionGroup"; Version: string = "2014-10-31"): Recallable =
  ## postModifyOptionGroup
  ## Modifies an existing option group.
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   ApplyImmediately: bool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630420 = newJObject()
  var formData_21630421 = newJObject()
  if OptionsToRemove != nil:
    formData_21630421.add "OptionsToRemove", OptionsToRemove
  add(formData_21630421, "ApplyImmediately", newJBool(ApplyImmediately))
  add(formData_21630421, "OptionGroupName", newJString(OptionGroupName))
  if OptionsToInclude != nil:
    formData_21630421.add "OptionsToInclude", OptionsToInclude
  add(query_21630420, "Action", newJString(Action))
  add(query_21630420, "Version", newJString(Version))
  result = call_21630419.call(nil, query_21630420, nil, formData_21630421, nil)

var postModifyOptionGroup* = Call_PostModifyOptionGroup_21630402(
    name: "postModifyOptionGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ModifyOptionGroup",
    validator: validate_PostModifyOptionGroup_21630403, base: "/",
    makeUrl: url_PostModifyOptionGroup_21630404,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetModifyOptionGroup_21630383 = ref object of OpenApiRestCall_21625435
proc url_GetModifyOptionGroup_21630385(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetModifyOptionGroup_21630384(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies an existing option group.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   OptionGroupName: JString (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `OptionGroupName` field"
  var valid_21630386 = query.getOrDefault("OptionGroupName")
  valid_21630386 = validateParameter(valid_21630386, JString, required = true,
                                   default = nil)
  if valid_21630386 != nil:
    section.add "OptionGroupName", valid_21630386
  var valid_21630387 = query.getOrDefault("OptionsToRemove")
  valid_21630387 = validateParameter(valid_21630387, JArray, required = false,
                                   default = nil)
  if valid_21630387 != nil:
    section.add "OptionsToRemove", valid_21630387
  var valid_21630388 = query.getOrDefault("Action")
  valid_21630388 = validateParameter(valid_21630388, JString, required = true,
                                   default = newJString("ModifyOptionGroup"))
  if valid_21630388 != nil:
    section.add "Action", valid_21630388
  var valid_21630389 = query.getOrDefault("Version")
  valid_21630389 = validateParameter(valid_21630389, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630389 != nil:
    section.add "Version", valid_21630389
  var valid_21630390 = query.getOrDefault("ApplyImmediately")
  valid_21630390 = validateParameter(valid_21630390, JBool, required = false,
                                   default = nil)
  if valid_21630390 != nil:
    section.add "ApplyImmediately", valid_21630390
  var valid_21630391 = query.getOrDefault("OptionsToInclude")
  valid_21630391 = validateParameter(valid_21630391, JArray, required = false,
                                   default = nil)
  if valid_21630391 != nil:
    section.add "OptionsToInclude", valid_21630391
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630392 = header.getOrDefault("X-Amz-Date")
  valid_21630392 = validateParameter(valid_21630392, JString, required = false,
                                   default = nil)
  if valid_21630392 != nil:
    section.add "X-Amz-Date", valid_21630392
  var valid_21630393 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630393 = validateParameter(valid_21630393, JString, required = false,
                                   default = nil)
  if valid_21630393 != nil:
    section.add "X-Amz-Security-Token", valid_21630393
  var valid_21630394 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630394 = validateParameter(valid_21630394, JString, required = false,
                                   default = nil)
  if valid_21630394 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630394
  var valid_21630395 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630395 = validateParameter(valid_21630395, JString, required = false,
                                   default = nil)
  if valid_21630395 != nil:
    section.add "X-Amz-Algorithm", valid_21630395
  var valid_21630396 = header.getOrDefault("X-Amz-Signature")
  valid_21630396 = validateParameter(valid_21630396, JString, required = false,
                                   default = nil)
  if valid_21630396 != nil:
    section.add "X-Amz-Signature", valid_21630396
  var valid_21630397 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630397 = validateParameter(valid_21630397, JString, required = false,
                                   default = nil)
  if valid_21630397 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630397
  var valid_21630398 = header.getOrDefault("X-Amz-Credential")
  valid_21630398 = validateParameter(valid_21630398, JString, required = false,
                                   default = nil)
  if valid_21630398 != nil:
    section.add "X-Amz-Credential", valid_21630398
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630399: Call_GetModifyOptionGroup_21630383; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies an existing option group.
  ## 
  let valid = call_21630399.validator(path, query, header, formData, body, _)
  let scheme = call_21630399.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630399.makeUrl(scheme.get, call_21630399.host, call_21630399.base,
                               call_21630399.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630399, uri, valid, _)

proc call*(call_21630400: Call_GetModifyOptionGroup_21630383;
          OptionGroupName: string; OptionsToRemove: JsonNode = nil;
          Action: string = "ModifyOptionGroup"; Version: string = "2014-10-31";
          ApplyImmediately: bool = false; OptionsToInclude: JsonNode = nil): Recallable =
  ## getModifyOptionGroup
  ## Modifies an existing option group.
  ##   OptionGroupName: string (required)
  ##                  : <p>The name of the option group to be modified.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   OptionsToRemove: JArray
  ##                  : Options in this list are removed from the option group.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ApplyImmediately: bool
  ##                   : A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.
  ##   OptionsToInclude: JArray
  ##                   : Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
  var query_21630401 = newJObject()
  add(query_21630401, "OptionGroupName", newJString(OptionGroupName))
  if OptionsToRemove != nil:
    query_21630401.add "OptionsToRemove", OptionsToRemove
  add(query_21630401, "Action", newJString(Action))
  add(query_21630401, "Version", newJString(Version))
  add(query_21630401, "ApplyImmediately", newJBool(ApplyImmediately))
  if OptionsToInclude != nil:
    query_21630401.add "OptionsToInclude", OptionsToInclude
  result = call_21630400.call(nil, query_21630401, nil, nil, nil)

var getModifyOptionGroup* = Call_GetModifyOptionGroup_21630383(
    name: "getModifyOptionGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ModifyOptionGroup",
    validator: validate_GetModifyOptionGroup_21630384, base: "/",
    makeUrl: url_GetModifyOptionGroup_21630385,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplica_21630440 = ref object of OpenApiRestCall_21625435
proc url_PostPromoteReadReplica_21630442(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPromoteReadReplica_21630441(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630443 = query.getOrDefault("Action")
  valid_21630443 = validateParameter(valid_21630443, JString, required = true,
                                   default = newJString("PromoteReadReplica"))
  if valid_21630443 != nil:
    section.add "Action", valid_21630443
  var valid_21630444 = query.getOrDefault("Version")
  valid_21630444 = validateParameter(valid_21630444, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630444 != nil:
    section.add "Version", valid_21630444
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630445 = header.getOrDefault("X-Amz-Date")
  valid_21630445 = validateParameter(valid_21630445, JString, required = false,
                                   default = nil)
  if valid_21630445 != nil:
    section.add "X-Amz-Date", valid_21630445
  var valid_21630446 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630446 = validateParameter(valid_21630446, JString, required = false,
                                   default = nil)
  if valid_21630446 != nil:
    section.add "X-Amz-Security-Token", valid_21630446
  var valid_21630447 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630447 = validateParameter(valid_21630447, JString, required = false,
                                   default = nil)
  if valid_21630447 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630447
  var valid_21630448 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630448 = validateParameter(valid_21630448, JString, required = false,
                                   default = nil)
  if valid_21630448 != nil:
    section.add "X-Amz-Algorithm", valid_21630448
  var valid_21630449 = header.getOrDefault("X-Amz-Signature")
  valid_21630449 = validateParameter(valid_21630449, JString, required = false,
                                   default = nil)
  if valid_21630449 != nil:
    section.add "X-Amz-Signature", valid_21630449
  var valid_21630450 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630450 = validateParameter(valid_21630450, JString, required = false,
                                   default = nil)
  if valid_21630450 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630450
  var valid_21630451 = header.getOrDefault("X-Amz-Credential")
  valid_21630451 = validateParameter(valid_21630451, JString, required = false,
                                   default = nil)
  if valid_21630451 != nil:
    section.add "X-Amz-Credential", valid_21630451
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_21630452 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21630452 = validateParameter(valid_21630452, JString, required = true,
                                   default = nil)
  if valid_21630452 != nil:
    section.add "DBInstanceIdentifier", valid_21630452
  var valid_21630453 = formData.getOrDefault("BackupRetentionPeriod")
  valid_21630453 = validateParameter(valid_21630453, JInt, required = false,
                                   default = nil)
  if valid_21630453 != nil:
    section.add "BackupRetentionPeriod", valid_21630453
  var valid_21630454 = formData.getOrDefault("PreferredBackupWindow")
  valid_21630454 = validateParameter(valid_21630454, JString, required = false,
                                   default = nil)
  if valid_21630454 != nil:
    section.add "PreferredBackupWindow", valid_21630454
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630455: Call_PostPromoteReadReplica_21630440;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  let valid = call_21630455.validator(path, query, header, formData, body, _)
  let scheme = call_21630455.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630455.makeUrl(scheme.get, call_21630455.host, call_21630455.base,
                               call_21630455.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630455, uri, valid, _)

proc call*(call_21630456: Call_PostPromoteReadReplica_21630440;
          DBInstanceIdentifier: string; BackupRetentionPeriod: int = 0;
          Action: string = "PromoteReadReplica"; PreferredBackupWindow: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplica
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  var query_21630457 = newJObject()
  var formData_21630458 = newJObject()
  add(formData_21630458, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_21630458, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_21630457, "Action", newJString(Action))
  add(formData_21630458, "PreferredBackupWindow",
      newJString(PreferredBackupWindow))
  add(query_21630457, "Version", newJString(Version))
  result = call_21630456.call(nil, query_21630457, nil, formData_21630458, nil)

var postPromoteReadReplica* = Call_PostPromoteReadReplica_21630440(
    name: "postPromoteReadReplica", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplica",
    validator: validate_PostPromoteReadReplica_21630441, base: "/",
    makeUrl: url_PostPromoteReadReplica_21630442,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplica_21630422 = ref object of OpenApiRestCall_21625435
proc url_GetPromoteReadReplica_21630424(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPromoteReadReplica_21630423(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: JString (required)
  ##   PreferredBackupWindow: JString
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  section = newJObject()
  var valid_21630425 = query.getOrDefault("BackupRetentionPeriod")
  valid_21630425 = validateParameter(valid_21630425, JInt, required = false,
                                   default = nil)
  if valid_21630425 != nil:
    section.add "BackupRetentionPeriod", valid_21630425
  var valid_21630426 = query.getOrDefault("Action")
  valid_21630426 = validateParameter(valid_21630426, JString, required = true,
                                   default = newJString("PromoteReadReplica"))
  if valid_21630426 != nil:
    section.add "Action", valid_21630426
  var valid_21630427 = query.getOrDefault("PreferredBackupWindow")
  valid_21630427 = validateParameter(valid_21630427, JString, required = false,
                                   default = nil)
  if valid_21630427 != nil:
    section.add "PreferredBackupWindow", valid_21630427
  var valid_21630428 = query.getOrDefault("Version")
  valid_21630428 = validateParameter(valid_21630428, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630428 != nil:
    section.add "Version", valid_21630428
  var valid_21630429 = query.getOrDefault("DBInstanceIdentifier")
  valid_21630429 = validateParameter(valid_21630429, JString, required = true,
                                   default = nil)
  if valid_21630429 != nil:
    section.add "DBInstanceIdentifier", valid_21630429
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630430 = header.getOrDefault("X-Amz-Date")
  valid_21630430 = validateParameter(valid_21630430, JString, required = false,
                                   default = nil)
  if valid_21630430 != nil:
    section.add "X-Amz-Date", valid_21630430
  var valid_21630431 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630431 = validateParameter(valid_21630431, JString, required = false,
                                   default = nil)
  if valid_21630431 != nil:
    section.add "X-Amz-Security-Token", valid_21630431
  var valid_21630432 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630432 = validateParameter(valid_21630432, JString, required = false,
                                   default = nil)
  if valid_21630432 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630432
  var valid_21630433 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630433 = validateParameter(valid_21630433, JString, required = false,
                                   default = nil)
  if valid_21630433 != nil:
    section.add "X-Amz-Algorithm", valid_21630433
  var valid_21630434 = header.getOrDefault("X-Amz-Signature")
  valid_21630434 = validateParameter(valid_21630434, JString, required = false,
                                   default = nil)
  if valid_21630434 != nil:
    section.add "X-Amz-Signature", valid_21630434
  var valid_21630435 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630435 = validateParameter(valid_21630435, JString, required = false,
                                   default = nil)
  if valid_21630435 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630435
  var valid_21630436 = header.getOrDefault("X-Amz-Credential")
  valid_21630436 = validateParameter(valid_21630436, JString, required = false,
                                   default = nil)
  if valid_21630436 != nil:
    section.add "X-Amz-Credential", valid_21630436
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630437: Call_GetPromoteReadReplica_21630422;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ## 
  let valid = call_21630437.validator(path, query, header, formData, body, _)
  let scheme = call_21630437.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630437.makeUrl(scheme.get, call_21630437.host, call_21630437.base,
                               call_21630437.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630437, uri, valid, _)

proc call*(call_21630438: Call_GetPromoteReadReplica_21630422;
          DBInstanceIdentifier: string; BackupRetentionPeriod: int = 0;
          Action: string = "PromoteReadReplica"; PreferredBackupWindow: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getPromoteReadReplica
  ## <p>Promotes a Read Replica DB instance to a standalone DB instance.</p> <note> <ul> <li> <p>Backup duration is a function of the amount of changes to the database since the previous backup. If you plan to promote a Read Replica to a standalone instance, we recommend that you enable backups and complete at least one backup prior to promotion. In addition, a Read Replica cannot be promoted to a standalone instance when it is in the <code>backing-up</code> status. If you have enabled backups on your Read Replica, configure the automated backup window so that daily backups do not interfere with Read Replica promotion.</p> </li> <li> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL.</p> </li> </ul> </note>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 0 to 35.</p> </li> <li> <p>Can't be set to 0 if the DB instance is a source to Read Replicas.</p> </li> </ul>
  ##   Action: string (required)
  ##   PreferredBackupWindow: string
  ##                        : <p> The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. </p> <p> The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This value is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Read Replica DB instance.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  var query_21630439 = newJObject()
  add(query_21630439, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_21630439, "Action", newJString(Action))
  add(query_21630439, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_21630439, "Version", newJString(Version))
  add(query_21630439, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_21630438.call(nil, query_21630439, nil, nil, nil)

var getPromoteReadReplica* = Call_GetPromoteReadReplica_21630422(
    name: "getPromoteReadReplica", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplica",
    validator: validate_GetPromoteReadReplica_21630423, base: "/",
    makeUrl: url_GetPromoteReadReplica_21630424,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPromoteReadReplicaDBCluster_21630475 = ref object of OpenApiRestCall_21625435
proc url_PostPromoteReadReplicaDBCluster_21630477(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPromoteReadReplicaDBCluster_21630476(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630478 = query.getOrDefault("Action")
  valid_21630478 = validateParameter(valid_21630478, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_21630478 != nil:
    section.add "Action", valid_21630478
  var valid_21630479 = query.getOrDefault("Version")
  valid_21630479 = validateParameter(valid_21630479, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630479 != nil:
    section.add "Version", valid_21630479
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630480 = header.getOrDefault("X-Amz-Date")
  valid_21630480 = validateParameter(valid_21630480, JString, required = false,
                                   default = nil)
  if valid_21630480 != nil:
    section.add "X-Amz-Date", valid_21630480
  var valid_21630481 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630481 = validateParameter(valid_21630481, JString, required = false,
                                   default = nil)
  if valid_21630481 != nil:
    section.add "X-Amz-Security-Token", valid_21630481
  var valid_21630482 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630482 = validateParameter(valid_21630482, JString, required = false,
                                   default = nil)
  if valid_21630482 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630482
  var valid_21630483 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630483 = validateParameter(valid_21630483, JString, required = false,
                                   default = nil)
  if valid_21630483 != nil:
    section.add "X-Amz-Algorithm", valid_21630483
  var valid_21630484 = header.getOrDefault("X-Amz-Signature")
  valid_21630484 = validateParameter(valid_21630484, JString, required = false,
                                   default = nil)
  if valid_21630484 != nil:
    section.add "X-Amz-Signature", valid_21630484
  var valid_21630485 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630485 = validateParameter(valid_21630485, JString, required = false,
                                   default = nil)
  if valid_21630485 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630485
  var valid_21630486 = header.getOrDefault("X-Amz-Credential")
  valid_21630486 = validateParameter(valid_21630486, JString, required = false,
                                   default = nil)
  if valid_21630486 != nil:
    section.add "X-Amz-Credential", valid_21630486
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21630487 = formData.getOrDefault("DBClusterIdentifier")
  valid_21630487 = validateParameter(valid_21630487, JString, required = true,
                                   default = nil)
  if valid_21630487 != nil:
    section.add "DBClusterIdentifier", valid_21630487
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630488: Call_PostPromoteReadReplicaDBCluster_21630475;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21630488.validator(path, query, header, formData, body, _)
  let scheme = call_21630488.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630488.makeUrl(scheme.get, call_21630488.host, call_21630488.base,
                               call_21630488.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630488, uri, valid, _)

proc call*(call_21630489: Call_PostPromoteReadReplicaDBCluster_21630475;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postPromoteReadReplicaDBCluster
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Version: string (required)
  var query_21630490 = newJObject()
  var formData_21630491 = newJObject()
  add(query_21630490, "Action", newJString(Action))
  add(formData_21630491, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21630490, "Version", newJString(Version))
  result = call_21630489.call(nil, query_21630490, nil, formData_21630491, nil)

var postPromoteReadReplicaDBCluster* = Call_PostPromoteReadReplicaDBCluster_21630475(
    name: "postPromoteReadReplicaDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_PostPromoteReadReplicaDBCluster_21630476, base: "/",
    makeUrl: url_PostPromoteReadReplicaDBCluster_21630477,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPromoteReadReplicaDBCluster_21630459 = ref object of OpenApiRestCall_21625435
proc url_GetPromoteReadReplicaDBCluster_21630461(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPromoteReadReplicaDBCluster_21630460(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21630462 = query.getOrDefault("DBClusterIdentifier")
  valid_21630462 = validateParameter(valid_21630462, JString, required = true,
                                   default = nil)
  if valid_21630462 != nil:
    section.add "DBClusterIdentifier", valid_21630462
  var valid_21630463 = query.getOrDefault("Action")
  valid_21630463 = validateParameter(valid_21630463, JString, required = true, default = newJString(
      "PromoteReadReplicaDBCluster"))
  if valid_21630463 != nil:
    section.add "Action", valid_21630463
  var valid_21630464 = query.getOrDefault("Version")
  valid_21630464 = validateParameter(valid_21630464, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630464 != nil:
    section.add "Version", valid_21630464
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630465 = header.getOrDefault("X-Amz-Date")
  valid_21630465 = validateParameter(valid_21630465, JString, required = false,
                                   default = nil)
  if valid_21630465 != nil:
    section.add "X-Amz-Date", valid_21630465
  var valid_21630466 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630466 = validateParameter(valid_21630466, JString, required = false,
                                   default = nil)
  if valid_21630466 != nil:
    section.add "X-Amz-Security-Token", valid_21630466
  var valid_21630467 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630467 = validateParameter(valid_21630467, JString, required = false,
                                   default = nil)
  if valid_21630467 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630467
  var valid_21630468 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630468 = validateParameter(valid_21630468, JString, required = false,
                                   default = nil)
  if valid_21630468 != nil:
    section.add "X-Amz-Algorithm", valid_21630468
  var valid_21630469 = header.getOrDefault("X-Amz-Signature")
  valid_21630469 = validateParameter(valid_21630469, JString, required = false,
                                   default = nil)
  if valid_21630469 != nil:
    section.add "X-Amz-Signature", valid_21630469
  var valid_21630470 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630470 = validateParameter(valid_21630470, JString, required = false,
                                   default = nil)
  if valid_21630470 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630470
  var valid_21630471 = header.getOrDefault("X-Amz-Credential")
  valid_21630471 = validateParameter(valid_21630471, JString, required = false,
                                   default = nil)
  if valid_21630471 != nil:
    section.add "X-Amz-Credential", valid_21630471
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630472: Call_GetPromoteReadReplicaDBCluster_21630459;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21630472.validator(path, query, header, formData, body, _)
  let scheme = call_21630472.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630472.makeUrl(scheme.get, call_21630472.host, call_21630472.base,
                               call_21630472.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630472, uri, valid, _)

proc call*(call_21630473: Call_GetPromoteReadReplicaDBCluster_21630459;
          DBClusterIdentifier: string;
          Action: string = "PromoteReadReplicaDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getPromoteReadReplicaDBCluster
  ## <p>Promotes a Read Replica DB cluster to a standalone DB cluster.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The identifier of the DB cluster Read Replica to promote. This parameter isn't case-sensitive. </p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster Read Replica.</p> </li> </ul> <p>Example: <code>my-cluster-replica1</code> </p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630474 = newJObject()
  add(query_21630474, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21630474, "Action", newJString(Action))
  add(query_21630474, "Version", newJString(Version))
  result = call_21630473.call(nil, query_21630474, nil, nil, nil)

var getPromoteReadReplicaDBCluster* = Call_GetPromoteReadReplicaDBCluster_21630459(
    name: "getPromoteReadReplicaDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=PromoteReadReplicaDBCluster",
    validator: validate_GetPromoteReadReplicaDBCluster_21630460, base: "/",
    makeUrl: url_GetPromoteReadReplicaDBCluster_21630461,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostPurchaseReservedDBInstancesOffering_21630511 = ref object of OpenApiRestCall_21625435
proc url_PostPurchaseReservedDBInstancesOffering_21630513(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostPurchaseReservedDBInstancesOffering_21630512(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Purchases a reserved DB instance offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630514 = query.getOrDefault("Action")
  valid_21630514 = validateParameter(valid_21630514, JString, required = true, default = newJString(
      "PurchaseReservedDBInstancesOffering"))
  if valid_21630514 != nil:
    section.add "Action", valid_21630514
  var valid_21630515 = query.getOrDefault("Version")
  valid_21630515 = validateParameter(valid_21630515, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630515 != nil:
    section.add "Version", valid_21630515
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630516 = header.getOrDefault("X-Amz-Date")
  valid_21630516 = validateParameter(valid_21630516, JString, required = false,
                                   default = nil)
  if valid_21630516 != nil:
    section.add "X-Amz-Date", valid_21630516
  var valid_21630517 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630517 = validateParameter(valid_21630517, JString, required = false,
                                   default = nil)
  if valid_21630517 != nil:
    section.add "X-Amz-Security-Token", valid_21630517
  var valid_21630518 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630518 = validateParameter(valid_21630518, JString, required = false,
                                   default = nil)
  if valid_21630518 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630518
  var valid_21630519 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630519 = validateParameter(valid_21630519, JString, required = false,
                                   default = nil)
  if valid_21630519 != nil:
    section.add "X-Amz-Algorithm", valid_21630519
  var valid_21630520 = header.getOrDefault("X-Amz-Signature")
  valid_21630520 = validateParameter(valid_21630520, JString, required = false,
                                   default = nil)
  if valid_21630520 != nil:
    section.add "X-Amz-Signature", valid_21630520
  var valid_21630521 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630521 = validateParameter(valid_21630521, JString, required = false,
                                   default = nil)
  if valid_21630521 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630521
  var valid_21630522 = header.getOrDefault("X-Amz-Credential")
  valid_21630522 = validateParameter(valid_21630522, JString, required = false,
                                   default = nil)
  if valid_21630522 != nil:
    section.add "X-Amz-Credential", valid_21630522
  result.add "header", section
  ## parameters in `formData` object:
  ##   ReservedDBInstanceId: JString
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceCount: JInt
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   ReservedDBInstancesOfferingId: JString (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  section = newJObject()
  var valid_21630523 = formData.getOrDefault("ReservedDBInstanceId")
  valid_21630523 = validateParameter(valid_21630523, JString, required = false,
                                   default = nil)
  if valid_21630523 != nil:
    section.add "ReservedDBInstanceId", valid_21630523
  var valid_21630524 = formData.getOrDefault("Tags")
  valid_21630524 = validateParameter(valid_21630524, JArray, required = false,
                                   default = nil)
  if valid_21630524 != nil:
    section.add "Tags", valid_21630524
  var valid_21630525 = formData.getOrDefault("DBInstanceCount")
  valid_21630525 = validateParameter(valid_21630525, JInt, required = false,
                                   default = nil)
  if valid_21630525 != nil:
    section.add "DBInstanceCount", valid_21630525
  assert formData != nil, "formData argument is necessary due to required `ReservedDBInstancesOfferingId` field"
  var valid_21630526 = formData.getOrDefault("ReservedDBInstancesOfferingId")
  valid_21630526 = validateParameter(valid_21630526, JString, required = true,
                                   default = nil)
  if valid_21630526 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_21630526
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630527: Call_PostPurchaseReservedDBInstancesOffering_21630511;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Purchases a reserved DB instance offering.
  ## 
  let valid = call_21630527.validator(path, query, header, formData, body, _)
  let scheme = call_21630527.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630527.makeUrl(scheme.get, call_21630527.host, call_21630527.base,
                               call_21630527.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630527, uri, valid, _)

proc call*(call_21630528: Call_PostPurchaseReservedDBInstancesOffering_21630511;
          ReservedDBInstancesOfferingId: string;
          ReservedDBInstanceId: string = ""; Tags: JsonNode = nil;
          DBInstanceCount: int = 0;
          Action: string = "PurchaseReservedDBInstancesOffering";
          Version: string = "2014-10-31"): Recallable =
  ## postPurchaseReservedDBInstancesOffering
  ## Purchases a reserved DB instance offering.
  ##   ReservedDBInstanceId: string
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBInstanceCount: int
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Action: string (required)
  ##   ReservedDBInstancesOfferingId: string (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Version: string (required)
  var query_21630529 = newJObject()
  var formData_21630530 = newJObject()
  add(formData_21630530, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  if Tags != nil:
    formData_21630530.add "Tags", Tags
  add(formData_21630530, "DBInstanceCount", newJInt(DBInstanceCount))
  add(query_21630529, "Action", newJString(Action))
  add(formData_21630530, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_21630529, "Version", newJString(Version))
  result = call_21630528.call(nil, query_21630529, nil, formData_21630530, nil)

var postPurchaseReservedDBInstancesOffering* = Call_PostPurchaseReservedDBInstancesOffering_21630511(
    name: "postPurchaseReservedDBInstancesOffering", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=PurchaseReservedDBInstancesOffering",
    validator: validate_PostPurchaseReservedDBInstancesOffering_21630512,
    base: "/", makeUrl: url_PostPurchaseReservedDBInstancesOffering_21630513,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetPurchaseReservedDBInstancesOffering_21630492 = ref object of OpenApiRestCall_21625435
proc url_GetPurchaseReservedDBInstancesOffering_21630494(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetPurchaseReservedDBInstancesOffering_21630493(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Purchases a reserved DB instance offering.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBInstanceCount: JInt
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ReservedDBInstanceId: JString
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   ReservedDBInstancesOfferingId: JString (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630495 = query.getOrDefault("DBInstanceCount")
  valid_21630495 = validateParameter(valid_21630495, JInt, required = false,
                                   default = nil)
  if valid_21630495 != nil:
    section.add "DBInstanceCount", valid_21630495
  var valid_21630496 = query.getOrDefault("Tags")
  valid_21630496 = validateParameter(valid_21630496, JArray, required = false,
                                   default = nil)
  if valid_21630496 != nil:
    section.add "Tags", valid_21630496
  var valid_21630497 = query.getOrDefault("ReservedDBInstanceId")
  valid_21630497 = validateParameter(valid_21630497, JString, required = false,
                                   default = nil)
  if valid_21630497 != nil:
    section.add "ReservedDBInstanceId", valid_21630497
  assert query != nil, "query argument is necessary due to required `ReservedDBInstancesOfferingId` field"
  var valid_21630498 = query.getOrDefault("ReservedDBInstancesOfferingId")
  valid_21630498 = validateParameter(valid_21630498, JString, required = true,
                                   default = nil)
  if valid_21630498 != nil:
    section.add "ReservedDBInstancesOfferingId", valid_21630498
  var valid_21630499 = query.getOrDefault("Action")
  valid_21630499 = validateParameter(valid_21630499, JString, required = true, default = newJString(
      "PurchaseReservedDBInstancesOffering"))
  if valid_21630499 != nil:
    section.add "Action", valid_21630499
  var valid_21630500 = query.getOrDefault("Version")
  valid_21630500 = validateParameter(valid_21630500, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630500 != nil:
    section.add "Version", valid_21630500
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630501 = header.getOrDefault("X-Amz-Date")
  valid_21630501 = validateParameter(valid_21630501, JString, required = false,
                                   default = nil)
  if valid_21630501 != nil:
    section.add "X-Amz-Date", valid_21630501
  var valid_21630502 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630502 = validateParameter(valid_21630502, JString, required = false,
                                   default = nil)
  if valid_21630502 != nil:
    section.add "X-Amz-Security-Token", valid_21630502
  var valid_21630503 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630503 = validateParameter(valid_21630503, JString, required = false,
                                   default = nil)
  if valid_21630503 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630503
  var valid_21630504 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630504 = validateParameter(valid_21630504, JString, required = false,
                                   default = nil)
  if valid_21630504 != nil:
    section.add "X-Amz-Algorithm", valid_21630504
  var valid_21630505 = header.getOrDefault("X-Amz-Signature")
  valid_21630505 = validateParameter(valid_21630505, JString, required = false,
                                   default = nil)
  if valid_21630505 != nil:
    section.add "X-Amz-Signature", valid_21630505
  var valid_21630506 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630506 = validateParameter(valid_21630506, JString, required = false,
                                   default = nil)
  if valid_21630506 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630506
  var valid_21630507 = header.getOrDefault("X-Amz-Credential")
  valid_21630507 = validateParameter(valid_21630507, JString, required = false,
                                   default = nil)
  if valid_21630507 != nil:
    section.add "X-Amz-Credential", valid_21630507
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630508: Call_GetPurchaseReservedDBInstancesOffering_21630492;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Purchases a reserved DB instance offering.
  ## 
  let valid = call_21630508.validator(path, query, header, formData, body, _)
  let scheme = call_21630508.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630508.makeUrl(scheme.get, call_21630508.host, call_21630508.base,
                               call_21630508.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630508, uri, valid, _)

proc call*(call_21630509: Call_GetPurchaseReservedDBInstancesOffering_21630492;
          ReservedDBInstancesOfferingId: string; DBInstanceCount: int = 0;
          Tags: JsonNode = nil; ReservedDBInstanceId: string = "";
          Action: string = "PurchaseReservedDBInstancesOffering";
          Version: string = "2014-10-31"): Recallable =
  ## getPurchaseReservedDBInstancesOffering
  ## Purchases a reserved DB instance offering.
  ##   DBInstanceCount: int
  ##                  : <p>The number of instances to reserve.</p> <p>Default: <code>1</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ReservedDBInstanceId: string
  ##                       : <p>Customer-specified identifier to track this reservation.</p> <p>Example: myreservationID</p>
  ##   ReservedDBInstancesOfferingId: string (required)
  ##                                : <p>The ID of the Reserved DB instance offering to purchase.</p> <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630510 = newJObject()
  add(query_21630510, "DBInstanceCount", newJInt(DBInstanceCount))
  if Tags != nil:
    query_21630510.add "Tags", Tags
  add(query_21630510, "ReservedDBInstanceId", newJString(ReservedDBInstanceId))
  add(query_21630510, "ReservedDBInstancesOfferingId",
      newJString(ReservedDBInstancesOfferingId))
  add(query_21630510, "Action", newJString(Action))
  add(query_21630510, "Version", newJString(Version))
  result = call_21630509.call(nil, query_21630510, nil, nil, nil)

var getPurchaseReservedDBInstancesOffering* = Call_GetPurchaseReservedDBInstancesOffering_21630492(
    name: "getPurchaseReservedDBInstancesOffering", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=PurchaseReservedDBInstancesOffering",
    validator: validate_GetPurchaseReservedDBInstancesOffering_21630493,
    base: "/", makeUrl: url_GetPurchaseReservedDBInstancesOffering_21630494,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRebootDBInstance_21630548 = ref object of OpenApiRestCall_21625435
proc url_PostRebootDBInstance_21630550(protocol: Scheme; host: string; base: string;
                                      route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRebootDBInstance_21630549(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630551 = query.getOrDefault("Action")
  valid_21630551 = validateParameter(valid_21630551, JString, required = true,
                                   default = newJString("RebootDBInstance"))
  if valid_21630551 != nil:
    section.add "Action", valid_21630551
  var valid_21630552 = query.getOrDefault("Version")
  valid_21630552 = validateParameter(valid_21630552, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630552 != nil:
    section.add "Version", valid_21630552
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630553 = header.getOrDefault("X-Amz-Date")
  valid_21630553 = validateParameter(valid_21630553, JString, required = false,
                                   default = nil)
  if valid_21630553 != nil:
    section.add "X-Amz-Date", valid_21630553
  var valid_21630554 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630554 = validateParameter(valid_21630554, JString, required = false,
                                   default = nil)
  if valid_21630554 != nil:
    section.add "X-Amz-Security-Token", valid_21630554
  var valid_21630555 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630555 = validateParameter(valid_21630555, JString, required = false,
                                   default = nil)
  if valid_21630555 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630555
  var valid_21630556 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630556 = validateParameter(valid_21630556, JString, required = false,
                                   default = nil)
  if valid_21630556 != nil:
    section.add "X-Amz-Algorithm", valid_21630556
  var valid_21630557 = header.getOrDefault("X-Amz-Signature")
  valid_21630557 = validateParameter(valid_21630557, JString, required = false,
                                   default = nil)
  if valid_21630557 != nil:
    section.add "X-Amz-Signature", valid_21630557
  var valid_21630558 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630558 = validateParameter(valid_21630558, JString, required = false,
                                   default = nil)
  if valid_21630558 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630558
  var valid_21630559 = header.getOrDefault("X-Amz-Credential")
  valid_21630559 = validateParameter(valid_21630559, JString, required = false,
                                   default = nil)
  if valid_21630559 != nil:
    section.add "X-Amz-Credential", valid_21630559
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   ForceFailover: JBool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_21630560 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21630560 = validateParameter(valid_21630560, JString, required = true,
                                   default = nil)
  if valid_21630560 != nil:
    section.add "DBInstanceIdentifier", valid_21630560
  var valid_21630561 = formData.getOrDefault("ForceFailover")
  valid_21630561 = validateParameter(valid_21630561, JBool, required = false,
                                   default = nil)
  if valid_21630561 != nil:
    section.add "ForceFailover", valid_21630561
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630562: Call_PostRebootDBInstance_21630548; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_21630562.validator(path, query, header, formData, body, _)
  let scheme = call_21630562.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630562.makeUrl(scheme.get, call_21630562.host, call_21630562.base,
                               call_21630562.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630562, uri, valid, _)

proc call*(call_21630563: Call_PostRebootDBInstance_21630548;
          DBInstanceIdentifier: string; Action: string = "RebootDBInstance";
          ForceFailover: bool = false; Version: string = "2014-10-31"): Recallable =
  ## postRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  ##   Action: string (required)
  ##   ForceFailover: bool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   Version: string (required)
  var query_21630564 = newJObject()
  var formData_21630565 = newJObject()
  add(formData_21630565, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_21630564, "Action", newJString(Action))
  add(formData_21630565, "ForceFailover", newJBool(ForceFailover))
  add(query_21630564, "Version", newJString(Version))
  result = call_21630563.call(nil, query_21630564, nil, formData_21630565, nil)

var postRebootDBInstance* = Call_PostRebootDBInstance_21630548(
    name: "postRebootDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_PostRebootDBInstance_21630549, base: "/",
    makeUrl: url_PostRebootDBInstance_21630550,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRebootDBInstance_21630531 = ref object of OpenApiRestCall_21625435
proc url_GetRebootDBInstance_21630533(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRebootDBInstance_21630532(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   ForceFailover: JBool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  section = newJObject()
  var valid_21630534 = query.getOrDefault("Action")
  valid_21630534 = validateParameter(valid_21630534, JString, required = true,
                                   default = newJString("RebootDBInstance"))
  if valid_21630534 != nil:
    section.add "Action", valid_21630534
  var valid_21630535 = query.getOrDefault("ForceFailover")
  valid_21630535 = validateParameter(valid_21630535, JBool, required = false,
                                   default = nil)
  if valid_21630535 != nil:
    section.add "ForceFailover", valid_21630535
  var valid_21630536 = query.getOrDefault("Version")
  valid_21630536 = validateParameter(valid_21630536, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630536 != nil:
    section.add "Version", valid_21630536
  var valid_21630537 = query.getOrDefault("DBInstanceIdentifier")
  valid_21630537 = validateParameter(valid_21630537, JString, required = true,
                                   default = nil)
  if valid_21630537 != nil:
    section.add "DBInstanceIdentifier", valid_21630537
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630538 = header.getOrDefault("X-Amz-Date")
  valid_21630538 = validateParameter(valid_21630538, JString, required = false,
                                   default = nil)
  if valid_21630538 != nil:
    section.add "X-Amz-Date", valid_21630538
  var valid_21630539 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630539 = validateParameter(valid_21630539, JString, required = false,
                                   default = nil)
  if valid_21630539 != nil:
    section.add "X-Amz-Security-Token", valid_21630539
  var valid_21630540 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630540 = validateParameter(valid_21630540, JString, required = false,
                                   default = nil)
  if valid_21630540 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630540
  var valid_21630541 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630541 = validateParameter(valid_21630541, JString, required = false,
                                   default = nil)
  if valid_21630541 != nil:
    section.add "X-Amz-Algorithm", valid_21630541
  var valid_21630542 = header.getOrDefault("X-Amz-Signature")
  valid_21630542 = validateParameter(valid_21630542, JString, required = false,
                                   default = nil)
  if valid_21630542 != nil:
    section.add "X-Amz-Signature", valid_21630542
  var valid_21630543 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630543 = validateParameter(valid_21630543, JString, required = false,
                                   default = nil)
  if valid_21630543 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630543
  var valid_21630544 = header.getOrDefault("X-Amz-Credential")
  valid_21630544 = validateParameter(valid_21630544, JString, required = false,
                                   default = nil)
  if valid_21630544 != nil:
    section.add "X-Amz-Credential", valid_21630544
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630545: Call_GetRebootDBInstance_21630531; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_21630545.validator(path, query, header, formData, body, _)
  let scheme = call_21630545.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630545.makeUrl(scheme.get, call_21630545.host, call_21630545.base,
                               call_21630545.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630545, uri, valid, _)

proc call*(call_21630546: Call_GetRebootDBInstance_21630531;
          DBInstanceIdentifier: string; Action: string = "RebootDBInstance";
          ForceFailover: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getRebootDBInstance
  ## <p>You might need to reboot your DB instance, usually for maintenance reasons. For example, if you make certain modifications, or if you change the DB parameter group associated with the DB instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting a DB instance restarts the database engine service. Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting. </p> <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   ForceFailover: bool
  ##                : <p> A value that indicates whether the reboot is conducted through a Multi-AZ failover. </p> <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBInstance.</p> </li> </ul>
  var query_21630547 = newJObject()
  add(query_21630547, "Action", newJString(Action))
  add(query_21630547, "ForceFailover", newJBool(ForceFailover))
  add(query_21630547, "Version", newJString(Version))
  add(query_21630547, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_21630546.call(nil, query_21630547, nil, nil, nil)

var getRebootDBInstance* = Call_GetRebootDBInstance_21630531(
    name: "getRebootDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RebootDBInstance",
    validator: validate_GetRebootDBInstance_21630532, base: "/",
    makeUrl: url_GetRebootDBInstance_21630533,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRegisterDBProxyTargets_21630585 = ref object of OpenApiRestCall_21625435
proc url_PostRegisterDBProxyTargets_21630587(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRegisterDBProxyTargets_21630586(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630588 = query.getOrDefault("Action")
  valid_21630588 = validateParameter(valid_21630588, JString, required = true, default = newJString(
      "RegisterDBProxyTargets"))
  if valid_21630588 != nil:
    section.add "Action", valid_21630588
  var valid_21630589 = query.getOrDefault("Version")
  valid_21630589 = validateParameter(valid_21630589, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630589 != nil:
    section.add "Version", valid_21630589
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630590 = header.getOrDefault("X-Amz-Date")
  valid_21630590 = validateParameter(valid_21630590, JString, required = false,
                                   default = nil)
  if valid_21630590 != nil:
    section.add "X-Amz-Date", valid_21630590
  var valid_21630591 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630591 = validateParameter(valid_21630591, JString, required = false,
                                   default = nil)
  if valid_21630591 != nil:
    section.add "X-Amz-Security-Token", valid_21630591
  var valid_21630592 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630592 = validateParameter(valid_21630592, JString, required = false,
                                   default = nil)
  if valid_21630592 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630592
  var valid_21630593 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630593 = validateParameter(valid_21630593, JString, required = false,
                                   default = nil)
  if valid_21630593 != nil:
    section.add "X-Amz-Algorithm", valid_21630593
  var valid_21630594 = header.getOrDefault("X-Amz-Signature")
  valid_21630594 = validateParameter(valid_21630594, JString, required = false,
                                   default = nil)
  if valid_21630594 != nil:
    section.add "X-Amz-Signature", valid_21630594
  var valid_21630595 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630595 = validateParameter(valid_21630595, JString, required = false,
                                   default = nil)
  if valid_21630595 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630595
  var valid_21630596 = header.getOrDefault("X-Amz-Credential")
  valid_21630596 = validateParameter(valid_21630596, JString, required = false,
                                   default = nil)
  if valid_21630596 != nil:
    section.add "X-Amz-Credential", valid_21630596
  result.add "header", section
  ## parameters in `formData` object:
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  section = newJObject()
  var valid_21630597 = formData.getOrDefault("TargetGroupName")
  valid_21630597 = validateParameter(valid_21630597, JString, required = false,
                                   default = nil)
  if valid_21630597 != nil:
    section.add "TargetGroupName", valid_21630597
  var valid_21630598 = formData.getOrDefault("DBClusterIdentifiers")
  valid_21630598 = validateParameter(valid_21630598, JArray, required = false,
                                   default = nil)
  if valid_21630598 != nil:
    section.add "DBClusterIdentifiers", valid_21630598
  assert formData != nil,
        "formData argument is necessary due to required `DBProxyName` field"
  var valid_21630599 = formData.getOrDefault("DBProxyName")
  valid_21630599 = validateParameter(valid_21630599, JString, required = true,
                                   default = nil)
  if valid_21630599 != nil:
    section.add "DBProxyName", valid_21630599
  var valid_21630600 = formData.getOrDefault("DBInstanceIdentifiers")
  valid_21630600 = validateParameter(valid_21630600, JArray, required = false,
                                   default = nil)
  if valid_21630600 != nil:
    section.add "DBInstanceIdentifiers", valid_21630600
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630601: Call_PostRegisterDBProxyTargets_21630585;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_21630601.validator(path, query, header, formData, body, _)
  let scheme = call_21630601.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630601.makeUrl(scheme.get, call_21630601.host, call_21630601.base,
                               call_21630601.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630601, uri, valid, _)

proc call*(call_21630602: Call_PostRegisterDBProxyTargets_21630585;
          DBProxyName: string; Action: string = "RegisterDBProxyTargets";
          TargetGroupName: string = ""; DBClusterIdentifiers: JsonNode = nil;
          Version: string = "2014-10-31"; DBInstanceIdentifiers: JsonNode = nil): Recallable =
  ## postRegisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ##   Action: string (required)
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  ##   Version: string (required)
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  var query_21630603 = newJObject()
  var formData_21630604 = newJObject()
  add(query_21630603, "Action", newJString(Action))
  add(formData_21630604, "TargetGroupName", newJString(TargetGroupName))
  if DBClusterIdentifiers != nil:
    formData_21630604.add "DBClusterIdentifiers", DBClusterIdentifiers
  add(formData_21630604, "DBProxyName", newJString(DBProxyName))
  add(query_21630603, "Version", newJString(Version))
  if DBInstanceIdentifiers != nil:
    formData_21630604.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  result = call_21630602.call(nil, query_21630603, nil, formData_21630604, nil)

var postRegisterDBProxyTargets* = Call_PostRegisterDBProxyTargets_21630585(
    name: "postRegisterDBProxyTargets", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RegisterDBProxyTargets",
    validator: validate_PostRegisterDBProxyTargets_21630586, base: "/",
    makeUrl: url_PostRegisterDBProxyTargets_21630587,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRegisterDBProxyTargets_21630566 = ref object of OpenApiRestCall_21625435
proc url_GetRegisterDBProxyTargets_21630568(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRegisterDBProxyTargets_21630567(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   TargetGroupName: JString
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   Action: JString (required)
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: JString (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630569 = query.getOrDefault("TargetGroupName")
  valid_21630569 = validateParameter(valid_21630569, JString, required = false,
                                   default = nil)
  if valid_21630569 != nil:
    section.add "TargetGroupName", valid_21630569
  var valid_21630570 = query.getOrDefault("DBInstanceIdentifiers")
  valid_21630570 = validateParameter(valid_21630570, JArray, required = false,
                                   default = nil)
  if valid_21630570 != nil:
    section.add "DBInstanceIdentifiers", valid_21630570
  var valid_21630571 = query.getOrDefault("Action")
  valid_21630571 = validateParameter(valid_21630571, JString, required = true, default = newJString(
      "RegisterDBProxyTargets"))
  if valid_21630571 != nil:
    section.add "Action", valid_21630571
  var valid_21630572 = query.getOrDefault("DBClusterIdentifiers")
  valid_21630572 = validateParameter(valid_21630572, JArray, required = false,
                                   default = nil)
  if valid_21630572 != nil:
    section.add "DBClusterIdentifiers", valid_21630572
  var valid_21630573 = query.getOrDefault("DBProxyName")
  valid_21630573 = validateParameter(valid_21630573, JString, required = true,
                                   default = nil)
  if valid_21630573 != nil:
    section.add "DBProxyName", valid_21630573
  var valid_21630574 = query.getOrDefault("Version")
  valid_21630574 = validateParameter(valid_21630574, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630574 != nil:
    section.add "Version", valid_21630574
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630575 = header.getOrDefault("X-Amz-Date")
  valid_21630575 = validateParameter(valid_21630575, JString, required = false,
                                   default = nil)
  if valid_21630575 != nil:
    section.add "X-Amz-Date", valid_21630575
  var valid_21630576 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630576 = validateParameter(valid_21630576, JString, required = false,
                                   default = nil)
  if valid_21630576 != nil:
    section.add "X-Amz-Security-Token", valid_21630576
  var valid_21630577 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630577 = validateParameter(valid_21630577, JString, required = false,
                                   default = nil)
  if valid_21630577 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630577
  var valid_21630578 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630578 = validateParameter(valid_21630578, JString, required = false,
                                   default = nil)
  if valid_21630578 != nil:
    section.add "X-Amz-Algorithm", valid_21630578
  var valid_21630579 = header.getOrDefault("X-Amz-Signature")
  valid_21630579 = validateParameter(valid_21630579, JString, required = false,
                                   default = nil)
  if valid_21630579 != nil:
    section.add "X-Amz-Signature", valid_21630579
  var valid_21630580 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630580 = validateParameter(valid_21630580, JString, required = false,
                                   default = nil)
  if valid_21630580 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630580
  var valid_21630581 = header.getOrDefault("X-Amz-Credential")
  valid_21630581 = validateParameter(valid_21630581, JString, required = false,
                                   default = nil)
  if valid_21630581 != nil:
    section.add "X-Amz-Credential", valid_21630581
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630582: Call_GetRegisterDBProxyTargets_21630566;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ## 
  let valid = call_21630582.validator(path, query, header, formData, body, _)
  let scheme = call_21630582.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630582.makeUrl(scheme.get, call_21630582.host, call_21630582.base,
                               call_21630582.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630582, uri, valid, _)

proc call*(call_21630583: Call_GetRegisterDBProxyTargets_21630566;
          DBProxyName: string; TargetGroupName: string = "";
          DBInstanceIdentifiers: JsonNode = nil;
          Action: string = "RegisterDBProxyTargets";
          DBClusterIdentifiers: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## getRegisterDBProxyTargets
  ## <note> <p>This is prerelease documentation for the RDS Database Proxy feature in preview release. It is subject to change.</p> </note> <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
  ##   TargetGroupName: string
  ##                  : The identifier of the <code>DBProxyTargetGroup</code>.
  ##   DBInstanceIdentifiers: JArray
  ##                        : One or more DB instance identifiers.
  ##   Action: string (required)
  ##   DBClusterIdentifiers: JArray
  ##                       : One or more DB cluster identifiers.
  ##   DBProxyName: string (required)
  ##              : The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.
  ##   Version: string (required)
  var query_21630584 = newJObject()
  add(query_21630584, "TargetGroupName", newJString(TargetGroupName))
  if DBInstanceIdentifiers != nil:
    query_21630584.add "DBInstanceIdentifiers", DBInstanceIdentifiers
  add(query_21630584, "Action", newJString(Action))
  if DBClusterIdentifiers != nil:
    query_21630584.add "DBClusterIdentifiers", DBClusterIdentifiers
  add(query_21630584, "DBProxyName", newJString(DBProxyName))
  add(query_21630584, "Version", newJString(Version))
  result = call_21630583.call(nil, query_21630584, nil, nil, nil)

var getRegisterDBProxyTargets* = Call_GetRegisterDBProxyTargets_21630566(
    name: "getRegisterDBProxyTargets", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RegisterDBProxyTargets",
    validator: validate_GetRegisterDBProxyTargets_21630567, base: "/",
    makeUrl: url_GetRegisterDBProxyTargets_21630568,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveFromGlobalCluster_21630622 = ref object of OpenApiRestCall_21625435
proc url_PostRemoveFromGlobalCluster_21630624(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveFromGlobalCluster_21630623(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630625 = query.getOrDefault("Action")
  valid_21630625 = validateParameter(valid_21630625, JString, required = true, default = newJString(
      "RemoveFromGlobalCluster"))
  if valid_21630625 != nil:
    section.add "Action", valid_21630625
  var valid_21630626 = query.getOrDefault("Version")
  valid_21630626 = validateParameter(valid_21630626, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630626 != nil:
    section.add "Version", valid_21630626
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630627 = header.getOrDefault("X-Amz-Date")
  valid_21630627 = validateParameter(valid_21630627, JString, required = false,
                                   default = nil)
  if valid_21630627 != nil:
    section.add "X-Amz-Date", valid_21630627
  var valid_21630628 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630628 = validateParameter(valid_21630628, JString, required = false,
                                   default = nil)
  if valid_21630628 != nil:
    section.add "X-Amz-Security-Token", valid_21630628
  var valid_21630629 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630629 = validateParameter(valid_21630629, JString, required = false,
                                   default = nil)
  if valid_21630629 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630629
  var valid_21630630 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630630 = validateParameter(valid_21630630, JString, required = false,
                                   default = nil)
  if valid_21630630 != nil:
    section.add "X-Amz-Algorithm", valid_21630630
  var valid_21630631 = header.getOrDefault("X-Amz-Signature")
  valid_21630631 = validateParameter(valid_21630631, JString, required = false,
                                   default = nil)
  if valid_21630631 != nil:
    section.add "X-Amz-Signature", valid_21630631
  var valid_21630632 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630632 = validateParameter(valid_21630632, JString, required = false,
                                   default = nil)
  if valid_21630632 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630632
  var valid_21630633 = header.getOrDefault("X-Amz-Credential")
  valid_21630633 = validateParameter(valid_21630633, JString, required = false,
                                   default = nil)
  if valid_21630633 != nil:
    section.add "X-Amz-Credential", valid_21630633
  result.add "header", section
  ## parameters in `formData` object:
  ##   GlobalClusterIdentifier: JString
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: JString
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  section = newJObject()
  var valid_21630634 = formData.getOrDefault("GlobalClusterIdentifier")
  valid_21630634 = validateParameter(valid_21630634, JString, required = false,
                                   default = nil)
  if valid_21630634 != nil:
    section.add "GlobalClusterIdentifier", valid_21630634
  var valid_21630635 = formData.getOrDefault("DbClusterIdentifier")
  valid_21630635 = validateParameter(valid_21630635, JString, required = false,
                                   default = nil)
  if valid_21630635 != nil:
    section.add "DbClusterIdentifier", valid_21630635
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630636: Call_PostRemoveFromGlobalCluster_21630622;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21630636.validator(path, query, header, formData, body, _)
  let scheme = call_21630636.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630636.makeUrl(scheme.get, call_21630636.host, call_21630636.base,
                               call_21630636.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630636, uri, valid, _)

proc call*(call_21630637: Call_PostRemoveFromGlobalCluster_21630622;
          GlobalClusterIdentifier: string = ""; DbClusterIdentifier: string = "";
          Action: string = "RemoveFromGlobalCluster"; Version: string = "2014-10-31"): Recallable =
  ## postRemoveFromGlobalCluster
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   GlobalClusterIdentifier: string
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   DbClusterIdentifier: string
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630638 = newJObject()
  var formData_21630639 = newJObject()
  add(formData_21630639, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(formData_21630639, "DbClusterIdentifier", newJString(DbClusterIdentifier))
  add(query_21630638, "Action", newJString(Action))
  add(query_21630638, "Version", newJString(Version))
  result = call_21630637.call(nil, query_21630638, nil, formData_21630639, nil)

var postRemoveFromGlobalCluster* = Call_PostRemoveFromGlobalCluster_21630622(
    name: "postRemoveFromGlobalCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveFromGlobalCluster",
    validator: validate_PostRemoveFromGlobalCluster_21630623, base: "/",
    makeUrl: url_PostRemoveFromGlobalCluster_21630624,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveFromGlobalCluster_21630605 = ref object of OpenApiRestCall_21625435
proc url_GetRemoveFromGlobalCluster_21630607(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveFromGlobalCluster_21630606(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DbClusterIdentifier: JString
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: JString (required)
  ##   GlobalClusterIdentifier: JString
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630608 = query.getOrDefault("DbClusterIdentifier")
  valid_21630608 = validateParameter(valid_21630608, JString, required = false,
                                   default = nil)
  if valid_21630608 != nil:
    section.add "DbClusterIdentifier", valid_21630608
  var valid_21630609 = query.getOrDefault("Action")
  valid_21630609 = validateParameter(valid_21630609, JString, required = true, default = newJString(
      "RemoveFromGlobalCluster"))
  if valid_21630609 != nil:
    section.add "Action", valid_21630609
  var valid_21630610 = query.getOrDefault("GlobalClusterIdentifier")
  valid_21630610 = validateParameter(valid_21630610, JString, required = false,
                                   default = nil)
  if valid_21630610 != nil:
    section.add "GlobalClusterIdentifier", valid_21630610
  var valid_21630611 = query.getOrDefault("Version")
  valid_21630611 = validateParameter(valid_21630611, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630611 != nil:
    section.add "Version", valid_21630611
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630612 = header.getOrDefault("X-Amz-Date")
  valid_21630612 = validateParameter(valid_21630612, JString, required = false,
                                   default = nil)
  if valid_21630612 != nil:
    section.add "X-Amz-Date", valid_21630612
  var valid_21630613 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630613 = validateParameter(valid_21630613, JString, required = false,
                                   default = nil)
  if valid_21630613 != nil:
    section.add "X-Amz-Security-Token", valid_21630613
  var valid_21630614 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630614 = validateParameter(valid_21630614, JString, required = false,
                                   default = nil)
  if valid_21630614 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630614
  var valid_21630615 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630615 = validateParameter(valid_21630615, JString, required = false,
                                   default = nil)
  if valid_21630615 != nil:
    section.add "X-Amz-Algorithm", valid_21630615
  var valid_21630616 = header.getOrDefault("X-Amz-Signature")
  valid_21630616 = validateParameter(valid_21630616, JString, required = false,
                                   default = nil)
  if valid_21630616 != nil:
    section.add "X-Amz-Signature", valid_21630616
  var valid_21630617 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630617 = validateParameter(valid_21630617, JString, required = false,
                                   default = nil)
  if valid_21630617 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630617
  var valid_21630618 = header.getOrDefault("X-Amz-Credential")
  valid_21630618 = validateParameter(valid_21630618, JString, required = false,
                                   default = nil)
  if valid_21630618 != nil:
    section.add "X-Amz-Credential", valid_21630618
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630619: Call_GetRemoveFromGlobalCluster_21630605;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21630619.validator(path, query, header, formData, body, _)
  let scheme = call_21630619.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630619.makeUrl(scheme.get, call_21630619.host, call_21630619.base,
                               call_21630619.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630619, uri, valid, _)

proc call*(call_21630620: Call_GetRemoveFromGlobalCluster_21630605;
          DbClusterIdentifier: string = "";
          Action: string = "RemoveFromGlobalCluster";
          GlobalClusterIdentifier: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRemoveFromGlobalCluster
  ## <p> Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary cluster in a different region. </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DbClusterIdentifier: string
  ##                      :  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
  ##   Action: string (required)
  ##   GlobalClusterIdentifier: string
  ##                          :  The cluster identifier to detach from the Aurora global database cluster. 
  ##   Version: string (required)
  var query_21630621 = newJObject()
  add(query_21630621, "DbClusterIdentifier", newJString(DbClusterIdentifier))
  add(query_21630621, "Action", newJString(Action))
  add(query_21630621, "GlobalClusterIdentifier",
      newJString(GlobalClusterIdentifier))
  add(query_21630621, "Version", newJString(Version))
  result = call_21630620.call(nil, query_21630621, nil, nil, nil)

var getRemoveFromGlobalCluster* = Call_GetRemoveFromGlobalCluster_21630605(
    name: "getRemoveFromGlobalCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveFromGlobalCluster",
    validator: validate_GetRemoveFromGlobalCluster_21630606, base: "/",
    makeUrl: url_GetRemoveFromGlobalCluster_21630607,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBCluster_21630658 = ref object of OpenApiRestCall_21625435
proc url_PostRemoveRoleFromDBCluster_21630660(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveRoleFromDBCluster_21630659(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630661 = query.getOrDefault("Action")
  valid_21630661 = validateParameter(valid_21630661, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_21630661 != nil:
    section.add "Action", valid_21630661
  var valid_21630662 = query.getOrDefault("Version")
  valid_21630662 = validateParameter(valid_21630662, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630662 != nil:
    section.add "Version", valid_21630662
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630663 = header.getOrDefault("X-Amz-Date")
  valid_21630663 = validateParameter(valid_21630663, JString, required = false,
                                   default = nil)
  if valid_21630663 != nil:
    section.add "X-Amz-Date", valid_21630663
  var valid_21630664 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630664 = validateParameter(valid_21630664, JString, required = false,
                                   default = nil)
  if valid_21630664 != nil:
    section.add "X-Amz-Security-Token", valid_21630664
  var valid_21630665 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630665 = validateParameter(valid_21630665, JString, required = false,
                                   default = nil)
  if valid_21630665 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630665
  var valid_21630666 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630666 = validateParameter(valid_21630666, JString, required = false,
                                   default = nil)
  if valid_21630666 != nil:
    section.add "X-Amz-Algorithm", valid_21630666
  var valid_21630667 = header.getOrDefault("X-Amz-Signature")
  valid_21630667 = validateParameter(valid_21630667, JString, required = false,
                                   default = nil)
  if valid_21630667 != nil:
    section.add "X-Amz-Signature", valid_21630667
  var valid_21630668 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630668 = validateParameter(valid_21630668, JString, required = false,
                                   default = nil)
  if valid_21630668 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630668
  var valid_21630669 = header.getOrDefault("X-Amz-Credential")
  valid_21630669 = validateParameter(valid_21630669, JString, required = false,
                                   default = nil)
  if valid_21630669 != nil:
    section.add "X-Amz-Credential", valid_21630669
  result.add "header", section
  ## parameters in `formData` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `RoleArn` field"
  var valid_21630670 = formData.getOrDefault("RoleArn")
  valid_21630670 = validateParameter(valid_21630670, JString, required = true,
                                   default = nil)
  if valid_21630670 != nil:
    section.add "RoleArn", valid_21630670
  var valid_21630671 = formData.getOrDefault("DBClusterIdentifier")
  valid_21630671 = validateParameter(valid_21630671, JString, required = true,
                                   default = nil)
  if valid_21630671 != nil:
    section.add "DBClusterIdentifier", valid_21630671
  var valid_21630672 = formData.getOrDefault("FeatureName")
  valid_21630672 = validateParameter(valid_21630672, JString, required = false,
                                   default = nil)
  if valid_21630672 != nil:
    section.add "FeatureName", valid_21630672
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630673: Call_PostRemoveRoleFromDBCluster_21630658;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21630673.validator(path, query, header, formData, body, _)
  let scheme = call_21630673.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630673.makeUrl(scheme.get, call_21630673.host, call_21630673.base,
                               call_21630673.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630673, uri, valid, _)

proc call*(call_21630674: Call_PostRemoveRoleFromDBCluster_21630658;
          RoleArn: string; DBClusterIdentifier: string;
          Action: string = "RemoveRoleFromDBCluster";
          Version: string = "2014-10-31"; FeatureName: string = ""): Recallable =
  ## postRemoveRoleFromDBCluster
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   Version: string (required)
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  var query_21630675 = newJObject()
  var formData_21630676 = newJObject()
  add(formData_21630676, "RoleArn", newJString(RoleArn))
  add(query_21630675, "Action", newJString(Action))
  add(formData_21630676, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21630675, "Version", newJString(Version))
  add(formData_21630676, "FeatureName", newJString(FeatureName))
  result = call_21630674.call(nil, query_21630675, nil, formData_21630676, nil)

var postRemoveRoleFromDBCluster* = Call_PostRemoveRoleFromDBCluster_21630658(
    name: "postRemoveRoleFromDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_PostRemoveRoleFromDBCluster_21630659, base: "/",
    makeUrl: url_PostRemoveRoleFromDBCluster_21630660,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBCluster_21630640 = ref object of OpenApiRestCall_21625435
proc url_GetRemoveRoleFromDBCluster_21630642(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveRoleFromDBCluster_21630641(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: JString (required)
  ##   FeatureName: JString
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21630643 = query.getOrDefault("DBClusterIdentifier")
  valid_21630643 = validateParameter(valid_21630643, JString, required = true,
                                   default = nil)
  if valid_21630643 != nil:
    section.add "DBClusterIdentifier", valid_21630643
  var valid_21630644 = query.getOrDefault("RoleArn")
  valid_21630644 = validateParameter(valid_21630644, JString, required = true,
                                   default = nil)
  if valid_21630644 != nil:
    section.add "RoleArn", valid_21630644
  var valid_21630645 = query.getOrDefault("Action")
  valid_21630645 = validateParameter(valid_21630645, JString, required = true, default = newJString(
      "RemoveRoleFromDBCluster"))
  if valid_21630645 != nil:
    section.add "Action", valid_21630645
  var valid_21630646 = query.getOrDefault("FeatureName")
  valid_21630646 = validateParameter(valid_21630646, JString, required = false,
                                   default = nil)
  if valid_21630646 != nil:
    section.add "FeatureName", valid_21630646
  var valid_21630647 = query.getOrDefault("Version")
  valid_21630647 = validateParameter(valid_21630647, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630647 != nil:
    section.add "Version", valid_21630647
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630648 = header.getOrDefault("X-Amz-Date")
  valid_21630648 = validateParameter(valid_21630648, JString, required = false,
                                   default = nil)
  if valid_21630648 != nil:
    section.add "X-Amz-Date", valid_21630648
  var valid_21630649 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630649 = validateParameter(valid_21630649, JString, required = false,
                                   default = nil)
  if valid_21630649 != nil:
    section.add "X-Amz-Security-Token", valid_21630649
  var valid_21630650 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630650 = validateParameter(valid_21630650, JString, required = false,
                                   default = nil)
  if valid_21630650 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630650
  var valid_21630651 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630651 = validateParameter(valid_21630651, JString, required = false,
                                   default = nil)
  if valid_21630651 != nil:
    section.add "X-Amz-Algorithm", valid_21630651
  var valid_21630652 = header.getOrDefault("X-Amz-Signature")
  valid_21630652 = validateParameter(valid_21630652, JString, required = false,
                                   default = nil)
  if valid_21630652 != nil:
    section.add "X-Amz-Signature", valid_21630652
  var valid_21630653 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630653 = validateParameter(valid_21630653, JString, required = false,
                                   default = nil)
  if valid_21630653 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630653
  var valid_21630654 = header.getOrDefault("X-Amz-Credential")
  valid_21630654 = validateParameter(valid_21630654, JString, required = false,
                                   default = nil)
  if valid_21630654 != nil:
    section.add "X-Amz-Credential", valid_21630654
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630655: Call_GetRemoveRoleFromDBCluster_21630640;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21630655.validator(path, query, header, formData, body, _)
  let scheme = call_21630655.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630655.makeUrl(scheme.get, call_21630655.host, call_21630655.base,
                               call_21630655.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630655, uri, valid, _)

proc call*(call_21630656: Call_GetRemoveRoleFromDBCluster_21630640;
          DBClusterIdentifier: string; RoleArn: string;
          Action: string = "RemoveRoleFromDBCluster"; FeatureName: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBCluster
  ## <p>Disassociates an AWS Identity and Access Management (IAM) role from an Amazon Aurora DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.html">Authorizing Amazon Aurora MySQL to Access Other AWS Services on Your Behalf </a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The name of the DB cluster to disassociate the IAM role from.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.
  ##   Action: string (required)
  ##   FeatureName: string
  ##              : The name of the feature for the DB cluster that the IAM role is to be disassociated from. For the list of supported feature names, see <a>DBEngineVersion</a>.
  ##   Version: string (required)
  var query_21630657 = newJObject()
  add(query_21630657, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21630657, "RoleArn", newJString(RoleArn))
  add(query_21630657, "Action", newJString(Action))
  add(query_21630657, "FeatureName", newJString(FeatureName))
  add(query_21630657, "Version", newJString(Version))
  result = call_21630656.call(nil, query_21630657, nil, nil, nil)

var getRemoveRoleFromDBCluster* = Call_GetRemoveRoleFromDBCluster_21630640(
    name: "getRemoveRoleFromDBCluster", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBCluster",
    validator: validate_GetRemoveRoleFromDBCluster_21630641, base: "/",
    makeUrl: url_GetRemoveRoleFromDBCluster_21630642,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveRoleFromDBInstance_21630695 = ref object of OpenApiRestCall_21625435
proc url_PostRemoveRoleFromDBInstance_21630697(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveRoleFromDBInstance_21630696(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630698 = query.getOrDefault("Action")
  valid_21630698 = validateParameter(valid_21630698, JString, required = true, default = newJString(
      "RemoveRoleFromDBInstance"))
  if valid_21630698 != nil:
    section.add "Action", valid_21630698
  var valid_21630699 = query.getOrDefault("Version")
  valid_21630699 = validateParameter(valid_21630699, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630699 != nil:
    section.add "Version", valid_21630699
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630700 = header.getOrDefault("X-Amz-Date")
  valid_21630700 = validateParameter(valid_21630700, JString, required = false,
                                   default = nil)
  if valid_21630700 != nil:
    section.add "X-Amz-Date", valid_21630700
  var valid_21630701 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630701 = validateParameter(valid_21630701, JString, required = false,
                                   default = nil)
  if valid_21630701 != nil:
    section.add "X-Amz-Security-Token", valid_21630701
  var valid_21630702 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630702 = validateParameter(valid_21630702, JString, required = false,
                                   default = nil)
  if valid_21630702 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630702
  var valid_21630703 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630703 = validateParameter(valid_21630703, JString, required = false,
                                   default = nil)
  if valid_21630703 != nil:
    section.add "X-Amz-Algorithm", valid_21630703
  var valid_21630704 = header.getOrDefault("X-Amz-Signature")
  valid_21630704 = validateParameter(valid_21630704, JString, required = false,
                                   default = nil)
  if valid_21630704 != nil:
    section.add "X-Amz-Signature", valid_21630704
  var valid_21630705 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630705 = validateParameter(valid_21630705, JString, required = false,
                                   default = nil)
  if valid_21630705 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630705
  var valid_21630706 = header.getOrDefault("X-Amz-Credential")
  valid_21630706 = validateParameter(valid_21630706, JString, required = false,
                                   default = nil)
  if valid_21630706 != nil:
    section.add "X-Amz-Credential", valid_21630706
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_21630707 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21630707 = validateParameter(valid_21630707, JString, required = true,
                                   default = nil)
  if valid_21630707 != nil:
    section.add "DBInstanceIdentifier", valid_21630707
  var valid_21630708 = formData.getOrDefault("RoleArn")
  valid_21630708 = validateParameter(valid_21630708, JString, required = true,
                                   default = nil)
  if valid_21630708 != nil:
    section.add "RoleArn", valid_21630708
  var valid_21630709 = formData.getOrDefault("FeatureName")
  valid_21630709 = validateParameter(valid_21630709, JString, required = true,
                                   default = nil)
  if valid_21630709 != nil:
    section.add "FeatureName", valid_21630709
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630710: Call_PostRemoveRoleFromDBInstance_21630695;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  let valid = call_21630710.validator(path, query, header, formData, body, _)
  let scheme = call_21630710.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630710.makeUrl(scheme.get, call_21630710.host, call_21630710.base,
                               call_21630710.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630710, uri, valid, _)

proc call*(call_21630711: Call_PostRemoveRoleFromDBInstance_21630695;
          DBInstanceIdentifier: string; RoleArn: string; FeatureName: string;
          Action: string = "RemoveRoleFromDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveRoleFromDBInstance
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   Action: string (required)
  ##   Version: string (required)
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  var query_21630712 = newJObject()
  var formData_21630713 = newJObject()
  add(formData_21630713, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_21630713, "RoleArn", newJString(RoleArn))
  add(query_21630712, "Action", newJString(Action))
  add(query_21630712, "Version", newJString(Version))
  add(formData_21630713, "FeatureName", newJString(FeatureName))
  result = call_21630711.call(nil, query_21630712, nil, formData_21630713, nil)

var postRemoveRoleFromDBInstance* = Call_PostRemoveRoleFromDBInstance_21630695(
    name: "postRemoveRoleFromDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBInstance",
    validator: validate_PostRemoveRoleFromDBInstance_21630696, base: "/",
    makeUrl: url_PostRemoveRoleFromDBInstance_21630697,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveRoleFromDBInstance_21630677 = ref object of OpenApiRestCall_21625435
proc url_GetRemoveRoleFromDBInstance_21630679(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveRoleFromDBInstance_21630678(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RoleArn: JString (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   Action: JString (required)
  ##   FeatureName: JString (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `RoleArn` field"
  var valid_21630680 = query.getOrDefault("RoleArn")
  valid_21630680 = validateParameter(valid_21630680, JString, required = true,
                                   default = nil)
  if valid_21630680 != nil:
    section.add "RoleArn", valid_21630680
  var valid_21630681 = query.getOrDefault("Action")
  valid_21630681 = validateParameter(valid_21630681, JString, required = true, default = newJString(
      "RemoveRoleFromDBInstance"))
  if valid_21630681 != nil:
    section.add "Action", valid_21630681
  var valid_21630682 = query.getOrDefault("FeatureName")
  valid_21630682 = validateParameter(valid_21630682, JString, required = true,
                                   default = nil)
  if valid_21630682 != nil:
    section.add "FeatureName", valid_21630682
  var valid_21630683 = query.getOrDefault("Version")
  valid_21630683 = validateParameter(valid_21630683, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630683 != nil:
    section.add "Version", valid_21630683
  var valid_21630684 = query.getOrDefault("DBInstanceIdentifier")
  valid_21630684 = validateParameter(valid_21630684, JString, required = true,
                                   default = nil)
  if valid_21630684 != nil:
    section.add "DBInstanceIdentifier", valid_21630684
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630685 = header.getOrDefault("X-Amz-Date")
  valid_21630685 = validateParameter(valid_21630685, JString, required = false,
                                   default = nil)
  if valid_21630685 != nil:
    section.add "X-Amz-Date", valid_21630685
  var valid_21630686 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630686 = validateParameter(valid_21630686, JString, required = false,
                                   default = nil)
  if valid_21630686 != nil:
    section.add "X-Amz-Security-Token", valid_21630686
  var valid_21630687 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630687 = validateParameter(valid_21630687, JString, required = false,
                                   default = nil)
  if valid_21630687 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630687
  var valid_21630688 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630688 = validateParameter(valid_21630688, JString, required = false,
                                   default = nil)
  if valid_21630688 != nil:
    section.add "X-Amz-Algorithm", valid_21630688
  var valid_21630689 = header.getOrDefault("X-Amz-Signature")
  valid_21630689 = validateParameter(valid_21630689, JString, required = false,
                                   default = nil)
  if valid_21630689 != nil:
    section.add "X-Amz-Signature", valid_21630689
  var valid_21630690 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630690 = validateParameter(valid_21630690, JString, required = false,
                                   default = nil)
  if valid_21630690 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630690
  var valid_21630691 = header.getOrDefault("X-Amz-Credential")
  valid_21630691 = validateParameter(valid_21630691, JString, required = false,
                                   default = nil)
  if valid_21630691 != nil:
    section.add "X-Amz-Credential", valid_21630691
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630692: Call_GetRemoveRoleFromDBInstance_21630677;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ## 
  let valid = call_21630692.validator(path, query, header, formData, body, _)
  let scheme = call_21630692.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630692.makeUrl(scheme.get, call_21630692.host, call_21630692.base,
                               call_21630692.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630692, uri, valid, _)

proc call*(call_21630693: Call_GetRemoveRoleFromDBInstance_21630677;
          RoleArn: string; FeatureName: string; DBInstanceIdentifier: string;
          Action: string = "RemoveRoleFromDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveRoleFromDBInstance
  ## Disassociates an AWS Identity and Access Management (IAM) role from a DB instance.
  ##   RoleArn: string (required)
  ##          : The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance, for example <code>arn:aws:iam::123456789012:role/AccessRole</code>.
  ##   Action: string (required)
  ##   FeatureName: string (required)
  ##              : The name of the feature for the DB instance that the IAM role is to be disassociated from. For the list of supported feature names, see <code>DBEngineVersion</code>. 
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : The name of the DB instance to disassociate the IAM role from.
  var query_21630694 = newJObject()
  add(query_21630694, "RoleArn", newJString(RoleArn))
  add(query_21630694, "Action", newJString(Action))
  add(query_21630694, "FeatureName", newJString(FeatureName))
  add(query_21630694, "Version", newJString(Version))
  add(query_21630694, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_21630693.call(nil, query_21630694, nil, nil, nil)

var getRemoveRoleFromDBInstance* = Call_GetRemoveRoleFromDBInstance_21630677(
    name: "getRemoveRoleFromDBInstance", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveRoleFromDBInstance",
    validator: validate_GetRemoveRoleFromDBInstance_21630678, base: "/",
    makeUrl: url_GetRemoveRoleFromDBInstance_21630679,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveSourceIdentifierFromSubscription_21630731 = ref object of OpenApiRestCall_21625435
proc url_PostRemoveSourceIdentifierFromSubscription_21630733(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveSourceIdentifierFromSubscription_21630732(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630734 = query.getOrDefault("Action")
  valid_21630734 = validateParameter(valid_21630734, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_21630734 != nil:
    section.add "Action", valid_21630734
  var valid_21630735 = query.getOrDefault("Version")
  valid_21630735 = validateParameter(valid_21630735, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630735 != nil:
    section.add "Version", valid_21630735
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630736 = header.getOrDefault("X-Amz-Date")
  valid_21630736 = validateParameter(valid_21630736, JString, required = false,
                                   default = nil)
  if valid_21630736 != nil:
    section.add "X-Amz-Date", valid_21630736
  var valid_21630737 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630737 = validateParameter(valid_21630737, JString, required = false,
                                   default = nil)
  if valid_21630737 != nil:
    section.add "X-Amz-Security-Token", valid_21630737
  var valid_21630738 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630738 = validateParameter(valid_21630738, JString, required = false,
                                   default = nil)
  if valid_21630738 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630738
  var valid_21630739 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630739 = validateParameter(valid_21630739, JString, required = false,
                                   default = nil)
  if valid_21630739 != nil:
    section.add "X-Amz-Algorithm", valid_21630739
  var valid_21630740 = header.getOrDefault("X-Amz-Signature")
  valid_21630740 = validateParameter(valid_21630740, JString, required = false,
                                   default = nil)
  if valid_21630740 != nil:
    section.add "X-Amz-Signature", valid_21630740
  var valid_21630741 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630741 = validateParameter(valid_21630741, JString, required = false,
                                   default = nil)
  if valid_21630741 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630741
  var valid_21630742 = header.getOrDefault("X-Amz-Credential")
  valid_21630742 = validateParameter(valid_21630742, JString, required = false,
                                   default = nil)
  if valid_21630742 != nil:
    section.add "X-Amz-Credential", valid_21630742
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceIdentifier` field"
  var valid_21630743 = formData.getOrDefault("SourceIdentifier")
  valid_21630743 = validateParameter(valid_21630743, JString, required = true,
                                   default = nil)
  if valid_21630743 != nil:
    section.add "SourceIdentifier", valid_21630743
  var valid_21630744 = formData.getOrDefault("SubscriptionName")
  valid_21630744 = validateParameter(valid_21630744, JString, required = true,
                                   default = nil)
  if valid_21630744 != nil:
    section.add "SubscriptionName", valid_21630744
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630745: Call_PostRemoveSourceIdentifierFromSubscription_21630731;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  let valid = call_21630745.validator(path, query, header, formData, body, _)
  let scheme = call_21630745.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630745.makeUrl(scheme.get, call_21630745.host, call_21630745.base,
                               call_21630745.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630745, uri, valid, _)

proc call*(call_21630746: Call_PostRemoveSourceIdentifierFromSubscription_21630731;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## postRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing RDS event notification subscription.
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21630747 = newJObject()
  var formData_21630748 = newJObject()
  add(formData_21630748, "SourceIdentifier", newJString(SourceIdentifier))
  add(formData_21630748, "SubscriptionName", newJString(SubscriptionName))
  add(query_21630747, "Action", newJString(Action))
  add(query_21630747, "Version", newJString(Version))
  result = call_21630746.call(nil, query_21630747, nil, formData_21630748, nil)

var postRemoveSourceIdentifierFromSubscription* = Call_PostRemoveSourceIdentifierFromSubscription_21630731(
    name: "postRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_PostRemoveSourceIdentifierFromSubscription_21630732,
    base: "/", makeUrl: url_PostRemoveSourceIdentifierFromSubscription_21630733,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveSourceIdentifierFromSubscription_21630714 = ref object of OpenApiRestCall_21625435
proc url_GetRemoveSourceIdentifierFromSubscription_21630716(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveSourceIdentifierFromSubscription_21630715(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   SourceIdentifier: JString (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: JString (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630717 = query.getOrDefault("Action")
  valid_21630717 = validateParameter(valid_21630717, JString, required = true, default = newJString(
      "RemoveSourceIdentifierFromSubscription"))
  if valid_21630717 != nil:
    section.add "Action", valid_21630717
  var valid_21630718 = query.getOrDefault("SourceIdentifier")
  valid_21630718 = validateParameter(valid_21630718, JString, required = true,
                                   default = nil)
  if valid_21630718 != nil:
    section.add "SourceIdentifier", valid_21630718
  var valid_21630719 = query.getOrDefault("SubscriptionName")
  valid_21630719 = validateParameter(valid_21630719, JString, required = true,
                                   default = nil)
  if valid_21630719 != nil:
    section.add "SubscriptionName", valid_21630719
  var valid_21630720 = query.getOrDefault("Version")
  valid_21630720 = validateParameter(valid_21630720, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630720 != nil:
    section.add "Version", valid_21630720
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630721 = header.getOrDefault("X-Amz-Date")
  valid_21630721 = validateParameter(valid_21630721, JString, required = false,
                                   default = nil)
  if valid_21630721 != nil:
    section.add "X-Amz-Date", valid_21630721
  var valid_21630722 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630722 = validateParameter(valid_21630722, JString, required = false,
                                   default = nil)
  if valid_21630722 != nil:
    section.add "X-Amz-Security-Token", valid_21630722
  var valid_21630723 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630723 = validateParameter(valid_21630723, JString, required = false,
                                   default = nil)
  if valid_21630723 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630723
  var valid_21630724 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630724 = validateParameter(valid_21630724, JString, required = false,
                                   default = nil)
  if valid_21630724 != nil:
    section.add "X-Amz-Algorithm", valid_21630724
  var valid_21630725 = header.getOrDefault("X-Amz-Signature")
  valid_21630725 = validateParameter(valid_21630725, JString, required = false,
                                   default = nil)
  if valid_21630725 != nil:
    section.add "X-Amz-Signature", valid_21630725
  var valid_21630726 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630726 = validateParameter(valid_21630726, JString, required = false,
                                   default = nil)
  if valid_21630726 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630726
  var valid_21630727 = header.getOrDefault("X-Amz-Credential")
  valid_21630727 = validateParameter(valid_21630727, JString, required = false,
                                   default = nil)
  if valid_21630727 != nil:
    section.add "X-Amz-Credential", valid_21630727
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630728: Call_GetRemoveSourceIdentifierFromSubscription_21630714;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Removes a source identifier from an existing RDS event notification subscription.
  ## 
  let valid = call_21630728.validator(path, query, header, formData, body, _)
  let scheme = call_21630728.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630728.makeUrl(scheme.get, call_21630728.host, call_21630728.base,
                               call_21630728.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630728, uri, valid, _)

proc call*(call_21630729: Call_GetRemoveSourceIdentifierFromSubscription_21630714;
          SourceIdentifier: string; SubscriptionName: string;
          Action: string = "RemoveSourceIdentifierFromSubscription";
          Version: string = "2014-10-31"): Recallable =
  ## getRemoveSourceIdentifierFromSubscription
  ## Removes a source identifier from an existing RDS event notification subscription.
  ##   Action: string (required)
  ##   SourceIdentifier: string (required)
  ##                   :  The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b> for a DB instance or the name of a security group. 
  ##   SubscriptionName: string (required)
  ##                   : The name of the RDS event notification subscription you want to remove a source identifier from.
  ##   Version: string (required)
  var query_21630730 = newJObject()
  add(query_21630730, "Action", newJString(Action))
  add(query_21630730, "SourceIdentifier", newJString(SourceIdentifier))
  add(query_21630730, "SubscriptionName", newJString(SubscriptionName))
  add(query_21630730, "Version", newJString(Version))
  result = call_21630729.call(nil, query_21630730, nil, nil, nil)

var getRemoveSourceIdentifierFromSubscription* = Call_GetRemoveSourceIdentifierFromSubscription_21630714(
    name: "getRemoveSourceIdentifierFromSubscription", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com",
    route: "/#Action=RemoveSourceIdentifierFromSubscription",
    validator: validate_GetRemoveSourceIdentifierFromSubscription_21630715,
    base: "/", makeUrl: url_GetRemoveSourceIdentifierFromSubscription_21630716,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRemoveTagsFromResource_21630766 = ref object of OpenApiRestCall_21625435
proc url_PostRemoveTagsFromResource_21630768(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRemoveTagsFromResource_21630767(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630769 = query.getOrDefault("Action")
  valid_21630769 = validateParameter(valid_21630769, JString, required = true, default = newJString(
      "RemoveTagsFromResource"))
  if valid_21630769 != nil:
    section.add "Action", valid_21630769
  var valid_21630770 = query.getOrDefault("Version")
  valid_21630770 = validateParameter(valid_21630770, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630770 != nil:
    section.add "Version", valid_21630770
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630771 = header.getOrDefault("X-Amz-Date")
  valid_21630771 = validateParameter(valid_21630771, JString, required = false,
                                   default = nil)
  if valid_21630771 != nil:
    section.add "X-Amz-Date", valid_21630771
  var valid_21630772 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630772 = validateParameter(valid_21630772, JString, required = false,
                                   default = nil)
  if valid_21630772 != nil:
    section.add "X-Amz-Security-Token", valid_21630772
  var valid_21630773 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630773 = validateParameter(valid_21630773, JString, required = false,
                                   default = nil)
  if valid_21630773 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630773
  var valid_21630774 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630774 = validateParameter(valid_21630774, JString, required = false,
                                   default = nil)
  if valid_21630774 != nil:
    section.add "X-Amz-Algorithm", valid_21630774
  var valid_21630775 = header.getOrDefault("X-Amz-Signature")
  valid_21630775 = validateParameter(valid_21630775, JString, required = false,
                                   default = nil)
  if valid_21630775 != nil:
    section.add "X-Amz-Signature", valid_21630775
  var valid_21630776 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630776 = validateParameter(valid_21630776, JString, required = false,
                                   default = nil)
  if valid_21630776 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630776
  var valid_21630777 = header.getOrDefault("X-Amz-Credential")
  valid_21630777 = validateParameter(valid_21630777, JString, required = false,
                                   default = nil)
  if valid_21630777 != nil:
    section.add "X-Amz-Credential", valid_21630777
  result.add "header", section
  ## parameters in `formData` object:
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `TagKeys` field"
  var valid_21630778 = formData.getOrDefault("TagKeys")
  valid_21630778 = validateParameter(valid_21630778, JArray, required = true,
                                   default = nil)
  if valid_21630778 != nil:
    section.add "TagKeys", valid_21630778
  var valid_21630779 = formData.getOrDefault("ResourceName")
  valid_21630779 = validateParameter(valid_21630779, JString, required = true,
                                   default = nil)
  if valid_21630779 != nil:
    section.add "ResourceName", valid_21630779
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630780: Call_PostRemoveTagsFromResource_21630766;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_21630780.validator(path, query, header, formData, body, _)
  let scheme = call_21630780.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630780.makeUrl(scheme.get, call_21630780.host, call_21630780.base,
                               call_21630780.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630780, uri, valid, _)

proc call*(call_21630781: Call_PostRemoveTagsFromResource_21630766;
          TagKeys: JsonNode; ResourceName: string;
          Action: string = "RemoveTagsFromResource"; Version: string = "2014-10-31"): Recallable =
  ## postRemoveTagsFromResource
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Version: string (required)
  var query_21630782 = newJObject()
  var formData_21630783 = newJObject()
  add(query_21630782, "Action", newJString(Action))
  if TagKeys != nil:
    formData_21630783.add "TagKeys", TagKeys
  add(formData_21630783, "ResourceName", newJString(ResourceName))
  add(query_21630782, "Version", newJString(Version))
  result = call_21630781.call(nil, query_21630782, nil, formData_21630783, nil)

var postRemoveTagsFromResource* = Call_PostRemoveTagsFromResource_21630766(
    name: "postRemoveTagsFromResource", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_PostRemoveTagsFromResource_21630767, base: "/",
    makeUrl: url_PostRemoveTagsFromResource_21630768,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRemoveTagsFromResource_21630749 = ref object of OpenApiRestCall_21625435
proc url_GetRemoveTagsFromResource_21630751(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRemoveTagsFromResource_21630750(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceName: JString (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: JString (required)
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceName` field"
  var valid_21630752 = query.getOrDefault("ResourceName")
  valid_21630752 = validateParameter(valid_21630752, JString, required = true,
                                   default = nil)
  if valid_21630752 != nil:
    section.add "ResourceName", valid_21630752
  var valid_21630753 = query.getOrDefault("Action")
  valid_21630753 = validateParameter(valid_21630753, JString, required = true, default = newJString(
      "RemoveTagsFromResource"))
  if valid_21630753 != nil:
    section.add "Action", valid_21630753
  var valid_21630754 = query.getOrDefault("TagKeys")
  valid_21630754 = validateParameter(valid_21630754, JArray, required = true,
                                   default = nil)
  if valid_21630754 != nil:
    section.add "TagKeys", valid_21630754
  var valid_21630755 = query.getOrDefault("Version")
  valid_21630755 = validateParameter(valid_21630755, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630755 != nil:
    section.add "Version", valid_21630755
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630756 = header.getOrDefault("X-Amz-Date")
  valid_21630756 = validateParameter(valid_21630756, JString, required = false,
                                   default = nil)
  if valid_21630756 != nil:
    section.add "X-Amz-Date", valid_21630756
  var valid_21630757 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630757 = validateParameter(valid_21630757, JString, required = false,
                                   default = nil)
  if valid_21630757 != nil:
    section.add "X-Amz-Security-Token", valid_21630757
  var valid_21630758 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630758 = validateParameter(valid_21630758, JString, required = false,
                                   default = nil)
  if valid_21630758 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630758
  var valid_21630759 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630759 = validateParameter(valid_21630759, JString, required = false,
                                   default = nil)
  if valid_21630759 != nil:
    section.add "X-Amz-Algorithm", valid_21630759
  var valid_21630760 = header.getOrDefault("X-Amz-Signature")
  valid_21630760 = validateParameter(valid_21630760, JString, required = false,
                                   default = nil)
  if valid_21630760 != nil:
    section.add "X-Amz-Signature", valid_21630760
  var valid_21630761 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630761 = validateParameter(valid_21630761, JString, required = false,
                                   default = nil)
  if valid_21630761 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630761
  var valid_21630762 = header.getOrDefault("X-Amz-Credential")
  valid_21630762 = validateParameter(valid_21630762, JString, required = false,
                                   default = nil)
  if valid_21630762 != nil:
    section.add "X-Amz-Credential", valid_21630762
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630763: Call_GetRemoveTagsFromResource_21630749;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ## 
  let valid = call_21630763.validator(path, query, header, formData, body, _)
  let scheme = call_21630763.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630763.makeUrl(scheme.get, call_21630763.host, call_21630763.base,
                               call_21630763.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630763, uri, valid, _)

proc call*(call_21630764: Call_GetRemoveTagsFromResource_21630749;
          ResourceName: string; TagKeys: JsonNode;
          Action: string = "RemoveTagsFromResource"; Version: string = "2014-10-31"): Recallable =
  ## getRemoveTagsFromResource
  ## <p>Removes metadata tags from an Amazon RDS resource.</p> <p>For an overview on tagging an Amazon RDS resource, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   ResourceName: string (required)
  ##               : The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i> 
  ##   Action: string (required)
  ##   TagKeys: JArray (required)
  ##          : The tag key (name) of the tag to be removed.
  ##   Version: string (required)
  var query_21630765 = newJObject()
  add(query_21630765, "ResourceName", newJString(ResourceName))
  add(query_21630765, "Action", newJString(Action))
  if TagKeys != nil:
    query_21630765.add "TagKeys", TagKeys
  add(query_21630765, "Version", newJString(Version))
  result = call_21630764.call(nil, query_21630765, nil, nil, nil)

var getRemoveTagsFromResource* = Call_GetRemoveTagsFromResource_21630749(
    name: "getRemoveTagsFromResource", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RemoveTagsFromResource",
    validator: validate_GetRemoveTagsFromResource_21630750, base: "/",
    makeUrl: url_GetRemoveTagsFromResource_21630751,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBClusterParameterGroup_21630802 = ref object of OpenApiRestCall_21625435
proc url_PostResetDBClusterParameterGroup_21630804(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetDBClusterParameterGroup_21630803(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630805 = query.getOrDefault("Action")
  valid_21630805 = validateParameter(valid_21630805, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_21630805 != nil:
    section.add "Action", valid_21630805
  var valid_21630806 = query.getOrDefault("Version")
  valid_21630806 = validateParameter(valid_21630806, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630806 != nil:
    section.add "Version", valid_21630806
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630807 = header.getOrDefault("X-Amz-Date")
  valid_21630807 = validateParameter(valid_21630807, JString, required = false,
                                   default = nil)
  if valid_21630807 != nil:
    section.add "X-Amz-Date", valid_21630807
  var valid_21630808 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630808 = validateParameter(valid_21630808, JString, required = false,
                                   default = nil)
  if valid_21630808 != nil:
    section.add "X-Amz-Security-Token", valid_21630808
  var valid_21630809 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630809 = validateParameter(valid_21630809, JString, required = false,
                                   default = nil)
  if valid_21630809 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630809
  var valid_21630810 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630810 = validateParameter(valid_21630810, JString, required = false,
                                   default = nil)
  if valid_21630810 != nil:
    section.add "X-Amz-Algorithm", valid_21630810
  var valid_21630811 = header.getOrDefault("X-Amz-Signature")
  valid_21630811 = validateParameter(valid_21630811, JString, required = false,
                                   default = nil)
  if valid_21630811 != nil:
    section.add "X-Amz-Signature", valid_21630811
  var valid_21630812 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630812 = validateParameter(valid_21630812, JString, required = false,
                                   default = nil)
  if valid_21630812 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630812
  var valid_21630813 = header.getOrDefault("X-Amz-Credential")
  valid_21630813 = validateParameter(valid_21630813, JString, required = false,
                                   default = nil)
  if valid_21630813 != nil:
    section.add "X-Amz-Credential", valid_21630813
  result.add "header", section
  ## parameters in `formData` object:
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: JBool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  section = newJObject()
  var valid_21630814 = formData.getOrDefault("Parameters")
  valid_21630814 = validateParameter(valid_21630814, JArray, required = false,
                                   default = nil)
  if valid_21630814 != nil:
    section.add "Parameters", valid_21630814
  assert formData != nil, "formData argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_21630815 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_21630815 = validateParameter(valid_21630815, JString, required = true,
                                   default = nil)
  if valid_21630815 != nil:
    section.add "DBClusterParameterGroupName", valid_21630815
  var valid_21630816 = formData.getOrDefault("ResetAllParameters")
  valid_21630816 = validateParameter(valid_21630816, JBool, required = false,
                                   default = nil)
  if valid_21630816 != nil:
    section.add "ResetAllParameters", valid_21630816
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630817: Call_PostResetDBClusterParameterGroup_21630802;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21630817.validator(path, query, header, formData, body, _)
  let scheme = call_21630817.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630817.makeUrl(scheme.get, call_21630817.host, call_21630817.base,
                               call_21630817.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630817, uri, valid, _)

proc call*(call_21630818: Call_PostResetDBClusterParameterGroup_21630802;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBClusterParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## postResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   ResetAllParameters: bool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Version: string (required)
  var query_21630819 = newJObject()
  var formData_21630820 = newJObject()
  if Parameters != nil:
    formData_21630820.add "Parameters", Parameters
  add(query_21630819, "Action", newJString(Action))
  add(formData_21630820, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_21630820, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_21630819, "Version", newJString(Version))
  result = call_21630818.call(nil, query_21630819, nil, formData_21630820, nil)

var postResetDBClusterParameterGroup* = Call_PostResetDBClusterParameterGroup_21630802(
    name: "postResetDBClusterParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_PostResetDBClusterParameterGroup_21630803, base: "/",
    makeUrl: url_PostResetDBClusterParameterGroup_21630804,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBClusterParameterGroup_21630784 = ref object of OpenApiRestCall_21625435
proc url_GetResetDBClusterParameterGroup_21630786(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetDBClusterParameterGroup_21630785(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterParameterGroupName: JString (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   Action: JString (required)
  ##   ResetAllParameters: JBool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterParameterGroupName` field"
  var valid_21630787 = query.getOrDefault("DBClusterParameterGroupName")
  valid_21630787 = validateParameter(valid_21630787, JString, required = true,
                                   default = nil)
  if valid_21630787 != nil:
    section.add "DBClusterParameterGroupName", valid_21630787
  var valid_21630788 = query.getOrDefault("Parameters")
  valid_21630788 = validateParameter(valid_21630788, JArray, required = false,
                                   default = nil)
  if valid_21630788 != nil:
    section.add "Parameters", valid_21630788
  var valid_21630789 = query.getOrDefault("Action")
  valid_21630789 = validateParameter(valid_21630789, JString, required = true, default = newJString(
      "ResetDBClusterParameterGroup"))
  if valid_21630789 != nil:
    section.add "Action", valid_21630789
  var valid_21630790 = query.getOrDefault("ResetAllParameters")
  valid_21630790 = validateParameter(valid_21630790, JBool, required = false,
                                   default = nil)
  if valid_21630790 != nil:
    section.add "ResetAllParameters", valid_21630790
  var valid_21630791 = query.getOrDefault("Version")
  valid_21630791 = validateParameter(valid_21630791, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630791 != nil:
    section.add "Version", valid_21630791
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630792 = header.getOrDefault("X-Amz-Date")
  valid_21630792 = validateParameter(valid_21630792, JString, required = false,
                                   default = nil)
  if valid_21630792 != nil:
    section.add "X-Amz-Date", valid_21630792
  var valid_21630793 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630793 = validateParameter(valid_21630793, JString, required = false,
                                   default = nil)
  if valid_21630793 != nil:
    section.add "X-Amz-Security-Token", valid_21630793
  var valid_21630794 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630794 = validateParameter(valid_21630794, JString, required = false,
                                   default = nil)
  if valid_21630794 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630794
  var valid_21630795 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630795 = validateParameter(valid_21630795, JString, required = false,
                                   default = nil)
  if valid_21630795 != nil:
    section.add "X-Amz-Algorithm", valid_21630795
  var valid_21630796 = header.getOrDefault("X-Amz-Signature")
  valid_21630796 = validateParameter(valid_21630796, JString, required = false,
                                   default = nil)
  if valid_21630796 != nil:
    section.add "X-Amz-Signature", valid_21630796
  var valid_21630797 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630797 = validateParameter(valid_21630797, JString, required = false,
                                   default = nil)
  if valid_21630797 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630797
  var valid_21630798 = header.getOrDefault("X-Amz-Credential")
  valid_21630798 = validateParameter(valid_21630798, JString, required = false,
                                   default = nil)
  if valid_21630798 != nil:
    section.add "X-Amz-Credential", valid_21630798
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630799: Call_GetResetDBClusterParameterGroup_21630784;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21630799.validator(path, query, header, formData, body, _)
  let scheme = call_21630799.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630799.makeUrl(scheme.get, call_21630799.host, call_21630799.base,
                               call_21630799.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630799, uri, valid, _)

proc call*(call_21630800: Call_GetResetDBClusterParameterGroup_21630784;
          DBClusterParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBClusterParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getResetDBClusterParameterGroup
  ## <p> Modifies the parameters of a DB cluster parameter group to the default value. To reset specific parameters submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every DB instance in your DB cluster that you want the updated static parameter to apply to.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterParameterGroupName: string (required)
  ##                              : The name of the DB cluster parameter group to reset.
  ##   Parameters: JArray
  ##             : A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the <code>ResetAllParameters</code> parameter is enabled.
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     : A value that indicates whether to reset all parameters in the DB cluster parameter group to their default values. You can't use this parameter if there is a list of parameter names specified for the <code>Parameters</code> parameter.
  ##   Version: string (required)
  var query_21630801 = newJObject()
  add(query_21630801, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if Parameters != nil:
    query_21630801.add "Parameters", Parameters
  add(query_21630801, "Action", newJString(Action))
  add(query_21630801, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_21630801, "Version", newJString(Version))
  result = call_21630800.call(nil, query_21630801, nil, nil, nil)

var getResetDBClusterParameterGroup* = Call_GetResetDBClusterParameterGroup_21630784(
    name: "getResetDBClusterParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBClusterParameterGroup",
    validator: validate_GetResetDBClusterParameterGroup_21630785, base: "/",
    makeUrl: url_GetResetDBClusterParameterGroup_21630786,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostResetDBParameterGroup_21630839 = ref object of OpenApiRestCall_21625435
proc url_PostResetDBParameterGroup_21630841(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostResetDBParameterGroup_21630840(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630842 = query.getOrDefault("Action")
  valid_21630842 = validateParameter(valid_21630842, JString, required = true, default = newJString(
      "ResetDBParameterGroup"))
  if valid_21630842 != nil:
    section.add "Action", valid_21630842
  var valid_21630843 = query.getOrDefault("Version")
  valid_21630843 = validateParameter(valid_21630843, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630843 != nil:
    section.add "Version", valid_21630843
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630844 = header.getOrDefault("X-Amz-Date")
  valid_21630844 = validateParameter(valid_21630844, JString, required = false,
                                   default = nil)
  if valid_21630844 != nil:
    section.add "X-Amz-Date", valid_21630844
  var valid_21630845 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630845 = validateParameter(valid_21630845, JString, required = false,
                                   default = nil)
  if valid_21630845 != nil:
    section.add "X-Amz-Security-Token", valid_21630845
  var valid_21630846 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630846 = validateParameter(valid_21630846, JString, required = false,
                                   default = nil)
  if valid_21630846 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630846
  var valid_21630847 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630847 = validateParameter(valid_21630847, JString, required = false,
                                   default = nil)
  if valid_21630847 != nil:
    section.add "X-Amz-Algorithm", valid_21630847
  var valid_21630848 = header.getOrDefault("X-Amz-Signature")
  valid_21630848 = validateParameter(valid_21630848, JString, required = false,
                                   default = nil)
  if valid_21630848 != nil:
    section.add "X-Amz-Signature", valid_21630848
  var valid_21630849 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630849 = validateParameter(valid_21630849, JString, required = false,
                                   default = nil)
  if valid_21630849 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630849
  var valid_21630850 = header.getOrDefault("X-Amz-Credential")
  valid_21630850 = validateParameter(valid_21630850, JString, required = false,
                                   default = nil)
  if valid_21630850 != nil:
    section.add "X-Amz-Credential", valid_21630850
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   ResetAllParameters: JBool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBParameterGroupName` field"
  var valid_21630851 = formData.getOrDefault("DBParameterGroupName")
  valid_21630851 = validateParameter(valid_21630851, JString, required = true,
                                   default = nil)
  if valid_21630851 != nil:
    section.add "DBParameterGroupName", valid_21630851
  var valid_21630852 = formData.getOrDefault("Parameters")
  valid_21630852 = validateParameter(valid_21630852, JArray, required = false,
                                   default = nil)
  if valid_21630852 != nil:
    section.add "Parameters", valid_21630852
  var valid_21630853 = formData.getOrDefault("ResetAllParameters")
  valid_21630853 = validateParameter(valid_21630853, JBool, required = false,
                                   default = nil)
  if valid_21630853 != nil:
    section.add "ResetAllParameters", valid_21630853
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630854: Call_PostResetDBParameterGroup_21630839;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  let valid = call_21630854.validator(path, query, header, formData, body, _)
  let scheme = call_21630854.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630854.makeUrl(scheme.get, call_21630854.host, call_21630854.base,
                               call_21630854.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630854, uri, valid, _)

proc call*(call_21630855: Call_PostResetDBParameterGroup_21630839;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## postResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Version: string (required)
  var query_21630856 = newJObject()
  var formData_21630857 = newJObject()
  add(formData_21630857, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    formData_21630857.add "Parameters", Parameters
  add(query_21630856, "Action", newJString(Action))
  add(formData_21630857, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_21630856, "Version", newJString(Version))
  result = call_21630855.call(nil, query_21630856, nil, formData_21630857, nil)

var postResetDBParameterGroup* = Call_PostResetDBParameterGroup_21630839(
    name: "postResetDBParameterGroup", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_PostResetDBParameterGroup_21630840, base: "/",
    makeUrl: url_PostResetDBParameterGroup_21630841,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetResetDBParameterGroup_21630821 = ref object of OpenApiRestCall_21625435
proc url_GetResetDBParameterGroup_21630823(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetResetDBParameterGroup_21630822(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBParameterGroupName: JString (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Action: JString (required)
  ##   ResetAllParameters: JBool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBParameterGroupName` field"
  var valid_21630824 = query.getOrDefault("DBParameterGroupName")
  valid_21630824 = validateParameter(valid_21630824, JString, required = true,
                                   default = nil)
  if valid_21630824 != nil:
    section.add "DBParameterGroupName", valid_21630824
  var valid_21630825 = query.getOrDefault("Parameters")
  valid_21630825 = validateParameter(valid_21630825, JArray, required = false,
                                   default = nil)
  if valid_21630825 != nil:
    section.add "Parameters", valid_21630825
  var valid_21630826 = query.getOrDefault("Action")
  valid_21630826 = validateParameter(valid_21630826, JString, required = true, default = newJString(
      "ResetDBParameterGroup"))
  if valid_21630826 != nil:
    section.add "Action", valid_21630826
  var valid_21630827 = query.getOrDefault("ResetAllParameters")
  valid_21630827 = validateParameter(valid_21630827, JBool, required = false,
                                   default = nil)
  if valid_21630827 != nil:
    section.add "ResetAllParameters", valid_21630827
  var valid_21630828 = query.getOrDefault("Version")
  valid_21630828 = validateParameter(valid_21630828, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630828 != nil:
    section.add "Version", valid_21630828
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630829 = header.getOrDefault("X-Amz-Date")
  valid_21630829 = validateParameter(valid_21630829, JString, required = false,
                                   default = nil)
  if valid_21630829 != nil:
    section.add "X-Amz-Date", valid_21630829
  var valid_21630830 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630830 = validateParameter(valid_21630830, JString, required = false,
                                   default = nil)
  if valid_21630830 != nil:
    section.add "X-Amz-Security-Token", valid_21630830
  var valid_21630831 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630831 = validateParameter(valid_21630831, JString, required = false,
                                   default = nil)
  if valid_21630831 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630831
  var valid_21630832 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630832 = validateParameter(valid_21630832, JString, required = false,
                                   default = nil)
  if valid_21630832 != nil:
    section.add "X-Amz-Algorithm", valid_21630832
  var valid_21630833 = header.getOrDefault("X-Amz-Signature")
  valid_21630833 = validateParameter(valid_21630833, JString, required = false,
                                   default = nil)
  if valid_21630833 != nil:
    section.add "X-Amz-Signature", valid_21630833
  var valid_21630834 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630834 = validateParameter(valid_21630834, JString, required = false,
                                   default = nil)
  if valid_21630834 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630834
  var valid_21630835 = header.getOrDefault("X-Amz-Credential")
  valid_21630835 = validateParameter(valid_21630835, JString, required = false,
                                   default = nil)
  if valid_21630835 != nil:
    section.add "X-Amz-Credential", valid_21630835
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630836: Call_GetResetDBParameterGroup_21630821;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ## 
  let valid = call_21630836.validator(path, query, header, formData, body, _)
  let scheme = call_21630836.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630836.makeUrl(scheme.get, call_21630836.host, call_21630836.base,
                               call_21630836.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630836, uri, valid, _)

proc call*(call_21630837: Call_GetResetDBParameterGroup_21630821;
          DBParameterGroupName: string; Parameters: JsonNode = nil;
          Action: string = "ResetDBParameterGroup";
          ResetAllParameters: bool = false; Version: string = "2014-10-31"): Recallable =
  ## getResetDBParameterGroup
  ## Modifies the parameters of a DB parameter group to the engine/system default value. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance restart or <code>RebootDBInstance</code> request. 
  ##   DBParameterGroupName: string (required)
  ##                       : <p>The name of the DB parameter group.</p> <p>Constraints:</p> <ul> <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li> </ul>
  ##   Parameters: JArray
  ##             : <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p> <p> <b>MySQL</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>MariaDB</b> </p> <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p> <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p> <p> <b>Oracle</b> </p> <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
  ##   Action: string (required)
  ##   ResetAllParameters: bool
  ##                     :  A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values. 
  ##   Version: string (required)
  var query_21630838 = newJObject()
  add(query_21630838, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Parameters != nil:
    query_21630838.add "Parameters", Parameters
  add(query_21630838, "Action", newJString(Action))
  add(query_21630838, "ResetAllParameters", newJBool(ResetAllParameters))
  add(query_21630838, "Version", newJString(Version))
  result = call_21630837.call(nil, query_21630838, nil, nil, nil)

var getResetDBParameterGroup* = Call_GetResetDBParameterGroup_21630821(
    name: "getResetDBParameterGroup", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=ResetDBParameterGroup",
    validator: validate_GetResetDBParameterGroup_21630822, base: "/",
    makeUrl: url_GetResetDBParameterGroup_21630823,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromS3_21630904 = ref object of OpenApiRestCall_21625435
proc url_PostRestoreDBClusterFromS3_21630906(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterFromS3_21630905(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630907 = query.getOrDefault("Action")
  valid_21630907 = validateParameter(valid_21630907, JString, required = true, default = newJString(
      "RestoreDBClusterFromS3"))
  if valid_21630907 != nil:
    section.add "Action", valid_21630907
  var valid_21630908 = query.getOrDefault("Version")
  valid_21630908 = validateParameter(valid_21630908, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630908 != nil:
    section.add "Version", valid_21630908
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630909 = header.getOrDefault("X-Amz-Date")
  valid_21630909 = validateParameter(valid_21630909, JString, required = false,
                                   default = nil)
  if valid_21630909 != nil:
    section.add "X-Amz-Date", valid_21630909
  var valid_21630910 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630910 = validateParameter(valid_21630910, JString, required = false,
                                   default = nil)
  if valid_21630910 != nil:
    section.add "X-Amz-Security-Token", valid_21630910
  var valid_21630911 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630911 = validateParameter(valid_21630911, JString, required = false,
                                   default = nil)
  if valid_21630911 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630911
  var valid_21630912 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630912 = validateParameter(valid_21630912, JString, required = false,
                                   default = nil)
  if valid_21630912 != nil:
    section.add "X-Amz-Algorithm", valid_21630912
  var valid_21630913 = header.getOrDefault("X-Amz-Signature")
  valid_21630913 = validateParameter(valid_21630913, JString, required = false,
                                   default = nil)
  if valid_21630913 != nil:
    section.add "X-Amz-Signature", valid_21630913
  var valid_21630914 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630914 = validateParameter(valid_21630914, JString, required = false,
                                   default = nil)
  if valid_21630914 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630914
  var valid_21630915 = header.getOrDefault("X-Amz-Credential")
  valid_21630915 = validateParameter(valid_21630915, JString, required = false,
                                   default = nil)
  if valid_21630915 != nil:
    section.add "X-Amz-Credential", valid_21630915
  result.add "header", section
  ## parameters in `formData` object:
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   S3Prefix: JString
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   MasterUsername: JString (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation. </p> <p> For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurmysql-kerberos.html">Using Kerberos Authentication for Aurora MySQL</a> in the <i>Amazon Aurora User Guide</i>. </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `S3BucketName` field"
  var valid_21630916 = formData.getOrDefault("S3BucketName")
  valid_21630916 = validateParameter(valid_21630916, JString, required = true,
                                   default = nil)
  if valid_21630916 != nil:
    section.add "S3BucketName", valid_21630916
  var valid_21630917 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_21630917 = validateParameter(valid_21630917, JBool, required = false,
                                   default = nil)
  if valid_21630917 != nil:
    section.add "CopyTagsToSnapshot", valid_21630917
  var valid_21630918 = formData.getOrDefault("Port")
  valid_21630918 = validateParameter(valid_21630918, JInt, required = false,
                                   default = nil)
  if valid_21630918 != nil:
    section.add "Port", valid_21630918
  var valid_21630919 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_21630919 = validateParameter(valid_21630919, JArray, required = false,
                                   default = nil)
  if valid_21630919 != nil:
    section.add "VpcSecurityGroupIds", valid_21630919
  var valid_21630920 = formData.getOrDefault("Engine")
  valid_21630920 = validateParameter(valid_21630920, JString, required = true,
                                   default = nil)
  if valid_21630920 != nil:
    section.add "Engine", valid_21630920
  var valid_21630921 = formData.getOrDefault("SourceEngine")
  valid_21630921 = validateParameter(valid_21630921, JString, required = true,
                                   default = nil)
  if valid_21630921 != nil:
    section.add "SourceEngine", valid_21630921
  var valid_21630922 = formData.getOrDefault("OptionGroupName")
  valid_21630922 = validateParameter(valid_21630922, JString, required = false,
                                   default = nil)
  if valid_21630922 != nil:
    section.add "OptionGroupName", valid_21630922
  var valid_21630923 = formData.getOrDefault("BackupRetentionPeriod")
  valid_21630923 = validateParameter(valid_21630923, JInt, required = false,
                                   default = nil)
  if valid_21630923 != nil:
    section.add "BackupRetentionPeriod", valid_21630923
  var valid_21630924 = formData.getOrDefault("BacktrackWindow")
  valid_21630924 = validateParameter(valid_21630924, JInt, required = false,
                                   default = nil)
  if valid_21630924 != nil:
    section.add "BacktrackWindow", valid_21630924
  var valid_21630925 = formData.getOrDefault("Tags")
  valid_21630925 = validateParameter(valid_21630925, JArray, required = false,
                                   default = nil)
  if valid_21630925 != nil:
    section.add "Tags", valid_21630925
  var valid_21630926 = formData.getOrDefault("MasterUserPassword")
  valid_21630926 = validateParameter(valid_21630926, JString, required = true,
                                   default = nil)
  if valid_21630926 != nil:
    section.add "MasterUserPassword", valid_21630926
  var valid_21630927 = formData.getOrDefault("SourceEngineVersion")
  valid_21630927 = validateParameter(valid_21630927, JString, required = true,
                                   default = nil)
  if valid_21630927 != nil:
    section.add "SourceEngineVersion", valid_21630927
  var valid_21630928 = formData.getOrDefault("S3Prefix")
  valid_21630928 = validateParameter(valid_21630928, JString, required = false,
                                   default = nil)
  if valid_21630928 != nil:
    section.add "S3Prefix", valid_21630928
  var valid_21630929 = formData.getOrDefault("DeletionProtection")
  valid_21630929 = validateParameter(valid_21630929, JBool, required = false,
                                   default = nil)
  if valid_21630929 != nil:
    section.add "DeletionProtection", valid_21630929
  var valid_21630930 = formData.getOrDefault("DBSubnetGroupName")
  valid_21630930 = validateParameter(valid_21630930, JString, required = false,
                                   default = nil)
  if valid_21630930 != nil:
    section.add "DBSubnetGroupName", valid_21630930
  var valid_21630931 = formData.getOrDefault("S3IngestionRoleArn")
  valid_21630931 = validateParameter(valid_21630931, JString, required = true,
                                   default = nil)
  if valid_21630931 != nil:
    section.add "S3IngestionRoleArn", valid_21630931
  var valid_21630932 = formData.getOrDefault("DomainIAMRoleName")
  valid_21630932 = validateParameter(valid_21630932, JString, required = false,
                                   default = nil)
  if valid_21630932 != nil:
    section.add "DomainIAMRoleName", valid_21630932
  var valid_21630933 = formData.getOrDefault("AvailabilityZones")
  valid_21630933 = validateParameter(valid_21630933, JArray, required = false,
                                   default = nil)
  if valid_21630933 != nil:
    section.add "AvailabilityZones", valid_21630933
  var valid_21630934 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_21630934 = validateParameter(valid_21630934, JString, required = false,
                                   default = nil)
  if valid_21630934 != nil:
    section.add "DBClusterParameterGroupName", valid_21630934
  var valid_21630935 = formData.getOrDefault("MasterUsername")
  valid_21630935 = validateParameter(valid_21630935, JString, required = true,
                                   default = nil)
  if valid_21630935 != nil:
    section.add "MasterUsername", valid_21630935
  var valid_21630936 = formData.getOrDefault("DatabaseName")
  valid_21630936 = validateParameter(valid_21630936, JString, required = false,
                                   default = nil)
  if valid_21630936 != nil:
    section.add "DatabaseName", valid_21630936
  var valid_21630937 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_21630937 = validateParameter(valid_21630937, JArray, required = false,
                                   default = nil)
  if valid_21630937 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21630937
  var valid_21630938 = formData.getOrDefault("CharacterSetName")
  valid_21630938 = validateParameter(valid_21630938, JString, required = false,
                                   default = nil)
  if valid_21630938 != nil:
    section.add "CharacterSetName", valid_21630938
  var valid_21630939 = formData.getOrDefault("Domain")
  valid_21630939 = validateParameter(valid_21630939, JString, required = false,
                                   default = nil)
  if valid_21630939 != nil:
    section.add "Domain", valid_21630939
  var valid_21630940 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21630940 = validateParameter(valid_21630940, JBool, required = false,
                                   default = nil)
  if valid_21630940 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21630940
  var valid_21630941 = formData.getOrDefault("PreferredBackupWindow")
  valid_21630941 = validateParameter(valid_21630941, JString, required = false,
                                   default = nil)
  if valid_21630941 != nil:
    section.add "PreferredBackupWindow", valid_21630941
  var valid_21630942 = formData.getOrDefault("KmsKeyId")
  valid_21630942 = validateParameter(valid_21630942, JString, required = false,
                                   default = nil)
  if valid_21630942 != nil:
    section.add "KmsKeyId", valid_21630942
  var valid_21630943 = formData.getOrDefault("StorageEncrypted")
  valid_21630943 = validateParameter(valid_21630943, JBool, required = false,
                                   default = nil)
  if valid_21630943 != nil:
    section.add "StorageEncrypted", valid_21630943
  var valid_21630944 = formData.getOrDefault("DBClusterIdentifier")
  valid_21630944 = validateParameter(valid_21630944, JString, required = true,
                                   default = nil)
  if valid_21630944 != nil:
    section.add "DBClusterIdentifier", valid_21630944
  var valid_21630945 = formData.getOrDefault("EngineVersion")
  valid_21630945 = validateParameter(valid_21630945, JString, required = false,
                                   default = nil)
  if valid_21630945 != nil:
    section.add "EngineVersion", valid_21630945
  var valid_21630946 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_21630946 = validateParameter(valid_21630946, JString, required = false,
                                   default = nil)
  if valid_21630946 != nil:
    section.add "PreferredMaintenanceWindow", valid_21630946
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630947: Call_PostRestoreDBClusterFromS3_21630904;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21630947.validator(path, query, header, formData, body, _)
  let scheme = call_21630947.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630947.makeUrl(scheme.get, call_21630947.host, call_21630947.base,
                               call_21630947.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630947, uri, valid, _)

proc call*(call_21630948: Call_PostRestoreDBClusterFromS3_21630904;
          S3BucketName: string; Engine: string; SourceEngine: string;
          MasterUserPassword: string; SourceEngineVersion: string;
          S3IngestionRoleArn: string; MasterUsername: string;
          DBClusterIdentifier: string; CopyTagsToSnapshot: bool = false;
          Port: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          OptionGroupName: string = ""; BackupRetentionPeriod: int = 0;
          BacktrackWindow: int = 0; Tags: JsonNode = nil; S3Prefix: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          DomainIAMRoleName: string = ""; Action: string = "RestoreDBClusterFromS3";
          AvailabilityZones: JsonNode = nil;
          DBClusterParameterGroupName: string = ""; DatabaseName: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil;
          CharacterSetName: string = ""; Domain: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; KmsKeyId: string = "";
          StorageEncrypted: bool = false; EngineVersion: string = "";
          Version: string = "2014-10-31"; PreferredMaintenanceWindow: string = ""): Recallable =
  ## postRestoreDBClusterFromS3
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Port: int
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   SourceEngine: string (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   S3Prefix: string
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   S3IngestionRoleArn: string (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   MasterUsername: string (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   CharacterSetName: string
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation. </p> <p> For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurmysql-kerberos.html">Using Kerberos Authentication for Aurora MySQL</a> in the <i>Amazon Aurora User Guide</i>. </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  var query_21630949 = newJObject()
  var formData_21630950 = newJObject()
  add(formData_21630950, "S3BucketName", newJString(S3BucketName))
  add(formData_21630950, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_21630950, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_21630950.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_21630950, "Engine", newJString(Engine))
  add(formData_21630950, "SourceEngine", newJString(SourceEngine))
  add(formData_21630950, "OptionGroupName", newJString(OptionGroupName))
  add(formData_21630950, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(formData_21630950, "BacktrackWindow", newJInt(BacktrackWindow))
  if Tags != nil:
    formData_21630950.add "Tags", Tags
  add(formData_21630950, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_21630950, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(formData_21630950, "S3Prefix", newJString(S3Prefix))
  add(formData_21630950, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_21630950, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_21630950, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(formData_21630950, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_21630949, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_21630950.add "AvailabilityZones", AvailabilityZones
  add(formData_21630950, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_21630950, "MasterUsername", newJString(MasterUsername))
  add(formData_21630950, "DatabaseName", newJString(DatabaseName))
  if EnableCloudwatchLogsExports != nil:
    formData_21630950.add "EnableCloudwatchLogsExports",
                         EnableCloudwatchLogsExports
  add(formData_21630950, "CharacterSetName", newJString(CharacterSetName))
  add(formData_21630950, "Domain", newJString(Domain))
  add(formData_21630950, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_21630950, "PreferredBackupWindow",
      newJString(PreferredBackupWindow))
  add(formData_21630950, "KmsKeyId", newJString(KmsKeyId))
  add(formData_21630950, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_21630950, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_21630950, "EngineVersion", newJString(EngineVersion))
  add(query_21630949, "Version", newJString(Version))
  add(formData_21630950, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_21630948.call(nil, query_21630949, nil, formData_21630950, nil)

var postRestoreDBClusterFromS3* = Call_PostRestoreDBClusterFromS3_21630904(
    name: "postRestoreDBClusterFromS3", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromS3",
    validator: validate_PostRestoreDBClusterFromS3_21630905, base: "/",
    makeUrl: url_PostRestoreDBClusterFromS3_21630906,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromS3_21630858 = ref object of OpenApiRestCall_21625435
proc url_GetRestoreDBClusterFromS3_21630860(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterFromS3_21630859(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   S3Prefix: JString
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   MasterUserPassword: JString (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   BackupRetentionPeriod: JInt
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Action: JString (required)
  ##   CharacterSetName: JString
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   DBSubnetGroupName: JString
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   SourceEngine: JString (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation. </p> <p> For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurmysql-kerberos.html">Using Kerberos Authentication for Aurora MySQL</a> in the <i>Amazon Aurora User Guide</i>. </p>
  ##   EngineVersion: JString
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: JString (required)
  ##   MasterUsername: JString (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_21630861 = query.getOrDefault("Engine")
  valid_21630861 = validateParameter(valid_21630861, JString, required = true,
                                   default = nil)
  if valid_21630861 != nil:
    section.add "Engine", valid_21630861
  var valid_21630862 = query.getOrDefault("S3BucketName")
  valid_21630862 = validateParameter(valid_21630862, JString, required = true,
                                   default = nil)
  if valid_21630862 != nil:
    section.add "S3BucketName", valid_21630862
  var valid_21630863 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_21630863 = validateParameter(valid_21630863, JString, required = false,
                                   default = nil)
  if valid_21630863 != nil:
    section.add "PreferredMaintenanceWindow", valid_21630863
  var valid_21630864 = query.getOrDefault("DBClusterParameterGroupName")
  valid_21630864 = validateParameter(valid_21630864, JString, required = false,
                                   default = nil)
  if valid_21630864 != nil:
    section.add "DBClusterParameterGroupName", valid_21630864
  var valid_21630865 = query.getOrDefault("StorageEncrypted")
  valid_21630865 = validateParameter(valid_21630865, JBool, required = false,
                                   default = nil)
  if valid_21630865 != nil:
    section.add "StorageEncrypted", valid_21630865
  var valid_21630866 = query.getOrDefault("S3Prefix")
  valid_21630866 = validateParameter(valid_21630866, JString, required = false,
                                   default = nil)
  if valid_21630866 != nil:
    section.add "S3Prefix", valid_21630866
  var valid_21630867 = query.getOrDefault("AvailabilityZones")
  valid_21630867 = validateParameter(valid_21630867, JArray, required = false,
                                   default = nil)
  if valid_21630867 != nil:
    section.add "AvailabilityZones", valid_21630867
  var valid_21630868 = query.getOrDefault("DatabaseName")
  valid_21630868 = validateParameter(valid_21630868, JString, required = false,
                                   default = nil)
  if valid_21630868 != nil:
    section.add "DatabaseName", valid_21630868
  var valid_21630869 = query.getOrDefault("DBClusterIdentifier")
  valid_21630869 = validateParameter(valid_21630869, JString, required = true,
                                   default = nil)
  if valid_21630869 != nil:
    section.add "DBClusterIdentifier", valid_21630869
  var valid_21630870 = query.getOrDefault("OptionGroupName")
  valid_21630870 = validateParameter(valid_21630870, JString, required = false,
                                   default = nil)
  if valid_21630870 != nil:
    section.add "OptionGroupName", valid_21630870
  var valid_21630871 = query.getOrDefault("MasterUserPassword")
  valid_21630871 = validateParameter(valid_21630871, JString, required = true,
                                   default = nil)
  if valid_21630871 != nil:
    section.add "MasterUserPassword", valid_21630871
  var valid_21630872 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21630872 = validateParameter(valid_21630872, JBool, required = false,
                                   default = nil)
  if valid_21630872 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21630872
  var valid_21630873 = query.getOrDefault("VpcSecurityGroupIds")
  valid_21630873 = validateParameter(valid_21630873, JArray, required = false,
                                   default = nil)
  if valid_21630873 != nil:
    section.add "VpcSecurityGroupIds", valid_21630873
  var valid_21630874 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_21630874 = validateParameter(valid_21630874, JArray, required = false,
                                   default = nil)
  if valid_21630874 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21630874
  var valid_21630875 = query.getOrDefault("DomainIAMRoleName")
  valid_21630875 = validateParameter(valid_21630875, JString, required = false,
                                   default = nil)
  if valid_21630875 != nil:
    section.add "DomainIAMRoleName", valid_21630875
  var valid_21630876 = query.getOrDefault("Tags")
  valid_21630876 = validateParameter(valid_21630876, JArray, required = false,
                                   default = nil)
  if valid_21630876 != nil:
    section.add "Tags", valid_21630876
  var valid_21630877 = query.getOrDefault("BackupRetentionPeriod")
  valid_21630877 = validateParameter(valid_21630877, JInt, required = false,
                                   default = nil)
  if valid_21630877 != nil:
    section.add "BackupRetentionPeriod", valid_21630877
  var valid_21630878 = query.getOrDefault("S3IngestionRoleArn")
  valid_21630878 = validateParameter(valid_21630878, JString, required = true,
                                   default = nil)
  if valid_21630878 != nil:
    section.add "S3IngestionRoleArn", valid_21630878
  var valid_21630879 = query.getOrDefault("CopyTagsToSnapshot")
  valid_21630879 = validateParameter(valid_21630879, JBool, required = false,
                                   default = nil)
  if valid_21630879 != nil:
    section.add "CopyTagsToSnapshot", valid_21630879
  var valid_21630880 = query.getOrDefault("DeletionProtection")
  valid_21630880 = validateParameter(valid_21630880, JBool, required = false,
                                   default = nil)
  if valid_21630880 != nil:
    section.add "DeletionProtection", valid_21630880
  var valid_21630881 = query.getOrDefault("Action")
  valid_21630881 = validateParameter(valid_21630881, JString, required = true, default = newJString(
      "RestoreDBClusterFromS3"))
  if valid_21630881 != nil:
    section.add "Action", valid_21630881
  var valid_21630882 = query.getOrDefault("CharacterSetName")
  valid_21630882 = validateParameter(valid_21630882, JString, required = false,
                                   default = nil)
  if valid_21630882 != nil:
    section.add "CharacterSetName", valid_21630882
  var valid_21630883 = query.getOrDefault("DBSubnetGroupName")
  valid_21630883 = validateParameter(valid_21630883, JString, required = false,
                                   default = nil)
  if valid_21630883 != nil:
    section.add "DBSubnetGroupName", valid_21630883
  var valid_21630884 = query.getOrDefault("KmsKeyId")
  valid_21630884 = validateParameter(valid_21630884, JString, required = false,
                                   default = nil)
  if valid_21630884 != nil:
    section.add "KmsKeyId", valid_21630884
  var valid_21630885 = query.getOrDefault("SourceEngine")
  valid_21630885 = validateParameter(valid_21630885, JString, required = true,
                                   default = nil)
  if valid_21630885 != nil:
    section.add "SourceEngine", valid_21630885
  var valid_21630886 = query.getOrDefault("BacktrackWindow")
  valid_21630886 = validateParameter(valid_21630886, JInt, required = false,
                                   default = nil)
  if valid_21630886 != nil:
    section.add "BacktrackWindow", valid_21630886
  var valid_21630887 = query.getOrDefault("Domain")
  valid_21630887 = validateParameter(valid_21630887, JString, required = false,
                                   default = nil)
  if valid_21630887 != nil:
    section.add "Domain", valid_21630887
  var valid_21630888 = query.getOrDefault("EngineVersion")
  valid_21630888 = validateParameter(valid_21630888, JString, required = false,
                                   default = nil)
  if valid_21630888 != nil:
    section.add "EngineVersion", valid_21630888
  var valid_21630889 = query.getOrDefault("Port")
  valid_21630889 = validateParameter(valid_21630889, JInt, required = false,
                                   default = nil)
  if valid_21630889 != nil:
    section.add "Port", valid_21630889
  var valid_21630890 = query.getOrDefault("SourceEngineVersion")
  valid_21630890 = validateParameter(valid_21630890, JString, required = true,
                                   default = nil)
  if valid_21630890 != nil:
    section.add "SourceEngineVersion", valid_21630890
  var valid_21630891 = query.getOrDefault("PreferredBackupWindow")
  valid_21630891 = validateParameter(valid_21630891, JString, required = false,
                                   default = nil)
  if valid_21630891 != nil:
    section.add "PreferredBackupWindow", valid_21630891
  var valid_21630892 = query.getOrDefault("Version")
  valid_21630892 = validateParameter(valid_21630892, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630892 != nil:
    section.add "Version", valid_21630892
  var valid_21630893 = query.getOrDefault("MasterUsername")
  valid_21630893 = validateParameter(valid_21630893, JString, required = true,
                                   default = nil)
  if valid_21630893 != nil:
    section.add "MasterUsername", valid_21630893
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630894 = header.getOrDefault("X-Amz-Date")
  valid_21630894 = validateParameter(valid_21630894, JString, required = false,
                                   default = nil)
  if valid_21630894 != nil:
    section.add "X-Amz-Date", valid_21630894
  var valid_21630895 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630895 = validateParameter(valid_21630895, JString, required = false,
                                   default = nil)
  if valid_21630895 != nil:
    section.add "X-Amz-Security-Token", valid_21630895
  var valid_21630896 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630896 = validateParameter(valid_21630896, JString, required = false,
                                   default = nil)
  if valid_21630896 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630896
  var valid_21630897 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630897 = validateParameter(valid_21630897, JString, required = false,
                                   default = nil)
  if valid_21630897 != nil:
    section.add "X-Amz-Algorithm", valid_21630897
  var valid_21630898 = header.getOrDefault("X-Amz-Signature")
  valid_21630898 = validateParameter(valid_21630898, JString, required = false,
                                   default = nil)
  if valid_21630898 != nil:
    section.add "X-Amz-Signature", valid_21630898
  var valid_21630899 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630899 = validateParameter(valid_21630899, JString, required = false,
                                   default = nil)
  if valid_21630899 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630899
  var valid_21630900 = header.getOrDefault("X-Amz-Credential")
  valid_21630900 = validateParameter(valid_21630900, JString, required = false,
                                   default = nil)
  if valid_21630900 != nil:
    section.add "X-Amz-Credential", valid_21630900
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630901: Call_GetRestoreDBClusterFromS3_21630858;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21630901.validator(path, query, header, formData, body, _)
  let scheme = call_21630901.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630901.makeUrl(scheme.get, call_21630901.host, call_21630901.base,
                               call_21630901.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630901, uri, valid, _)

proc call*(call_21630902: Call_GetRestoreDBClusterFromS3_21630858; Engine: string;
          S3BucketName: string; DBClusterIdentifier: string;
          MasterUserPassword: string; S3IngestionRoleArn: string;
          SourceEngine: string; SourceEngineVersion: string; MasterUsername: string;
          PreferredMaintenanceWindow: string = "";
          DBClusterParameterGroupName: string = ""; StorageEncrypted: bool = false;
          S3Prefix: string = ""; AvailabilityZones: JsonNode = nil;
          DatabaseName: string = ""; OptionGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil;
          DomainIAMRoleName: string = ""; Tags: JsonNode = nil;
          BackupRetentionPeriod: int = 0; CopyTagsToSnapshot: bool = false;
          DeletionProtection: bool = false;
          Action: string = "RestoreDBClusterFromS3"; CharacterSetName: string = "";
          DBSubnetGroupName: string = ""; KmsKeyId: string = "";
          BacktrackWindow: int = 0; Domain: string = ""; EngineVersion: string = "";
          Port: int = 0; PreferredBackupWindow: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterFromS3
  ## <p>Creates an Amazon Aurora DB cluster from data stored in an Amazon S3 bucket. Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.html"> Migrating Data to an Amazon Aurora MySQL DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for the restored DB cluster.</p> <p>Valid Values: <code>aurora</code>, <code>aurora-postgresql</code> </p>
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p> <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> <p>Constraints: Minimum 30-minute window.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used. </p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li> </ul>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the restored DB cluster is encrypted.
  ##   S3Prefix: string
  ##           : The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
  ##   AvailabilityZones: JArray
  ##                    : A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>my-cluster1</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p> <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
  ##   MasterUserPassword: string (required)
  ##                     : <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of EC2 VPC security groups to associate with the restored DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   BackupRetentionPeriod: int
  ##                        : <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p> <p>Default: 1</p> <p>Constraints:</p> <ul> <li> <p>Must be a value from 1 to 35</p> </li> </ul>
  ##   S3IngestionRoleArn: string (required)
  ##                     : The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Action: string (required)
  ##   CharacterSetName: string
  ##                   : A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
  ##   DBSubnetGroupName: string
  ##                    : <p>A DB subnet group to associate with the restored DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup. </p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key.</p> <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   SourceEngine: string (required)
  ##               : <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket. </p> <p>Valid values: <code>mysql</code> </p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation. </p> <p> For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurmysql-kerberos.html">Using Kerberos Authentication for Aurora MySQL</a> in the <i>Amazon Aurora User Guide</i>. </p>
  ##   EngineVersion: string
  ##                : <p>The version number of the database engine to use.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the instances in the restored DB cluster accept connections.</p> <p> Default: <code>3306</code> </p>
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The version of the database that the backup files were created from.</p> <p>MySQL version 5.5 and 5.6 are supported. </p> <p>Example: <code>5.6.22</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter. </p> <p>The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   Version: string (required)
  ##   MasterUsername: string (required)
  ##                 : <p>The name of the master user for the restored DB cluster.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  var query_21630903 = newJObject()
  add(query_21630903, "Engine", newJString(Engine))
  add(query_21630903, "S3BucketName", newJString(S3BucketName))
  add(query_21630903, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  add(query_21630903, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_21630903, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_21630903, "S3Prefix", newJString(S3Prefix))
  if AvailabilityZones != nil:
    query_21630903.add "AvailabilityZones", AvailabilityZones
  add(query_21630903, "DatabaseName", newJString(DatabaseName))
  add(query_21630903, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21630903, "OptionGroupName", newJString(OptionGroupName))
  add(query_21630903, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_21630903, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  if VpcSecurityGroupIds != nil:
    query_21630903.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_21630903.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_21630903, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  if Tags != nil:
    query_21630903.add "Tags", Tags
  add(query_21630903, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_21630903, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_21630903, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_21630903, "DeletionProtection", newJBool(DeletionProtection))
  add(query_21630903, "Action", newJString(Action))
  add(query_21630903, "CharacterSetName", newJString(CharacterSetName))
  add(query_21630903, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21630903, "KmsKeyId", newJString(KmsKeyId))
  add(query_21630903, "SourceEngine", newJString(SourceEngine))
  add(query_21630903, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_21630903, "Domain", newJString(Domain))
  add(query_21630903, "EngineVersion", newJString(EngineVersion))
  add(query_21630903, "Port", newJInt(Port))
  add(query_21630903, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_21630903, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_21630903, "Version", newJString(Version))
  add(query_21630903, "MasterUsername", newJString(MasterUsername))
  result = call_21630902.call(nil, query_21630903, nil, nil, nil)

var getRestoreDBClusterFromS3* = Call_GetRestoreDBClusterFromS3_21630858(
    name: "getRestoreDBClusterFromS3", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromS3",
    validator: validate_GetRestoreDBClusterFromS3_21630859, base: "/",
    makeUrl: url_GetRestoreDBClusterFromS3_21630860,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterFromSnapshot_21630992 = ref object of OpenApiRestCall_21625435
proc url_PostRestoreDBClusterFromSnapshot_21630994(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterFromSnapshot_21630993(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21630995 = query.getOrDefault("Action")
  valid_21630995 = validateParameter(valid_21630995, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_21630995 != nil:
    section.add "Action", valid_21630995
  var valid_21630996 = query.getOrDefault("Version")
  valid_21630996 = validateParameter(valid_21630996, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630996 != nil:
    section.add "Version", valid_21630996
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630997 = header.getOrDefault("X-Amz-Date")
  valid_21630997 = validateParameter(valid_21630997, JString, required = false,
                                   default = nil)
  if valid_21630997 != nil:
    section.add "X-Amz-Date", valid_21630997
  var valid_21630998 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630998 = validateParameter(valid_21630998, JString, required = false,
                                   default = nil)
  if valid_21630998 != nil:
    section.add "X-Amz-Security-Token", valid_21630998
  var valid_21630999 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630999 = validateParameter(valid_21630999, JString, required = false,
                                   default = nil)
  if valid_21630999 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630999
  var valid_21631000 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631000 = validateParameter(valid_21631000, JString, required = false,
                                   default = nil)
  if valid_21631000 != nil:
    section.add "X-Amz-Algorithm", valid_21631000
  var valid_21631001 = header.getOrDefault("X-Amz-Signature")
  valid_21631001 = validateParameter(valid_21631001, JString, required = false,
                                   default = nil)
  if valid_21631001 != nil:
    section.add "X-Amz-Signature", valid_21631001
  var valid_21631002 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631002 = validateParameter(valid_21631002, JString, required = false,
                                   default = nil)
  if valid_21631002 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631002
  var valid_21631003 = header.getOrDefault("X-Amz-Credential")
  valid_21631003 = validateParameter(valid_21631003, JString, required = false,
                                   default = nil)
  if valid_21631003 != nil:
    section.add "X-Amz-Credential", valid_21631003
  result.add "header", section
  ## parameters in `formData` object:
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   Domain: JString
  ##         : Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation. 
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   EngineVersion: JString
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  section = newJObject()
  var valid_21631004 = formData.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_21631004 = validateParameter(valid_21631004, JString, required = false,
                                   default = nil)
  if valid_21631004 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_21631004
  var valid_21631005 = formData.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_21631005 = validateParameter(valid_21631005, JString, required = false,
                                   default = nil)
  if valid_21631005 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_21631005
  var valid_21631006 = formData.getOrDefault("ScalingConfiguration.AutoPause")
  valid_21631006 = validateParameter(valid_21631006, JString, required = false,
                                   default = nil)
  if valid_21631006 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_21631006
  var valid_21631007 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_21631007 = validateParameter(valid_21631007, JBool, required = false,
                                   default = nil)
  if valid_21631007 != nil:
    section.add "CopyTagsToSnapshot", valid_21631007
  var valid_21631008 = formData.getOrDefault("Port")
  valid_21631008 = validateParameter(valid_21631008, JInt, required = false,
                                   default = nil)
  if valid_21631008 != nil:
    section.add "Port", valid_21631008
  var valid_21631009 = formData.getOrDefault("EngineMode")
  valid_21631009 = validateParameter(valid_21631009, JString, required = false,
                                   default = nil)
  if valid_21631009 != nil:
    section.add "EngineMode", valid_21631009
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_21631010 = formData.getOrDefault("Engine")
  valid_21631010 = validateParameter(valid_21631010, JString, required = true,
                                   default = nil)
  if valid_21631010 != nil:
    section.add "Engine", valid_21631010
  var valid_21631011 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_21631011 = validateParameter(valid_21631011, JArray, required = false,
                                   default = nil)
  if valid_21631011 != nil:
    section.add "VpcSecurityGroupIds", valid_21631011
  var valid_21631012 = formData.getOrDefault("OptionGroupName")
  valid_21631012 = validateParameter(valid_21631012, JString, required = false,
                                   default = nil)
  if valid_21631012 != nil:
    section.add "OptionGroupName", valid_21631012
  var valid_21631013 = formData.getOrDefault("BacktrackWindow")
  valid_21631013 = validateParameter(valid_21631013, JInt, required = false,
                                   default = nil)
  if valid_21631013 != nil:
    section.add "BacktrackWindow", valid_21631013
  var valid_21631014 = formData.getOrDefault("Tags")
  valid_21631014 = validateParameter(valid_21631014, JArray, required = false,
                                   default = nil)
  if valid_21631014 != nil:
    section.add "Tags", valid_21631014
  var valid_21631015 = formData.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_21631015 = validateParameter(valid_21631015, JString, required = false,
                                   default = nil)
  if valid_21631015 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_21631015
  var valid_21631016 = formData.getOrDefault("DeletionProtection")
  valid_21631016 = validateParameter(valid_21631016, JBool, required = false,
                                   default = nil)
  if valid_21631016 != nil:
    section.add "DeletionProtection", valid_21631016
  var valid_21631017 = formData.getOrDefault("DBSubnetGroupName")
  valid_21631017 = validateParameter(valid_21631017, JString, required = false,
                                   default = nil)
  if valid_21631017 != nil:
    section.add "DBSubnetGroupName", valid_21631017
  var valid_21631018 = formData.getOrDefault("DomainIAMRoleName")
  valid_21631018 = validateParameter(valid_21631018, JString, required = false,
                                   default = nil)
  if valid_21631018 != nil:
    section.add "DomainIAMRoleName", valid_21631018
  var valid_21631019 = formData.getOrDefault("AvailabilityZones")
  valid_21631019 = validateParameter(valid_21631019, JArray, required = false,
                                   default = nil)
  if valid_21631019 != nil:
    section.add "AvailabilityZones", valid_21631019
  var valid_21631020 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_21631020 = validateParameter(valid_21631020, JString, required = false,
                                   default = nil)
  if valid_21631020 != nil:
    section.add "DBClusterParameterGroupName", valid_21631020
  var valid_21631021 = formData.getOrDefault(
      "ScalingConfiguration.SecondsUntilAutoPause")
  valid_21631021 = validateParameter(valid_21631021, JString, required = false,
                                   default = nil)
  if valid_21631021 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_21631021
  var valid_21631022 = formData.getOrDefault("DatabaseName")
  valid_21631022 = validateParameter(valid_21631022, JString, required = false,
                                   default = nil)
  if valid_21631022 != nil:
    section.add "DatabaseName", valid_21631022
  var valid_21631023 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_21631023 = validateParameter(valid_21631023, JArray, required = false,
                                   default = nil)
  if valid_21631023 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21631023
  var valid_21631024 = formData.getOrDefault("Domain")
  valid_21631024 = validateParameter(valid_21631024, JString, required = false,
                                   default = nil)
  if valid_21631024 != nil:
    section.add "Domain", valid_21631024
  var valid_21631025 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21631025 = validateParameter(valid_21631025, JBool, required = false,
                                   default = nil)
  if valid_21631025 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21631025
  var valid_21631026 = formData.getOrDefault("KmsKeyId")
  valid_21631026 = validateParameter(valid_21631026, JString, required = false,
                                   default = nil)
  if valid_21631026 != nil:
    section.add "KmsKeyId", valid_21631026
  var valid_21631027 = formData.getOrDefault("SnapshotIdentifier")
  valid_21631027 = validateParameter(valid_21631027, JString, required = true,
                                   default = nil)
  if valid_21631027 != nil:
    section.add "SnapshotIdentifier", valid_21631027
  var valid_21631028 = formData.getOrDefault("DBClusterIdentifier")
  valid_21631028 = validateParameter(valid_21631028, JString, required = true,
                                   default = nil)
  if valid_21631028 != nil:
    section.add "DBClusterIdentifier", valid_21631028
  var valid_21631029 = formData.getOrDefault("EngineVersion")
  valid_21631029 = validateParameter(valid_21631029, JString, required = false,
                                   default = nil)
  if valid_21631029 != nil:
    section.add "EngineVersion", valid_21631029
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631030: Call_PostRestoreDBClusterFromSnapshot_21630992;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21631030.validator(path, query, header, formData, body, _)
  let scheme = call_21631030.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631030.makeUrl(scheme.get, call_21631030.host, call_21631030.base,
                               call_21631030.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631030, uri, valid, _)

proc call*(call_21631031: Call_PostRestoreDBClusterFromSnapshot_21630992;
          Engine: string; SnapshotIdentifier: string; DBClusterIdentifier: string;
          ScalingConfigurationTimeoutAction: string = "";
          ScalingConfigurationMaxCapacity: string = "";
          ScalingConfigurationAutoPause: string = "";
          CopyTagsToSnapshot: bool = false; Port: int = 0; EngineMode: string = "";
          VpcSecurityGroupIds: JsonNode = nil; OptionGroupName: string = "";
          BacktrackWindow: int = 0; Tags: JsonNode = nil;
          ScalingConfigurationMinCapacity: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          DomainIAMRoleName: string = "";
          Action: string = "RestoreDBClusterFromSnapshot";
          AvailabilityZones: JsonNode = nil;
          DBClusterParameterGroupName: string = "";
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          DatabaseName: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          Domain: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          KmsKeyId: string = ""; EngineVersion: string = "";
          Version: string = "2014-10-31"): Recallable =
  ## postRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Action: string (required)
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   Domain: string
  ##         : Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation. 
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   EngineVersion: string
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Version: string (required)
  var query_21631032 = newJObject()
  var formData_21631033 = newJObject()
  add(formData_21631033, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  add(formData_21631033, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(formData_21631033, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(formData_21631033, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_21631033, "Port", newJInt(Port))
  add(formData_21631033, "EngineMode", newJString(EngineMode))
  add(formData_21631033, "Engine", newJString(Engine))
  if VpcSecurityGroupIds != nil:
    formData_21631033.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_21631033, "OptionGroupName", newJString(OptionGroupName))
  add(formData_21631033, "BacktrackWindow", newJInt(BacktrackWindow))
  if Tags != nil:
    formData_21631033.add "Tags", Tags
  add(formData_21631033, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(formData_21631033, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_21631033, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_21631033, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_21631032, "Action", newJString(Action))
  if AvailabilityZones != nil:
    formData_21631033.add "AvailabilityZones", AvailabilityZones
  add(formData_21631033, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(formData_21631033, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(formData_21631033, "DatabaseName", newJString(DatabaseName))
  if EnableCloudwatchLogsExports != nil:
    formData_21631033.add "EnableCloudwatchLogsExports",
                         EnableCloudwatchLogsExports
  add(formData_21631033, "Domain", newJString(Domain))
  add(formData_21631033, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_21631033, "KmsKeyId", newJString(KmsKeyId))
  add(formData_21631033, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(formData_21631033, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(formData_21631033, "EngineVersion", newJString(EngineVersion))
  add(query_21631032, "Version", newJString(Version))
  result = call_21631031.call(nil, query_21631032, nil, formData_21631033, nil)

var postRestoreDBClusterFromSnapshot* = Call_PostRestoreDBClusterFromSnapshot_21630992(
    name: "postRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_PostRestoreDBClusterFromSnapshot_21630993, base: "/",
    makeUrl: url_PostRestoreDBClusterFromSnapshot_21630994,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterFromSnapshot_21630951 = ref object of OpenApiRestCall_21625435
proc url_GetRestoreDBClusterFromSnapshot_21630953(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterFromSnapshot_21630952(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   ScalingConfiguration.MinCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DatabaseName: JString
  ##               : The database name for the restored DB cluster.
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EngineMode: JString
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ScalingConfiguration.AutoPause: JString
  ##                                 : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Domain: JString
  ##         : Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation. 
  ##   ScalingConfiguration.SecondsUntilAutoPause: JString
  ##                                             : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfiguration.MaxCapacity: JString
  ##                                   : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   EngineVersion: JString
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   SnapshotIdentifier: JString (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Version: JString (required)
  ##   ScalingConfiguration.TimeoutAction: JString
  ##                                     : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_21630954 = query.getOrDefault("Engine")
  valid_21630954 = validateParameter(valid_21630954, JString, required = true,
                                   default = nil)
  if valid_21630954 != nil:
    section.add "Engine", valid_21630954
  var valid_21630955 = query.getOrDefault("ScalingConfiguration.MinCapacity")
  valid_21630955 = validateParameter(valid_21630955, JString, required = false,
                                   default = nil)
  if valid_21630955 != nil:
    section.add "ScalingConfiguration.MinCapacity", valid_21630955
  var valid_21630956 = query.getOrDefault("DBClusterParameterGroupName")
  valid_21630956 = validateParameter(valid_21630956, JString, required = false,
                                   default = nil)
  if valid_21630956 != nil:
    section.add "DBClusterParameterGroupName", valid_21630956
  var valid_21630957 = query.getOrDefault("AvailabilityZones")
  valid_21630957 = validateParameter(valid_21630957, JArray, required = false,
                                   default = nil)
  if valid_21630957 != nil:
    section.add "AvailabilityZones", valid_21630957
  var valid_21630958 = query.getOrDefault("DatabaseName")
  valid_21630958 = validateParameter(valid_21630958, JString, required = false,
                                   default = nil)
  if valid_21630958 != nil:
    section.add "DatabaseName", valid_21630958
  var valid_21630959 = query.getOrDefault("DBClusterIdentifier")
  valid_21630959 = validateParameter(valid_21630959, JString, required = true,
                                   default = nil)
  if valid_21630959 != nil:
    section.add "DBClusterIdentifier", valid_21630959
  var valid_21630960 = query.getOrDefault("OptionGroupName")
  valid_21630960 = validateParameter(valid_21630960, JString, required = false,
                                   default = nil)
  if valid_21630960 != nil:
    section.add "OptionGroupName", valid_21630960
  var valid_21630961 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21630961 = validateParameter(valid_21630961, JBool, required = false,
                                   default = nil)
  if valid_21630961 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21630961
  var valid_21630962 = query.getOrDefault("EngineMode")
  valid_21630962 = validateParameter(valid_21630962, JString, required = false,
                                   default = nil)
  if valid_21630962 != nil:
    section.add "EngineMode", valid_21630962
  var valid_21630963 = query.getOrDefault("VpcSecurityGroupIds")
  valid_21630963 = validateParameter(valid_21630963, JArray, required = false,
                                   default = nil)
  if valid_21630963 != nil:
    section.add "VpcSecurityGroupIds", valid_21630963
  var valid_21630964 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_21630964 = validateParameter(valid_21630964, JArray, required = false,
                                   default = nil)
  if valid_21630964 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21630964
  var valid_21630965 = query.getOrDefault("DomainIAMRoleName")
  valid_21630965 = validateParameter(valid_21630965, JString, required = false,
                                   default = nil)
  if valid_21630965 != nil:
    section.add "DomainIAMRoleName", valid_21630965
  var valid_21630966 = query.getOrDefault("Tags")
  valid_21630966 = validateParameter(valid_21630966, JArray, required = false,
                                   default = nil)
  if valid_21630966 != nil:
    section.add "Tags", valid_21630966
  var valid_21630967 = query.getOrDefault("ScalingConfiguration.AutoPause")
  valid_21630967 = validateParameter(valid_21630967, JString, required = false,
                                   default = nil)
  if valid_21630967 != nil:
    section.add "ScalingConfiguration.AutoPause", valid_21630967
  var valid_21630968 = query.getOrDefault("CopyTagsToSnapshot")
  valid_21630968 = validateParameter(valid_21630968, JBool, required = false,
                                   default = nil)
  if valid_21630968 != nil:
    section.add "CopyTagsToSnapshot", valid_21630968
  var valid_21630969 = query.getOrDefault("DeletionProtection")
  valid_21630969 = validateParameter(valid_21630969, JBool, required = false,
                                   default = nil)
  if valid_21630969 != nil:
    section.add "DeletionProtection", valid_21630969
  var valid_21630970 = query.getOrDefault("Action")
  valid_21630970 = validateParameter(valid_21630970, JString, required = true, default = newJString(
      "RestoreDBClusterFromSnapshot"))
  if valid_21630970 != nil:
    section.add "Action", valid_21630970
  var valid_21630971 = query.getOrDefault("DBSubnetGroupName")
  valid_21630971 = validateParameter(valid_21630971, JString, required = false,
                                   default = nil)
  if valid_21630971 != nil:
    section.add "DBSubnetGroupName", valid_21630971
  var valid_21630972 = query.getOrDefault("KmsKeyId")
  valid_21630972 = validateParameter(valid_21630972, JString, required = false,
                                   default = nil)
  if valid_21630972 != nil:
    section.add "KmsKeyId", valid_21630972
  var valid_21630973 = query.getOrDefault("BacktrackWindow")
  valid_21630973 = validateParameter(valid_21630973, JInt, required = false,
                                   default = nil)
  if valid_21630973 != nil:
    section.add "BacktrackWindow", valid_21630973
  var valid_21630974 = query.getOrDefault("Domain")
  valid_21630974 = validateParameter(valid_21630974, JString, required = false,
                                   default = nil)
  if valid_21630974 != nil:
    section.add "Domain", valid_21630974
  var valid_21630975 = query.getOrDefault("ScalingConfiguration.SecondsUntilAutoPause")
  valid_21630975 = validateParameter(valid_21630975, JString, required = false,
                                   default = nil)
  if valid_21630975 != nil:
    section.add "ScalingConfiguration.SecondsUntilAutoPause", valid_21630975
  var valid_21630976 = query.getOrDefault("ScalingConfiguration.MaxCapacity")
  valid_21630976 = validateParameter(valid_21630976, JString, required = false,
                                   default = nil)
  if valid_21630976 != nil:
    section.add "ScalingConfiguration.MaxCapacity", valid_21630976
  var valid_21630977 = query.getOrDefault("EngineVersion")
  valid_21630977 = validateParameter(valid_21630977, JString, required = false,
                                   default = nil)
  if valid_21630977 != nil:
    section.add "EngineVersion", valid_21630977
  var valid_21630978 = query.getOrDefault("Port")
  valid_21630978 = validateParameter(valid_21630978, JInt, required = false,
                                   default = nil)
  if valid_21630978 != nil:
    section.add "Port", valid_21630978
  var valid_21630979 = query.getOrDefault("SnapshotIdentifier")
  valid_21630979 = validateParameter(valid_21630979, JString, required = true,
                                   default = nil)
  if valid_21630979 != nil:
    section.add "SnapshotIdentifier", valid_21630979
  var valid_21630980 = query.getOrDefault("Version")
  valid_21630980 = validateParameter(valid_21630980, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21630980 != nil:
    section.add "Version", valid_21630980
  var valid_21630981 = query.getOrDefault("ScalingConfiguration.TimeoutAction")
  valid_21630981 = validateParameter(valid_21630981, JString, required = false,
                                   default = nil)
  if valid_21630981 != nil:
    section.add "ScalingConfiguration.TimeoutAction", valid_21630981
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21630982 = header.getOrDefault("X-Amz-Date")
  valid_21630982 = validateParameter(valid_21630982, JString, required = false,
                                   default = nil)
  if valid_21630982 != nil:
    section.add "X-Amz-Date", valid_21630982
  var valid_21630983 = header.getOrDefault("X-Amz-Security-Token")
  valid_21630983 = validateParameter(valid_21630983, JString, required = false,
                                   default = nil)
  if valid_21630983 != nil:
    section.add "X-Amz-Security-Token", valid_21630983
  var valid_21630984 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21630984 = validateParameter(valid_21630984, JString, required = false,
                                   default = nil)
  if valid_21630984 != nil:
    section.add "X-Amz-Content-Sha256", valid_21630984
  var valid_21630985 = header.getOrDefault("X-Amz-Algorithm")
  valid_21630985 = validateParameter(valid_21630985, JString, required = false,
                                   default = nil)
  if valid_21630985 != nil:
    section.add "X-Amz-Algorithm", valid_21630985
  var valid_21630986 = header.getOrDefault("X-Amz-Signature")
  valid_21630986 = validateParameter(valid_21630986, JString, required = false,
                                   default = nil)
  if valid_21630986 != nil:
    section.add "X-Amz-Signature", valid_21630986
  var valid_21630987 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21630987 = validateParameter(valid_21630987, JString, required = false,
                                   default = nil)
  if valid_21630987 != nil:
    section.add "X-Amz-SignedHeaders", valid_21630987
  var valid_21630988 = header.getOrDefault("X-Amz-Credential")
  valid_21630988 = validateParameter(valid_21630988, JString, required = false,
                                   default = nil)
  if valid_21630988 != nil:
    section.add "X-Amz-Credential", valid_21630988
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21630989: Call_GetRestoreDBClusterFromSnapshot_21630951;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21630989.validator(path, query, header, formData, body, _)
  let scheme = call_21630989.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21630989.makeUrl(scheme.get, call_21630989.host, call_21630989.base,
                               call_21630989.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21630989, uri, valid, _)

proc call*(call_21630990: Call_GetRestoreDBClusterFromSnapshot_21630951;
          Engine: string; DBClusterIdentifier: string; SnapshotIdentifier: string;
          ScalingConfigurationMinCapacity: string = "";
          DBClusterParameterGroupName: string = "";
          AvailabilityZones: JsonNode = nil; DatabaseName: string = "";
          OptionGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false; EngineMode: string = "";
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil;
          DomainIAMRoleName: string = ""; Tags: JsonNode = nil;
          ScalingConfigurationAutoPause: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          Action: string = "RestoreDBClusterFromSnapshot";
          DBSubnetGroupName: string = ""; KmsKeyId: string = "";
          BacktrackWindow: int = 0; Domain: string = "";
          ScalingConfigurationSecondsUntilAutoPause: string = "";
          ScalingConfigurationMaxCapacity: string = ""; EngineVersion: string = "";
          Port: int = 0; Version: string = "2014-10-31";
          ScalingConfigurationTimeoutAction: string = ""): Recallable =
  ## getRestoreDBClusterFromSnapshot
  ## <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>If a DB snapshot is specified, the target DB cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a DB cluster snapshot is specified, the target DB cluster is created from the source DB cluster restore point with the same configuration as the original source DB cluster. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Engine: string (required)
  ##         : <p>The database engine to use for the new DB cluster.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p>
  ##   ScalingConfigurationMinCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   AvailabilityZones: JArray
  ##                    : Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.
  ##   DatabaseName: string
  ##               : The database name for the restored DB cluster.
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to use for the restored DB cluster.
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   EngineMode: string
  ##             : The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster will belong to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Aurora User Guide</i>.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ScalingConfigurationAutoPause: string
  ##                                : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).</p> <note> <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. </p> </note>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The name of the DB subnet group to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li> <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Domain: string
  ##         : Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation. 
  ##   ScalingConfigurationSecondsUntilAutoPause: string
  ##                                            : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.
  ##   ScalingConfigurationMaxCapacity: string
  ##                                  : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p> <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p> <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p> <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
  ##   EngineVersion: string
  ##                : <p>The version of the database engine to use for the new DB cluster.</p> <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p> <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p> <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p> <note> <p>If you aren't using the default engine version, then you must specify the engine version.</p> </note> <p> <b>Aurora MySQL</b> </p> <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code> </p> <p> <b>Aurora PostgreSQL</b> </p> <p>Example: <code>9.6.3</code>, <code>10.7</code> </p>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: This value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB cluster.</p>
  ##   SnapshotIdentifier: string (required)
  ##                     : <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p> <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing Snapshot.</p> </li> </ul>
  ##   Version: string (required)
  ##   ScalingConfigurationTimeoutAction: string
  ##                                    : <p>Contains the scaling configuration of an Aurora Serverless DB cluster.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p> <p> <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p> <p> <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p> <important> <p>If you specify <code>ForceApplyCapacityChange</code>, connections that prevent Aurora Serverless from finding a scaling point might be dropped.</p> </important> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling"> Autoscaling for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p>
  var query_21630991 = newJObject()
  add(query_21630991, "Engine", newJString(Engine))
  add(query_21630991, "ScalingConfiguration.MinCapacity",
      newJString(ScalingConfigurationMinCapacity))
  add(query_21630991, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if AvailabilityZones != nil:
    query_21630991.add "AvailabilityZones", AvailabilityZones
  add(query_21630991, "DatabaseName", newJString(DatabaseName))
  add(query_21630991, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21630991, "OptionGroupName", newJString(OptionGroupName))
  add(query_21630991, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_21630991, "EngineMode", newJString(EngineMode))
  if VpcSecurityGroupIds != nil:
    query_21630991.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_21630991.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_21630991, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  if Tags != nil:
    query_21630991.add "Tags", Tags
  add(query_21630991, "ScalingConfiguration.AutoPause",
      newJString(ScalingConfigurationAutoPause))
  add(query_21630991, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_21630991, "DeletionProtection", newJBool(DeletionProtection))
  add(query_21630991, "Action", newJString(Action))
  add(query_21630991, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21630991, "KmsKeyId", newJString(KmsKeyId))
  add(query_21630991, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_21630991, "Domain", newJString(Domain))
  add(query_21630991, "ScalingConfiguration.SecondsUntilAutoPause",
      newJString(ScalingConfigurationSecondsUntilAutoPause))
  add(query_21630991, "ScalingConfiguration.MaxCapacity",
      newJString(ScalingConfigurationMaxCapacity))
  add(query_21630991, "EngineVersion", newJString(EngineVersion))
  add(query_21630991, "Port", newJInt(Port))
  add(query_21630991, "SnapshotIdentifier", newJString(SnapshotIdentifier))
  add(query_21630991, "Version", newJString(Version))
  add(query_21630991, "ScalingConfiguration.TimeoutAction",
      newJString(ScalingConfigurationTimeoutAction))
  result = call_21630990.call(nil, query_21630991, nil, nil, nil)

var getRestoreDBClusterFromSnapshot* = Call_GetRestoreDBClusterFromSnapshot_21630951(
    name: "getRestoreDBClusterFromSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterFromSnapshot",
    validator: validate_GetRestoreDBClusterFromSnapshot_21630952, base: "/",
    makeUrl: url_GetRestoreDBClusterFromSnapshot_21630953,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBClusterToPointInTime_21631068 = ref object of OpenApiRestCall_21625435
proc url_PostRestoreDBClusterToPointInTime_21631070(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBClusterToPointInTime_21631069(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21631071 = query.getOrDefault("Action")
  valid_21631071 = validateParameter(valid_21631071, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_21631071 != nil:
    section.add "Action", valid_21631071
  var valid_21631072 = query.getOrDefault("Version")
  valid_21631072 = validateParameter(valid_21631072, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631072 != nil:
    section.add "Version", valid_21631072
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631073 = header.getOrDefault("X-Amz-Date")
  valid_21631073 = validateParameter(valid_21631073, JString, required = false,
                                   default = nil)
  if valid_21631073 != nil:
    section.add "X-Amz-Date", valid_21631073
  var valid_21631074 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631074 = validateParameter(valid_21631074, JString, required = false,
                                   default = nil)
  if valid_21631074 != nil:
    section.add "X-Amz-Security-Token", valid_21631074
  var valid_21631075 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631075 = validateParameter(valid_21631075, JString, required = false,
                                   default = nil)
  if valid_21631075 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631075
  var valid_21631076 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631076 = validateParameter(valid_21631076, JString, required = false,
                                   default = nil)
  if valid_21631076 != nil:
    section.add "X-Amz-Algorithm", valid_21631076
  var valid_21631077 = header.getOrDefault("X-Amz-Signature")
  valid_21631077 = validateParameter(valid_21631077, JString, required = false,
                                   default = nil)
  if valid_21631077 != nil:
    section.add "X-Amz-Signature", valid_21631077
  var valid_21631078 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631078 = validateParameter(valid_21631078, JString, required = false,
                                   default = nil)
  if valid_21631078 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631078
  var valid_21631079 = header.getOrDefault("X-Amz-Credential")
  valid_21631079 = validateParameter(valid_21631079, JString, required = false,
                                   default = nil)
  if valid_21631079 != nil:
    section.add "X-Amz-Credential", valid_21631079
  result.add "header", section
  ## parameters in `formData` object:
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation. </p> <p> For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurmysql-kerberos.html">Using Kerberos Authentication for Aurora MySQL</a> in the <i>Amazon Aurora User Guide</i>. </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `SourceDBClusterIdentifier` field"
  var valid_21631080 = formData.getOrDefault("SourceDBClusterIdentifier")
  valid_21631080 = validateParameter(valid_21631080, JString, required = true,
                                   default = nil)
  if valid_21631080 != nil:
    section.add "SourceDBClusterIdentifier", valid_21631080
  var valid_21631081 = formData.getOrDefault("UseLatestRestorableTime")
  valid_21631081 = validateParameter(valid_21631081, JBool, required = false,
                                   default = nil)
  if valid_21631081 != nil:
    section.add "UseLatestRestorableTime", valid_21631081
  var valid_21631082 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_21631082 = validateParameter(valid_21631082, JBool, required = false,
                                   default = nil)
  if valid_21631082 != nil:
    section.add "CopyTagsToSnapshot", valid_21631082
  var valid_21631083 = formData.getOrDefault("Port")
  valid_21631083 = validateParameter(valid_21631083, JInt, required = false,
                                   default = nil)
  if valid_21631083 != nil:
    section.add "Port", valid_21631083
  var valid_21631084 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_21631084 = validateParameter(valid_21631084, JArray, required = false,
                                   default = nil)
  if valid_21631084 != nil:
    section.add "VpcSecurityGroupIds", valid_21631084
  var valid_21631085 = formData.getOrDefault("RestoreToTime")
  valid_21631085 = validateParameter(valid_21631085, JString, required = false,
                                   default = nil)
  if valid_21631085 != nil:
    section.add "RestoreToTime", valid_21631085
  var valid_21631086 = formData.getOrDefault("OptionGroupName")
  valid_21631086 = validateParameter(valid_21631086, JString, required = false,
                                   default = nil)
  if valid_21631086 != nil:
    section.add "OptionGroupName", valid_21631086
  var valid_21631087 = formData.getOrDefault("BacktrackWindow")
  valid_21631087 = validateParameter(valid_21631087, JInt, required = false,
                                   default = nil)
  if valid_21631087 != nil:
    section.add "BacktrackWindow", valid_21631087
  var valid_21631088 = formData.getOrDefault("Tags")
  valid_21631088 = validateParameter(valid_21631088, JArray, required = false,
                                   default = nil)
  if valid_21631088 != nil:
    section.add "Tags", valid_21631088
  var valid_21631089 = formData.getOrDefault("DeletionProtection")
  valid_21631089 = validateParameter(valid_21631089, JBool, required = false,
                                   default = nil)
  if valid_21631089 != nil:
    section.add "DeletionProtection", valid_21631089
  var valid_21631090 = formData.getOrDefault("DBSubnetGroupName")
  valid_21631090 = validateParameter(valid_21631090, JString, required = false,
                                   default = nil)
  if valid_21631090 != nil:
    section.add "DBSubnetGroupName", valid_21631090
  var valid_21631091 = formData.getOrDefault("DomainIAMRoleName")
  valid_21631091 = validateParameter(valid_21631091, JString, required = false,
                                   default = nil)
  if valid_21631091 != nil:
    section.add "DomainIAMRoleName", valid_21631091
  var valid_21631092 = formData.getOrDefault("DBClusterParameterGroupName")
  valid_21631092 = validateParameter(valid_21631092, JString, required = false,
                                   default = nil)
  if valid_21631092 != nil:
    section.add "DBClusterParameterGroupName", valid_21631092
  var valid_21631093 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_21631093 = validateParameter(valid_21631093, JArray, required = false,
                                   default = nil)
  if valid_21631093 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21631093
  var valid_21631094 = formData.getOrDefault("Domain")
  valid_21631094 = validateParameter(valid_21631094, JString, required = false,
                                   default = nil)
  if valid_21631094 != nil:
    section.add "Domain", valid_21631094
  var valid_21631095 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21631095 = validateParameter(valid_21631095, JBool, required = false,
                                   default = nil)
  if valid_21631095 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21631095
  var valid_21631096 = formData.getOrDefault("KmsKeyId")
  valid_21631096 = validateParameter(valid_21631096, JString, required = false,
                                   default = nil)
  if valid_21631096 != nil:
    section.add "KmsKeyId", valid_21631096
  var valid_21631097 = formData.getOrDefault("RestoreType")
  valid_21631097 = validateParameter(valid_21631097, JString, required = false,
                                   default = nil)
  if valid_21631097 != nil:
    section.add "RestoreType", valid_21631097
  var valid_21631098 = formData.getOrDefault("DBClusterIdentifier")
  valid_21631098 = validateParameter(valid_21631098, JString, required = true,
                                   default = nil)
  if valid_21631098 != nil:
    section.add "DBClusterIdentifier", valid_21631098
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631099: Call_PostRestoreDBClusterToPointInTime_21631068;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21631099.validator(path, query, header, formData, body, _)
  let scheme = call_21631099.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631099.makeUrl(scheme.get, call_21631099.host, call_21631099.base,
                               call_21631099.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631099, uri, valid, _)

proc call*(call_21631100: Call_PostRestoreDBClusterToPointInTime_21631068;
          SourceDBClusterIdentifier: string; DBClusterIdentifier: string;
          UseLatestRestorableTime: bool = false; CopyTagsToSnapshot: bool = false;
          Port: int = 0; VpcSecurityGroupIds: JsonNode = nil;
          RestoreToTime: string = ""; OptionGroupName: string = "";
          BacktrackWindow: int = 0; Tags: JsonNode = nil;
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          DomainIAMRoleName: string = "";
          Action: string = "RestoreDBClusterToPointInTime";
          DBClusterParameterGroupName: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil; Domain: string = "";
          EnableIAMDatabaseAuthentication: bool = false; KmsKeyId: string = "";
          RestoreType: string = ""; Version: string = "2014-10-31"): Recallable =
  ## postRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Action: string (required)
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation. </p> <p> For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurmysql-kerberos.html">Using Kerberos Authentication for Aurora MySQL</a> in the <i>Amazon Aurora User Guide</i>. </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   Version: string (required)
  var query_21631101 = newJObject()
  var formData_21631102 = newJObject()
  add(formData_21631102, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(formData_21631102, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_21631102, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_21631102, "Port", newJInt(Port))
  if VpcSecurityGroupIds != nil:
    formData_21631102.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_21631102, "RestoreToTime", newJString(RestoreToTime))
  add(formData_21631102, "OptionGroupName", newJString(OptionGroupName))
  add(formData_21631102, "BacktrackWindow", newJInt(BacktrackWindow))
  if Tags != nil:
    formData_21631102.add "Tags", Tags
  add(formData_21631102, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_21631102, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_21631102, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_21631101, "Action", newJString(Action))
  add(formData_21631102, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  if EnableCloudwatchLogsExports != nil:
    formData_21631102.add "EnableCloudwatchLogsExports",
                         EnableCloudwatchLogsExports
  add(formData_21631102, "Domain", newJString(Domain))
  add(formData_21631102, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_21631102, "KmsKeyId", newJString(KmsKeyId))
  add(formData_21631102, "RestoreType", newJString(RestoreType))
  add(formData_21631102, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21631101, "Version", newJString(Version))
  result = call_21631100.call(nil, query_21631101, nil, formData_21631102, nil)

var postRestoreDBClusterToPointInTime* = Call_PostRestoreDBClusterToPointInTime_21631068(
    name: "postRestoreDBClusterToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_PostRestoreDBClusterToPointInTime_21631069, base: "/",
    makeUrl: url_PostRestoreDBClusterToPointInTime_21631070,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBClusterToPointInTime_21631034 = ref object of OpenApiRestCall_21625435
proc url_GetRestoreDBClusterToPointInTime_21631036(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBClusterToPointInTime_21631035(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   RestoreToTime: JString
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   DBClusterParameterGroupName: JString
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   DBClusterIdentifier: JString (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   OptionGroupName: JString
  ##                  : The name of the option group for the new DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   RestoreType: JString
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   UseLatestRestorableTime: JBool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   BacktrackWindow: JInt
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation. </p> <p> For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurmysql-kerberos.html">Using Kerberos Authentication for Aurora MySQL</a> in the <i>Amazon Aurora User Guide</i>. </p>
  ##   Port: JInt
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   SourceDBClusterIdentifier: JString (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21631037 = query.getOrDefault("RestoreToTime")
  valid_21631037 = validateParameter(valid_21631037, JString, required = false,
                                   default = nil)
  if valid_21631037 != nil:
    section.add "RestoreToTime", valid_21631037
  var valid_21631038 = query.getOrDefault("DBClusterParameterGroupName")
  valid_21631038 = validateParameter(valid_21631038, JString, required = false,
                                   default = nil)
  if valid_21631038 != nil:
    section.add "DBClusterParameterGroupName", valid_21631038
  var valid_21631039 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21631039 = validateParameter(valid_21631039, JBool, required = false,
                                   default = nil)
  if valid_21631039 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21631039
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21631040 = query.getOrDefault("DBClusterIdentifier")
  valid_21631040 = validateParameter(valid_21631040, JString, required = true,
                                   default = nil)
  if valid_21631040 != nil:
    section.add "DBClusterIdentifier", valid_21631040
  var valid_21631041 = query.getOrDefault("OptionGroupName")
  valid_21631041 = validateParameter(valid_21631041, JString, required = false,
                                   default = nil)
  if valid_21631041 != nil:
    section.add "OptionGroupName", valid_21631041
  var valid_21631042 = query.getOrDefault("VpcSecurityGroupIds")
  valid_21631042 = validateParameter(valid_21631042, JArray, required = false,
                                   default = nil)
  if valid_21631042 != nil:
    section.add "VpcSecurityGroupIds", valid_21631042
  var valid_21631043 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_21631043 = validateParameter(valid_21631043, JArray, required = false,
                                   default = nil)
  if valid_21631043 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21631043
  var valid_21631044 = query.getOrDefault("DomainIAMRoleName")
  valid_21631044 = validateParameter(valid_21631044, JString, required = false,
                                   default = nil)
  if valid_21631044 != nil:
    section.add "DomainIAMRoleName", valid_21631044
  var valid_21631045 = query.getOrDefault("Tags")
  valid_21631045 = validateParameter(valid_21631045, JArray, required = false,
                                   default = nil)
  if valid_21631045 != nil:
    section.add "Tags", valid_21631045
  var valid_21631046 = query.getOrDefault("CopyTagsToSnapshot")
  valid_21631046 = validateParameter(valid_21631046, JBool, required = false,
                                   default = nil)
  if valid_21631046 != nil:
    section.add "CopyTagsToSnapshot", valid_21631046
  var valid_21631047 = query.getOrDefault("RestoreType")
  valid_21631047 = validateParameter(valid_21631047, JString, required = false,
                                   default = nil)
  if valid_21631047 != nil:
    section.add "RestoreType", valid_21631047
  var valid_21631048 = query.getOrDefault("DeletionProtection")
  valid_21631048 = validateParameter(valid_21631048, JBool, required = false,
                                   default = nil)
  if valid_21631048 != nil:
    section.add "DeletionProtection", valid_21631048
  var valid_21631049 = query.getOrDefault("UseLatestRestorableTime")
  valid_21631049 = validateParameter(valid_21631049, JBool, required = false,
                                   default = nil)
  if valid_21631049 != nil:
    section.add "UseLatestRestorableTime", valid_21631049
  var valid_21631050 = query.getOrDefault("Action")
  valid_21631050 = validateParameter(valid_21631050, JString, required = true, default = newJString(
      "RestoreDBClusterToPointInTime"))
  if valid_21631050 != nil:
    section.add "Action", valid_21631050
  var valid_21631051 = query.getOrDefault("DBSubnetGroupName")
  valid_21631051 = validateParameter(valid_21631051, JString, required = false,
                                   default = nil)
  if valid_21631051 != nil:
    section.add "DBSubnetGroupName", valid_21631051
  var valid_21631052 = query.getOrDefault("KmsKeyId")
  valid_21631052 = validateParameter(valid_21631052, JString, required = false,
                                   default = nil)
  if valid_21631052 != nil:
    section.add "KmsKeyId", valid_21631052
  var valid_21631053 = query.getOrDefault("BacktrackWindow")
  valid_21631053 = validateParameter(valid_21631053, JInt, required = false,
                                   default = nil)
  if valid_21631053 != nil:
    section.add "BacktrackWindow", valid_21631053
  var valid_21631054 = query.getOrDefault("Domain")
  valid_21631054 = validateParameter(valid_21631054, JString, required = false,
                                   default = nil)
  if valid_21631054 != nil:
    section.add "Domain", valid_21631054
  var valid_21631055 = query.getOrDefault("Port")
  valid_21631055 = validateParameter(valid_21631055, JInt, required = false,
                                   default = nil)
  if valid_21631055 != nil:
    section.add "Port", valid_21631055
  var valid_21631056 = query.getOrDefault("SourceDBClusterIdentifier")
  valid_21631056 = validateParameter(valid_21631056, JString, required = true,
                                   default = nil)
  if valid_21631056 != nil:
    section.add "SourceDBClusterIdentifier", valid_21631056
  var valid_21631057 = query.getOrDefault("Version")
  valid_21631057 = validateParameter(valid_21631057, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631057 != nil:
    section.add "Version", valid_21631057
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631058 = header.getOrDefault("X-Amz-Date")
  valid_21631058 = validateParameter(valid_21631058, JString, required = false,
                                   default = nil)
  if valid_21631058 != nil:
    section.add "X-Amz-Date", valid_21631058
  var valid_21631059 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631059 = validateParameter(valid_21631059, JString, required = false,
                                   default = nil)
  if valid_21631059 != nil:
    section.add "X-Amz-Security-Token", valid_21631059
  var valid_21631060 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631060 = validateParameter(valid_21631060, JString, required = false,
                                   default = nil)
  if valid_21631060 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631060
  var valid_21631061 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631061 = validateParameter(valid_21631061, JString, required = false,
                                   default = nil)
  if valid_21631061 != nil:
    section.add "X-Amz-Algorithm", valid_21631061
  var valid_21631062 = header.getOrDefault("X-Amz-Signature")
  valid_21631062 = validateParameter(valid_21631062, JString, required = false,
                                   default = nil)
  if valid_21631062 != nil:
    section.add "X-Amz-Signature", valid_21631062
  var valid_21631063 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631063 = validateParameter(valid_21631063, JString, required = false,
                                   default = nil)
  if valid_21631063 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631063
  var valid_21631064 = header.getOrDefault("X-Amz-Credential")
  valid_21631064 = validateParameter(valid_21631064, JString, required = false,
                                   default = nil)
  if valid_21631064 != nil:
    section.add "X-Amz-Credential", valid_21631064
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631065: Call_GetRestoreDBClusterToPointInTime_21631034;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21631065.validator(path, query, header, formData, body, _)
  let scheme = call_21631065.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631065.makeUrl(scheme.get, call_21631065.host, call_21631065.base,
                               call_21631065.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631065, uri, valid, _)

proc call*(call_21631066: Call_GetRestoreDBClusterToPointInTime_21631034;
          DBClusterIdentifier: string; SourceDBClusterIdentifier: string;
          RestoreToTime: string = ""; DBClusterParameterGroupName: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          OptionGroupName: string = ""; VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil;
          DomainIAMRoleName: string = ""; Tags: JsonNode = nil;
          CopyTagsToSnapshot: bool = false; RestoreType: string = "";
          DeletionProtection: bool = false; UseLatestRestorableTime: bool = false;
          Action: string = "RestoreDBClusterToPointInTime";
          DBSubnetGroupName: string = ""; KmsKeyId: string = "";
          BacktrackWindow: int = 0; Domain: string = ""; Port: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBClusterToPointInTime
  ## <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the source DB cluster with the same configuration as the original DB cluster, except that the new DB cluster is created with the default DB security group. </p> <note> <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB cluster is available.</p> </note> <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What Is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   RestoreToTime: string
  ##                : <p>The date and time to restore the DB cluster to.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> <li> <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code> </p> </li> </ul> <p>Example: <code>2015-03-07T23:45:00Z</code> </p>
  ##   DBClusterParameterGroupName: string
  ##                              : <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i> </p>
  ##   DBClusterIdentifier: string (required)
  ##                      : <p>The name of the new DB cluster to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   OptionGroupName: string
  ##                  : The name of the option group for the new DB cluster.
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups that the new DB cluster belongs to.
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.
  ##   RestoreType: string
  ##              : <p>The type of restore to be performed. You can specify one of the following values:</p> <ul> <li> <p> <code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p> </li> <li> <p> <code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p> </li> </ul> <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p> <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. 
  ##   UseLatestRestorableTime: bool
  ##                          : <p>A value that indicates whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time. </p> <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new DB cluster.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key.</p> <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p> <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p> <ul> <li> <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p> </li> <li> <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li> </ul> <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
  ##   BacktrackWindow: int
  ##                  : <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <p>Default: 0</p> <p>Constraints:</p> <ul> <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li> </ul>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation. </p> <p> For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurmysql-kerberos.html">Using Kerberos Authentication for Aurora MySQL</a> in the <i>Amazon Aurora User Guide</i>. </p>
  ##   Port: int
  ##       : <p>The port number on which the new DB cluster accepts connections.</p> <p>Constraints: A value from <code>1150-65535</code>. </p> <p>Default: The default port for the engine.</p>
  ##   SourceDBClusterIdentifier: string (required)
  ##                            : <p>The identifier of the source DB cluster from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBCluster.</p> </li> </ul>
  ##   Version: string (required)
  var query_21631067 = newJObject()
  add(query_21631067, "RestoreToTime", newJString(RestoreToTime))
  add(query_21631067, "DBClusterParameterGroupName",
      newJString(DBClusterParameterGroupName))
  add(query_21631067, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_21631067, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21631067, "OptionGroupName", newJString(OptionGroupName))
  if VpcSecurityGroupIds != nil:
    query_21631067.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_21631067.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_21631067, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  if Tags != nil:
    query_21631067.add "Tags", Tags
  add(query_21631067, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_21631067, "RestoreType", newJString(RestoreType))
  add(query_21631067, "DeletionProtection", newJBool(DeletionProtection))
  add(query_21631067, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_21631067, "Action", newJString(Action))
  add(query_21631067, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21631067, "KmsKeyId", newJString(KmsKeyId))
  add(query_21631067, "BacktrackWindow", newJInt(BacktrackWindow))
  add(query_21631067, "Domain", newJString(Domain))
  add(query_21631067, "Port", newJInt(Port))
  add(query_21631067, "SourceDBClusterIdentifier",
      newJString(SourceDBClusterIdentifier))
  add(query_21631067, "Version", newJString(Version))
  result = call_21631066.call(nil, query_21631067, nil, nil, nil)

var getRestoreDBClusterToPointInTime* = Call_GetRestoreDBClusterToPointInTime_21631034(
    name: "getRestoreDBClusterToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBClusterToPointInTime",
    validator: validate_GetRestoreDBClusterToPointInTime_21631035, base: "/",
    makeUrl: url_GetRestoreDBClusterToPointInTime_21631036,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceFromDBSnapshot_21631146 = ref object of OpenApiRestCall_21625435
proc url_PostRestoreDBInstanceFromDBSnapshot_21631148(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBInstanceFromDBSnapshot_21631147(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21631149 = query.getOrDefault("Action")
  valid_21631149 = validateParameter(valid_21631149, JString, required = true, default = newJString(
      "RestoreDBInstanceFromDBSnapshot"))
  if valid_21631149 != nil:
    section.add "Action", valid_21631149
  var valid_21631150 = query.getOrDefault("Version")
  valid_21631150 = validateParameter(valid_21631150, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631150 != nil:
    section.add "Version", valid_21631150
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631151 = header.getOrDefault("X-Amz-Date")
  valid_21631151 = validateParameter(valid_21631151, JString, required = false,
                                   default = nil)
  if valid_21631151 != nil:
    section.add "X-Amz-Date", valid_21631151
  var valid_21631152 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631152 = validateParameter(valid_21631152, JString, required = false,
                                   default = nil)
  if valid_21631152 != nil:
    section.add "X-Amz-Security-Token", valid_21631152
  var valid_21631153 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631153 = validateParameter(valid_21631153, JString, required = false,
                                   default = nil)
  if valid_21631153 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631153
  var valid_21631154 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631154 = validateParameter(valid_21631154, JString, required = false,
                                   default = nil)
  if valid_21631154 != nil:
    section.add "X-Amz-Algorithm", valid_21631154
  var valid_21631155 = header.getOrDefault("X-Amz-Signature")
  valid_21631155 = validateParameter(valid_21631155, JString, required = false,
                                   default = nil)
  if valid_21631155 != nil:
    section.add "X-Amz-Signature", valid_21631155
  var valid_21631156 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631156 = validateParameter(valid_21631156, JString, required = false,
                                   default = nil)
  if valid_21631156 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631156
  var valid_21631157 = header.getOrDefault("X-Amz-Credential")
  valid_21631157 = validateParameter(valid_21631157, JString, required = false,
                                   default = nil)
  if valid_21631157 != nil:
    section.add "X-Amz-Credential", valid_21631157
  result.add "header", section
  ## parameters in `formData` object:
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   Iops: JInt
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  section = newJObject()
  var valid_21631158 = formData.getOrDefault("ProcessorFeatures")
  valid_21631158 = validateParameter(valid_21631158, JArray, required = false,
                                   default = nil)
  if valid_21631158 != nil:
    section.add "ProcessorFeatures", valid_21631158
  var valid_21631159 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_21631159 = validateParameter(valid_21631159, JBool, required = false,
                                   default = nil)
  if valid_21631159 != nil:
    section.add "CopyTagsToSnapshot", valid_21631159
  var valid_21631160 = formData.getOrDefault("Port")
  valid_21631160 = validateParameter(valid_21631160, JInt, required = false,
                                   default = nil)
  if valid_21631160 != nil:
    section.add "Port", valid_21631160
  var valid_21631161 = formData.getOrDefault("Engine")
  valid_21631161 = validateParameter(valid_21631161, JString, required = false,
                                   default = nil)
  if valid_21631161 != nil:
    section.add "Engine", valid_21631161
  var valid_21631162 = formData.getOrDefault("Iops")
  valid_21631162 = validateParameter(valid_21631162, JInt, required = false,
                                   default = nil)
  if valid_21631162 != nil:
    section.add "Iops", valid_21631162
  var valid_21631163 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_21631163 = validateParameter(valid_21631163, JArray, required = false,
                                   default = nil)
  if valid_21631163 != nil:
    section.add "VpcSecurityGroupIds", valid_21631163
  var valid_21631164 = formData.getOrDefault("DBName")
  valid_21631164 = validateParameter(valid_21631164, JString, required = false,
                                   default = nil)
  if valid_21631164 != nil:
    section.add "DBName", valid_21631164
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_21631165 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21631165 = validateParameter(valid_21631165, JString, required = true,
                                   default = nil)
  if valid_21631165 != nil:
    section.add "DBInstanceIdentifier", valid_21631165
  var valid_21631166 = formData.getOrDefault("OptionGroupName")
  valid_21631166 = validateParameter(valid_21631166, JString, required = false,
                                   default = nil)
  if valid_21631166 != nil:
    section.add "OptionGroupName", valid_21631166
  var valid_21631167 = formData.getOrDefault("DBParameterGroupName")
  valid_21631167 = validateParameter(valid_21631167, JString, required = false,
                                   default = nil)
  if valid_21631167 != nil:
    section.add "DBParameterGroupName", valid_21631167
  var valid_21631168 = formData.getOrDefault("Tags")
  valid_21631168 = validateParameter(valid_21631168, JArray, required = false,
                                   default = nil)
  if valid_21631168 != nil:
    section.add "Tags", valid_21631168
  var valid_21631169 = formData.getOrDefault("TdeCredentialArn")
  valid_21631169 = validateParameter(valid_21631169, JString, required = false,
                                   default = nil)
  if valid_21631169 != nil:
    section.add "TdeCredentialArn", valid_21631169
  var valid_21631170 = formData.getOrDefault("DeletionProtection")
  valid_21631170 = validateParameter(valid_21631170, JBool, required = false,
                                   default = nil)
  if valid_21631170 != nil:
    section.add "DeletionProtection", valid_21631170
  var valid_21631171 = formData.getOrDefault("DBSubnetGroupName")
  valid_21631171 = validateParameter(valid_21631171, JString, required = false,
                                   default = nil)
  if valid_21631171 != nil:
    section.add "DBSubnetGroupName", valid_21631171
  var valid_21631172 = formData.getOrDefault("TdeCredentialPassword")
  valid_21631172 = validateParameter(valid_21631172, JString, required = false,
                                   default = nil)
  if valid_21631172 != nil:
    section.add "TdeCredentialPassword", valid_21631172
  var valid_21631173 = formData.getOrDefault("AvailabilityZone")
  valid_21631173 = validateParameter(valid_21631173, JString, required = false,
                                   default = nil)
  if valid_21631173 != nil:
    section.add "AvailabilityZone", valid_21631173
  var valid_21631174 = formData.getOrDefault("MultiAZ")
  valid_21631174 = validateParameter(valid_21631174, JBool, required = false,
                                   default = nil)
  if valid_21631174 != nil:
    section.add "MultiAZ", valid_21631174
  var valid_21631175 = formData.getOrDefault("DomainIAMRoleName")
  valid_21631175 = validateParameter(valid_21631175, JString, required = false,
                                   default = nil)
  if valid_21631175 != nil:
    section.add "DomainIAMRoleName", valid_21631175
  var valid_21631176 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_21631176 = validateParameter(valid_21631176, JString, required = true,
                                   default = nil)
  if valid_21631176 != nil:
    section.add "DBSnapshotIdentifier", valid_21631176
  var valid_21631177 = formData.getOrDefault("PubliclyAccessible")
  valid_21631177 = validateParameter(valid_21631177, JBool, required = false,
                                   default = nil)
  if valid_21631177 != nil:
    section.add "PubliclyAccessible", valid_21631177
  var valid_21631178 = formData.getOrDefault("StorageType")
  valid_21631178 = validateParameter(valid_21631178, JString, required = false,
                                   default = nil)
  if valid_21631178 != nil:
    section.add "StorageType", valid_21631178
  var valid_21631179 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_21631179 = validateParameter(valid_21631179, JArray, required = false,
                                   default = nil)
  if valid_21631179 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21631179
  var valid_21631180 = formData.getOrDefault("DBInstanceClass")
  valid_21631180 = validateParameter(valid_21631180, JString, required = false,
                                   default = nil)
  if valid_21631180 != nil:
    section.add "DBInstanceClass", valid_21631180
  var valid_21631181 = formData.getOrDefault("Domain")
  valid_21631181 = validateParameter(valid_21631181, JString, required = false,
                                   default = nil)
  if valid_21631181 != nil:
    section.add "Domain", valid_21631181
  var valid_21631182 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21631182 = validateParameter(valid_21631182, JBool, required = false,
                                   default = nil)
  if valid_21631182 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21631182
  var valid_21631183 = formData.getOrDefault("LicenseModel")
  valid_21631183 = validateParameter(valid_21631183, JString, required = false,
                                   default = nil)
  if valid_21631183 != nil:
    section.add "LicenseModel", valid_21631183
  var valid_21631184 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_21631184 = validateParameter(valid_21631184, JBool, required = false,
                                   default = nil)
  if valid_21631184 != nil:
    section.add "AutoMinorVersionUpgrade", valid_21631184
  var valid_21631185 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_21631185 = validateParameter(valid_21631185, JBool, required = false,
                                   default = nil)
  if valid_21631185 != nil:
    section.add "UseDefaultProcessorFeatures", valid_21631185
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631186: Call_PostRestoreDBInstanceFromDBSnapshot_21631146;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  let valid = call_21631186.validator(path, query, header, formData, body, _)
  let scheme = call_21631186.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631186.makeUrl(scheme.get, call_21631186.host, call_21631186.base,
                               call_21631186.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631186, uri, valid, _)

proc call*(call_21631187: Call_PostRestoreDBInstanceFromDBSnapshot_21631146;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          ProcessorFeatures: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          Port: int = 0; Engine: string = ""; Iops: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; DBName: string = "";
          OptionGroupName: string = ""; DBParameterGroupName: string = "";
          Tags: JsonNode = nil; TdeCredentialArn: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          TdeCredentialPassword: string = ""; AvailabilityZone: string = "";
          MultiAZ: bool = false; DomainIAMRoleName: string = "";
          Action: string = "RestoreDBInstanceFromDBSnapshot";
          PubliclyAccessible: bool = false; StorageType: string = "";
          EnableCloudwatchLogsExports: JsonNode = nil; DBInstanceClass: string = "";
          Domain: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          LicenseModel: string = ""; AutoMinorVersionUpgrade: bool = false;
          Version: string = "2014-10-31"; UseDefaultProcessorFeatures: bool = false): Recallable =
  ## postRestoreDBInstanceFromDBSnapshot
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   Iops: int
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  ##   Action: string (required)
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Version: string (required)
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  var query_21631188 = newJObject()
  var formData_21631189 = newJObject()
  if ProcessorFeatures != nil:
    formData_21631189.add "ProcessorFeatures", ProcessorFeatures
  add(formData_21631189, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_21631189, "Port", newJInt(Port))
  add(formData_21631189, "Engine", newJString(Engine))
  add(formData_21631189, "Iops", newJInt(Iops))
  if VpcSecurityGroupIds != nil:
    formData_21631189.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_21631189, "DBName", newJString(DBName))
  add(formData_21631189, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_21631189, "OptionGroupName", newJString(OptionGroupName))
  add(formData_21631189, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    formData_21631189.add "Tags", Tags
  add(formData_21631189, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(formData_21631189, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_21631189, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_21631189, "TdeCredentialPassword",
      newJString(TdeCredentialPassword))
  add(formData_21631189, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_21631189, "MultiAZ", newJBool(MultiAZ))
  add(formData_21631189, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(formData_21631189, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_21631188, "Action", newJString(Action))
  add(formData_21631189, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_21631189, "StorageType", newJString(StorageType))
  if EnableCloudwatchLogsExports != nil:
    formData_21631189.add "EnableCloudwatchLogsExports",
                         EnableCloudwatchLogsExports
  add(formData_21631189, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_21631189, "Domain", newJString(Domain))
  add(formData_21631189, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_21631189, "LicenseModel", newJString(LicenseModel))
  add(formData_21631189, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(query_21631188, "Version", newJString(Version))
  add(formData_21631189, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  result = call_21631187.call(nil, query_21631188, nil, formData_21631189, nil)

var postRestoreDBInstanceFromDBSnapshot* = Call_PostRestoreDBInstanceFromDBSnapshot_21631146(
    name: "postRestoreDBInstanceFromDBSnapshot", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromDBSnapshot",
    validator: validate_PostRestoreDBInstanceFromDBSnapshot_21631147, base: "/",
    makeUrl: url_PostRestoreDBInstanceFromDBSnapshot_21631148,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceFromDBSnapshot_21631103 = ref object of OpenApiRestCall_21625435
proc url_GetRestoreDBInstanceFromDBSnapshot_21631105(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBInstanceFromDBSnapshot_21631104(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   Iops: JInt
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: JString (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  section = newJObject()
  var valid_21631106 = query.getOrDefault("Engine")
  valid_21631106 = validateParameter(valid_21631106, JString, required = false,
                                   default = nil)
  if valid_21631106 != nil:
    section.add "Engine", valid_21631106
  var valid_21631107 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_21631107 = validateParameter(valid_21631107, JBool, required = false,
                                   default = nil)
  if valid_21631107 != nil:
    section.add "UseDefaultProcessorFeatures", valid_21631107
  var valid_21631108 = query.getOrDefault("ProcessorFeatures")
  valid_21631108 = validateParameter(valid_21631108, JArray, required = false,
                                   default = nil)
  if valid_21631108 != nil:
    section.add "ProcessorFeatures", valid_21631108
  var valid_21631109 = query.getOrDefault("StorageType")
  valid_21631109 = validateParameter(valid_21631109, JString, required = false,
                                   default = nil)
  if valid_21631109 != nil:
    section.add "StorageType", valid_21631109
  var valid_21631110 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21631110 = validateParameter(valid_21631110, JBool, required = false,
                                   default = nil)
  if valid_21631110 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21631110
  var valid_21631111 = query.getOrDefault("OptionGroupName")
  valid_21631111 = validateParameter(valid_21631111, JString, required = false,
                                   default = nil)
  if valid_21631111 != nil:
    section.add "OptionGroupName", valid_21631111
  var valid_21631112 = query.getOrDefault("AvailabilityZone")
  valid_21631112 = validateParameter(valid_21631112, JString, required = false,
                                   default = nil)
  if valid_21631112 != nil:
    section.add "AvailabilityZone", valid_21631112
  var valid_21631113 = query.getOrDefault("Iops")
  valid_21631113 = validateParameter(valid_21631113, JInt, required = false,
                                   default = nil)
  if valid_21631113 != nil:
    section.add "Iops", valid_21631113
  var valid_21631114 = query.getOrDefault("VpcSecurityGroupIds")
  valid_21631114 = validateParameter(valid_21631114, JArray, required = false,
                                   default = nil)
  if valid_21631114 != nil:
    section.add "VpcSecurityGroupIds", valid_21631114
  var valid_21631115 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_21631115 = validateParameter(valid_21631115, JArray, required = false,
                                   default = nil)
  if valid_21631115 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21631115
  var valid_21631116 = query.getOrDefault("MultiAZ")
  valid_21631116 = validateParameter(valid_21631116, JBool, required = false,
                                   default = nil)
  if valid_21631116 != nil:
    section.add "MultiAZ", valid_21631116
  var valid_21631117 = query.getOrDefault("TdeCredentialPassword")
  valid_21631117 = validateParameter(valid_21631117, JString, required = false,
                                   default = nil)
  if valid_21631117 != nil:
    section.add "TdeCredentialPassword", valid_21631117
  var valid_21631118 = query.getOrDefault("LicenseModel")
  valid_21631118 = validateParameter(valid_21631118, JString, required = false,
                                   default = nil)
  if valid_21631118 != nil:
    section.add "LicenseModel", valid_21631118
  var valid_21631119 = query.getOrDefault("Tags")
  valid_21631119 = validateParameter(valid_21631119, JArray, required = false,
                                   default = nil)
  if valid_21631119 != nil:
    section.add "Tags", valid_21631119
  var valid_21631120 = query.getOrDefault("DBName")
  valid_21631120 = validateParameter(valid_21631120, JString, required = false,
                                   default = nil)
  if valid_21631120 != nil:
    section.add "DBName", valid_21631120
  var valid_21631121 = query.getOrDefault("CopyTagsToSnapshot")
  valid_21631121 = validateParameter(valid_21631121, JBool, required = false,
                                   default = nil)
  if valid_21631121 != nil:
    section.add "CopyTagsToSnapshot", valid_21631121
  var valid_21631122 = query.getOrDefault("DomainIAMRoleName")
  valid_21631122 = validateParameter(valid_21631122, JString, required = false,
                                   default = nil)
  if valid_21631122 != nil:
    section.add "DomainIAMRoleName", valid_21631122
  var valid_21631123 = query.getOrDefault("DBInstanceClass")
  valid_21631123 = validateParameter(valid_21631123, JString, required = false,
                                   default = nil)
  if valid_21631123 != nil:
    section.add "DBInstanceClass", valid_21631123
  var valid_21631124 = query.getOrDefault("DBParameterGroupName")
  valid_21631124 = validateParameter(valid_21631124, JString, required = false,
                                   default = nil)
  if valid_21631124 != nil:
    section.add "DBParameterGroupName", valid_21631124
  var valid_21631125 = query.getOrDefault("DeletionProtection")
  valid_21631125 = validateParameter(valid_21631125, JBool, required = false,
                                   default = nil)
  if valid_21631125 != nil:
    section.add "DeletionProtection", valid_21631125
  var valid_21631126 = query.getOrDefault("Action")
  valid_21631126 = validateParameter(valid_21631126, JString, required = true, default = newJString(
      "RestoreDBInstanceFromDBSnapshot"))
  if valid_21631126 != nil:
    section.add "Action", valid_21631126
  var valid_21631127 = query.getOrDefault("DBSubnetGroupName")
  valid_21631127 = validateParameter(valid_21631127, JString, required = false,
                                   default = nil)
  if valid_21631127 != nil:
    section.add "DBSubnetGroupName", valid_21631127
  var valid_21631128 = query.getOrDefault("Domain")
  valid_21631128 = validateParameter(valid_21631128, JString, required = false,
                                   default = nil)
  if valid_21631128 != nil:
    section.add "Domain", valid_21631128
  var valid_21631129 = query.getOrDefault("TdeCredentialArn")
  valid_21631129 = validateParameter(valid_21631129, JString, required = false,
                                   default = nil)
  if valid_21631129 != nil:
    section.add "TdeCredentialArn", valid_21631129
  var valid_21631130 = query.getOrDefault("PubliclyAccessible")
  valid_21631130 = validateParameter(valid_21631130, JBool, required = false,
                                   default = nil)
  if valid_21631130 != nil:
    section.add "PubliclyAccessible", valid_21631130
  var valid_21631131 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_21631131 = validateParameter(valid_21631131, JBool, required = false,
                                   default = nil)
  if valid_21631131 != nil:
    section.add "AutoMinorVersionUpgrade", valid_21631131
  var valid_21631132 = query.getOrDefault("Port")
  valid_21631132 = validateParameter(valid_21631132, JInt, required = false,
                                   default = nil)
  if valid_21631132 != nil:
    section.add "Port", valid_21631132
  var valid_21631133 = query.getOrDefault("Version")
  valid_21631133 = validateParameter(valid_21631133, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631133 != nil:
    section.add "Version", valid_21631133
  var valid_21631134 = query.getOrDefault("DBInstanceIdentifier")
  valid_21631134 = validateParameter(valid_21631134, JString, required = true,
                                   default = nil)
  if valid_21631134 != nil:
    section.add "DBInstanceIdentifier", valid_21631134
  var valid_21631135 = query.getOrDefault("DBSnapshotIdentifier")
  valid_21631135 = validateParameter(valid_21631135, JString, required = true,
                                   default = nil)
  if valid_21631135 != nil:
    section.add "DBSnapshotIdentifier", valid_21631135
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631136 = header.getOrDefault("X-Amz-Date")
  valid_21631136 = validateParameter(valid_21631136, JString, required = false,
                                   default = nil)
  if valid_21631136 != nil:
    section.add "X-Amz-Date", valid_21631136
  var valid_21631137 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631137 = validateParameter(valid_21631137, JString, required = false,
                                   default = nil)
  if valid_21631137 != nil:
    section.add "X-Amz-Security-Token", valid_21631137
  var valid_21631138 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631138 = validateParameter(valid_21631138, JString, required = false,
                                   default = nil)
  if valid_21631138 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631138
  var valid_21631139 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631139 = validateParameter(valid_21631139, JString, required = false,
                                   default = nil)
  if valid_21631139 != nil:
    section.add "X-Amz-Algorithm", valid_21631139
  var valid_21631140 = header.getOrDefault("X-Amz-Signature")
  valid_21631140 = validateParameter(valid_21631140, JString, required = false,
                                   default = nil)
  if valid_21631140 != nil:
    section.add "X-Amz-Signature", valid_21631140
  var valid_21631141 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631141 = validateParameter(valid_21631141, JString, required = false,
                                   default = nil)
  if valid_21631141 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631141
  var valid_21631142 = header.getOrDefault("X-Amz-Credential")
  valid_21631142 = validateParameter(valid_21631142, JString, required = false,
                                   default = nil)
  if valid_21631142 != nil:
    section.add "X-Amz-Credential", valid_21631142
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631143: Call_GetRestoreDBInstanceFromDBSnapshot_21631103;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ## 
  let valid = call_21631143.validator(path, query, header, formData, body, _)
  let scheme = call_21631143.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631143.makeUrl(scheme.get, call_21631143.host, call_21631143.base,
                               call_21631143.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631143, uri, valid, _)

proc call*(call_21631144: Call_GetRestoreDBInstanceFromDBSnapshot_21631103;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string;
          Engine: string = ""; UseDefaultProcessorFeatures: bool = false;
          ProcessorFeatures: JsonNode = nil; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          OptionGroupName: string = ""; AvailabilityZone: string = ""; Iops: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; MultiAZ: bool = false;
          TdeCredentialPassword: string = ""; LicenseModel: string = "";
          Tags: JsonNode = nil; DBName: string = ""; CopyTagsToSnapshot: bool = false;
          DomainIAMRoleName: string = ""; DBInstanceClass: string = "";
          DBParameterGroupName: string = ""; DeletionProtection: bool = false;
          Action: string = "RestoreDBInstanceFromDBSnapshot";
          DBSubnetGroupName: string = ""; Domain: string = "";
          TdeCredentialArn: string = ""; PubliclyAccessible: bool = false;
          AutoMinorVersionUpgrade: bool = false; Port: int = 0;
          Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBInstanceFromDBSnapshot
  ## <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with the most of original configuration with the default security group and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored AZ deployment and not a single-AZ deployment.</p> <p>If your intent is to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. Once you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you will replace the original DB instance with the DB instance created from the snapshot.</p> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p> </note>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   Iops: int
  ##       : <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts. </p> <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints: Must be an integer greater than 1000.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p> </note>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Default: The same port as the original DB instance</p> <p>Constraints: Value must be <code>1150-65535</code> </p>
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul> <p>Example: <code>my-snapshot-id</code> </p>
  ##   DBSnapshotIdentifier: string (required)
  ##                       : <p>The identifier for the DB snapshot to restore from.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li> <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li> </ul>
  var query_21631145 = newJObject()
  add(query_21631145, "Engine", newJString(Engine))
  add(query_21631145, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  if ProcessorFeatures != nil:
    query_21631145.add "ProcessorFeatures", ProcessorFeatures
  add(query_21631145, "StorageType", newJString(StorageType))
  add(query_21631145, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_21631145, "OptionGroupName", newJString(OptionGroupName))
  add(query_21631145, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_21631145, "Iops", newJInt(Iops))
  if VpcSecurityGroupIds != nil:
    query_21631145.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_21631145.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_21631145, "MultiAZ", newJBool(MultiAZ))
  add(query_21631145, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_21631145, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    query_21631145.add "Tags", Tags
  add(query_21631145, "DBName", newJString(DBName))
  add(query_21631145, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_21631145, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_21631145, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_21631145, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_21631145, "DeletionProtection", newJBool(DeletionProtection))
  add(query_21631145, "Action", newJString(Action))
  add(query_21631145, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21631145, "Domain", newJString(Domain))
  add(query_21631145, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_21631145, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_21631145, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_21631145, "Port", newJInt(Port))
  add(query_21631145, "Version", newJString(Version))
  add(query_21631145, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_21631145, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_21631144.call(nil, query_21631145, nil, nil, nil)

var getRestoreDBInstanceFromDBSnapshot* = Call_GetRestoreDBInstanceFromDBSnapshot_21631103(
    name: "getRestoreDBInstanceFromDBSnapshot", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromDBSnapshot",
    validator: validate_GetRestoreDBInstanceFromDBSnapshot_21631104, base: "/",
    makeUrl: url_GetRestoreDBInstanceFromDBSnapshot_21631105,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceFromS3_21631248 = ref object of OpenApiRestCall_21625435
proc url_PostRestoreDBInstanceFromS3_21631250(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBInstanceFromS3_21631249(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21631251 = query.getOrDefault("Action")
  valid_21631251 = validateParameter(valid_21631251, JString, required = true, default = newJString(
      "RestoreDBInstanceFromS3"))
  if valid_21631251 != nil:
    section.add "Action", valid_21631251
  var valid_21631252 = query.getOrDefault("Version")
  valid_21631252 = validateParameter(valid_21631252, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631252 != nil:
    section.add "Version", valid_21631252
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631253 = header.getOrDefault("X-Amz-Date")
  valid_21631253 = validateParameter(valid_21631253, JString, required = false,
                                   default = nil)
  if valid_21631253 != nil:
    section.add "X-Amz-Date", valid_21631253
  var valid_21631254 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631254 = validateParameter(valid_21631254, JString, required = false,
                                   default = nil)
  if valid_21631254 != nil:
    section.add "X-Amz-Security-Token", valid_21631254
  var valid_21631255 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631255 = validateParameter(valid_21631255, JString, required = false,
                                   default = nil)
  if valid_21631255 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631255
  var valid_21631256 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631256 = validateParameter(valid_21631256, JString, required = false,
                                   default = nil)
  if valid_21631256 != nil:
    section.add "X-Amz-Algorithm", valid_21631256
  var valid_21631257 = header.getOrDefault("X-Amz-Signature")
  valid_21631257 = validateParameter(valid_21631257, JString, required = false,
                                   default = nil)
  if valid_21631257 != nil:
    section.add "X-Amz-Signature", valid_21631257
  var valid_21631258 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631258 = validateParameter(valid_21631258, JString, required = false,
                                   default = nil)
  if valid_21631258 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631258
  var valid_21631259 = header.getOrDefault("X-Amz-Credential")
  valid_21631259 = validateParameter(valid_21631259, JString, required = false,
                                   default = nil)
  if valid_21631259 != nil:
    section.add "X-Amz-Credential", valid_21631259
  result.add "header", section
  ## parameters in `formData` object:
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   BackupRetentionPeriod: JInt
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : A DB subnet group to associate with this DB instance.
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   LicenseModel: JString
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   S3BucketName: JString (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   DBName: JString
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   OptionGroupName: JString
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   S3Prefix: JString
  ##           : The prefix of your Amazon S3 bucket. 
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   S3IngestionRoleArn: JString (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DBInstanceClass: JString (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  section = newJObject()
  var valid_21631260 = formData.getOrDefault("ProcessorFeatures")
  valid_21631260 = validateParameter(valid_21631260, JArray, required = false,
                                   default = nil)
  if valid_21631260 != nil:
    section.add "ProcessorFeatures", valid_21631260
  var valid_21631261 = formData.getOrDefault("EnablePerformanceInsights")
  valid_21631261 = validateParameter(valid_21631261, JBool, required = false,
                                   default = nil)
  if valid_21631261 != nil:
    section.add "EnablePerformanceInsights", valid_21631261
  assert formData != nil,
        "formData argument is necessary due to required `Engine` field"
  var valid_21631262 = formData.getOrDefault("Engine")
  valid_21631262 = validateParameter(valid_21631262, JString, required = true,
                                   default = nil)
  if valid_21631262 != nil:
    section.add "Engine", valid_21631262
  var valid_21631263 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_21631263 = validateParameter(valid_21631263, JArray, required = false,
                                   default = nil)
  if valid_21631263 != nil:
    section.add "VpcSecurityGroupIds", valid_21631263
  var valid_21631264 = formData.getOrDefault("Iops")
  valid_21631264 = validateParameter(valid_21631264, JInt, required = false,
                                   default = nil)
  if valid_21631264 != nil:
    section.add "Iops", valid_21631264
  var valid_21631265 = formData.getOrDefault("BackupRetentionPeriod")
  valid_21631265 = validateParameter(valid_21631265, JInt, required = false,
                                   default = nil)
  if valid_21631265 != nil:
    section.add "BackupRetentionPeriod", valid_21631265
  var valid_21631266 = formData.getOrDefault("Tags")
  valid_21631266 = validateParameter(valid_21631266, JArray, required = false,
                                   default = nil)
  if valid_21631266 != nil:
    section.add "Tags", valid_21631266
  var valid_21631267 = formData.getOrDefault("DeletionProtection")
  valid_21631267 = validateParameter(valid_21631267, JBool, required = false,
                                   default = nil)
  if valid_21631267 != nil:
    section.add "DeletionProtection", valid_21631267
  var valid_21631268 = formData.getOrDefault("DBSubnetGroupName")
  valid_21631268 = validateParameter(valid_21631268, JString, required = false,
                                   default = nil)
  if valid_21631268 != nil:
    section.add "DBSubnetGroupName", valid_21631268
  var valid_21631269 = formData.getOrDefault("MultiAZ")
  valid_21631269 = validateParameter(valid_21631269, JBool, required = false,
                                   default = nil)
  if valid_21631269 != nil:
    section.add "MultiAZ", valid_21631269
  var valid_21631270 = formData.getOrDefault("PubliclyAccessible")
  valid_21631270 = validateParameter(valid_21631270, JBool, required = false,
                                   default = nil)
  if valid_21631270 != nil:
    section.add "PubliclyAccessible", valid_21631270
  var valid_21631271 = formData.getOrDefault("StorageType")
  valid_21631271 = validateParameter(valid_21631271, JString, required = false,
                                   default = nil)
  if valid_21631271 != nil:
    section.add "StorageType", valid_21631271
  var valid_21631272 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_21631272 = validateParameter(valid_21631272, JArray, required = false,
                                   default = nil)
  if valid_21631272 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21631272
  var valid_21631273 = formData.getOrDefault("LicenseModel")
  valid_21631273 = validateParameter(valid_21631273, JString, required = false,
                                   default = nil)
  if valid_21631273 != nil:
    section.add "LicenseModel", valid_21631273
  var valid_21631274 = formData.getOrDefault("KmsKeyId")
  valid_21631274 = validateParameter(valid_21631274, JString, required = false,
                                   default = nil)
  if valid_21631274 != nil:
    section.add "KmsKeyId", valid_21631274
  var valid_21631275 = formData.getOrDefault("StorageEncrypted")
  valid_21631275 = validateParameter(valid_21631275, JBool, required = false,
                                   default = nil)
  if valid_21631275 != nil:
    section.add "StorageEncrypted", valid_21631275
  var valid_21631276 = formData.getOrDefault("MonitoringRoleArn")
  valid_21631276 = validateParameter(valid_21631276, JString, required = false,
                                   default = nil)
  if valid_21631276 != nil:
    section.add "MonitoringRoleArn", valid_21631276
  var valid_21631277 = formData.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_21631277 = validateParameter(valid_21631277, JInt, required = false,
                                   default = nil)
  if valid_21631277 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_21631277
  var valid_21631278 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_21631278 = validateParameter(valid_21631278, JBool, required = false,
                                   default = nil)
  if valid_21631278 != nil:
    section.add "UseDefaultProcessorFeatures", valid_21631278
  var valid_21631279 = formData.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_21631279 = validateParameter(valid_21631279, JString, required = false,
                                   default = nil)
  if valid_21631279 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_21631279
  var valid_21631280 = formData.getOrDefault("S3BucketName")
  valid_21631280 = validateParameter(valid_21631280, JString, required = true,
                                   default = nil)
  if valid_21631280 != nil:
    section.add "S3BucketName", valid_21631280
  var valid_21631281 = formData.getOrDefault("DBSecurityGroups")
  valid_21631281 = validateParameter(valid_21631281, JArray, required = false,
                                   default = nil)
  if valid_21631281 != nil:
    section.add "DBSecurityGroups", valid_21631281
  var valid_21631282 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_21631282 = validateParameter(valid_21631282, JBool, required = false,
                                   default = nil)
  if valid_21631282 != nil:
    section.add "CopyTagsToSnapshot", valid_21631282
  var valid_21631283 = formData.getOrDefault("Port")
  valid_21631283 = validateParameter(valid_21631283, JInt, required = false,
                                   default = nil)
  if valid_21631283 != nil:
    section.add "Port", valid_21631283
  var valid_21631284 = formData.getOrDefault("SourceEngine")
  valid_21631284 = validateParameter(valid_21631284, JString, required = true,
                                   default = nil)
  if valid_21631284 != nil:
    section.add "SourceEngine", valid_21631284
  var valid_21631285 = formData.getOrDefault("DBName")
  valid_21631285 = validateParameter(valid_21631285, JString, required = false,
                                   default = nil)
  if valid_21631285 != nil:
    section.add "DBName", valid_21631285
  var valid_21631286 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21631286 = validateParameter(valid_21631286, JString, required = true,
                                   default = nil)
  if valid_21631286 != nil:
    section.add "DBInstanceIdentifier", valid_21631286
  var valid_21631287 = formData.getOrDefault("OptionGroupName")
  valid_21631287 = validateParameter(valid_21631287, JString, required = false,
                                   default = nil)
  if valid_21631287 != nil:
    section.add "OptionGroupName", valid_21631287
  var valid_21631288 = formData.getOrDefault("DBParameterGroupName")
  valid_21631288 = validateParameter(valid_21631288, JString, required = false,
                                   default = nil)
  if valid_21631288 != nil:
    section.add "DBParameterGroupName", valid_21631288
  var valid_21631289 = formData.getOrDefault("MasterUserPassword")
  valid_21631289 = validateParameter(valid_21631289, JString, required = false,
                                   default = nil)
  if valid_21631289 != nil:
    section.add "MasterUserPassword", valid_21631289
  var valid_21631290 = formData.getOrDefault("SourceEngineVersion")
  valid_21631290 = validateParameter(valid_21631290, JString, required = true,
                                   default = nil)
  if valid_21631290 != nil:
    section.add "SourceEngineVersion", valid_21631290
  var valid_21631291 = formData.getOrDefault("S3Prefix")
  valid_21631291 = validateParameter(valid_21631291, JString, required = false,
                                   default = nil)
  if valid_21631291 != nil:
    section.add "S3Prefix", valid_21631291
  var valid_21631292 = formData.getOrDefault("AvailabilityZone")
  valid_21631292 = validateParameter(valid_21631292, JString, required = false,
                                   default = nil)
  if valid_21631292 != nil:
    section.add "AvailabilityZone", valid_21631292
  var valid_21631293 = formData.getOrDefault("MonitoringInterval")
  valid_21631293 = validateParameter(valid_21631293, JInt, required = false,
                                   default = nil)
  if valid_21631293 != nil:
    section.add "MonitoringInterval", valid_21631293
  var valid_21631294 = formData.getOrDefault("S3IngestionRoleArn")
  valid_21631294 = validateParameter(valid_21631294, JString, required = true,
                                   default = nil)
  if valid_21631294 != nil:
    section.add "S3IngestionRoleArn", valid_21631294
  var valid_21631295 = formData.getOrDefault("AllocatedStorage")
  valid_21631295 = validateParameter(valid_21631295, JInt, required = false,
                                   default = nil)
  if valid_21631295 != nil:
    section.add "AllocatedStorage", valid_21631295
  var valid_21631296 = formData.getOrDefault("MasterUsername")
  valid_21631296 = validateParameter(valid_21631296, JString, required = false,
                                   default = nil)
  if valid_21631296 != nil:
    section.add "MasterUsername", valid_21631296
  var valid_21631297 = formData.getOrDefault("DBInstanceClass")
  valid_21631297 = validateParameter(valid_21631297, JString, required = true,
                                   default = nil)
  if valid_21631297 != nil:
    section.add "DBInstanceClass", valid_21631297
  var valid_21631298 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21631298 = validateParameter(valid_21631298, JBool, required = false,
                                   default = nil)
  if valid_21631298 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21631298
  var valid_21631299 = formData.getOrDefault("PreferredBackupWindow")
  valid_21631299 = validateParameter(valid_21631299, JString, required = false,
                                   default = nil)
  if valid_21631299 != nil:
    section.add "PreferredBackupWindow", valid_21631299
  var valid_21631300 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_21631300 = validateParameter(valid_21631300, JBool, required = false,
                                   default = nil)
  if valid_21631300 != nil:
    section.add "AutoMinorVersionUpgrade", valid_21631300
  var valid_21631301 = formData.getOrDefault("EngineVersion")
  valid_21631301 = validateParameter(valid_21631301, JString, required = false,
                                   default = nil)
  if valid_21631301 != nil:
    section.add "EngineVersion", valid_21631301
  var valid_21631302 = formData.getOrDefault("PreferredMaintenanceWindow")
  valid_21631302 = validateParameter(valid_21631302, JString, required = false,
                                   default = nil)
  if valid_21631302 != nil:
    section.add "PreferredMaintenanceWindow", valid_21631302
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631303: Call_PostRestoreDBInstanceFromS3_21631248;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_21631303.validator(path, query, header, formData, body, _)
  let scheme = call_21631303.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631303.makeUrl(scheme.get, call_21631303.host, call_21631303.base,
                               call_21631303.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631303, uri, valid, _)

proc call*(call_21631304: Call_PostRestoreDBInstanceFromS3_21631248;
          Engine: string; S3BucketName: string; SourceEngine: string;
          DBInstanceIdentifier: string; SourceEngineVersion: string;
          S3IngestionRoleArn: string; DBInstanceClass: string;
          ProcessorFeatures: JsonNode = nil;
          EnablePerformanceInsights: bool = false;
          VpcSecurityGroupIds: JsonNode = nil; Iops: int = 0;
          BackupRetentionPeriod: int = 0; Tags: JsonNode = nil;
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          MultiAZ: bool = false; PubliclyAccessible: bool = false;
          StorageType: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          LicenseModel: string = ""; KmsKeyId: string = "";
          StorageEncrypted: bool = false; MonitoringRoleArn: string = "";
          PerformanceInsightsRetentionPeriod: int = 0;
          UseDefaultProcessorFeatures: bool = false;
          PerformanceInsightsKMSKeyId: string = "";
          DBSecurityGroups: JsonNode = nil; CopyTagsToSnapshot: bool = false;
          Port: int = 0; DBName: string = ""; OptionGroupName: string = "";
          DBParameterGroupName: string = ""; MasterUserPassword: string = "";
          S3Prefix: string = ""; AvailabilityZone: string = "";
          MonitoringInterval: int = 0; Action: string = "RestoreDBInstanceFromS3";
          AllocatedStorage: int = 0; MasterUsername: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          PreferredBackupWindow: string = ""; AutoMinorVersionUpgrade: bool = false;
          EngineVersion: string = ""; Version: string = "2014-10-31";
          PreferredMaintenanceWindow: string = ""): Recallable =
  ## postRestoreDBInstanceFromS3
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   BackupRetentionPeriod: int
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : A DB subnet group to associate with this DB instance.
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   LicenseModel: string
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   S3BucketName: string (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   SourceEngine: string (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   DBName: string
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   OptionGroupName: string
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   S3Prefix: string
  ##           : The prefix of your Amazon S3 bucket. 
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   S3IngestionRoleArn: string (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   Action: string (required)
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   MasterUsername: string
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   DBInstanceClass: string (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   Version: string (required)
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  var query_21631305 = newJObject()
  var formData_21631306 = newJObject()
  if ProcessorFeatures != nil:
    formData_21631306.add "ProcessorFeatures", ProcessorFeatures
  add(formData_21631306, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(formData_21631306, "Engine", newJString(Engine))
  if VpcSecurityGroupIds != nil:
    formData_21631306.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_21631306, "Iops", newJInt(Iops))
  add(formData_21631306, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  if Tags != nil:
    formData_21631306.add "Tags", Tags
  add(formData_21631306, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_21631306, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_21631306, "MultiAZ", newJBool(MultiAZ))
  add(formData_21631306, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_21631306, "StorageType", newJString(StorageType))
  if EnableCloudwatchLogsExports != nil:
    formData_21631306.add "EnableCloudwatchLogsExports",
                         EnableCloudwatchLogsExports
  add(formData_21631306, "LicenseModel", newJString(LicenseModel))
  add(formData_21631306, "KmsKeyId", newJString(KmsKeyId))
  add(formData_21631306, "StorageEncrypted", newJBool(StorageEncrypted))
  add(formData_21631306, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(formData_21631306, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(formData_21631306, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(formData_21631306, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(formData_21631306, "S3BucketName", newJString(S3BucketName))
  if DBSecurityGroups != nil:
    formData_21631306.add "DBSecurityGroups", DBSecurityGroups
  add(formData_21631306, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_21631306, "Port", newJInt(Port))
  add(formData_21631306, "SourceEngine", newJString(SourceEngine))
  add(formData_21631306, "DBName", newJString(DBName))
  add(formData_21631306, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_21631306, "OptionGroupName", newJString(OptionGroupName))
  add(formData_21631306, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(formData_21631306, "MasterUserPassword", newJString(MasterUserPassword))
  add(formData_21631306, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(formData_21631306, "S3Prefix", newJString(S3Prefix))
  add(formData_21631306, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_21631306, "MonitoringInterval", newJInt(MonitoringInterval))
  add(formData_21631306, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_21631305, "Action", newJString(Action))
  add(formData_21631306, "AllocatedStorage", newJInt(AllocatedStorage))
  add(formData_21631306, "MasterUsername", newJString(MasterUsername))
  add(formData_21631306, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_21631306, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_21631306, "PreferredBackupWindow",
      newJString(PreferredBackupWindow))
  add(formData_21631306, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(formData_21631306, "EngineVersion", newJString(EngineVersion))
  add(query_21631305, "Version", newJString(Version))
  add(formData_21631306, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  result = call_21631304.call(nil, query_21631305, nil, formData_21631306, nil)

var postRestoreDBInstanceFromS3* = Call_PostRestoreDBInstanceFromS3_21631248(
    name: "postRestoreDBInstanceFromS3", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromS3",
    validator: validate_PostRestoreDBInstanceFromS3_21631249, base: "/",
    makeUrl: url_PostRestoreDBInstanceFromS3_21631250,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceFromS3_21631190 = ref object of OpenApiRestCall_21625435
proc url_GetRestoreDBInstanceFromS3_21631192(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBInstanceFromS3_21631191(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   MonitoringInterval: JInt
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   Engine: JString (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsRetentionPeriod: JInt
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   StorageEncrypted: JBool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   AllocatedStorage: JInt
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   S3Prefix: JString
  ##           : The prefix of your Amazon S3 bucket. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   MasterUserPassword: JString
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MonitoringRoleArn: JString
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   MultiAZ: JBool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   BackupRetentionPeriod: JInt
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   DBName: JString
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : A DB subnet group to associate with this DB instance.
  ##   KmsKeyId: JString
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   SourceEngine: JString (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   EngineVersion: JString
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   SourceEngineVersion: JString (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   PreferredBackupWindow: JString
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceIdentifier: JString (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   MasterUsername: JString
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   S3BucketName: JString (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   PreferredMaintenanceWindow: JString
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   OptionGroupName: JString
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   Iops: JInt
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   LicenseModel: JString
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   S3IngestionRoleArn: JString (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   DBInstanceClass: JString (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   PerformanceInsightsKMSKeyId: JString
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Action: JString (required)
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   EnablePerformanceInsights: JBool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Version: JString (required)
  section = newJObject()
  var valid_21631193 = query.getOrDefault("MonitoringInterval")
  valid_21631193 = validateParameter(valid_21631193, JInt, required = false,
                                   default = nil)
  if valid_21631193 != nil:
    section.add "MonitoringInterval", valid_21631193
  assert query != nil, "query argument is necessary due to required `Engine` field"
  var valid_21631194 = query.getOrDefault("Engine")
  valid_21631194 = validateParameter(valid_21631194, JString, required = true,
                                   default = nil)
  if valid_21631194 != nil:
    section.add "Engine", valid_21631194
  var valid_21631195 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_21631195 = validateParameter(valid_21631195, JBool, required = false,
                                   default = nil)
  if valid_21631195 != nil:
    section.add "UseDefaultProcessorFeatures", valid_21631195
  var valid_21631196 = query.getOrDefault("PerformanceInsightsRetentionPeriod")
  valid_21631196 = validateParameter(valid_21631196, JInt, required = false,
                                   default = nil)
  if valid_21631196 != nil:
    section.add "PerformanceInsightsRetentionPeriod", valid_21631196
  var valid_21631197 = query.getOrDefault("StorageEncrypted")
  valid_21631197 = validateParameter(valid_21631197, JBool, required = false,
                                   default = nil)
  if valid_21631197 != nil:
    section.add "StorageEncrypted", valid_21631197
  var valid_21631198 = query.getOrDefault("AllocatedStorage")
  valid_21631198 = validateParameter(valid_21631198, JInt, required = false,
                                   default = nil)
  if valid_21631198 != nil:
    section.add "AllocatedStorage", valid_21631198
  var valid_21631199 = query.getOrDefault("StorageType")
  valid_21631199 = validateParameter(valid_21631199, JString, required = false,
                                   default = nil)
  if valid_21631199 != nil:
    section.add "StorageType", valid_21631199
  var valid_21631200 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21631200 = validateParameter(valid_21631200, JBool, required = false,
                                   default = nil)
  if valid_21631200 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21631200
  var valid_21631201 = query.getOrDefault("S3Prefix")
  valid_21631201 = validateParameter(valid_21631201, JString, required = false,
                                   default = nil)
  if valid_21631201 != nil:
    section.add "S3Prefix", valid_21631201
  var valid_21631202 = query.getOrDefault("DBSecurityGroups")
  valid_21631202 = validateParameter(valid_21631202, JArray, required = false,
                                   default = nil)
  if valid_21631202 != nil:
    section.add "DBSecurityGroups", valid_21631202
  var valid_21631203 = query.getOrDefault("MasterUserPassword")
  valid_21631203 = validateParameter(valid_21631203, JString, required = false,
                                   default = nil)
  if valid_21631203 != nil:
    section.add "MasterUserPassword", valid_21631203
  var valid_21631204 = query.getOrDefault("MonitoringRoleArn")
  valid_21631204 = validateParameter(valid_21631204, JString, required = false,
                                   default = nil)
  if valid_21631204 != nil:
    section.add "MonitoringRoleArn", valid_21631204
  var valid_21631205 = query.getOrDefault("MultiAZ")
  valid_21631205 = validateParameter(valid_21631205, JBool, required = false,
                                   default = nil)
  if valid_21631205 != nil:
    section.add "MultiAZ", valid_21631205
  var valid_21631206 = query.getOrDefault("BackupRetentionPeriod")
  valid_21631206 = validateParameter(valid_21631206, JInt, required = false,
                                   default = nil)
  if valid_21631206 != nil:
    section.add "BackupRetentionPeriod", valid_21631206
  var valid_21631207 = query.getOrDefault("DBName")
  valid_21631207 = validateParameter(valid_21631207, JString, required = false,
                                   default = nil)
  if valid_21631207 != nil:
    section.add "DBName", valid_21631207
  var valid_21631208 = query.getOrDefault("CopyTagsToSnapshot")
  valid_21631208 = validateParameter(valid_21631208, JBool, required = false,
                                   default = nil)
  if valid_21631208 != nil:
    section.add "CopyTagsToSnapshot", valid_21631208
  var valid_21631209 = query.getOrDefault("DeletionProtection")
  valid_21631209 = validateParameter(valid_21631209, JBool, required = false,
                                   default = nil)
  if valid_21631209 != nil:
    section.add "DeletionProtection", valid_21631209
  var valid_21631210 = query.getOrDefault("DBSubnetGroupName")
  valid_21631210 = validateParameter(valid_21631210, JString, required = false,
                                   default = nil)
  if valid_21631210 != nil:
    section.add "DBSubnetGroupName", valid_21631210
  var valid_21631211 = query.getOrDefault("KmsKeyId")
  valid_21631211 = validateParameter(valid_21631211, JString, required = false,
                                   default = nil)
  if valid_21631211 != nil:
    section.add "KmsKeyId", valid_21631211
  var valid_21631212 = query.getOrDefault("SourceEngine")
  valid_21631212 = validateParameter(valid_21631212, JString, required = true,
                                   default = nil)
  if valid_21631212 != nil:
    section.add "SourceEngine", valid_21631212
  var valid_21631213 = query.getOrDefault("EngineVersion")
  valid_21631213 = validateParameter(valid_21631213, JString, required = false,
                                   default = nil)
  if valid_21631213 != nil:
    section.add "EngineVersion", valid_21631213
  var valid_21631214 = query.getOrDefault("SourceEngineVersion")
  valid_21631214 = validateParameter(valid_21631214, JString, required = true,
                                   default = nil)
  if valid_21631214 != nil:
    section.add "SourceEngineVersion", valid_21631214
  var valid_21631215 = query.getOrDefault("PreferredBackupWindow")
  valid_21631215 = validateParameter(valid_21631215, JString, required = false,
                                   default = nil)
  if valid_21631215 != nil:
    section.add "PreferredBackupWindow", valid_21631215
  var valid_21631216 = query.getOrDefault("DBInstanceIdentifier")
  valid_21631216 = validateParameter(valid_21631216, JString, required = true,
                                   default = nil)
  if valid_21631216 != nil:
    section.add "DBInstanceIdentifier", valid_21631216
  var valid_21631217 = query.getOrDefault("MasterUsername")
  valid_21631217 = validateParameter(valid_21631217, JString, required = false,
                                   default = nil)
  if valid_21631217 != nil:
    section.add "MasterUsername", valid_21631217
  var valid_21631218 = query.getOrDefault("S3BucketName")
  valid_21631218 = validateParameter(valid_21631218, JString, required = true,
                                   default = nil)
  if valid_21631218 != nil:
    section.add "S3BucketName", valid_21631218
  var valid_21631219 = query.getOrDefault("PreferredMaintenanceWindow")
  valid_21631219 = validateParameter(valid_21631219, JString, required = false,
                                   default = nil)
  if valid_21631219 != nil:
    section.add "PreferredMaintenanceWindow", valid_21631219
  var valid_21631220 = query.getOrDefault("ProcessorFeatures")
  valid_21631220 = validateParameter(valid_21631220, JArray, required = false,
                                   default = nil)
  if valid_21631220 != nil:
    section.add "ProcessorFeatures", valid_21631220
  var valid_21631221 = query.getOrDefault("OptionGroupName")
  valid_21631221 = validateParameter(valid_21631221, JString, required = false,
                                   default = nil)
  if valid_21631221 != nil:
    section.add "OptionGroupName", valid_21631221
  var valid_21631222 = query.getOrDefault("AvailabilityZone")
  valid_21631222 = validateParameter(valid_21631222, JString, required = false,
                                   default = nil)
  if valid_21631222 != nil:
    section.add "AvailabilityZone", valid_21631222
  var valid_21631223 = query.getOrDefault("Iops")
  valid_21631223 = validateParameter(valid_21631223, JInt, required = false,
                                   default = nil)
  if valid_21631223 != nil:
    section.add "Iops", valid_21631223
  var valid_21631224 = query.getOrDefault("VpcSecurityGroupIds")
  valid_21631224 = validateParameter(valid_21631224, JArray, required = false,
                                   default = nil)
  if valid_21631224 != nil:
    section.add "VpcSecurityGroupIds", valid_21631224
  var valid_21631225 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_21631225 = validateParameter(valid_21631225, JArray, required = false,
                                   default = nil)
  if valid_21631225 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21631225
  var valid_21631226 = query.getOrDefault("LicenseModel")
  valid_21631226 = validateParameter(valid_21631226, JString, required = false,
                                   default = nil)
  if valid_21631226 != nil:
    section.add "LicenseModel", valid_21631226
  var valid_21631227 = query.getOrDefault("Tags")
  valid_21631227 = validateParameter(valid_21631227, JArray, required = false,
                                   default = nil)
  if valid_21631227 != nil:
    section.add "Tags", valid_21631227
  var valid_21631228 = query.getOrDefault("S3IngestionRoleArn")
  valid_21631228 = validateParameter(valid_21631228, JString, required = true,
                                   default = nil)
  if valid_21631228 != nil:
    section.add "S3IngestionRoleArn", valid_21631228
  var valid_21631229 = query.getOrDefault("DBParameterGroupName")
  valid_21631229 = validateParameter(valid_21631229, JString, required = false,
                                   default = nil)
  if valid_21631229 != nil:
    section.add "DBParameterGroupName", valid_21631229
  var valid_21631230 = query.getOrDefault("DBInstanceClass")
  valid_21631230 = validateParameter(valid_21631230, JString, required = true,
                                   default = nil)
  if valid_21631230 != nil:
    section.add "DBInstanceClass", valid_21631230
  var valid_21631231 = query.getOrDefault("PerformanceInsightsKMSKeyId")
  valid_21631231 = validateParameter(valid_21631231, JString, required = false,
                                   default = nil)
  if valid_21631231 != nil:
    section.add "PerformanceInsightsKMSKeyId", valid_21631231
  var valid_21631232 = query.getOrDefault("Action")
  valid_21631232 = validateParameter(valid_21631232, JString, required = true, default = newJString(
      "RestoreDBInstanceFromS3"))
  if valid_21631232 != nil:
    section.add "Action", valid_21631232
  var valid_21631233 = query.getOrDefault("PubliclyAccessible")
  valid_21631233 = validateParameter(valid_21631233, JBool, required = false,
                                   default = nil)
  if valid_21631233 != nil:
    section.add "PubliclyAccessible", valid_21631233
  var valid_21631234 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_21631234 = validateParameter(valid_21631234, JBool, required = false,
                                   default = nil)
  if valid_21631234 != nil:
    section.add "AutoMinorVersionUpgrade", valid_21631234
  var valid_21631235 = query.getOrDefault("Port")
  valid_21631235 = validateParameter(valid_21631235, JInt, required = false,
                                   default = nil)
  if valid_21631235 != nil:
    section.add "Port", valid_21631235
  var valid_21631236 = query.getOrDefault("EnablePerformanceInsights")
  valid_21631236 = validateParameter(valid_21631236, JBool, required = false,
                                   default = nil)
  if valid_21631236 != nil:
    section.add "EnablePerformanceInsights", valid_21631236
  var valid_21631237 = query.getOrDefault("Version")
  valid_21631237 = validateParameter(valid_21631237, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631237 != nil:
    section.add "Version", valid_21631237
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631238 = header.getOrDefault("X-Amz-Date")
  valid_21631238 = validateParameter(valid_21631238, JString, required = false,
                                   default = nil)
  if valid_21631238 != nil:
    section.add "X-Amz-Date", valid_21631238
  var valid_21631239 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631239 = validateParameter(valid_21631239, JString, required = false,
                                   default = nil)
  if valid_21631239 != nil:
    section.add "X-Amz-Security-Token", valid_21631239
  var valid_21631240 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631240 = validateParameter(valid_21631240, JString, required = false,
                                   default = nil)
  if valid_21631240 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631240
  var valid_21631241 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631241 = validateParameter(valid_21631241, JString, required = false,
                                   default = nil)
  if valid_21631241 != nil:
    section.add "X-Amz-Algorithm", valid_21631241
  var valid_21631242 = header.getOrDefault("X-Amz-Signature")
  valid_21631242 = validateParameter(valid_21631242, JString, required = false,
                                   default = nil)
  if valid_21631242 != nil:
    section.add "X-Amz-Signature", valid_21631242
  var valid_21631243 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631243 = validateParameter(valid_21631243, JString, required = false,
                                   default = nil)
  if valid_21631243 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631243
  var valid_21631244 = header.getOrDefault("X-Amz-Credential")
  valid_21631244 = validateParameter(valid_21631244, JString, required = false,
                                   default = nil)
  if valid_21631244 != nil:
    section.add "X-Amz-Credential", valid_21631244
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631245: Call_GetRestoreDBInstanceFromS3_21631190;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ## 
  let valid = call_21631245.validator(path, query, header, formData, body, _)
  let scheme = call_21631245.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631245.makeUrl(scheme.get, call_21631245.host, call_21631245.base,
                               call_21631245.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631245, uri, valid, _)

proc call*(call_21631246: Call_GetRestoreDBInstanceFromS3_21631190; Engine: string;
          SourceEngine: string; SourceEngineVersion: string;
          DBInstanceIdentifier: string; S3BucketName: string;
          S3IngestionRoleArn: string; DBInstanceClass: string;
          MonitoringInterval: int = 0; UseDefaultProcessorFeatures: bool = false;
          PerformanceInsightsRetentionPeriod: int = 0;
          StorageEncrypted: bool = false; AllocatedStorage: int = 0;
          StorageType: string = ""; EnableIAMDatabaseAuthentication: bool = false;
          S3Prefix: string = ""; DBSecurityGroups: JsonNode = nil;
          MasterUserPassword: string = ""; MonitoringRoleArn: string = "";
          MultiAZ: bool = false; BackupRetentionPeriod: int = 0; DBName: string = "";
          CopyTagsToSnapshot: bool = false; DeletionProtection: bool = false;
          DBSubnetGroupName: string = ""; KmsKeyId: string = "";
          EngineVersion: string = ""; PreferredBackupWindow: string = "";
          MasterUsername: string = ""; PreferredMaintenanceWindow: string = "";
          ProcessorFeatures: JsonNode = nil; OptionGroupName: string = "";
          AvailabilityZone: string = ""; Iops: int = 0;
          VpcSecurityGroupIds: JsonNode = nil;
          EnableCloudwatchLogsExports: JsonNode = nil; LicenseModel: string = "";
          Tags: JsonNode = nil; DBParameterGroupName: string = "";
          PerformanceInsightsKMSKeyId: string = "";
          Action: string = "RestoreDBInstanceFromS3";
          PubliclyAccessible: bool = false; AutoMinorVersionUpgrade: bool = false;
          Port: int = 0; EnablePerformanceInsights: bool = false;
          Version: string = "2014-10-31"): Recallable =
  ## getRestoreDBInstanceFromS3
  ## Amazon Relational Database Service (Amazon RDS) supports importing MySQL databases by using backup files. You can create a backup of your on-premises database, store it on Amazon Simple Storage Service (Amazon S3), and then restore the backup file onto a new Amazon RDS DB instance running MySQL. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   MonitoringInterval: int
  ##                     : <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. </p> <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code> to a value other than 0. </p> <p>Valid Values: 0, 1, 5, 10, 15, 30, 60 </p> <p>Default: <code>0</code> </p>
  ##   Engine: string (required)
  ##         : <p>The name of the database engine to be used for this instance. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   PerformanceInsightsRetentionPeriod: int
  ##                                     : The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
  ##   StorageEncrypted: bool
  ##                   : A value that indicates whether the new DB instance is encrypted or not. 
  ##   AllocatedStorage: int
  ##                   : <p>The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>. </p> <note> <p>Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth. </p> </note>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance. </p> <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code> </p> <p>If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified; otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   S3Prefix: string
  ##           : The prefix of your Amazon S3 bucket. 
  ##   DBSecurityGroups: JArray
  ##                   : <p>A list of DB security groups to associate with this DB instance.</p> <p>Default: The default DB security group for the database engine.</p>
  ##   MasterUserPassword: string
  ##                     : <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@". </p> <p>Constraints: Must contain from 8 to 41 characters.</p>
  ##   MonitoringRoleArn: string
  ##                    : <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i> </p> <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value. </p>
  ##   MultiAZ: bool
  ##          : A value that indicates whether the DB instance is a Multi-AZ deployment. If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter. 
  ##   BackupRetentionPeriod: int
  ##                        : The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see <code>CreateDBInstance</code>. 
  ##   DBName: string
  ##         : The name of the database to create when the DB instance is created. Follow the naming rules specified in <code>CreateDBInstance</code>. 
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied. 
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : A DB subnet group to associate with this DB instance.
  ##   KmsKeyId: string
  ##           : <p>The AWS KMS key identifier for an encrypted DB instance. </p> <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key. </p> <p>If the <code>StorageEncrypted</code> parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. </p>
  ##   SourceEngine: string (required)
  ##               : <p>The name of the engine of your source database. </p> <p>Valid Values: <code>mysql</code> </p>
  ##   EngineVersion: string
  ##                : The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>. 
  ##   SourceEngineVersion: string (required)
  ##                      : <p>The engine version of your source database. </p> <p>Valid Values: <code>5.6</code> </p>
  ##   PreferredBackupWindow: string
  ##                        : <p>The time range each day during which automated backups are created if automated backups are enabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">The Backup Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred maintenance window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   DBInstanceIdentifier: string (required)
  ##                       : <p>The DB instance identifier. This parameter is stored as a lowercase string. </p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul> <p>Example: <code>mydbinstance</code> </p>
  ##   MasterUsername: string
  ##                 : <p>The name for the master user. </p> <p>Constraints: </p> <ul> <li> <p>Must be 1 to 16 letters or numbers.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't be a reserved word for the chosen database engine.</p> </li> </ul>
  ##   S3BucketName: string (required)
  ##               : The name of your Amazon S3 bucket that contains your database backup file. 
  ##   PreferredMaintenanceWindow: string
  ##                             : <p>The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Constraints:</p> <ul> <li> <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p> </li> <li> <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p> </li> <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li> <li> <p>Must not conflict with the preferred backup window.</p> </li> <li> <p>Must be at least 30 minutes.</p> </li> </ul>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   OptionGroupName: string
  ##                  : The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region. </p> <p> Example: <code>us-east-1d</code> </p> <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment. The specified Availability Zone must be in the same AWS Region as the current endpoint. </p>
  ##   Iops: int
  ##       : The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide.</i> 
  ##   VpcSecurityGroupIds: JArray
  ##                      : A list of VPC security groups to associate with this DB instance. 
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   LicenseModel: string
  ##               : The license model for this DB instance. Use <code>general-public-license</code>. 
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   S3IngestionRoleArn: string (required)
  ##                     : An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
  ##   DBInstanceClass: string (required)
  ##                  : <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class. </p>
  ##   PerformanceInsightsKMSKeyId: string
  ##                              : <p>The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. </p> <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.</p>
  ##   Action: string (required)
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are not applied automatically. 
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections. </p> <p>Type: Integer </p> <p>Valid Values: <code>1150</code>-<code>65535</code> </p> <p>Default: <code>3306</code> </p>
  ##   EnablePerformanceInsights: bool
  ##                            : <p>A value that indicates whether to enable Performance Insights for the DB instance. </p> <p>For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service User Guide</i>. </p>
  ##   Version: string (required)
  var query_21631247 = newJObject()
  add(query_21631247, "MonitoringInterval", newJInt(MonitoringInterval))
  add(query_21631247, "Engine", newJString(Engine))
  add(query_21631247, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  add(query_21631247, "PerformanceInsightsRetentionPeriod",
      newJInt(PerformanceInsightsRetentionPeriod))
  add(query_21631247, "StorageEncrypted", newJBool(StorageEncrypted))
  add(query_21631247, "AllocatedStorage", newJInt(AllocatedStorage))
  add(query_21631247, "StorageType", newJString(StorageType))
  add(query_21631247, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_21631247, "S3Prefix", newJString(S3Prefix))
  if DBSecurityGroups != nil:
    query_21631247.add "DBSecurityGroups", DBSecurityGroups
  add(query_21631247, "MasterUserPassword", newJString(MasterUserPassword))
  add(query_21631247, "MonitoringRoleArn", newJString(MonitoringRoleArn))
  add(query_21631247, "MultiAZ", newJBool(MultiAZ))
  add(query_21631247, "BackupRetentionPeriod", newJInt(BackupRetentionPeriod))
  add(query_21631247, "DBName", newJString(DBName))
  add(query_21631247, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_21631247, "DeletionProtection", newJBool(DeletionProtection))
  add(query_21631247, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21631247, "KmsKeyId", newJString(KmsKeyId))
  add(query_21631247, "SourceEngine", newJString(SourceEngine))
  add(query_21631247, "EngineVersion", newJString(EngineVersion))
  add(query_21631247, "SourceEngineVersion", newJString(SourceEngineVersion))
  add(query_21631247, "PreferredBackupWindow", newJString(PreferredBackupWindow))
  add(query_21631247, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_21631247, "MasterUsername", newJString(MasterUsername))
  add(query_21631247, "S3BucketName", newJString(S3BucketName))
  add(query_21631247, "PreferredMaintenanceWindow",
      newJString(PreferredMaintenanceWindow))
  if ProcessorFeatures != nil:
    query_21631247.add "ProcessorFeatures", ProcessorFeatures
  add(query_21631247, "OptionGroupName", newJString(OptionGroupName))
  add(query_21631247, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_21631247, "Iops", newJInt(Iops))
  if VpcSecurityGroupIds != nil:
    query_21631247.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  if EnableCloudwatchLogsExports != nil:
    query_21631247.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_21631247, "LicenseModel", newJString(LicenseModel))
  if Tags != nil:
    query_21631247.add "Tags", Tags
  add(query_21631247, "S3IngestionRoleArn", newJString(S3IngestionRoleArn))
  add(query_21631247, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_21631247, "DBInstanceClass", newJString(DBInstanceClass))
  add(query_21631247, "PerformanceInsightsKMSKeyId",
      newJString(PerformanceInsightsKMSKeyId))
  add(query_21631247, "Action", newJString(Action))
  add(query_21631247, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_21631247, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_21631247, "Port", newJInt(Port))
  add(query_21631247, "EnablePerformanceInsights",
      newJBool(EnablePerformanceInsights))
  add(query_21631247, "Version", newJString(Version))
  result = call_21631246.call(nil, query_21631247, nil, nil, nil)

var getRestoreDBInstanceFromS3* = Call_GetRestoreDBInstanceFromS3_21631190(
    name: "getRestoreDBInstanceFromS3", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceFromS3",
    validator: validate_GetRestoreDBInstanceFromS3_21631191, base: "/",
    makeUrl: url_GetRestoreDBInstanceFromS3_21631192,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRestoreDBInstanceToPointInTime_21631353 = ref object of OpenApiRestCall_21625435
proc url_PostRestoreDBInstanceToPointInTime_21631355(protocol: Scheme;
    host: string; base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRestoreDBInstanceToPointInTime_21631354(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21631356 = query.getOrDefault("Action")
  valid_21631356 = validateParameter(valid_21631356, JString, required = true, default = newJString(
      "RestoreDBInstanceToPointInTime"))
  if valid_21631356 != nil:
    section.add "Action", valid_21631356
  var valid_21631357 = query.getOrDefault("Version")
  valid_21631357 = validateParameter(valid_21631357, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631357 != nil:
    section.add "Version", valid_21631357
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631358 = header.getOrDefault("X-Amz-Date")
  valid_21631358 = validateParameter(valid_21631358, JString, required = false,
                                   default = nil)
  if valid_21631358 != nil:
    section.add "X-Amz-Date", valid_21631358
  var valid_21631359 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631359 = validateParameter(valid_21631359, JString, required = false,
                                   default = nil)
  if valid_21631359 != nil:
    section.add "X-Amz-Security-Token", valid_21631359
  var valid_21631360 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631360 = validateParameter(valid_21631360, JString, required = false,
                                   default = nil)
  if valid_21631360 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631360
  var valid_21631361 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631361 = validateParameter(valid_21631361, JString, required = false,
                                   default = nil)
  if valid_21631361 != nil:
    section.add "X-Amz-Algorithm", valid_21631361
  var valid_21631362 = header.getOrDefault("X-Amz-Signature")
  valid_21631362 = validateParameter(valid_21631362, JString, required = false,
                                   default = nil)
  if valid_21631362 != nil:
    section.add "X-Amz-Signature", valid_21631362
  var valid_21631363 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631363 = validateParameter(valid_21631363, JString, required = false,
                                   default = nil)
  if valid_21631363 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631363
  var valid_21631364 = header.getOrDefault("X-Amz-Credential")
  valid_21631364 = validateParameter(valid_21631364, JString, required = false,
                                   default = nil)
  if valid_21631364 != nil:
    section.add "X-Amz-Credential", valid_21631364
  result.add "header", section
  ## parameters in `formData` object:
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   UseLatestRestorableTime: JBool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   RestoreTime: JString
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   TargetDBInstanceIdentifier: JString (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   SourceDBInstanceIdentifier: JString
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceDbiResourceId: JString
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  section = newJObject()
  var valid_21631365 = formData.getOrDefault("ProcessorFeatures")
  valid_21631365 = validateParameter(valid_21631365, JArray, required = false,
                                   default = nil)
  if valid_21631365 != nil:
    section.add "ProcessorFeatures", valid_21631365
  var valid_21631366 = formData.getOrDefault("UseLatestRestorableTime")
  valid_21631366 = validateParameter(valid_21631366, JBool, required = false,
                                   default = nil)
  if valid_21631366 != nil:
    section.add "UseLatestRestorableTime", valid_21631366
  var valid_21631367 = formData.getOrDefault("CopyTagsToSnapshot")
  valid_21631367 = validateParameter(valid_21631367, JBool, required = false,
                                   default = nil)
  if valid_21631367 != nil:
    section.add "CopyTagsToSnapshot", valid_21631367
  var valid_21631368 = formData.getOrDefault("Port")
  valid_21631368 = validateParameter(valid_21631368, JInt, required = false,
                                   default = nil)
  if valid_21631368 != nil:
    section.add "Port", valid_21631368
  var valid_21631369 = formData.getOrDefault("Engine")
  valid_21631369 = validateParameter(valid_21631369, JString, required = false,
                                   default = nil)
  if valid_21631369 != nil:
    section.add "Engine", valid_21631369
  var valid_21631370 = formData.getOrDefault("Iops")
  valid_21631370 = validateParameter(valid_21631370, JInt, required = false,
                                   default = nil)
  if valid_21631370 != nil:
    section.add "Iops", valid_21631370
  var valid_21631371 = formData.getOrDefault("VpcSecurityGroupIds")
  valid_21631371 = validateParameter(valid_21631371, JArray, required = false,
                                   default = nil)
  if valid_21631371 != nil:
    section.add "VpcSecurityGroupIds", valid_21631371
  var valid_21631372 = formData.getOrDefault("DBName")
  valid_21631372 = validateParameter(valid_21631372, JString, required = false,
                                   default = nil)
  if valid_21631372 != nil:
    section.add "DBName", valid_21631372
  var valid_21631373 = formData.getOrDefault("OptionGroupName")
  valid_21631373 = validateParameter(valid_21631373, JString, required = false,
                                   default = nil)
  if valid_21631373 != nil:
    section.add "OptionGroupName", valid_21631373
  var valid_21631374 = formData.getOrDefault("DBParameterGroupName")
  valid_21631374 = validateParameter(valid_21631374, JString, required = false,
                                   default = nil)
  if valid_21631374 != nil:
    section.add "DBParameterGroupName", valid_21631374
  var valid_21631375 = formData.getOrDefault("Tags")
  valid_21631375 = validateParameter(valid_21631375, JArray, required = false,
                                   default = nil)
  if valid_21631375 != nil:
    section.add "Tags", valid_21631375
  var valid_21631376 = formData.getOrDefault("TdeCredentialArn")
  valid_21631376 = validateParameter(valid_21631376, JString, required = false,
                                   default = nil)
  if valid_21631376 != nil:
    section.add "TdeCredentialArn", valid_21631376
  var valid_21631377 = formData.getOrDefault("DeletionProtection")
  valid_21631377 = validateParameter(valid_21631377, JBool, required = false,
                                   default = nil)
  if valid_21631377 != nil:
    section.add "DeletionProtection", valid_21631377
  var valid_21631378 = formData.getOrDefault("DBSubnetGroupName")
  valid_21631378 = validateParameter(valid_21631378, JString, required = false,
                                   default = nil)
  if valid_21631378 != nil:
    section.add "DBSubnetGroupName", valid_21631378
  var valid_21631379 = formData.getOrDefault("TdeCredentialPassword")
  valid_21631379 = validateParameter(valid_21631379, JString, required = false,
                                   default = nil)
  if valid_21631379 != nil:
    section.add "TdeCredentialPassword", valid_21631379
  var valid_21631380 = formData.getOrDefault("AvailabilityZone")
  valid_21631380 = validateParameter(valid_21631380, JString, required = false,
                                   default = nil)
  if valid_21631380 != nil:
    section.add "AvailabilityZone", valid_21631380
  var valid_21631381 = formData.getOrDefault("MultiAZ")
  valid_21631381 = validateParameter(valid_21631381, JBool, required = false,
                                   default = nil)
  if valid_21631381 != nil:
    section.add "MultiAZ", valid_21631381
  var valid_21631382 = formData.getOrDefault("DomainIAMRoleName")
  valid_21631382 = validateParameter(valid_21631382, JString, required = false,
                                   default = nil)
  if valid_21631382 != nil:
    section.add "DomainIAMRoleName", valid_21631382
  var valid_21631383 = formData.getOrDefault("RestoreTime")
  valid_21631383 = validateParameter(valid_21631383, JString, required = false,
                                   default = nil)
  if valid_21631383 != nil:
    section.add "RestoreTime", valid_21631383
  var valid_21631384 = formData.getOrDefault("PubliclyAccessible")
  valid_21631384 = validateParameter(valid_21631384, JBool, required = false,
                                   default = nil)
  if valid_21631384 != nil:
    section.add "PubliclyAccessible", valid_21631384
  var valid_21631385 = formData.getOrDefault("StorageType")
  valid_21631385 = validateParameter(valid_21631385, JString, required = false,
                                   default = nil)
  if valid_21631385 != nil:
    section.add "StorageType", valid_21631385
  var valid_21631386 = formData.getOrDefault("EnableCloudwatchLogsExports")
  valid_21631386 = validateParameter(valid_21631386, JArray, required = false,
                                   default = nil)
  if valid_21631386 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21631386
  assert formData != nil, "formData argument is necessary due to required `TargetDBInstanceIdentifier` field"
  var valid_21631387 = formData.getOrDefault("TargetDBInstanceIdentifier")
  valid_21631387 = validateParameter(valid_21631387, JString, required = true,
                                   default = nil)
  if valid_21631387 != nil:
    section.add "TargetDBInstanceIdentifier", valid_21631387
  var valid_21631388 = formData.getOrDefault("DBInstanceClass")
  valid_21631388 = validateParameter(valid_21631388, JString, required = false,
                                   default = nil)
  if valid_21631388 != nil:
    section.add "DBInstanceClass", valid_21631388
  var valid_21631389 = formData.getOrDefault("SourceDBInstanceIdentifier")
  valid_21631389 = validateParameter(valid_21631389, JString, required = false,
                                   default = nil)
  if valid_21631389 != nil:
    section.add "SourceDBInstanceIdentifier", valid_21631389
  var valid_21631390 = formData.getOrDefault("Domain")
  valid_21631390 = validateParameter(valid_21631390, JString, required = false,
                                   default = nil)
  if valid_21631390 != nil:
    section.add "Domain", valid_21631390
  var valid_21631391 = formData.getOrDefault("LicenseModel")
  valid_21631391 = validateParameter(valid_21631391, JString, required = false,
                                   default = nil)
  if valid_21631391 != nil:
    section.add "LicenseModel", valid_21631391
  var valid_21631392 = formData.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21631392 = validateParameter(valid_21631392, JBool, required = false,
                                   default = nil)
  if valid_21631392 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21631392
  var valid_21631393 = formData.getOrDefault("SourceDbiResourceId")
  valid_21631393 = validateParameter(valid_21631393, JString, required = false,
                                   default = nil)
  if valid_21631393 != nil:
    section.add "SourceDbiResourceId", valid_21631393
  var valid_21631394 = formData.getOrDefault("AutoMinorVersionUpgrade")
  valid_21631394 = validateParameter(valid_21631394, JBool, required = false,
                                   default = nil)
  if valid_21631394 != nil:
    section.add "AutoMinorVersionUpgrade", valid_21631394
  var valid_21631395 = formData.getOrDefault("UseDefaultProcessorFeatures")
  valid_21631395 = validateParameter(valid_21631395, JBool, required = false,
                                   default = nil)
  if valid_21631395 != nil:
    section.add "UseDefaultProcessorFeatures", valid_21631395
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631396: Call_PostRestoreDBInstanceToPointInTime_21631353;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  let valid = call_21631396.validator(path, query, header, formData, body, _)
  let scheme = call_21631396.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631396.makeUrl(scheme.get, call_21631396.host, call_21631396.base,
                               call_21631396.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631396, uri, valid, _)

proc call*(call_21631397: Call_PostRestoreDBInstanceToPointInTime_21631353;
          TargetDBInstanceIdentifier: string; ProcessorFeatures: JsonNode = nil;
          UseLatestRestorableTime: bool = false; CopyTagsToSnapshot: bool = false;
          Port: int = 0; Engine: string = ""; Iops: int = 0;
          VpcSecurityGroupIds: JsonNode = nil; DBName: string = "";
          OptionGroupName: string = ""; DBParameterGroupName: string = "";
          Tags: JsonNode = nil; TdeCredentialArn: string = "";
          DeletionProtection: bool = false; DBSubnetGroupName: string = "";
          TdeCredentialPassword: string = ""; AvailabilityZone: string = "";
          MultiAZ: bool = false; DomainIAMRoleName: string = "";
          Action: string = "RestoreDBInstanceToPointInTime";
          RestoreTime: string = ""; PubliclyAccessible: bool = false;
          StorageType: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          DBInstanceClass: string = ""; SourceDBInstanceIdentifier: string = "";
          Domain: string = ""; LicenseModel: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          SourceDbiResourceId: string = ""; AutoMinorVersionUpgrade: bool = false;
          Version: string = "2014-10-31"; UseDefaultProcessorFeatures: bool = false): Recallable =
  ## postRestoreDBInstanceToPointInTime
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   UseLatestRestorableTime: bool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   Action: string (required)
  ##   RestoreTime: string
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   TargetDBInstanceIdentifier: string (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   SourceDBInstanceIdentifier: string
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   SourceDbiResourceId: string
  ##                      : The resource ID of the source DB instance from which to restore.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Version: string (required)
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  var query_21631398 = newJObject()
  var formData_21631399 = newJObject()
  if ProcessorFeatures != nil:
    formData_21631399.add "ProcessorFeatures", ProcessorFeatures
  add(formData_21631399, "UseLatestRestorableTime",
      newJBool(UseLatestRestorableTime))
  add(formData_21631399, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(formData_21631399, "Port", newJInt(Port))
  add(formData_21631399, "Engine", newJString(Engine))
  add(formData_21631399, "Iops", newJInt(Iops))
  if VpcSecurityGroupIds != nil:
    formData_21631399.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(formData_21631399, "DBName", newJString(DBName))
  add(formData_21631399, "OptionGroupName", newJString(OptionGroupName))
  add(formData_21631399, "DBParameterGroupName", newJString(DBParameterGroupName))
  if Tags != nil:
    formData_21631399.add "Tags", Tags
  add(formData_21631399, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(formData_21631399, "DeletionProtection", newJBool(DeletionProtection))
  add(formData_21631399, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(formData_21631399, "TdeCredentialPassword",
      newJString(TdeCredentialPassword))
  add(formData_21631399, "AvailabilityZone", newJString(AvailabilityZone))
  add(formData_21631399, "MultiAZ", newJBool(MultiAZ))
  add(formData_21631399, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_21631398, "Action", newJString(Action))
  add(formData_21631399, "RestoreTime", newJString(RestoreTime))
  add(formData_21631399, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(formData_21631399, "StorageType", newJString(StorageType))
  if EnableCloudwatchLogsExports != nil:
    formData_21631399.add "EnableCloudwatchLogsExports",
                         EnableCloudwatchLogsExports
  add(formData_21631399, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(formData_21631399, "DBInstanceClass", newJString(DBInstanceClass))
  add(formData_21631399, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(formData_21631399, "Domain", newJString(Domain))
  add(formData_21631399, "LicenseModel", newJString(LicenseModel))
  add(formData_21631399, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(formData_21631399, "SourceDbiResourceId", newJString(SourceDbiResourceId))
  add(formData_21631399, "AutoMinorVersionUpgrade",
      newJBool(AutoMinorVersionUpgrade))
  add(query_21631398, "Version", newJString(Version))
  add(formData_21631399, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  result = call_21631397.call(nil, query_21631398, nil, formData_21631399, nil)

var postRestoreDBInstanceToPointInTime* = Call_PostRestoreDBInstanceToPointInTime_21631353(
    name: "postRestoreDBInstanceToPointInTime", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceToPointInTime",
    validator: validate_PostRestoreDBInstanceToPointInTime_21631354, base: "/",
    makeUrl: url_PostRestoreDBInstanceToPointInTime_21631355,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRestoreDBInstanceToPointInTime_21631307 = ref object of OpenApiRestCall_21625435
proc url_GetRestoreDBInstanceToPointInTime_21631309(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRestoreDBInstanceToPointInTime_21631308(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Engine: JString
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseDefaultProcessorFeatures: JBool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   SourceDBInstanceIdentifier: JString
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   StorageType: JString
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: JBool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   TargetDBInstanceIdentifier: JString (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   AvailabilityZone: JString
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   Iops: JInt
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   OptionGroupName: JString
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   RestoreTime: JString
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   MultiAZ: JBool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   TdeCredentialPassword: JString
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   LicenseModel: JString
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   CopyTagsToSnapshot: JBool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBName: JString
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DomainIAMRoleName: JString
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   DBInstanceClass: JString
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   UseLatestRestorableTime: JBool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   DBParameterGroupName: JString
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DeletionProtection: JBool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Action: JString (required)
  ##   DBSubnetGroupName: JString
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Domain: JString
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   TdeCredentialArn: JString
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: JBool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: JBool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Port: JInt
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Version: JString (required)
  ##   SourceDbiResourceId: JString
  ##                      : The resource ID of the source DB instance from which to restore.
  section = newJObject()
  var valid_21631310 = query.getOrDefault("Engine")
  valid_21631310 = validateParameter(valid_21631310, JString, required = false,
                                   default = nil)
  if valid_21631310 != nil:
    section.add "Engine", valid_21631310
  var valid_21631311 = query.getOrDefault("UseDefaultProcessorFeatures")
  valid_21631311 = validateParameter(valid_21631311, JBool, required = false,
                                   default = nil)
  if valid_21631311 != nil:
    section.add "UseDefaultProcessorFeatures", valid_21631311
  var valid_21631312 = query.getOrDefault("ProcessorFeatures")
  valid_21631312 = validateParameter(valid_21631312, JArray, required = false,
                                   default = nil)
  if valid_21631312 != nil:
    section.add "ProcessorFeatures", valid_21631312
  var valid_21631313 = query.getOrDefault("SourceDBInstanceIdentifier")
  valid_21631313 = validateParameter(valid_21631313, JString, required = false,
                                   default = nil)
  if valid_21631313 != nil:
    section.add "SourceDBInstanceIdentifier", valid_21631313
  var valid_21631314 = query.getOrDefault("StorageType")
  valid_21631314 = validateParameter(valid_21631314, JString, required = false,
                                   default = nil)
  if valid_21631314 != nil:
    section.add "StorageType", valid_21631314
  var valid_21631315 = query.getOrDefault("EnableIAMDatabaseAuthentication")
  valid_21631315 = validateParameter(valid_21631315, JBool, required = false,
                                   default = nil)
  if valid_21631315 != nil:
    section.add "EnableIAMDatabaseAuthentication", valid_21631315
  assert query != nil, "query argument is necessary due to required `TargetDBInstanceIdentifier` field"
  var valid_21631316 = query.getOrDefault("TargetDBInstanceIdentifier")
  valid_21631316 = validateParameter(valid_21631316, JString, required = true,
                                   default = nil)
  if valid_21631316 != nil:
    section.add "TargetDBInstanceIdentifier", valid_21631316
  var valid_21631317 = query.getOrDefault("AvailabilityZone")
  valid_21631317 = validateParameter(valid_21631317, JString, required = false,
                                   default = nil)
  if valid_21631317 != nil:
    section.add "AvailabilityZone", valid_21631317
  var valid_21631318 = query.getOrDefault("Iops")
  valid_21631318 = validateParameter(valid_21631318, JInt, required = false,
                                   default = nil)
  if valid_21631318 != nil:
    section.add "Iops", valid_21631318
  var valid_21631319 = query.getOrDefault("OptionGroupName")
  valid_21631319 = validateParameter(valid_21631319, JString, required = false,
                                   default = nil)
  if valid_21631319 != nil:
    section.add "OptionGroupName", valid_21631319
  var valid_21631320 = query.getOrDefault("VpcSecurityGroupIds")
  valid_21631320 = validateParameter(valid_21631320, JArray, required = false,
                                   default = nil)
  if valid_21631320 != nil:
    section.add "VpcSecurityGroupIds", valid_21631320
  var valid_21631321 = query.getOrDefault("RestoreTime")
  valid_21631321 = validateParameter(valid_21631321, JString, required = false,
                                   default = nil)
  if valid_21631321 != nil:
    section.add "RestoreTime", valid_21631321
  var valid_21631322 = query.getOrDefault("MultiAZ")
  valid_21631322 = validateParameter(valid_21631322, JBool, required = false,
                                   default = nil)
  if valid_21631322 != nil:
    section.add "MultiAZ", valid_21631322
  var valid_21631323 = query.getOrDefault("TdeCredentialPassword")
  valid_21631323 = validateParameter(valid_21631323, JString, required = false,
                                   default = nil)
  if valid_21631323 != nil:
    section.add "TdeCredentialPassword", valid_21631323
  var valid_21631324 = query.getOrDefault("LicenseModel")
  valid_21631324 = validateParameter(valid_21631324, JString, required = false,
                                   default = nil)
  if valid_21631324 != nil:
    section.add "LicenseModel", valid_21631324
  var valid_21631325 = query.getOrDefault("CopyTagsToSnapshot")
  valid_21631325 = validateParameter(valid_21631325, JBool, required = false,
                                   default = nil)
  if valid_21631325 != nil:
    section.add "CopyTagsToSnapshot", valid_21631325
  var valid_21631326 = query.getOrDefault("DBName")
  valid_21631326 = validateParameter(valid_21631326, JString, required = false,
                                   default = nil)
  if valid_21631326 != nil:
    section.add "DBName", valid_21631326
  var valid_21631327 = query.getOrDefault("Tags")
  valid_21631327 = validateParameter(valid_21631327, JArray, required = false,
                                   default = nil)
  if valid_21631327 != nil:
    section.add "Tags", valid_21631327
  var valid_21631328 = query.getOrDefault("DomainIAMRoleName")
  valid_21631328 = validateParameter(valid_21631328, JString, required = false,
                                   default = nil)
  if valid_21631328 != nil:
    section.add "DomainIAMRoleName", valid_21631328
  var valid_21631329 = query.getOrDefault("DBInstanceClass")
  valid_21631329 = validateParameter(valid_21631329, JString, required = false,
                                   default = nil)
  if valid_21631329 != nil:
    section.add "DBInstanceClass", valid_21631329
  var valid_21631330 = query.getOrDefault("EnableCloudwatchLogsExports")
  valid_21631330 = validateParameter(valid_21631330, JArray, required = false,
                                   default = nil)
  if valid_21631330 != nil:
    section.add "EnableCloudwatchLogsExports", valid_21631330
  var valid_21631331 = query.getOrDefault("UseLatestRestorableTime")
  valid_21631331 = validateParameter(valid_21631331, JBool, required = false,
                                   default = nil)
  if valid_21631331 != nil:
    section.add "UseLatestRestorableTime", valid_21631331
  var valid_21631332 = query.getOrDefault("DBParameterGroupName")
  valid_21631332 = validateParameter(valid_21631332, JString, required = false,
                                   default = nil)
  if valid_21631332 != nil:
    section.add "DBParameterGroupName", valid_21631332
  var valid_21631333 = query.getOrDefault("DeletionProtection")
  valid_21631333 = validateParameter(valid_21631333, JBool, required = false,
                                   default = nil)
  if valid_21631333 != nil:
    section.add "DeletionProtection", valid_21631333
  var valid_21631334 = query.getOrDefault("Action")
  valid_21631334 = validateParameter(valid_21631334, JString, required = true, default = newJString(
      "RestoreDBInstanceToPointInTime"))
  if valid_21631334 != nil:
    section.add "Action", valid_21631334
  var valid_21631335 = query.getOrDefault("DBSubnetGroupName")
  valid_21631335 = validateParameter(valid_21631335, JString, required = false,
                                   default = nil)
  if valid_21631335 != nil:
    section.add "DBSubnetGroupName", valid_21631335
  var valid_21631336 = query.getOrDefault("Domain")
  valid_21631336 = validateParameter(valid_21631336, JString, required = false,
                                   default = nil)
  if valid_21631336 != nil:
    section.add "Domain", valid_21631336
  var valid_21631337 = query.getOrDefault("TdeCredentialArn")
  valid_21631337 = validateParameter(valid_21631337, JString, required = false,
                                   default = nil)
  if valid_21631337 != nil:
    section.add "TdeCredentialArn", valid_21631337
  var valid_21631338 = query.getOrDefault("PubliclyAccessible")
  valid_21631338 = validateParameter(valid_21631338, JBool, required = false,
                                   default = nil)
  if valid_21631338 != nil:
    section.add "PubliclyAccessible", valid_21631338
  var valid_21631339 = query.getOrDefault("AutoMinorVersionUpgrade")
  valid_21631339 = validateParameter(valid_21631339, JBool, required = false,
                                   default = nil)
  if valid_21631339 != nil:
    section.add "AutoMinorVersionUpgrade", valid_21631339
  var valid_21631340 = query.getOrDefault("Port")
  valid_21631340 = validateParameter(valid_21631340, JInt, required = false,
                                   default = nil)
  if valid_21631340 != nil:
    section.add "Port", valid_21631340
  var valid_21631341 = query.getOrDefault("Version")
  valid_21631341 = validateParameter(valid_21631341, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631341 != nil:
    section.add "Version", valid_21631341
  var valid_21631342 = query.getOrDefault("SourceDbiResourceId")
  valid_21631342 = validateParameter(valid_21631342, JString, required = false,
                                   default = nil)
  if valid_21631342 != nil:
    section.add "SourceDbiResourceId", valid_21631342
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631343 = header.getOrDefault("X-Amz-Date")
  valid_21631343 = validateParameter(valid_21631343, JString, required = false,
                                   default = nil)
  if valid_21631343 != nil:
    section.add "X-Amz-Date", valid_21631343
  var valid_21631344 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631344 = validateParameter(valid_21631344, JString, required = false,
                                   default = nil)
  if valid_21631344 != nil:
    section.add "X-Amz-Security-Token", valid_21631344
  var valid_21631345 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631345 = validateParameter(valid_21631345, JString, required = false,
                                   default = nil)
  if valid_21631345 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631345
  var valid_21631346 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631346 = validateParameter(valid_21631346, JString, required = false,
                                   default = nil)
  if valid_21631346 != nil:
    section.add "X-Amz-Algorithm", valid_21631346
  var valid_21631347 = header.getOrDefault("X-Amz-Signature")
  valid_21631347 = validateParameter(valid_21631347, JString, required = false,
                                   default = nil)
  if valid_21631347 != nil:
    section.add "X-Amz-Signature", valid_21631347
  var valid_21631348 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631348 = validateParameter(valid_21631348, JString, required = false,
                                   default = nil)
  if valid_21631348 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631348
  var valid_21631349 = header.getOrDefault("X-Amz-Credential")
  valid_21631349 = validateParameter(valid_21631349, JString, required = false,
                                   default = nil)
  if valid_21631349 != nil:
    section.add "X-Amz-Credential", valid_21631349
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631350: Call_GetRestoreDBInstanceToPointInTime_21631307;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ## 
  let valid = call_21631350.validator(path, query, header, formData, body, _)
  let scheme = call_21631350.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631350.makeUrl(scheme.get, call_21631350.host, call_21631350.base,
                               call_21631350.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631350, uri, valid, _)

proc call*(call_21631351: Call_GetRestoreDBInstanceToPointInTime_21631307;
          TargetDBInstanceIdentifier: string; Engine: string = "";
          UseDefaultProcessorFeatures: bool = false;
          ProcessorFeatures: JsonNode = nil;
          SourceDBInstanceIdentifier: string = ""; StorageType: string = "";
          EnableIAMDatabaseAuthentication: bool = false;
          AvailabilityZone: string = ""; Iops: int = 0; OptionGroupName: string = "";
          VpcSecurityGroupIds: JsonNode = nil; RestoreTime: string = "";
          MultiAZ: bool = false; TdeCredentialPassword: string = "";
          LicenseModel: string = ""; CopyTagsToSnapshot: bool = false;
          DBName: string = ""; Tags: JsonNode = nil; DomainIAMRoleName: string = "";
          DBInstanceClass: string = ""; EnableCloudwatchLogsExports: JsonNode = nil;
          UseLatestRestorableTime: bool = false; DBParameterGroupName: string = "";
          DeletionProtection: bool = false;
          Action: string = "RestoreDBInstanceToPointInTime";
          DBSubnetGroupName: string = ""; Domain: string = "";
          TdeCredentialArn: string = ""; PubliclyAccessible: bool = false;
          AutoMinorVersionUpgrade: bool = false; Port: int = 0;
          Version: string = "2014-10-31"; SourceDbiResourceId: string = ""): Recallable =
  ## getRestoreDBInstanceToPointInTime
  ## <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p> <p>The target database is created with most of the original configuration, but in a system-selected Availability Zone, with the default security group, the default subnet group, and the default DB parameter group. By default, the new DB instance is created as a single-AZ deployment except when the instance is a SQL Server instance that has an option group that is associated with mirroring; in this case, the instance becomes a mirrored deployment and not a single-AZ deployment.</p> <note> <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p> </note>
  ##   Engine: string
  ##         : <p>The database engine to use for the new instance.</p> <p>Default: The same as source</p> <p>Constraint: Must be compatible with the engine of the source</p> <p>Valid Values:</p> <ul> <li> <p> <code>mariadb</code> </p> </li> <li> <p> <code>mysql</code> </p> </li> <li> <p> <code>oracle-ee</code> </p> </li> <li> <p> <code>oracle-se2</code> </p> </li> <li> <p> <code>oracle-se1</code> </p> </li> <li> <p> <code>oracle-se</code> </p> </li> <li> <p> <code>postgres</code> </p> </li> <li> <p> <code>sqlserver-ee</code> </p> </li> <li> <p> <code>sqlserver-se</code> </p> </li> <li> <p> <code>sqlserver-ex</code> </p> </li> <li> <p> <code>sqlserver-web</code> </p> </li> </ul>
  ##   UseDefaultProcessorFeatures: bool
  ##                              : A value that indicates whether the DB instance class of the DB instance uses its default processor features.
  ##   ProcessorFeatures: JArray
  ##                    : The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
  ##   SourceDBInstanceIdentifier: string
  ##                             : <p>The identifier of the source DB instance from which to restore.</p> <p>Constraints:</p> <ul> <li> <p>Must match the identifier of an existing DB instance.</p> </li> </ul>
  ##   StorageType: string
  ##              : <p>Specifies the storage type to be associated with the DB instance.</p> <p> Valid values: <code>standard | gp2 | io1</code> </p> <p> If you specify <code>io1</code>, you must also include a value for the <code>Iops</code> parameter. </p> <p> Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p>
  ##   EnableIAMDatabaseAuthentication: bool
  ##                                  : <p>A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled. For information about the supported DB engines, see <a>CreateDBInstance</a>.</p> <p>For more information about IAM database authentication, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>
  ##   TargetDBInstanceIdentifier: string (required)
  ##                             : <p>The name of the new DB instance to be created.</p> <p>Constraints:</p> <ul> <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li> <li> <p>First character must be a letter</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li> </ul>
  ##   AvailabilityZone: string
  ##                   : <p>The Availability Zone (AZ) where the DB instance will be created.</p> <p>Default: A random, system-chosen Availability Zone.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p> <p>Example: <code>us-east-1a</code> </p>
  ##   Iops: int
  ##       : <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p> <p>Constraints: Must be an integer greater than 1000.</p> <p> <b>SQL Server</b> </p> <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
  ##   OptionGroupName: string
  ##                  : <p>The name of the option group to be used for the restored DB instance.</p> <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
  ##   VpcSecurityGroupIds: JArray
  ##                      : <p> A list of EC2 VPC security groups to associate with this DB instance. </p> <p> Default: The default EC2 VPC security group for the DB subnet group's VPC. </p>
  ##   RestoreTime: string
  ##              : <p>The date and time to restore from.</p> <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p> <p>Constraints:</p> <ul> <li> <p>Must be before the latest restorable time for the DB instance</p> </li> <li> <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p> </li> </ul> <p>Example: <code>2009-09-07T23:45:00Z</code> </p>
  ##   MultiAZ: bool
  ##          : <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p> <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
  ##   TdeCredentialPassword: string
  ##                        : The password for the given ARN from the key store in order to access the device.
  ##   LicenseModel: string
  ##               : <p>License model information for the restored DB instance.</p> <p>Default: Same as source.</p> <p> Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
  ##   CopyTagsToSnapshot: bool
  ##                     : A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.
  ##   DBName: string
  ##         : <p>The database name for the restored DB instance.</p> <note> <p>This parameter isn't used for the MySQL or MariaDB engines.</p> </note>
  ##   Tags: JArray
  ##       : A list of tags. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> 
  ##   DomainIAMRoleName: string
  ##                    : Specify the name of the IAM role to be used when making API calls to the Directory Service.
  ##   DBInstanceClass: string
  ##                  : <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p> <p>Default: The same DBInstanceClass as the original DB instance.</p>
  ##   EnableCloudwatchLogsExports: JArray
  ##                              : The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.
  ##   UseLatestRestorableTime: bool
  ##                          : <p> A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time. </p> <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
  ##   DBParameterGroupName: string
  ##                       : <p>The name of the DB parameter group to associate with this DB instance.</p> <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p> <p>Constraints:</p> <ul> <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li> <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li> <li> <p>First character must be a letter.</p> </li> <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li> </ul>
  ##   DeletionProtection: bool
  ##                     : A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>. 
  ##   Action: string (required)
  ##   DBSubnetGroupName: string
  ##                    : <p>The DB subnet group name to use for the new instance.</p> <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p> <p>Example: <code>mySubnetgroup</code> </p>
  ##   Domain: string
  ##         : <p>Specify the Active Directory directory ID to restore the DB instance in. The domain must be created prior to this operation. Currently, only Microsoft SQL Server and Oracle DB instances can be created in an Active Directory Domain. </p> <p>For Microsoft SQL Server DB instances, Amazon RDS can use Windows Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_SQLServerWinAuth.html"> Using Windows Authentication with an Amazon RDS DB Instance Running Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p> <p>For Oracle DB instances, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB instance. For more information, see <a 
  ## href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-kerberos.html"> Using Kerberos Authentication with Amazon RDS for Oracle</a> in the <i>Amazon RDS User Guide</i>.</p>
  ##   TdeCredentialArn: string
  ##                   : The ARN from the key store with which to associate the instance for TDE encryption.
  ##   PubliclyAccessible: bool
  ##                     : A value that indicates whether the DB instance is publicly accessible. When the DB instance is publicly accessible, it is an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. When the DB instance isn't publicly accessible, it is an internal instance with a DNS name that resolves to a private IP address. For more information, see <a>CreateDBInstance</a>.
  ##   AutoMinorVersionUpgrade: bool
  ##                          : A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.
  ##   Port: int
  ##       : <p>The port number on which the database accepts connections.</p> <p>Constraints: Value must be <code>1150-65535</code> </p> <p>Default: The same port as the original DB instance.</p>
  ##   Version: string (required)
  ##   SourceDbiResourceId: string
  ##                      : The resource ID of the source DB instance from which to restore.
  var query_21631352 = newJObject()
  add(query_21631352, "Engine", newJString(Engine))
  add(query_21631352, "UseDefaultProcessorFeatures",
      newJBool(UseDefaultProcessorFeatures))
  if ProcessorFeatures != nil:
    query_21631352.add "ProcessorFeatures", ProcessorFeatures
  add(query_21631352, "SourceDBInstanceIdentifier",
      newJString(SourceDBInstanceIdentifier))
  add(query_21631352, "StorageType", newJString(StorageType))
  add(query_21631352, "EnableIAMDatabaseAuthentication",
      newJBool(EnableIAMDatabaseAuthentication))
  add(query_21631352, "TargetDBInstanceIdentifier",
      newJString(TargetDBInstanceIdentifier))
  add(query_21631352, "AvailabilityZone", newJString(AvailabilityZone))
  add(query_21631352, "Iops", newJInt(Iops))
  add(query_21631352, "OptionGroupName", newJString(OptionGroupName))
  if VpcSecurityGroupIds != nil:
    query_21631352.add "VpcSecurityGroupIds", VpcSecurityGroupIds
  add(query_21631352, "RestoreTime", newJString(RestoreTime))
  add(query_21631352, "MultiAZ", newJBool(MultiAZ))
  add(query_21631352, "TdeCredentialPassword", newJString(TdeCredentialPassword))
  add(query_21631352, "LicenseModel", newJString(LicenseModel))
  add(query_21631352, "CopyTagsToSnapshot", newJBool(CopyTagsToSnapshot))
  add(query_21631352, "DBName", newJString(DBName))
  if Tags != nil:
    query_21631352.add "Tags", Tags
  add(query_21631352, "DomainIAMRoleName", newJString(DomainIAMRoleName))
  add(query_21631352, "DBInstanceClass", newJString(DBInstanceClass))
  if EnableCloudwatchLogsExports != nil:
    query_21631352.add "EnableCloudwatchLogsExports", EnableCloudwatchLogsExports
  add(query_21631352, "UseLatestRestorableTime", newJBool(UseLatestRestorableTime))
  add(query_21631352, "DBParameterGroupName", newJString(DBParameterGroupName))
  add(query_21631352, "DeletionProtection", newJBool(DeletionProtection))
  add(query_21631352, "Action", newJString(Action))
  add(query_21631352, "DBSubnetGroupName", newJString(DBSubnetGroupName))
  add(query_21631352, "Domain", newJString(Domain))
  add(query_21631352, "TdeCredentialArn", newJString(TdeCredentialArn))
  add(query_21631352, "PubliclyAccessible", newJBool(PubliclyAccessible))
  add(query_21631352, "AutoMinorVersionUpgrade", newJBool(AutoMinorVersionUpgrade))
  add(query_21631352, "Port", newJInt(Port))
  add(query_21631352, "Version", newJString(Version))
  add(query_21631352, "SourceDbiResourceId", newJString(SourceDbiResourceId))
  result = call_21631351.call(nil, query_21631352, nil, nil, nil)

var getRestoreDBInstanceToPointInTime* = Call_GetRestoreDBInstanceToPointInTime_21631307(
    name: "getRestoreDBInstanceToPointInTime", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RestoreDBInstanceToPointInTime",
    validator: validate_GetRestoreDBInstanceToPointInTime_21631308, base: "/",
    makeUrl: url_GetRestoreDBInstanceToPointInTime_21631309,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostRevokeDBSecurityGroupIngress_21631420 = ref object of OpenApiRestCall_21625435
proc url_PostRevokeDBSecurityGroupIngress_21631422(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostRevokeDBSecurityGroupIngress_21631421(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21631423 = query.getOrDefault("Action")
  valid_21631423 = validateParameter(valid_21631423, JString, required = true, default = newJString(
      "RevokeDBSecurityGroupIngress"))
  if valid_21631423 != nil:
    section.add "Action", valid_21631423
  var valid_21631424 = query.getOrDefault("Version")
  valid_21631424 = validateParameter(valid_21631424, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631424 != nil:
    section.add "Version", valid_21631424
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631425 = header.getOrDefault("X-Amz-Date")
  valid_21631425 = validateParameter(valid_21631425, JString, required = false,
                                   default = nil)
  if valid_21631425 != nil:
    section.add "X-Amz-Date", valid_21631425
  var valid_21631426 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631426 = validateParameter(valid_21631426, JString, required = false,
                                   default = nil)
  if valid_21631426 != nil:
    section.add "X-Amz-Security-Token", valid_21631426
  var valid_21631427 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631427 = validateParameter(valid_21631427, JString, required = false,
                                   default = nil)
  if valid_21631427 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631427
  var valid_21631428 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631428 = validateParameter(valid_21631428, JString, required = false,
                                   default = nil)
  if valid_21631428 != nil:
    section.add "X-Amz-Algorithm", valid_21631428
  var valid_21631429 = header.getOrDefault("X-Amz-Signature")
  valid_21631429 = validateParameter(valid_21631429, JString, required = false,
                                   default = nil)
  if valid_21631429 != nil:
    section.add "X-Amz-Signature", valid_21631429
  var valid_21631430 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631430 = validateParameter(valid_21631430, JString, required = false,
                                   default = nil)
  if valid_21631430 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631430
  var valid_21631431 = header.getOrDefault("X-Amz-Credential")
  valid_21631431 = validateParameter(valid_21631431, JString, required = false,
                                   default = nil)
  if valid_21631431 != nil:
    section.add "X-Amz-Credential", valid_21631431
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   EC2SecurityGroupName: JString
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: JString
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: JString
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBSecurityGroupName` field"
  var valid_21631432 = formData.getOrDefault("DBSecurityGroupName")
  valid_21631432 = validateParameter(valid_21631432, JString, required = true,
                                   default = nil)
  if valid_21631432 != nil:
    section.add "DBSecurityGroupName", valid_21631432
  var valid_21631433 = formData.getOrDefault("EC2SecurityGroupName")
  valid_21631433 = validateParameter(valid_21631433, JString, required = false,
                                   default = nil)
  if valid_21631433 != nil:
    section.add "EC2SecurityGroupName", valid_21631433
  var valid_21631434 = formData.getOrDefault("EC2SecurityGroupId")
  valid_21631434 = validateParameter(valid_21631434, JString, required = false,
                                   default = nil)
  if valid_21631434 != nil:
    section.add "EC2SecurityGroupId", valid_21631434
  var valid_21631435 = formData.getOrDefault("CIDRIP")
  valid_21631435 = validateParameter(valid_21631435, JString, required = false,
                                   default = nil)
  if valid_21631435 != nil:
    section.add "CIDRIP", valid_21631435
  var valid_21631436 = formData.getOrDefault("EC2SecurityGroupOwnerId")
  valid_21631436 = validateParameter(valid_21631436, JString, required = false,
                                   default = nil)
  if valid_21631436 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_21631436
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631437: Call_PostRevokeDBSecurityGroupIngress_21631420;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  let valid = call_21631437.validator(path, query, header, formData, body, _)
  let scheme = call_21631437.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631437.makeUrl(scheme.get, call_21631437.host, call_21631437.base,
                               call_21631437.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631437, uri, valid, _)

proc call*(call_21631438: Call_PostRevokeDBSecurityGroupIngress_21631420;
          DBSecurityGroupName: string;
          Action: string = "RevokeDBSecurityGroupIngress";
          EC2SecurityGroupName: string = ""; EC2SecurityGroupId: string = "";
          CIDRIP: string = ""; Version: string = "2014-10-31";
          EC2SecurityGroupOwnerId: string = ""): Recallable =
  ## postRevokeDBSecurityGroupIngress
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   Action: string (required)
  ##   EC2SecurityGroupName: string
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupId: string
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   CIDRIP: string
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  ##   Version: string (required)
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  var query_21631439 = newJObject()
  var formData_21631440 = newJObject()
  add(formData_21631440, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_21631439, "Action", newJString(Action))
  add(formData_21631440, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(formData_21631440, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(formData_21631440, "CIDRIP", newJString(CIDRIP))
  add(query_21631439, "Version", newJString(Version))
  add(formData_21631440, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  result = call_21631438.call(nil, query_21631439, nil, formData_21631440, nil)

var postRevokeDBSecurityGroupIngress* = Call_PostRevokeDBSecurityGroupIngress_21631420(
    name: "postRevokeDBSecurityGroupIngress", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=RevokeDBSecurityGroupIngress",
    validator: validate_PostRevokeDBSecurityGroupIngress_21631421, base: "/",
    makeUrl: url_PostRevokeDBSecurityGroupIngress_21631422,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetRevokeDBSecurityGroupIngress_21631400 = ref object of OpenApiRestCall_21625435
proc url_GetRevokeDBSecurityGroupIngress_21631402(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetRevokeDBSecurityGroupIngress_21631401(path: JsonNode;
    query: JsonNode; header: JsonNode; formData: JsonNode; body: JsonNode;
    _: string = ""): JsonNode {.nosinks.} =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   EC2SecurityGroupId: JString
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: JString
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: JString (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   Action: JString (required)
  ##   CIDRIP: JString
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  ##   EC2SecurityGroupName: JString
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Version: JString (required)
  section = newJObject()
  var valid_21631403 = query.getOrDefault("EC2SecurityGroupId")
  valid_21631403 = validateParameter(valid_21631403, JString, required = false,
                                   default = nil)
  if valid_21631403 != nil:
    section.add "EC2SecurityGroupId", valid_21631403
  var valid_21631404 = query.getOrDefault("EC2SecurityGroupOwnerId")
  valid_21631404 = validateParameter(valid_21631404, JString, required = false,
                                   default = nil)
  if valid_21631404 != nil:
    section.add "EC2SecurityGroupOwnerId", valid_21631404
  assert query != nil, "query argument is necessary due to required `DBSecurityGroupName` field"
  var valid_21631405 = query.getOrDefault("DBSecurityGroupName")
  valid_21631405 = validateParameter(valid_21631405, JString, required = true,
                                   default = nil)
  if valid_21631405 != nil:
    section.add "DBSecurityGroupName", valid_21631405
  var valid_21631406 = query.getOrDefault("Action")
  valid_21631406 = validateParameter(valid_21631406, JString, required = true, default = newJString(
      "RevokeDBSecurityGroupIngress"))
  if valid_21631406 != nil:
    section.add "Action", valid_21631406
  var valid_21631407 = query.getOrDefault("CIDRIP")
  valid_21631407 = validateParameter(valid_21631407, JString, required = false,
                                   default = nil)
  if valid_21631407 != nil:
    section.add "CIDRIP", valid_21631407
  var valid_21631408 = query.getOrDefault("EC2SecurityGroupName")
  valid_21631408 = validateParameter(valid_21631408, JString, required = false,
                                   default = nil)
  if valid_21631408 != nil:
    section.add "EC2SecurityGroupName", valid_21631408
  var valid_21631409 = query.getOrDefault("Version")
  valid_21631409 = validateParameter(valid_21631409, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631409 != nil:
    section.add "Version", valid_21631409
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631410 = header.getOrDefault("X-Amz-Date")
  valid_21631410 = validateParameter(valid_21631410, JString, required = false,
                                   default = nil)
  if valid_21631410 != nil:
    section.add "X-Amz-Date", valid_21631410
  var valid_21631411 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631411 = validateParameter(valid_21631411, JString, required = false,
                                   default = nil)
  if valid_21631411 != nil:
    section.add "X-Amz-Security-Token", valid_21631411
  var valid_21631412 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631412 = validateParameter(valid_21631412, JString, required = false,
                                   default = nil)
  if valid_21631412 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631412
  var valid_21631413 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631413 = validateParameter(valid_21631413, JString, required = false,
                                   default = nil)
  if valid_21631413 != nil:
    section.add "X-Amz-Algorithm", valid_21631413
  var valid_21631414 = header.getOrDefault("X-Amz-Signature")
  valid_21631414 = validateParameter(valid_21631414, JString, required = false,
                                   default = nil)
  if valid_21631414 != nil:
    section.add "X-Amz-Signature", valid_21631414
  var valid_21631415 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631415 = validateParameter(valid_21631415, JString, required = false,
                                   default = nil)
  if valid_21631415 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631415
  var valid_21631416 = header.getOrDefault("X-Amz-Credential")
  valid_21631416 = validateParameter(valid_21631416, JString, required = false,
                                   default = nil)
  if valid_21631416 != nil:
    section.add "X-Amz-Credential", valid_21631416
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631417: Call_GetRevokeDBSecurityGroupIngress_21631400;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ## 
  let valid = call_21631417.validator(path, query, header, formData, body, _)
  let scheme = call_21631417.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631417.makeUrl(scheme.get, call_21631417.host, call_21631417.base,
                               call_21631417.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631417, uri, valid, _)

proc call*(call_21631418: Call_GetRevokeDBSecurityGroupIngress_21631400;
          DBSecurityGroupName: string; EC2SecurityGroupId: string = "";
          EC2SecurityGroupOwnerId: string = "";
          Action: string = "RevokeDBSecurityGroupIngress"; CIDRIP: string = "";
          EC2SecurityGroupName: string = ""; Version: string = "2014-10-31"): Recallable =
  ## getRevokeDBSecurityGroupIngress
  ## Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC Security Groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).
  ##   EC2SecurityGroupId: string
  ##                     :  The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   EC2SecurityGroupOwnerId: string
  ##                          :  The AWS account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   DBSecurityGroupName: string (required)
  ##                      : The name of the DB security group to revoke ingress from.
  ##   Action: string (required)
  ##   CIDRIP: string
  ##         :  The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided. 
  ##   EC2SecurityGroupName: string
  ##                       :  The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided. 
  ##   Version: string (required)
  var query_21631419 = newJObject()
  add(query_21631419, "EC2SecurityGroupId", newJString(EC2SecurityGroupId))
  add(query_21631419, "EC2SecurityGroupOwnerId",
      newJString(EC2SecurityGroupOwnerId))
  add(query_21631419, "DBSecurityGroupName", newJString(DBSecurityGroupName))
  add(query_21631419, "Action", newJString(Action))
  add(query_21631419, "CIDRIP", newJString(CIDRIP))
  add(query_21631419, "EC2SecurityGroupName", newJString(EC2SecurityGroupName))
  add(query_21631419, "Version", newJString(Version))
  result = call_21631418.call(nil, query_21631419, nil, nil, nil)

var getRevokeDBSecurityGroupIngress* = Call_GetRevokeDBSecurityGroupIngress_21631400(
    name: "getRevokeDBSecurityGroupIngress", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=RevokeDBSecurityGroupIngress",
    validator: validate_GetRevokeDBSecurityGroupIngress_21631401, base: "/",
    makeUrl: url_GetRevokeDBSecurityGroupIngress_21631402,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartActivityStream_21631460 = ref object of OpenApiRestCall_21625435
proc url_PostStartActivityStream_21631462(protocol: Scheme; host: string;
    base: string; route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartActivityStream_21631461(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21631463 = query.getOrDefault("Action")
  valid_21631463 = validateParameter(valid_21631463, JString, required = true,
                                   default = newJString("StartActivityStream"))
  if valid_21631463 != nil:
    section.add "Action", valid_21631463
  var valid_21631464 = query.getOrDefault("Version")
  valid_21631464 = validateParameter(valid_21631464, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631464 != nil:
    section.add "Version", valid_21631464
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631465 = header.getOrDefault("X-Amz-Date")
  valid_21631465 = validateParameter(valid_21631465, JString, required = false,
                                   default = nil)
  if valid_21631465 != nil:
    section.add "X-Amz-Date", valid_21631465
  var valid_21631466 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631466 = validateParameter(valid_21631466, JString, required = false,
                                   default = nil)
  if valid_21631466 != nil:
    section.add "X-Amz-Security-Token", valid_21631466
  var valid_21631467 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631467 = validateParameter(valid_21631467, JString, required = false,
                                   default = nil)
  if valid_21631467 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631467
  var valid_21631468 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631468 = validateParameter(valid_21631468, JString, required = false,
                                   default = nil)
  if valid_21631468 != nil:
    section.add "X-Amz-Algorithm", valid_21631468
  var valid_21631469 = header.getOrDefault("X-Amz-Signature")
  valid_21631469 = validateParameter(valid_21631469, JString, required = false,
                                   default = nil)
  if valid_21631469 != nil:
    section.add "X-Amz-Signature", valid_21631469
  var valid_21631470 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631470 = validateParameter(valid_21631470, JString, required = false,
                                   default = nil)
  if valid_21631470 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631470
  var valid_21631471 = header.getOrDefault("X-Amz-Credential")
  valid_21631471 = validateParameter(valid_21631471, JString, required = false,
                                   default = nil)
  if valid_21631471 != nil:
    section.add "X-Amz-Credential", valid_21631471
  result.add "header", section
  ## parameters in `formData` object:
  ##   Mode: JString (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   KmsKeyId: JString (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  section = newJObject()
  var valid_21631472 = formData.getOrDefault("Mode")
  valid_21631472 = validateParameter(valid_21631472, JString, required = true,
                                   default = newJString("sync"))
  if valid_21631472 != nil:
    section.add "Mode", valid_21631472
  var valid_21631473 = formData.getOrDefault("ApplyImmediately")
  valid_21631473 = validateParameter(valid_21631473, JBool, required = false,
                                   default = nil)
  if valid_21631473 != nil:
    section.add "ApplyImmediately", valid_21631473
  var valid_21631474 = formData.getOrDefault("ResourceArn")
  valid_21631474 = validateParameter(valid_21631474, JString, required = true,
                                   default = nil)
  if valid_21631474 != nil:
    section.add "ResourceArn", valid_21631474
  var valid_21631475 = formData.getOrDefault("KmsKeyId")
  valid_21631475 = validateParameter(valid_21631475, JString, required = true,
                                   default = nil)
  if valid_21631475 != nil:
    section.add "KmsKeyId", valid_21631475
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631476: Call_PostStartActivityStream_21631460;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  let valid = call_21631476.validator(path, query, header, formData, body, _)
  let scheme = call_21631476.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631476.makeUrl(scheme.get, call_21631476.host, call_21631476.base,
                               call_21631476.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631476, uri, valid, _)

proc call*(call_21631477: Call_PostStartActivityStream_21631460;
          ResourceArn: string; KmsKeyId: string; Mode: string = "sync";
          ApplyImmediately: bool = false; Action: string = "StartActivityStream";
          Version: string = "2014-10-31"): Recallable =
  ## postStartActivityStream
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ##   Mode: string (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  ##   Action: string (required)
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   KmsKeyId: string (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   Version: string (required)
  var query_21631478 = newJObject()
  var formData_21631479 = newJObject()
  add(formData_21631479, "Mode", newJString(Mode))
  add(formData_21631479, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_21631478, "Action", newJString(Action))
  add(formData_21631479, "ResourceArn", newJString(ResourceArn))
  add(formData_21631479, "KmsKeyId", newJString(KmsKeyId))
  add(query_21631478, "Version", newJString(Version))
  result = call_21631477.call(nil, query_21631478, nil, formData_21631479, nil)

var postStartActivityStream* = Call_PostStartActivityStream_21631460(
    name: "postStartActivityStream", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartActivityStream",
    validator: validate_PostStartActivityStream_21631461, base: "/",
    makeUrl: url_PostStartActivityStream_21631462,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartActivityStream_21631441 = ref object of OpenApiRestCall_21625435
proc url_GetStartActivityStream_21631443(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartActivityStream_21631442(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Action: JString (required)
  ##   KmsKeyId: JString (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   Mode: JString (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceArn` field"
  var valid_21631444 = query.getOrDefault("ResourceArn")
  valid_21631444 = validateParameter(valid_21631444, JString, required = true,
                                   default = nil)
  if valid_21631444 != nil:
    section.add "ResourceArn", valid_21631444
  var valid_21631445 = query.getOrDefault("Action")
  valid_21631445 = validateParameter(valid_21631445, JString, required = true,
                                   default = newJString("StartActivityStream"))
  if valid_21631445 != nil:
    section.add "Action", valid_21631445
  var valid_21631446 = query.getOrDefault("KmsKeyId")
  valid_21631446 = validateParameter(valid_21631446, JString, required = true,
                                   default = nil)
  if valid_21631446 != nil:
    section.add "KmsKeyId", valid_21631446
  var valid_21631447 = query.getOrDefault("Mode")
  valid_21631447 = validateParameter(valid_21631447, JString, required = true,
                                   default = newJString("sync"))
  if valid_21631447 != nil:
    section.add "Mode", valid_21631447
  var valid_21631448 = query.getOrDefault("Version")
  valid_21631448 = validateParameter(valid_21631448, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631448 != nil:
    section.add "Version", valid_21631448
  var valid_21631449 = query.getOrDefault("ApplyImmediately")
  valid_21631449 = validateParameter(valid_21631449, JBool, required = false,
                                   default = nil)
  if valid_21631449 != nil:
    section.add "ApplyImmediately", valid_21631449
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631450 = header.getOrDefault("X-Amz-Date")
  valid_21631450 = validateParameter(valid_21631450, JString, required = false,
                                   default = nil)
  if valid_21631450 != nil:
    section.add "X-Amz-Date", valid_21631450
  var valid_21631451 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631451 = validateParameter(valid_21631451, JString, required = false,
                                   default = nil)
  if valid_21631451 != nil:
    section.add "X-Amz-Security-Token", valid_21631451
  var valid_21631452 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631452 = validateParameter(valid_21631452, JString, required = false,
                                   default = nil)
  if valid_21631452 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631452
  var valid_21631453 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631453 = validateParameter(valid_21631453, JString, required = false,
                                   default = nil)
  if valid_21631453 != nil:
    section.add "X-Amz-Algorithm", valid_21631453
  var valid_21631454 = header.getOrDefault("X-Amz-Signature")
  valid_21631454 = validateParameter(valid_21631454, JString, required = false,
                                   default = nil)
  if valid_21631454 != nil:
    section.add "X-Amz-Signature", valid_21631454
  var valid_21631455 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631455 = validateParameter(valid_21631455, JString, required = false,
                                   default = nil)
  if valid_21631455 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631455
  var valid_21631456 = header.getOrDefault("X-Amz-Credential")
  valid_21631456 = validateParameter(valid_21631456, JString, required = false,
                                   default = nil)
  if valid_21631456 != nil:
    section.add "X-Amz-Credential", valid_21631456
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631457: Call_GetStartActivityStream_21631441;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ## 
  let valid = call_21631457.validator(path, query, header, formData, body, _)
  let scheme = call_21631457.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631457.makeUrl(scheme.get, call_21631457.host, call_21631457.base,
                               call_21631457.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631457, uri, valid, _)

proc call*(call_21631458: Call_GetStartActivityStream_21631441;
          ResourceArn: string; KmsKeyId: string;
          Action: string = "StartActivityStream"; Mode: string = "sync";
          Version: string = "2014-10-31"; ApplyImmediately: bool = false): Recallable =
  ## getStartActivityStream
  ## Starts a database activity stream to monitor activity on the database. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster, for example <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
  ##   Action: string (required)
  ##   KmsKeyId: string (required)
  ##           : The AWS KMS key identifier for encrypting messages in the database activity stream. The key identifier can be either a key ID, a key ARN, or a key alias.
  ##   Mode: string (required)
  ##       : Specifies the mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously. 
  ##   Version: string (required)
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to start as soon as possible, regardless of the maintenance window for the database.
  var query_21631459 = newJObject()
  add(query_21631459, "ResourceArn", newJString(ResourceArn))
  add(query_21631459, "Action", newJString(Action))
  add(query_21631459, "KmsKeyId", newJString(KmsKeyId))
  add(query_21631459, "Mode", newJString(Mode))
  add(query_21631459, "Version", newJString(Version))
  add(query_21631459, "ApplyImmediately", newJBool(ApplyImmediately))
  result = call_21631458.call(nil, query_21631459, nil, nil, nil)

var getStartActivityStream* = Call_GetStartActivityStream_21631441(
    name: "getStartActivityStream", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=StartActivityStream",
    validator: validate_GetStartActivityStream_21631442, base: "/",
    makeUrl: url_GetStartActivityStream_21631443,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartDBCluster_21631496 = ref object of OpenApiRestCall_21625435
proc url_PostStartDBCluster_21631498(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartDBCluster_21631497(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21631499 = query.getOrDefault("Action")
  valid_21631499 = validateParameter(valid_21631499, JString, required = true,
                                   default = newJString("StartDBCluster"))
  if valid_21631499 != nil:
    section.add "Action", valid_21631499
  var valid_21631500 = query.getOrDefault("Version")
  valid_21631500 = validateParameter(valid_21631500, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631500 != nil:
    section.add "Version", valid_21631500
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631501 = header.getOrDefault("X-Amz-Date")
  valid_21631501 = validateParameter(valid_21631501, JString, required = false,
                                   default = nil)
  if valid_21631501 != nil:
    section.add "X-Amz-Date", valid_21631501
  var valid_21631502 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631502 = validateParameter(valid_21631502, JString, required = false,
                                   default = nil)
  if valid_21631502 != nil:
    section.add "X-Amz-Security-Token", valid_21631502
  var valid_21631503 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631503 = validateParameter(valid_21631503, JString, required = false,
                                   default = nil)
  if valid_21631503 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631503
  var valid_21631504 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631504 = validateParameter(valid_21631504, JString, required = false,
                                   default = nil)
  if valid_21631504 != nil:
    section.add "X-Amz-Algorithm", valid_21631504
  var valid_21631505 = header.getOrDefault("X-Amz-Signature")
  valid_21631505 = validateParameter(valid_21631505, JString, required = false,
                                   default = nil)
  if valid_21631505 != nil:
    section.add "X-Amz-Signature", valid_21631505
  var valid_21631506 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631506 = validateParameter(valid_21631506, JString, required = false,
                                   default = nil)
  if valid_21631506 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631506
  var valid_21631507 = header.getOrDefault("X-Amz-Credential")
  valid_21631507 = validateParameter(valid_21631507, JString, required = false,
                                   default = nil)
  if valid_21631507 != nil:
    section.add "X-Amz-Credential", valid_21631507
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21631508 = formData.getOrDefault("DBClusterIdentifier")
  valid_21631508 = validateParameter(valid_21631508, JString, required = true,
                                   default = nil)
  if valid_21631508 != nil:
    section.add "DBClusterIdentifier", valid_21631508
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631509: Call_PostStartDBCluster_21631496; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21631509.validator(path, query, header, formData, body, _)
  let scheme = call_21631509.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631509.makeUrl(scheme.get, call_21631509.host, call_21631509.base,
                               call_21631509.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631509, uri, valid, _)

proc call*(call_21631510: Call_PostStartDBCluster_21631496;
          DBClusterIdentifier: string; Action: string = "StartDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postStartDBCluster
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Version: string (required)
  var query_21631511 = newJObject()
  var formData_21631512 = newJObject()
  add(query_21631511, "Action", newJString(Action))
  add(formData_21631512, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21631511, "Version", newJString(Version))
  result = call_21631510.call(nil, query_21631511, nil, formData_21631512, nil)

var postStartDBCluster* = Call_PostStartDBCluster_21631496(
    name: "postStartDBCluster", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartDBCluster",
    validator: validate_PostStartDBCluster_21631497, base: "/",
    makeUrl: url_PostStartDBCluster_21631498, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartDBCluster_21631480 = ref object of OpenApiRestCall_21625435
proc url_GetStartDBCluster_21631482(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartDBCluster_21631481(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21631483 = query.getOrDefault("DBClusterIdentifier")
  valid_21631483 = validateParameter(valid_21631483, JString, required = true,
                                   default = nil)
  if valid_21631483 != nil:
    section.add "DBClusterIdentifier", valid_21631483
  var valid_21631484 = query.getOrDefault("Action")
  valid_21631484 = validateParameter(valid_21631484, JString, required = true,
                                   default = newJString("StartDBCluster"))
  if valid_21631484 != nil:
    section.add "Action", valid_21631484
  var valid_21631485 = query.getOrDefault("Version")
  valid_21631485 = validateParameter(valid_21631485, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631485 != nil:
    section.add "Version", valid_21631485
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631486 = header.getOrDefault("X-Amz-Date")
  valid_21631486 = validateParameter(valid_21631486, JString, required = false,
                                   default = nil)
  if valid_21631486 != nil:
    section.add "X-Amz-Date", valid_21631486
  var valid_21631487 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631487 = validateParameter(valid_21631487, JString, required = false,
                                   default = nil)
  if valid_21631487 != nil:
    section.add "X-Amz-Security-Token", valid_21631487
  var valid_21631488 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631488 = validateParameter(valid_21631488, JString, required = false,
                                   default = nil)
  if valid_21631488 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631488
  var valid_21631489 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631489 = validateParameter(valid_21631489, JString, required = false,
                                   default = nil)
  if valid_21631489 != nil:
    section.add "X-Amz-Algorithm", valid_21631489
  var valid_21631490 = header.getOrDefault("X-Amz-Signature")
  valid_21631490 = validateParameter(valid_21631490, JString, required = false,
                                   default = nil)
  if valid_21631490 != nil:
    section.add "X-Amz-Signature", valid_21631490
  var valid_21631491 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631491 = validateParameter(valid_21631491, JString, required = false,
                                   default = nil)
  if valid_21631491 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631491
  var valid_21631492 = header.getOrDefault("X-Amz-Credential")
  valid_21631492 = validateParameter(valid_21631492, JString, required = false,
                                   default = nil)
  if valid_21631492 != nil:
    section.add "X-Amz-Credential", valid_21631492
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631493: Call_GetStartDBCluster_21631480; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21631493.validator(path, query, header, formData, body, _)
  let scheme = call_21631493.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631493.makeUrl(scheme.get, call_21631493.host, call_21631493.base,
                               call_21631493.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631493, uri, valid, _)

proc call*(call_21631494: Call_GetStartDBCluster_21631480;
          DBClusterIdentifier: string; Action: string = "StartDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getStartDBCluster
  ## <p>Starts an Amazon Aurora DB cluster that was stopped using the AWS console, the stop-db-cluster AWS CLI command, or the StopDBCluster action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21631495 = newJObject()
  add(query_21631495, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21631495, "Action", newJString(Action))
  add(query_21631495, "Version", newJString(Version))
  result = call_21631494.call(nil, query_21631495, nil, nil, nil)

var getStartDBCluster* = Call_GetStartDBCluster_21631480(name: "getStartDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartDBCluster", validator: validate_GetStartDBCluster_21631481,
    base: "/", makeUrl: url_GetStartDBCluster_21631482,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartDBInstance_21631529 = ref object of OpenApiRestCall_21625435
proc url_PostStartDBInstance_21631531(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartDBInstance_21631530(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21631532 = query.getOrDefault("Action")
  valid_21631532 = validateParameter(valid_21631532, JString, required = true,
                                   default = newJString("StartDBInstance"))
  if valid_21631532 != nil:
    section.add "Action", valid_21631532
  var valid_21631533 = query.getOrDefault("Version")
  valid_21631533 = validateParameter(valid_21631533, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631533 != nil:
    section.add "Version", valid_21631533
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631534 = header.getOrDefault("X-Amz-Date")
  valid_21631534 = validateParameter(valid_21631534, JString, required = false,
                                   default = nil)
  if valid_21631534 != nil:
    section.add "X-Amz-Date", valid_21631534
  var valid_21631535 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631535 = validateParameter(valid_21631535, JString, required = false,
                                   default = nil)
  if valid_21631535 != nil:
    section.add "X-Amz-Security-Token", valid_21631535
  var valid_21631536 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631536 = validateParameter(valid_21631536, JString, required = false,
                                   default = nil)
  if valid_21631536 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631536
  var valid_21631537 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631537 = validateParameter(valid_21631537, JString, required = false,
                                   default = nil)
  if valid_21631537 != nil:
    section.add "X-Amz-Algorithm", valid_21631537
  var valid_21631538 = header.getOrDefault("X-Amz-Signature")
  valid_21631538 = validateParameter(valid_21631538, JString, required = false,
                                   default = nil)
  if valid_21631538 != nil:
    section.add "X-Amz-Signature", valid_21631538
  var valid_21631539 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631539 = validateParameter(valid_21631539, JString, required = false,
                                   default = nil)
  if valid_21631539 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631539
  var valid_21631540 = header.getOrDefault("X-Amz-Credential")
  valid_21631540 = validateParameter(valid_21631540, JString, required = false,
                                   default = nil)
  if valid_21631540 != nil:
    section.add "X-Amz-Credential", valid_21631540
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_21631541 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21631541 = validateParameter(valid_21631541, JString, required = true,
                                   default = nil)
  if valid_21631541 != nil:
    section.add "DBInstanceIdentifier", valid_21631541
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631542: Call_PostStartDBInstance_21631529; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_21631542.validator(path, query, header, formData, body, _)
  let scheme = call_21631542.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631542.makeUrl(scheme.get, call_21631542.host, call_21631542.base,
                               call_21631542.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631542, uri, valid, _)

proc call*(call_21631543: Call_PostStartDBInstance_21631529;
          DBInstanceIdentifier: string; Action: string = "StartDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## postStartDBInstance
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21631544 = newJObject()
  var formData_21631545 = newJObject()
  add(formData_21631545, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_21631544, "Action", newJString(Action))
  add(query_21631544, "Version", newJString(Version))
  result = call_21631543.call(nil, query_21631544, nil, formData_21631545, nil)

var postStartDBInstance* = Call_PostStartDBInstance_21631529(
    name: "postStartDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartDBInstance",
    validator: validate_PostStartDBInstance_21631530, base: "/",
    makeUrl: url_PostStartDBInstance_21631531,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartDBInstance_21631513 = ref object of OpenApiRestCall_21625435
proc url_GetStartDBInstance_21631515(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartDBInstance_21631514(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  section = newJObject()
  var valid_21631516 = query.getOrDefault("Action")
  valid_21631516 = validateParameter(valid_21631516, JString, required = true,
                                   default = newJString("StartDBInstance"))
  if valid_21631516 != nil:
    section.add "Action", valid_21631516
  var valid_21631517 = query.getOrDefault("Version")
  valid_21631517 = validateParameter(valid_21631517, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631517 != nil:
    section.add "Version", valid_21631517
  var valid_21631518 = query.getOrDefault("DBInstanceIdentifier")
  valid_21631518 = validateParameter(valid_21631518, JString, required = true,
                                   default = nil)
  if valid_21631518 != nil:
    section.add "DBInstanceIdentifier", valid_21631518
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631519 = header.getOrDefault("X-Amz-Date")
  valid_21631519 = validateParameter(valid_21631519, JString, required = false,
                                   default = nil)
  if valid_21631519 != nil:
    section.add "X-Amz-Date", valid_21631519
  var valid_21631520 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631520 = validateParameter(valid_21631520, JString, required = false,
                                   default = nil)
  if valid_21631520 != nil:
    section.add "X-Amz-Security-Token", valid_21631520
  var valid_21631521 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631521 = validateParameter(valid_21631521, JString, required = false,
                                   default = nil)
  if valid_21631521 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631521
  var valid_21631522 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631522 = validateParameter(valid_21631522, JString, required = false,
                                   default = nil)
  if valid_21631522 != nil:
    section.add "X-Amz-Algorithm", valid_21631522
  var valid_21631523 = header.getOrDefault("X-Amz-Signature")
  valid_21631523 = validateParameter(valid_21631523, JString, required = false,
                                   default = nil)
  if valid_21631523 != nil:
    section.add "X-Amz-Signature", valid_21631523
  var valid_21631524 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631524 = validateParameter(valid_21631524, JString, required = false,
                                   default = nil)
  if valid_21631524 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631524
  var valid_21631525 = header.getOrDefault("X-Amz-Credential")
  valid_21631525 = validateParameter(valid_21631525, JString, required = false,
                                   default = nil)
  if valid_21631525 != nil:
    section.add "X-Amz-Credential", valid_21631525
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631526: Call_GetStartDBInstance_21631513; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_21631526.validator(path, query, header, formData, body, _)
  let scheme = call_21631526.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631526.makeUrl(scheme.get, call_21631526.host, call_21631526.base,
                               call_21631526.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631526, uri, valid, _)

proc call*(call_21631527: Call_GetStartDBInstance_21631513;
          DBInstanceIdentifier: string; Action: string = "StartDBInstance";
          Version: string = "2014-10-31"): Recallable =
  ## getStartDBInstance
  ## <p> Starts an Amazon RDS DB instance that was stopped using the AWS console, the stop-db-instance AWS CLI command, or the StopDBInstance action. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html"> Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora DB clusters, use <code>StartDBCluster</code> instead. </p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  var query_21631528 = newJObject()
  add(query_21631528, "Action", newJString(Action))
  add(query_21631528, "Version", newJString(Version))
  add(query_21631528, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  result = call_21631527.call(nil, query_21631528, nil, nil, nil)

var getStartDBInstance* = Call_GetStartDBInstance_21631513(
    name: "getStartDBInstance", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartDBInstance", validator: validate_GetStartDBInstance_21631514,
    base: "/", makeUrl: url_GetStartDBInstance_21631515,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStartExportTask_21631568 = ref object of OpenApiRestCall_21625435
proc url_PostStartExportTask_21631570(protocol: Scheme; host: string; base: string;
                                     route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStartExportTask_21631569(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Starts an export of a snapshot to Amazon S3. The provided IAM role must have access to the S3 bucket. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21631571 = query.getOrDefault("Action")
  valid_21631571 = validateParameter(valid_21631571, JString, required = true,
                                   default = newJString("StartExportTask"))
  if valid_21631571 != nil:
    section.add "Action", valid_21631571
  var valid_21631572 = query.getOrDefault("Version")
  valid_21631572 = validateParameter(valid_21631572, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631572 != nil:
    section.add "Version", valid_21631572
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631573 = header.getOrDefault("X-Amz-Date")
  valid_21631573 = validateParameter(valid_21631573, JString, required = false,
                                   default = nil)
  if valid_21631573 != nil:
    section.add "X-Amz-Date", valid_21631573
  var valid_21631574 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631574 = validateParameter(valid_21631574, JString, required = false,
                                   default = nil)
  if valid_21631574 != nil:
    section.add "X-Amz-Security-Token", valid_21631574
  var valid_21631575 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631575 = validateParameter(valid_21631575, JString, required = false,
                                   default = nil)
  if valid_21631575 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631575
  var valid_21631576 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631576 = validateParameter(valid_21631576, JString, required = false,
                                   default = nil)
  if valid_21631576 != nil:
    section.add "X-Amz-Algorithm", valid_21631576
  var valid_21631577 = header.getOrDefault("X-Amz-Signature")
  valid_21631577 = validateParameter(valid_21631577, JString, required = false,
                                   default = nil)
  if valid_21631577 != nil:
    section.add "X-Amz-Signature", valid_21631577
  var valid_21631578 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631578 = validateParameter(valid_21631578, JString, required = false,
                                   default = nil)
  if valid_21631578 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631578
  var valid_21631579 = header.getOrDefault("X-Amz-Credential")
  valid_21631579 = validateParameter(valid_21631579, JString, required = false,
                                   default = nil)
  if valid_21631579 != nil:
    section.add "X-Amz-Credential", valid_21631579
  result.add "header", section
  ## parameters in `formData` object:
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket to export the snapshot to.
  ##   SourceArn: JString (required)
  ##            : The Amazon Resource Name (ARN) of the snapshot to export to Amazon S3.
  ##   IamRoleArn: JString (required)
  ##             : The name of the IAM role to use for writing to the Amazon S3 bucket when exporting a snapshot. 
  ##   S3Prefix: JString
  ##           : The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
  ##   ExportTaskIdentifier: JString (required)
  ##                       : A unique identifier for the snapshot export task. This ID isn't an identifier for the Amazon S3 bucket where the snapshot is to be exported to. 
  ##   ExportOnly: JArray
  ##             : <p>The data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are the following:</p> <ul> <li> <p> <code>database</code> - Export all the data of the snapshot.</p> </li> <li> <p> <code>database.table [table-name]</code> - Export a table of the snapshot.</p> </li> <li> <p> <code>database.schema [schema-name]</code> - Export a database schema of the snapshot. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> <li> <p> <code>database.schema.table [table-name]</code> - Export a table of the database schema. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> </ul>
  ##   KmsKeyId: JString (required)
  ##           : The ID of the AWS KMS key to use to encrypt the snapshot exported to Amazon S3. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. The IAM role used for the snapshot export must have encryption and decryption permissions to use this KMS key. 
  section = newJObject()
  assert formData != nil,
        "formData argument is necessary due to required `S3BucketName` field"
  var valid_21631580 = formData.getOrDefault("S3BucketName")
  valid_21631580 = validateParameter(valid_21631580, JString, required = true,
                                   default = nil)
  if valid_21631580 != nil:
    section.add "S3BucketName", valid_21631580
  var valid_21631581 = formData.getOrDefault("SourceArn")
  valid_21631581 = validateParameter(valid_21631581, JString, required = true,
                                   default = nil)
  if valid_21631581 != nil:
    section.add "SourceArn", valid_21631581
  var valid_21631582 = formData.getOrDefault("IamRoleArn")
  valid_21631582 = validateParameter(valid_21631582, JString, required = true,
                                   default = nil)
  if valid_21631582 != nil:
    section.add "IamRoleArn", valid_21631582
  var valid_21631583 = formData.getOrDefault("S3Prefix")
  valid_21631583 = validateParameter(valid_21631583, JString, required = false,
                                   default = nil)
  if valid_21631583 != nil:
    section.add "S3Prefix", valid_21631583
  var valid_21631584 = formData.getOrDefault("ExportTaskIdentifier")
  valid_21631584 = validateParameter(valid_21631584, JString, required = true,
                                   default = nil)
  if valid_21631584 != nil:
    section.add "ExportTaskIdentifier", valid_21631584
  var valid_21631585 = formData.getOrDefault("ExportOnly")
  valid_21631585 = validateParameter(valid_21631585, JArray, required = false,
                                   default = nil)
  if valid_21631585 != nil:
    section.add "ExportOnly", valid_21631585
  var valid_21631586 = formData.getOrDefault("KmsKeyId")
  valid_21631586 = validateParameter(valid_21631586, JString, required = true,
                                   default = nil)
  if valid_21631586 != nil:
    section.add "KmsKeyId", valid_21631586
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631587: Call_PostStartExportTask_21631568; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Starts an export of a snapshot to Amazon S3. The provided IAM role must have access to the S3 bucket. 
  ## 
  let valid = call_21631587.validator(path, query, header, formData, body, _)
  let scheme = call_21631587.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631587.makeUrl(scheme.get, call_21631587.host, call_21631587.base,
                               call_21631587.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631587, uri, valid, _)

proc call*(call_21631588: Call_PostStartExportTask_21631568; S3BucketName: string;
          SourceArn: string; IamRoleArn: string; ExportTaskIdentifier: string;
          KmsKeyId: string; S3Prefix: string = ""; Action: string = "StartExportTask";
          ExportOnly: JsonNode = nil; Version: string = "2014-10-31"): Recallable =
  ## postStartExportTask
  ## Starts an export of a snapshot to Amazon S3. The provided IAM role must have access to the S3 bucket. 
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket to export the snapshot to.
  ##   SourceArn: string (required)
  ##            : The Amazon Resource Name (ARN) of the snapshot to export to Amazon S3.
  ##   IamRoleArn: string (required)
  ##             : The name of the IAM role to use for writing to the Amazon S3 bucket when exporting a snapshot. 
  ##   S3Prefix: string
  ##           : The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
  ##   ExportTaskIdentifier: string (required)
  ##                       : A unique identifier for the snapshot export task. This ID isn't an identifier for the Amazon S3 bucket where the snapshot is to be exported to. 
  ##   Action: string (required)
  ##   ExportOnly: JArray
  ##             : <p>The data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are the following:</p> <ul> <li> <p> <code>database</code> - Export all the data of the snapshot.</p> </li> <li> <p> <code>database.table [table-name]</code> - Export a table of the snapshot.</p> </li> <li> <p> <code>database.schema [schema-name]</code> - Export a database schema of the snapshot. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> <li> <p> <code>database.schema.table [table-name]</code> - Export a table of the database schema. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> </ul>
  ##   KmsKeyId: string (required)
  ##           : The ID of the AWS KMS key to use to encrypt the snapshot exported to Amazon S3. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. The IAM role used for the snapshot export must have encryption and decryption permissions to use this KMS key. 
  ##   Version: string (required)
  var query_21631589 = newJObject()
  var formData_21631590 = newJObject()
  add(formData_21631590, "S3BucketName", newJString(S3BucketName))
  add(formData_21631590, "SourceArn", newJString(SourceArn))
  add(formData_21631590, "IamRoleArn", newJString(IamRoleArn))
  add(formData_21631590, "S3Prefix", newJString(S3Prefix))
  add(formData_21631590, "ExportTaskIdentifier", newJString(ExportTaskIdentifier))
  add(query_21631589, "Action", newJString(Action))
  if ExportOnly != nil:
    formData_21631590.add "ExportOnly", ExportOnly
  add(formData_21631590, "KmsKeyId", newJString(KmsKeyId))
  add(query_21631589, "Version", newJString(Version))
  result = call_21631588.call(nil, query_21631589, nil, formData_21631590, nil)

var postStartExportTask* = Call_PostStartExportTask_21631568(
    name: "postStartExportTask", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StartExportTask",
    validator: validate_PostStartExportTask_21631569, base: "/",
    makeUrl: url_PostStartExportTask_21631570,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStartExportTask_21631546 = ref object of OpenApiRestCall_21625435
proc url_GetStartExportTask_21631548(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStartExportTask_21631547(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## Starts an export of a snapshot to Amazon S3. The provided IAM role must have access to the S3 bucket. 
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   S3BucketName: JString (required)
  ##               : The name of the Amazon S3 bucket to export the snapshot to.
  ##   IamRoleArn: JString (required)
  ##             : The name of the IAM role to use for writing to the Amazon S3 bucket when exporting a snapshot. 
  ##   S3Prefix: JString
  ##           : The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
  ##   ExportOnly: JArray
  ##             : <p>The data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are the following:</p> <ul> <li> <p> <code>database</code> - Export all the data of the snapshot.</p> </li> <li> <p> <code>database.table [table-name]</code> - Export a table of the snapshot.</p> </li> <li> <p> <code>database.schema [schema-name]</code> - Export a database schema of the snapshot. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> <li> <p> <code>database.schema.table [table-name]</code> - Export a table of the database schema. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> </ul>
  ##   SourceArn: JString (required)
  ##            : The Amazon Resource Name (ARN) of the snapshot to export to Amazon S3.
  ##   Action: JString (required)
  ##   KmsKeyId: JString (required)
  ##           : The ID of the AWS KMS key to use to encrypt the snapshot exported to Amazon S3. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. The IAM role used for the snapshot export must have encryption and decryption permissions to use this KMS key. 
  ##   Version: JString (required)
  ##   ExportTaskIdentifier: JString (required)
  ##                       : A unique identifier for the snapshot export task. This ID isn't an identifier for the Amazon S3 bucket where the snapshot is to be exported to. 
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `S3BucketName` field"
  var valid_21631549 = query.getOrDefault("S3BucketName")
  valid_21631549 = validateParameter(valid_21631549, JString, required = true,
                                   default = nil)
  if valid_21631549 != nil:
    section.add "S3BucketName", valid_21631549
  var valid_21631550 = query.getOrDefault("IamRoleArn")
  valid_21631550 = validateParameter(valid_21631550, JString, required = true,
                                   default = nil)
  if valid_21631550 != nil:
    section.add "IamRoleArn", valid_21631550
  var valid_21631551 = query.getOrDefault("S3Prefix")
  valid_21631551 = validateParameter(valid_21631551, JString, required = false,
                                   default = nil)
  if valid_21631551 != nil:
    section.add "S3Prefix", valid_21631551
  var valid_21631552 = query.getOrDefault("ExportOnly")
  valid_21631552 = validateParameter(valid_21631552, JArray, required = false,
                                   default = nil)
  if valid_21631552 != nil:
    section.add "ExportOnly", valid_21631552
  var valid_21631553 = query.getOrDefault("SourceArn")
  valid_21631553 = validateParameter(valid_21631553, JString, required = true,
                                   default = nil)
  if valid_21631553 != nil:
    section.add "SourceArn", valid_21631553
  var valid_21631554 = query.getOrDefault("Action")
  valid_21631554 = validateParameter(valid_21631554, JString, required = true,
                                   default = newJString("StartExportTask"))
  if valid_21631554 != nil:
    section.add "Action", valid_21631554
  var valid_21631555 = query.getOrDefault("KmsKeyId")
  valid_21631555 = validateParameter(valid_21631555, JString, required = true,
                                   default = nil)
  if valid_21631555 != nil:
    section.add "KmsKeyId", valid_21631555
  var valid_21631556 = query.getOrDefault("Version")
  valid_21631556 = validateParameter(valid_21631556, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631556 != nil:
    section.add "Version", valid_21631556
  var valid_21631557 = query.getOrDefault("ExportTaskIdentifier")
  valid_21631557 = validateParameter(valid_21631557, JString, required = true,
                                   default = nil)
  if valid_21631557 != nil:
    section.add "ExportTaskIdentifier", valid_21631557
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631558 = header.getOrDefault("X-Amz-Date")
  valid_21631558 = validateParameter(valid_21631558, JString, required = false,
                                   default = nil)
  if valid_21631558 != nil:
    section.add "X-Amz-Date", valid_21631558
  var valid_21631559 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631559 = validateParameter(valid_21631559, JString, required = false,
                                   default = nil)
  if valid_21631559 != nil:
    section.add "X-Amz-Security-Token", valid_21631559
  var valid_21631560 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631560 = validateParameter(valid_21631560, JString, required = false,
                                   default = nil)
  if valid_21631560 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631560
  var valid_21631561 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631561 = validateParameter(valid_21631561, JString, required = false,
                                   default = nil)
  if valid_21631561 != nil:
    section.add "X-Amz-Algorithm", valid_21631561
  var valid_21631562 = header.getOrDefault("X-Amz-Signature")
  valid_21631562 = validateParameter(valid_21631562, JString, required = false,
                                   default = nil)
  if valid_21631562 != nil:
    section.add "X-Amz-Signature", valid_21631562
  var valid_21631563 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631563 = validateParameter(valid_21631563, JString, required = false,
                                   default = nil)
  if valid_21631563 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631563
  var valid_21631564 = header.getOrDefault("X-Amz-Credential")
  valid_21631564 = validateParameter(valid_21631564, JString, required = false,
                                   default = nil)
  if valid_21631564 != nil:
    section.add "X-Amz-Credential", valid_21631564
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631565: Call_GetStartExportTask_21631546; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## Starts an export of a snapshot to Amazon S3. The provided IAM role must have access to the S3 bucket. 
  ## 
  let valid = call_21631565.validator(path, query, header, formData, body, _)
  let scheme = call_21631565.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631565.makeUrl(scheme.get, call_21631565.host, call_21631565.base,
                               call_21631565.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631565, uri, valid, _)

proc call*(call_21631566: Call_GetStartExportTask_21631546; S3BucketName: string;
          IamRoleArn: string; SourceArn: string; KmsKeyId: string;
          ExportTaskIdentifier: string; S3Prefix: string = "";
          ExportOnly: JsonNode = nil; Action: string = "StartExportTask";
          Version: string = "2014-10-31"): Recallable =
  ## getStartExportTask
  ## Starts an export of a snapshot to Amazon S3. The provided IAM role must have access to the S3 bucket. 
  ##   S3BucketName: string (required)
  ##               : The name of the Amazon S3 bucket to export the snapshot to.
  ##   IamRoleArn: string (required)
  ##             : The name of the IAM role to use for writing to the Amazon S3 bucket when exporting a snapshot. 
  ##   S3Prefix: string
  ##           : The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.
  ##   ExportOnly: JArray
  ##             : <p>The data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are the following:</p> <ul> <li> <p> <code>database</code> - Export all the data of the snapshot.</p> </li> <li> <p> <code>database.table [table-name]</code> - Export a table of the snapshot.</p> </li> <li> <p> <code>database.schema [schema-name]</code> - Export a database schema of the snapshot. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> <li> <p> <code>database.schema.table [table-name]</code> - Export a table of the database schema. This value isn't valid for RDS for MySQL, RDS for MariaDB, or Aurora MySQL.</p> </li> </ul>
  ##   SourceArn: string (required)
  ##            : The Amazon Resource Name (ARN) of the snapshot to export to Amazon S3.
  ##   Action: string (required)
  ##   KmsKeyId: string (required)
  ##           : The ID of the AWS KMS key to use to encrypt the snapshot exported to Amazon S3. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. The IAM role used for the snapshot export must have encryption and decryption permissions to use this KMS key. 
  ##   Version: string (required)
  ##   ExportTaskIdentifier: string (required)
  ##                       : A unique identifier for the snapshot export task. This ID isn't an identifier for the Amazon S3 bucket where the snapshot is to be exported to. 
  var query_21631567 = newJObject()
  add(query_21631567, "S3BucketName", newJString(S3BucketName))
  add(query_21631567, "IamRoleArn", newJString(IamRoleArn))
  add(query_21631567, "S3Prefix", newJString(S3Prefix))
  if ExportOnly != nil:
    query_21631567.add "ExportOnly", ExportOnly
  add(query_21631567, "SourceArn", newJString(SourceArn))
  add(query_21631567, "Action", newJString(Action))
  add(query_21631567, "KmsKeyId", newJString(KmsKeyId))
  add(query_21631567, "Version", newJString(Version))
  add(query_21631567, "ExportTaskIdentifier", newJString(ExportTaskIdentifier))
  result = call_21631566.call(nil, query_21631567, nil, nil, nil)

var getStartExportTask* = Call_GetStartExportTask_21631546(
    name: "getStartExportTask", meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StartExportTask", validator: validate_GetStartExportTask_21631547,
    base: "/", makeUrl: url_GetStartExportTask_21631548,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopActivityStream_21631608 = ref object of OpenApiRestCall_21625435
proc url_PostStopActivityStream_21631610(protocol: Scheme; host: string;
                                        base: string; route: string; path: JsonNode;
                                        query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStopActivityStream_21631609(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21631611 = query.getOrDefault("Action")
  valid_21631611 = validateParameter(valid_21631611, JString, required = true,
                                   default = newJString("StopActivityStream"))
  if valid_21631611 != nil:
    section.add "Action", valid_21631611
  var valid_21631612 = query.getOrDefault("Version")
  valid_21631612 = validateParameter(valid_21631612, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631612 != nil:
    section.add "Version", valid_21631612
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631613 = header.getOrDefault("X-Amz-Date")
  valid_21631613 = validateParameter(valid_21631613, JString, required = false,
                                   default = nil)
  if valid_21631613 != nil:
    section.add "X-Amz-Date", valid_21631613
  var valid_21631614 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631614 = validateParameter(valid_21631614, JString, required = false,
                                   default = nil)
  if valid_21631614 != nil:
    section.add "X-Amz-Security-Token", valid_21631614
  var valid_21631615 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631615 = validateParameter(valid_21631615, JString, required = false,
                                   default = nil)
  if valid_21631615 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631615
  var valid_21631616 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631616 = validateParameter(valid_21631616, JString, required = false,
                                   default = nil)
  if valid_21631616 != nil:
    section.add "X-Amz-Algorithm", valid_21631616
  var valid_21631617 = header.getOrDefault("X-Amz-Signature")
  valid_21631617 = validateParameter(valid_21631617, JString, required = false,
                                   default = nil)
  if valid_21631617 != nil:
    section.add "X-Amz-Signature", valid_21631617
  var valid_21631618 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631618 = validateParameter(valid_21631618, JString, required = false,
                                   default = nil)
  if valid_21631618 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631618
  var valid_21631619 = header.getOrDefault("X-Amz-Credential")
  valid_21631619 = validateParameter(valid_21631619, JString, required = false,
                                   default = nil)
  if valid_21631619 != nil:
    section.add "X-Amz-Credential", valid_21631619
  result.add "header", section
  ## parameters in `formData` object:
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  section = newJObject()
  var valid_21631620 = formData.getOrDefault("ApplyImmediately")
  valid_21631620 = validateParameter(valid_21631620, JBool, required = false,
                                   default = nil)
  if valid_21631620 != nil:
    section.add "ApplyImmediately", valid_21631620
  assert formData != nil,
        "formData argument is necessary due to required `ResourceArn` field"
  var valid_21631621 = formData.getOrDefault("ResourceArn")
  valid_21631621 = validateParameter(valid_21631621, JString, required = true,
                                   default = nil)
  if valid_21631621 != nil:
    section.add "ResourceArn", valid_21631621
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631622: Call_PostStopActivityStream_21631608;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_21631622.validator(path, query, header, formData, body, _)
  let scheme = call_21631622.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631622.makeUrl(scheme.get, call_21631622.host, call_21631622.base,
                               call_21631622.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631622, uri, valid, _)

proc call*(call_21631623: Call_PostStopActivityStream_21631608;
          ResourceArn: string; ApplyImmediately: bool = false;
          Action: string = "StopActivityStream"; Version: string = "2014-10-31"): Recallable =
  ## postStopActivityStream
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  ##   Action: string (required)
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Version: string (required)
  var query_21631624 = newJObject()
  var formData_21631625 = newJObject()
  add(formData_21631625, "ApplyImmediately", newJBool(ApplyImmediately))
  add(query_21631624, "Action", newJString(Action))
  add(formData_21631625, "ResourceArn", newJString(ResourceArn))
  add(query_21631624, "Version", newJString(Version))
  result = call_21631623.call(nil, query_21631624, nil, formData_21631625, nil)

var postStopActivityStream* = Call_PostStopActivityStream_21631608(
    name: "postStopActivityStream", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StopActivityStream",
    validator: validate_PostStopActivityStream_21631609, base: "/",
    makeUrl: url_PostStopActivityStream_21631610,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopActivityStream_21631591 = ref object of OpenApiRestCall_21625435
proc url_GetStopActivityStream_21631593(protocol: Scheme; host: string; base: string;
                                       route: string; path: JsonNode;
                                       query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStopActivityStream_21631592(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   ResourceArn: JString (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   ApplyImmediately: JBool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  section = newJObject()
  assert query != nil,
        "query argument is necessary due to required `ResourceArn` field"
  var valid_21631594 = query.getOrDefault("ResourceArn")
  valid_21631594 = validateParameter(valid_21631594, JString, required = true,
                                   default = nil)
  if valid_21631594 != nil:
    section.add "ResourceArn", valid_21631594
  var valid_21631595 = query.getOrDefault("Action")
  valid_21631595 = validateParameter(valid_21631595, JString, required = true,
                                   default = newJString("StopActivityStream"))
  if valid_21631595 != nil:
    section.add "Action", valid_21631595
  var valid_21631596 = query.getOrDefault("Version")
  valid_21631596 = validateParameter(valid_21631596, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631596 != nil:
    section.add "Version", valid_21631596
  var valid_21631597 = query.getOrDefault("ApplyImmediately")
  valid_21631597 = validateParameter(valid_21631597, JBool, required = false,
                                   default = nil)
  if valid_21631597 != nil:
    section.add "ApplyImmediately", valid_21631597
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631598 = header.getOrDefault("X-Amz-Date")
  valid_21631598 = validateParameter(valid_21631598, JString, required = false,
                                   default = nil)
  if valid_21631598 != nil:
    section.add "X-Amz-Date", valid_21631598
  var valid_21631599 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631599 = validateParameter(valid_21631599, JString, required = false,
                                   default = nil)
  if valid_21631599 != nil:
    section.add "X-Amz-Security-Token", valid_21631599
  var valid_21631600 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631600 = validateParameter(valid_21631600, JString, required = false,
                                   default = nil)
  if valid_21631600 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631600
  var valid_21631601 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631601 = validateParameter(valid_21631601, JString, required = false,
                                   default = nil)
  if valid_21631601 != nil:
    section.add "X-Amz-Algorithm", valid_21631601
  var valid_21631602 = header.getOrDefault("X-Amz-Signature")
  valid_21631602 = validateParameter(valid_21631602, JString, required = false,
                                   default = nil)
  if valid_21631602 != nil:
    section.add "X-Amz-Signature", valid_21631602
  var valid_21631603 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631603 = validateParameter(valid_21631603, JString, required = false,
                                   default = nil)
  if valid_21631603 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631603
  var valid_21631604 = header.getOrDefault("X-Amz-Credential")
  valid_21631604 = validateParameter(valid_21631604, JString, required = false,
                                   default = nil)
  if valid_21631604 != nil:
    section.add "X-Amz-Credential", valid_21631604
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631605: Call_GetStopActivityStream_21631591;
          path: JsonNode = nil; query: JsonNode = nil; header: JsonNode = nil;
          formData: JsonNode = nil; body: JsonNode = nil; _: string = ""): Recallable =
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ## 
  let valid = call_21631605.validator(path, query, header, formData, body, _)
  let scheme = call_21631605.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631605.makeUrl(scheme.get, call_21631605.host, call_21631605.base,
                               call_21631605.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631605, uri, valid, _)

proc call*(call_21631606: Call_GetStopActivityStream_21631591; ResourceArn: string;
          Action: string = "StopActivityStream"; Version: string = "2014-10-31";
          ApplyImmediately: bool = false): Recallable =
  ## getStopActivityStream
  ## <p>Stops a database activity stream that was started using the AWS console, the <code>start-activity-stream</code> AWS CLI command, or the <code>StartActivityStream</code> action.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a> in the <i>Amazon Aurora User Guide</i>.</p>
  ##   ResourceArn: string (required)
  ##              : The Amazon Resource Name (ARN) of the DB cluster for the database activity stream. For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>. 
  ##   Action: string (required)
  ##   Version: string (required)
  ##   ApplyImmediately: bool
  ##                   : Specifies whether or not the database activity stream is to stop as soon as possible, regardless of the maintenance window for the database.
  var query_21631607 = newJObject()
  add(query_21631607, "ResourceArn", newJString(ResourceArn))
  add(query_21631607, "Action", newJString(Action))
  add(query_21631607, "Version", newJString(Version))
  add(query_21631607, "ApplyImmediately", newJBool(ApplyImmediately))
  result = call_21631606.call(nil, query_21631607, nil, nil, nil)

var getStopActivityStream* = Call_GetStopActivityStream_21631591(
    name: "getStopActivityStream", meth: HttpMethod.HttpGet,
    host: "rds.amazonaws.com", route: "/#Action=StopActivityStream",
    validator: validate_GetStopActivityStream_21631592, base: "/",
    makeUrl: url_GetStopActivityStream_21631593,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopDBCluster_21631642 = ref object of OpenApiRestCall_21625435
proc url_PostStopDBCluster_21631644(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStopDBCluster_21631643(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21631645 = query.getOrDefault("Action")
  valid_21631645 = validateParameter(valid_21631645, JString, required = true,
                                   default = newJString("StopDBCluster"))
  if valid_21631645 != nil:
    section.add "Action", valid_21631645
  var valid_21631646 = query.getOrDefault("Version")
  valid_21631646 = validateParameter(valid_21631646, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631646 != nil:
    section.add "Version", valid_21631646
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631647 = header.getOrDefault("X-Amz-Date")
  valid_21631647 = validateParameter(valid_21631647, JString, required = false,
                                   default = nil)
  if valid_21631647 != nil:
    section.add "X-Amz-Date", valid_21631647
  var valid_21631648 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631648 = validateParameter(valid_21631648, JString, required = false,
                                   default = nil)
  if valid_21631648 != nil:
    section.add "X-Amz-Security-Token", valid_21631648
  var valid_21631649 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631649 = validateParameter(valid_21631649, JString, required = false,
                                   default = nil)
  if valid_21631649 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631649
  var valid_21631650 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631650 = validateParameter(valid_21631650, JString, required = false,
                                   default = nil)
  if valid_21631650 != nil:
    section.add "X-Amz-Algorithm", valid_21631650
  var valid_21631651 = header.getOrDefault("X-Amz-Signature")
  valid_21631651 = validateParameter(valid_21631651, JString, required = false,
                                   default = nil)
  if valid_21631651 != nil:
    section.add "X-Amz-Signature", valid_21631651
  var valid_21631652 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631652 = validateParameter(valid_21631652, JString, required = false,
                                   default = nil)
  if valid_21631652 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631652
  var valid_21631653 = header.getOrDefault("X-Amz-Credential")
  valid_21631653 = validateParameter(valid_21631653, JString, required = false,
                                   default = nil)
  if valid_21631653 != nil:
    section.add "X-Amz-Credential", valid_21631653
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21631654 = formData.getOrDefault("DBClusterIdentifier")
  valid_21631654 = validateParameter(valid_21631654, JString, required = true,
                                   default = nil)
  if valid_21631654 != nil:
    section.add "DBClusterIdentifier", valid_21631654
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631655: Call_PostStopDBCluster_21631642; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21631655.validator(path, query, header, formData, body, _)
  let scheme = call_21631655.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631655.makeUrl(scheme.get, call_21631655.host, call_21631655.base,
                               call_21631655.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631655, uri, valid, _)

proc call*(call_21631656: Call_PostStopDBCluster_21631642;
          DBClusterIdentifier: string; Action: string = "StopDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## postStopDBCluster
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   Action: string (required)
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Version: string (required)
  var query_21631657 = newJObject()
  var formData_21631658 = newJObject()
  add(query_21631657, "Action", newJString(Action))
  add(formData_21631658, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21631657, "Version", newJString(Version))
  result = call_21631656.call(nil, query_21631657, nil, formData_21631658, nil)

var postStopDBCluster* = Call_PostStopDBCluster_21631642(name: "postStopDBCluster",
    meth: HttpMethod.HttpPost, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_PostStopDBCluster_21631643,
    base: "/", makeUrl: url_PostStopDBCluster_21631644,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopDBCluster_21631626 = ref object of OpenApiRestCall_21625435
proc url_GetStopDBCluster_21631628(protocol: Scheme; host: string; base: string;
                                  route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStopDBCluster_21631627(path: JsonNode; query: JsonNode;
                                       header: JsonNode; formData: JsonNode;
                                       body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   DBClusterIdentifier: JString (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  assert query != nil, "query argument is necessary due to required `DBClusterIdentifier` field"
  var valid_21631629 = query.getOrDefault("DBClusterIdentifier")
  valid_21631629 = validateParameter(valid_21631629, JString, required = true,
                                   default = nil)
  if valid_21631629 != nil:
    section.add "DBClusterIdentifier", valid_21631629
  var valid_21631630 = query.getOrDefault("Action")
  valid_21631630 = validateParameter(valid_21631630, JString, required = true,
                                   default = newJString("StopDBCluster"))
  if valid_21631630 != nil:
    section.add "Action", valid_21631630
  var valid_21631631 = query.getOrDefault("Version")
  valid_21631631 = validateParameter(valid_21631631, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631631 != nil:
    section.add "Version", valid_21631631
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631632 = header.getOrDefault("X-Amz-Date")
  valid_21631632 = validateParameter(valid_21631632, JString, required = false,
                                   default = nil)
  if valid_21631632 != nil:
    section.add "X-Amz-Date", valid_21631632
  var valid_21631633 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631633 = validateParameter(valid_21631633, JString, required = false,
                                   default = nil)
  if valid_21631633 != nil:
    section.add "X-Amz-Security-Token", valid_21631633
  var valid_21631634 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631634 = validateParameter(valid_21631634, JString, required = false,
                                   default = nil)
  if valid_21631634 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631634
  var valid_21631635 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631635 = validateParameter(valid_21631635, JString, required = false,
                                   default = nil)
  if valid_21631635 != nil:
    section.add "X-Amz-Algorithm", valid_21631635
  var valid_21631636 = header.getOrDefault("X-Amz-Signature")
  valid_21631636 = validateParameter(valid_21631636, JString, required = false,
                                   default = nil)
  if valid_21631636 != nil:
    section.add "X-Amz-Signature", valid_21631636
  var valid_21631637 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631637 = validateParameter(valid_21631637, JString, required = false,
                                   default = nil)
  if valid_21631637 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631637
  var valid_21631638 = header.getOrDefault("X-Amz-Credential")
  valid_21631638 = validateParameter(valid_21631638, JString, required = false,
                                   default = nil)
  if valid_21631638 != nil:
    section.add "X-Amz-Credential", valid_21631638
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631639: Call_GetStopDBCluster_21631626; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ## 
  let valid = call_21631639.validator(path, query, header, formData, body, _)
  let scheme = call_21631639.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631639.makeUrl(scheme.get, call_21631639.host, call_21631639.base,
                               call_21631639.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631639, uri, valid, _)

proc call*(call_21631640: Call_GetStopDBCluster_21631626;
          DBClusterIdentifier: string; Action: string = "StopDBCluster";
          Version: string = "2014-10-31"): Recallable =
  ## getStopDBCluster
  ## <p> Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's metadata, including its endpoints and DB parameter groups. Aurora also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html"> Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide.</i> </p> <note> <p>This action only applies to Aurora DB clusters.</p> </note>
  ##   DBClusterIdentifier: string (required)
  ##                      : The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21631641 = newJObject()
  add(query_21631641, "DBClusterIdentifier", newJString(DBClusterIdentifier))
  add(query_21631641, "Action", newJString(Action))
  add(query_21631641, "Version", newJString(Version))
  result = call_21631640.call(nil, query_21631641, nil, nil, nil)

var getStopDBCluster* = Call_GetStopDBCluster_21631626(name: "getStopDBCluster",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StopDBCluster", validator: validate_GetStopDBCluster_21631627,
    base: "/", makeUrl: url_GetStopDBCluster_21631628,
    schemes: {Scheme.Https, Scheme.Http})
type
  Call_PostStopDBInstance_21631676 = ref object of OpenApiRestCall_21625435
proc url_PostStopDBInstance_21631678(protocol: Scheme; host: string; base: string;
                                    route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_PostStopDBInstance_21631677(path: JsonNode; query: JsonNode;
    header: JsonNode; formData: JsonNode; body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  section = newJObject()
  var valid_21631679 = query.getOrDefault("Action")
  valid_21631679 = validateParameter(valid_21631679, JString, required = true,
                                   default = newJString("StopDBInstance"))
  if valid_21631679 != nil:
    section.add "Action", valid_21631679
  var valid_21631680 = query.getOrDefault("Version")
  valid_21631680 = validateParameter(valid_21631680, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631680 != nil:
    section.add "Version", valid_21631680
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631681 = header.getOrDefault("X-Amz-Date")
  valid_21631681 = validateParameter(valid_21631681, JString, required = false,
                                   default = nil)
  if valid_21631681 != nil:
    section.add "X-Amz-Date", valid_21631681
  var valid_21631682 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631682 = validateParameter(valid_21631682, JString, required = false,
                                   default = nil)
  if valid_21631682 != nil:
    section.add "X-Amz-Security-Token", valid_21631682
  var valid_21631683 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631683 = validateParameter(valid_21631683, JString, required = false,
                                   default = nil)
  if valid_21631683 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631683
  var valid_21631684 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631684 = validateParameter(valid_21631684, JString, required = false,
                                   default = nil)
  if valid_21631684 != nil:
    section.add "X-Amz-Algorithm", valid_21631684
  var valid_21631685 = header.getOrDefault("X-Amz-Signature")
  valid_21631685 = validateParameter(valid_21631685, JString, required = false,
                                   default = nil)
  if valid_21631685 != nil:
    section.add "X-Amz-Signature", valid_21631685
  var valid_21631686 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631686 = validateParameter(valid_21631686, JString, required = false,
                                   default = nil)
  if valid_21631686 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631686
  var valid_21631687 = header.getOrDefault("X-Amz-Credential")
  valid_21631687 = validateParameter(valid_21631687, JString, required = false,
                                   default = nil)
  if valid_21631687 != nil:
    section.add "X-Amz-Credential", valid_21631687
  result.add "header", section
  ## parameters in `formData` object:
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: JString
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  section = newJObject()
  assert formData != nil, "formData argument is necessary due to required `DBInstanceIdentifier` field"
  var valid_21631688 = formData.getOrDefault("DBInstanceIdentifier")
  valid_21631688 = validateParameter(valid_21631688, JString, required = true,
                                   default = nil)
  if valid_21631688 != nil:
    section.add "DBInstanceIdentifier", valid_21631688
  var valid_21631689 = formData.getOrDefault("DBSnapshotIdentifier")
  valid_21631689 = validateParameter(valid_21631689, JString, required = false,
                                   default = nil)
  if valid_21631689 != nil:
    section.add "DBSnapshotIdentifier", valid_21631689
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631690: Call_PostStopDBInstance_21631676; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_21631690.validator(path, query, header, formData, body, _)
  let scheme = call_21631690.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631690.makeUrl(scheme.get, call_21631690.host, call_21631690.base,
                               call_21631690.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631690, uri, valid, _)

proc call*(call_21631691: Call_PostStopDBInstance_21631676;
          DBInstanceIdentifier: string; DBSnapshotIdentifier: string = "";
          Action: string = "StopDBInstance"; Version: string = "2014-10-31"): Recallable =
  ## postStopDBInstance
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: string
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  ##   Action: string (required)
  ##   Version: string (required)
  var query_21631692 = newJObject()
  var formData_21631693 = newJObject()
  add(formData_21631693, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(formData_21631693, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  add(query_21631692, "Action", newJString(Action))
  add(query_21631692, "Version", newJString(Version))
  result = call_21631691.call(nil, query_21631692, nil, formData_21631693, nil)

var postStopDBInstance* = Call_PostStopDBInstance_21631676(
    name: "postStopDBInstance", meth: HttpMethod.HttpPost,
    host: "rds.amazonaws.com", route: "/#Action=StopDBInstance",
    validator: validate_PostStopDBInstance_21631677, base: "/",
    makeUrl: url_PostStopDBInstance_21631678, schemes: {Scheme.Https, Scheme.Http})
type
  Call_GetStopDBInstance_21631659 = ref object of OpenApiRestCall_21625435
proc url_GetStopDBInstance_21631661(protocol: Scheme; host: string; base: string;
                                   route: string; path: JsonNode; query: JsonNode): Uri =
  result.scheme = $protocol
  result.hostname = host
  result.query = $queryString(query)
  if base == "/" and route.startsWith "/":
    result.path = route
  else:
    result.path = base & route

proc validate_GetStopDBInstance_21631660(path: JsonNode; query: JsonNode;
                                        header: JsonNode; formData: JsonNode;
                                        body: JsonNode; _: string = ""): JsonNode {.
    nosinks.} =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  var section: JsonNode
  result = newJObject()
  section = newJObject()
  result.add "path", section
  ## parameters in `query` object:
  ##   Action: JString (required)
  ##   Version: JString (required)
  ##   DBInstanceIdentifier: JString (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: JString
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  section = newJObject()
  var valid_21631662 = query.getOrDefault("Action")
  valid_21631662 = validateParameter(valid_21631662, JString, required = true,
                                   default = newJString("StopDBInstance"))
  if valid_21631662 != nil:
    section.add "Action", valid_21631662
  var valid_21631663 = query.getOrDefault("Version")
  valid_21631663 = validateParameter(valid_21631663, JString, required = true,
                                   default = newJString("2014-10-31"))
  if valid_21631663 != nil:
    section.add "Version", valid_21631663
  var valid_21631664 = query.getOrDefault("DBInstanceIdentifier")
  valid_21631664 = validateParameter(valid_21631664, JString, required = true,
                                   default = nil)
  if valid_21631664 != nil:
    section.add "DBInstanceIdentifier", valid_21631664
  var valid_21631665 = query.getOrDefault("DBSnapshotIdentifier")
  valid_21631665 = validateParameter(valid_21631665, JString, required = false,
                                   default = nil)
  if valid_21631665 != nil:
    section.add "DBSnapshotIdentifier", valid_21631665
  result.add "query", section
  ## parameters in `header` object:
  ##   X-Amz-Date: JString
  ##   X-Amz-Security-Token: JString
  ##   X-Amz-Content-Sha256: JString
  ##   X-Amz-Algorithm: JString
  ##   X-Amz-Signature: JString
  ##   X-Amz-SignedHeaders: JString
  ##   X-Amz-Credential: JString
  section = newJObject()
  var valid_21631666 = header.getOrDefault("X-Amz-Date")
  valid_21631666 = validateParameter(valid_21631666, JString, required = false,
                                   default = nil)
  if valid_21631666 != nil:
    section.add "X-Amz-Date", valid_21631666
  var valid_21631667 = header.getOrDefault("X-Amz-Security-Token")
  valid_21631667 = validateParameter(valid_21631667, JString, required = false,
                                   default = nil)
  if valid_21631667 != nil:
    section.add "X-Amz-Security-Token", valid_21631667
  var valid_21631668 = header.getOrDefault("X-Amz-Content-Sha256")
  valid_21631668 = validateParameter(valid_21631668, JString, required = false,
                                   default = nil)
  if valid_21631668 != nil:
    section.add "X-Amz-Content-Sha256", valid_21631668
  var valid_21631669 = header.getOrDefault("X-Amz-Algorithm")
  valid_21631669 = validateParameter(valid_21631669, JString, required = false,
                                   default = nil)
  if valid_21631669 != nil:
    section.add "X-Amz-Algorithm", valid_21631669
  var valid_21631670 = header.getOrDefault("X-Amz-Signature")
  valid_21631670 = validateParameter(valid_21631670, JString, required = false,
                                   default = nil)
  if valid_21631670 != nil:
    section.add "X-Amz-Signature", valid_21631670
  var valid_21631671 = header.getOrDefault("X-Amz-SignedHeaders")
  valid_21631671 = validateParameter(valid_21631671, JString, required = false,
                                   default = nil)
  if valid_21631671 != nil:
    section.add "X-Amz-SignedHeaders", valid_21631671
  var valid_21631672 = header.getOrDefault("X-Amz-Credential")
  valid_21631672 = validateParameter(valid_21631672, JString, required = false,
                                   default = nil)
  if valid_21631672 != nil:
    section.add "X-Amz-Credential", valid_21631672
  result.add "header", section
  section = newJObject()
  result.add "formData", section
  if body != nil:
    result.add "body", body

proc call*(call_21631673: Call_GetStopDBInstance_21631659; path: JsonNode = nil;
          query: JsonNode = nil; header: JsonNode = nil; formData: JsonNode = nil;
          body: JsonNode = nil; _: string = ""): Recallable =
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ## 
  let valid = call_21631673.validator(path, query, header, formData, body, _)
  let scheme = call_21631673.pickScheme
  if scheme.isNone:
    raise newException(IOError, "unable to find a supported scheme")
  let uri = call_21631673.makeUrl(scheme.get, call_21631673.host, call_21631673.base,
                               call_21631673.route, valid.getOrDefault("path"),
                               valid.getOrDefault("query"))
  result = atozHook(call_21631673, uri, valid, _)

proc call*(call_21631674: Call_GetStopDBInstance_21631659;
          DBInstanceIdentifier: string; Action: string = "StopDBInstance";
          Version: string = "2014-10-31"; DBSnapshotIdentifier: string = ""): Recallable =
  ## getStopDBInstance
  ## <p> Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint, DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if necessary. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html"> Stopping an Amazon RDS DB Instance Temporarily</a> in the <i>Amazon RDS User Guide.</i> </p> <note> <p> This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora clusters, use <code>StopDBCluster</code> instead. </p> </note>
  ##   Action: string (required)
  ##   Version: string (required)
  ##   DBInstanceIdentifier: string (required)
  ##                       :  The user-supplied instance identifier. 
  ##   DBSnapshotIdentifier: string
  ##                       :  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
  var query_21631675 = newJObject()
  add(query_21631675, "Action", newJString(Action))
  add(query_21631675, "Version", newJString(Version))
  add(query_21631675, "DBInstanceIdentifier", newJString(DBInstanceIdentifier))
  add(query_21631675, "DBSnapshotIdentifier", newJString(DBSnapshotIdentifier))
  result = call_21631674.call(nil, query_21631675, nil, nil, nil)

var getStopDBInstance* = Call_GetStopDBInstance_21631659(name: "getStopDBInstance",
    meth: HttpMethod.HttpGet, host: "rds.amazonaws.com",
    route: "/#Action=StopDBInstance", validator: validate_GetStopDBInstance_21631660,
    base: "/", makeUrl: url_GetStopDBInstance_21631661,
    schemes: {Scheme.Https, Scheme.Http})
export
  rest

type
  EnvKind = enum
    BakeIntoBinary = "Baking $1 into the binary",
    FetchFromEnv = "Fetch $1 from the environment"
template sloppyConst(via: EnvKind; name: untyped): untyped =
  import
    macros

  const
    name {.strdefine.}: string = case via
    of BakeIntoBinary:
      getEnv(astToStr(name), "")
    of FetchFromEnv:
      ""
  static :
    let msg = block:
      if name == "":
        "Missing $1 in the environment"
      else:
        $via
    warning msg % [astToStr(name)]

sloppyConst FetchFromEnv, AWS_ACCESS_KEY_ID
sloppyConst FetchFromEnv, AWS_SECRET_ACCESS_KEY
sloppyConst BakeIntoBinary, AWS_REGION
sloppyConst FetchFromEnv, AWS_ACCOUNT_ID
type
  XAmz = enum
    SecurityToken = "X-Amz-Security-Token", ContentSha256 = "X-Amz-Content-Sha256"
proc atozSign(recall: var Recallable; query: JsonNode; algo: SigningAlgo = SHA256) =
  let
    date = makeDateTime()
    access = os.getEnv("AWS_ACCESS_KEY_ID", AWS_ACCESS_KEY_ID)
    secret = os.getEnv("AWS_SECRET_ACCESS_KEY", AWS_SECRET_ACCESS_KEY)
    region = os.getEnv("AWS_REGION", AWS_REGION)
  assert secret != "", "need $AWS_SECRET_ACCESS_KEY in environment"
  assert access != "", "need $AWS_ACCESS_KEY_ID in environment"
  assert region != "", "need $AWS_REGION in environment"
  var
    normal: PathNormal
    url = normalizeUrl(recall.url, query, normalize = normal)
    scheme = parseEnum[Scheme](url.scheme)
  assert scheme in awsServers, "unknown scheme `" & $scheme & "`"
  assert region in awsServers[scheme], "unknown region `" & region & "`"
  url.hostname = awsServers[scheme][region]
  case awsServiceName.toLowerAscii
  of "s3":
    normal = PathNormal.S3
  else:
    normal = PathNormal.Default
  recall.headers["Host"] = url.hostname
  recall.headers["X-Amz-Date"] = date
  recall.headers[$ContentSha256] = hash(recall.body, SHA256)
  let
    scope = credentialScope(region = region, service = awsServiceName, date = date)
    request = canonicalRequest(recall.meth, $url, query, recall.headers, recall.body,
                             normalize = normal, digest = algo)
    sts = stringToSign(request.hash(algo), scope, date = date, digest = algo)
    signature = calculateSignature(secret = secret, date = date, region = region,
                                 service = awsServiceName, sts, digest = algo)
  var auth = $algo & " "
  auth &= "Credential=" & access / scope & ", "
  auth &= "SignedHeaders=" & recall.headers.signedHeaders & ", "
  auth &= "Signature=" & signature
  recall.headers["Authorization"] = auth
  recall.headers.del "Host"
  recall.url = $url

method atozHook(call: OpenApiRestCall; url: Uri; input: JsonNode; body = ""): Recallable {.
    base.} =
  ## the hook is a terrible earworm
  var
    headers = newHttpHeaders(massageHeaders(input.getOrDefault("header")))
    text = body
  if text.len == 0 and "body" in input:
    text = input.getOrDefault("body").getStr
    if not headers.hasKey("content-type"):
      headers["content-type"] = "application/x-amz-json-1.0"
  else:
    headers["content-md5"] = base64.encode text.toMD5
  if not headers.hasKey($SecurityToken):
    let session = getEnv("AWS_SESSION_TOKEN", "")
    if session != "":
      headers[$SecurityToken] = session
  result = newRecallable(call, url, headers, text)
  result.atozSign(input.getOrDefault("query"), SHA256)

when not defined(ssl):
  {.error: "use ssl".}